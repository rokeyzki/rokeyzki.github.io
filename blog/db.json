{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/js/ua-parser.min.js","path":"js/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/search-toggle.js","path":"js/search-toggle.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion_global.js","path":"js/motion_global.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion_fallback.js","path":"js/motion_fallback.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/lazyload.js","path":"js/lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/hook-duoshuo.js","path":"js/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/helpers.js","path":"js/helpers.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/fancy-box.js","path":"js/fancy-box.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bootstrap.scrollspy.js","path":"js/bootstrap.scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/default_avatar.jpg","path":"images/default_avatar.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/bkdefault_avatar.jpg","path":"images/bkdefault_avatar.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/fonts/icon-linecons/icomoon.woff","path":"fonts/icon-linecons/icomoon.woff","modified":0,"renderable":1},{"_id":"themes/next/source/fonts/icon-linecons/icomoon.ttf","path":"fonts/icon-linecons/icomoon.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/fonts/icon-linecons/icomoon.svg","path":"fonts/icon-linecons/icomoon.svg","modified":0,"renderable":1},{"_id":"themes/next/source/fonts/icon-linecons/icomoon.eot","path":"fonts/icon-linecons/icomoon.eot","modified":0,"renderable":1},{"_id":"themes/next/source/fonts/icon-icomoon/icomoon.woff","path":"fonts/icon-icomoon/icomoon.woff","modified":0,"renderable":1},{"_id":"themes/next/source/fonts/icon-icomoon/icomoon.ttf","path":"fonts/icon-icomoon/icomoon.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/fonts/icon-icomoon/icomoon.svg","path":"fonts/icon-icomoon/icomoon.svg","modified":0,"renderable":1},{"_id":"themes/next/source/fonts/icon-icomoon/icomoon.eot","path":"fonts/icon-icomoon/icomoon.eot","modified":0,"renderable":1},{"_id":"themes/next/source/fonts/icon-fifty-shades/icomoon.woff","path":"fonts/icon-fifty-shades/icomoon.woff","modified":0,"renderable":1},{"_id":"themes/next/source/fonts/icon-fifty-shades/icomoon.ttf","path":"fonts/icon-fifty-shades/icomoon.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/fonts/icon-fifty-shades/icomoon.svg","path":"fonts/icon-fifty-shades/icomoon.svg","modified":0,"renderable":1},{"_id":"themes/next/source/fonts/icon-fifty-shades/icomoon.eot","path":"fonts/icon-fifty-shades/icomoon.eot","modified":0,"renderable":1},{"_id":"themes/next/source/fonts/icon-feather/icomoon.woff","path":"fonts/icon-feather/icomoon.woff","modified":0,"renderable":1},{"_id":"themes/next/source/fonts/icon-feather/icomoon.ttf","path":"fonts/icon-feather/icomoon.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/fonts/icon-feather/icomoon.svg","path":"fonts/icon-feather/icomoon.svg","modified":0,"renderable":1},{"_id":"themes/next/source/fonts/icon-feather/icomoon.eot","path":"fonts/icon-feather/icomoon.eot","modified":0,"renderable":1},{"_id":"themes/next/source/fonts/icon-default/icomoon.woff","path":"fonts/icon-default/icomoon.woff","modified":0,"renderable":1},{"_id":"themes/next/source/fonts/icon-default/icomoon.ttf","path":"fonts/icon-default/icomoon.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/fonts/icon-default/icomoon.svg","path":"fonts/icon-default/icomoon.svg","modified":0,"renderable":1},{"_id":"themes/next/source/fonts/icon-default/icomoon.eot","path":"fonts/icon-default/icomoon.eot","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/old_default_avatar.jpg","path":"images/old_default_avatar.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/dockerfile.md","shasum":"2ecf4a16f49be089666a472d96dd6f7c9be810b8","modified":1456928287218,"hash":"2ecf4a16f49be089666a472d96dd6f7c9be810b8"},{"_id":"source/_posts/hello-world.md","shasum":"1398080a69852cddf2ecafdbce6469f552244db6","modified":1456928287218,"hash":"1398080a69852cddf2ecafdbce6469f552244db6"},{"_id":"source/_posts/front-end1.md","shasum":"fa8f2723ed02827c9593e6d7f9a1241e790e3d20","modified":1456928287218,"hash":"fa8f2723ed02827c9593e6d7f9a1241e790e3d20"},{"_id":"source/_posts/jquery02.md","shasum":"ce1d9b351448986ca3c679d96bd0705f4d03180d","modified":1456928287218,"hash":"ce1d9b351448986ca3c679d96bd0705f4d03180d"},{"_id":"source/_posts/jquery04.md","shasum":"3351784330820db122798ef8d8919ba90e3117a2","modified":1456928287218,"hash":"3351784330820db122798ef8d8919ba90e3117a2"},{"_id":"source/_posts/jquery03.md","shasum":"7f41fc5162b81f9a4c6ec5440f828d8ac177941d","modified":1456928287218,"hash":"7f41fc5162b81f9a4c6ec5440f828d8ac177941d"},{"_id":"source/_posts/jquery05.md","shasum":"bafa528fb21a2c7b8bf22094719cdaf58a68035f","modified":1456928287218,"hash":"bafa528fb21a2c7b8bf22094719cdaf58a68035f"},{"_id":"source/_posts/jquery01.md","shasum":"0bd17b8d4606a093477744dd327f950c034bbb0a","modified":1456928287218,"hash":"0bd17b8d4606a093477744dd327f950c034bbb0a"},{"_id":"source/_posts/jquery06.md","shasum":"3cd7cdabb304890e3e466e0da865be0659243ade","modified":1456928287218,"hash":"3cd7cdabb304890e3e466e0da865be0659243ade"},{"_id":"source/_posts/jquery07.md","shasum":"9b283fb4dcfc13b1b303992382f584043bd9319b","modified":1456928287218,"hash":"9b283fb4dcfc13b1b303992382f584043bd9319b"},{"_id":"source/_posts/redux1.md","shasum":"0d03fd9a794cbec2121f3da0264a2507f926d802","modified":1456928287218,"hash":"0d03fd9a794cbec2121f3da0264a2507f926d802"},{"_id":"source/_posts/sublime2.md","shasum":"1566fd5d50e7813bbef2e0d79c0840abe3c8d4a2","modified":1456928287222,"hash":"1566fd5d50e7813bbef2e0d79c0840abe3c8d4a2"},{"_id":"source/_posts/sublime1.md","shasum":"2838966721c5565772df0af69fce77f08517c634","modified":1456928287218,"hash":"2838966721c5565772df0af69fce77f08517c634"},{"_id":"source/_posts/underscore02.md","shasum":"aa4af3e8175db9ddc8d7edf76681fac44d9baa0c","modified":1456928287222,"hash":"aa4af3e8175db9ddc8d7edf76681fac44d9baa0c"},{"_id":"source/tags/index.md","shasum":"e6199065e0feaab62cf16cd19b245475d7d5d77b","modified":1456928287222,"hash":"e6199065e0feaab62cf16cd19b245475d7d5d77b"},{"_id":"source/_posts/url.md","shasum":"279b3198261dab37bdacd9af0ae76a5cd26514cd","modified":1456928287222,"hash":"279b3198261dab37bdacd9af0ae76a5cd26514cd"},{"_id":"themes/next/source/css/_common/_page/home.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1456928287246,"hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709"},{"_id":"themes/next/source/css/_mixins/Mist.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1456928287250,"hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709"},{"_id":"themes/next/source/css/_mixins/custom.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1456928287250,"hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709"},{"_id":"themes/next/source/css/_mixins/default.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1456928287250,"hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709"},{"_id":"themes/next/source/css/_variables/custom.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1456928287250,"hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709"},{"_id":"themes/next/source/css/_variables/default.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1456928287250,"hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709"},{"_id":"source/_posts/underscore03.md","shasum":"a84d600722f577cb7b33518ef9971ad9c977e80e","modified":1456928287222,"hash":"a84d600722f577cb7b33518ef9971ad9c977e80e"},{"_id":"source/_posts/underscore01.md","shasum":"2dc3ed3772033252b0631dbe04d35f8040978297","modified":1456928287222,"hash":"2dc3ed3772033252b0631dbe04d35f8040978297"},{"_id":"themes/next/README.en.md","shasum":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1456928287238,"hash":"565ba52b3825b85a9f05b41183caca7f18b741d4"},{"_id":"themes/next/README.md","shasum":"aa16555d1aa1d80666ab9085042e118cdb7f5ef2","modified":1456928287238,"hash":"aa16555d1aa1d80666ab9085042e118cdb7f5ef2"},{"_id":"themes/next/languages/default.yml","shasum":"d0cad2843283dd2a62cb8d1a2ed182a368210aca","modified":1456928287238,"hash":"d0cad2843283dd2a62cb8d1a2ed182a368210aca"},{"_id":"themes/next/bower.json","shasum":"1a681eeb5bff68be34e4e5226678c6cd3a7a12cc","modified":1456928287238,"hash":"1a681eeb5bff68be34e4e5226678c6cd3a7a12cc"},{"_id":"themes/next/languages/en.yml","shasum":"d0cad2843283dd2a62cb8d1a2ed182a368210aca","modified":1456928287238,"hash":"d0cad2843283dd2a62cb8d1a2ed182a368210aca"},{"_id":"themes/next/languages/fr-FR.yml","shasum":"9ee1011db6307df957684c83f39ac7499391924c","modified":1456928287238,"hash":"9ee1011db6307df957684c83f39ac7499391924c"},{"_id":"themes/next/_config.yml","shasum":"965f15ca51ec0da7c55e6de502c7cb14c9ff0ddb","modified":1456928287238,"hash":"965f15ca51ec0da7c55e6de502c7cb14c9ff0ddb"},{"_id":"themes/next/languages/de.yml","shasum":"784bea46de28a3113d7c91621740f521dae09dce","modified":1456928287238,"hash":"784bea46de28a3113d7c91621740f521dae09dce"},{"_id":"themes/next/languages/ru.yml","shasum":"60cc1fb273adfd84137a207dd9d0d00f08605ccd","modified":1456928287238,"hash":"60cc1fb273adfd84137a207dd9d0d00f08605ccd"},{"_id":"themes/next/languages/zh-hk.yml","shasum":"e58766e0af5abf0705ccca4a5fc86d1be03db198","modified":1456928287238,"hash":"e58766e0af5abf0705ccca4a5fc86d1be03db198"},{"_id":"themes/next/languages/zh-Hans.yml","shasum":"282620a222ea32c062610f4ed6af016f862ccdfa","modified":1456928287238,"hash":"282620a222ea32c062610f4ed6af016f862ccdfa"},{"_id":"themes/next/languages/zh-tw.yml","shasum":"d34c5781a231978e66852784ad00c9895a7de022","modified":1456928287238,"hash":"d34c5781a231978e66852784ad00c9895a7de022"},{"_id":"themes/next/layout/_layout.swig","shasum":"417cc254ba47a77b43f6f45e398756a0a9a424e9","modified":1456928287238,"hash":"417cc254ba47a77b43f6f45e398756a0a9a424e9"},{"_id":"themes/next/layout/_macro/sidebar.swig","shasum":"939dbfc3de22706702da59e67293e1f243cbcf9f","modified":1456928287238,"hash":"939dbfc3de22706702da59e67293e1f243cbcf9f"},{"_id":"themes/next/layout/_partials/head.swig","shasum":"f2b7a6d43249622745a7d58daa11030f433d3c96","modified":1456928287238,"hash":"f2b7a6d43249622745a7d58daa11030f433d3c96"},{"_id":"themes/next/layout/_macro/post-collapse.swig","shasum":"e0e16ca56917b51728a13453d0a2f932da7ecdcb","modified":1456928287238,"hash":"e0e16ca56917b51728a13453d0a2f932da7ecdcb"},{"_id":"themes/next/layout/_partials/old-browsers.swig","shasum":"dbbfea810bf3a2ed9c83b9a6683037175aacfc67","modified":1456928287238,"hash":"dbbfea810bf3a2ed9c83b9a6683037175aacfc67"},{"_id":"themes/next/layout/_partials/header.swig","shasum":"c18888bd0a26f9bda3c6f7d17e22774a56f7378b","modified":1456928287238,"hash":"c18888bd0a26f9bda3c6f7d17e22774a56f7378b"},{"_id":"themes/next/layout/_macro/post.swig","shasum":"9f3819f348a8a3af97c0fc520ea3944da5c3e4a9","modified":1456928287238,"hash":"9f3819f348a8a3af97c0fc520ea3944da5c3e4a9"},{"_id":"themes/next/layout/_partials/pagination.swig","shasum":"d6c7f04eee4388d8f133eb5526b7c0875c321a30","modified":1456928287238,"hash":"d6c7f04eee4388d8f133eb5526b7c0875c321a30"},{"_id":"themes/next/layout/_partials/search/swiftype.swig","shasum":"ee0c2540e8178f390051af7d365a42ae68375afa","modified":1456928287242,"hash":"ee0c2540e8178f390051af7d365a42ae68375afa"},{"_id":"themes/next/layout/_partials/search/tinysou.swig","shasum":"94beb0764ccbbba0c9f5c9886cc656bf879bcfd5","modified":1456928287242,"hash":"94beb0764ccbbba0c9f5c9886cc656bf879bcfd5"},{"_id":"themes/next/layout/_partials/search.swig","shasum":"8a18d32e2a257dafaaba75353692db901e1dddc5","modified":1456928287238,"hash":"8a18d32e2a257dafaaba75353692db901e1dddc5"},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","shasum":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1456928287242,"hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d"},{"_id":"themes/next/layout/_partials/footer.swig","shasum":"b4b39dd010307ab61008a70a8ae9199ceeee89b5","modified":1456928287238,"hash":"b4b39dd010307ab61008a70a8ae9199ceeee89b5"},{"_id":"themes/next/layout/_scripts/analytics/baidu-analytics.swig","shasum":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1456928287242,"hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6"},{"_id":"themes/next/layout/_scripts/analytics/google-analytics.swig","shasum":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1456928287242,"hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2"},{"_id":"themes/next/layout/_scripts/analytics.swig","shasum":"0ebbf76c2317faa8ba31365adba59331c2e0262c","modified":1456928287242,"hash":"0ebbf76c2317faa8ba31365adba59331c2e0262c"},{"_id":"themes/next/layout/_scripts/baidushare.swig","shasum":"d726361945437cf6e48067b3dd041b7e36e98d85","modified":1456928287242,"hash":"d726361945437cf6e48067b3dd041b7e36e98d85"},{"_id":"themes/next/layout/_scripts/bootstrap.scrollspy.swig","shasum":"85295f126836b95f0837d03e58228bb3cf8c4490","modified":1456928287242,"hash":"85295f126836b95f0837d03e58228bb3cf8c4490"},{"_id":"themes/next/layout/_scripts/comments/disqus.swig","shasum":"3491d3cebabc8a28857200db28a1be65aad6adc2","modified":1456928287242,"hash":"3491d3cebabc8a28857200db28a1be65aad6adc2"},{"_id":"themes/next/layout/_scripts/helpers.swig","shasum":"4d2cbfca0aaf546a2b5813288073e824c1498fdf","modified":1456928287242,"hash":"4d2cbfca0aaf546a2b5813288073e824c1498fdf"},{"_id":"themes/next/layout/_scripts/comments/duoshuo.swig","shasum":"3351ea62225933f8045d036a79654e19e84d19a7","modified":1456928287242,"hash":"3351ea62225933f8045d036a79654e19e84d19a7"},{"_id":"themes/next/layout/_scripts/mathjax.swig","shasum":"abc52fefb276c52cbb19de5c214521dfcf2a10fd","modified":1456928287242,"hash":"abc52fefb276c52cbb19de5c214521dfcf2a10fd"},{"_id":"themes/next/layout/_scripts/motion.swig","shasum":"817705bfd1a1282cb6bf59094afe507e11455aa0","modified":1456928287242,"hash":"817705bfd1a1282cb6bf59094afe507e11455aa0"},{"_id":"themes/next/layout/_scripts/fancy-box.swig","shasum":"41b4ff1446060c88c33bf666a32277dcf12129f0","modified":1456928287242,"hash":"41b4ff1446060c88c33bf666a32277dcf12129f0"},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","shasum":"b63ef233886538f30ced60344ac15d25e5f3e0af","modified":1456928287242,"hash":"b63ef233886538f30ced60344ac15d25e5f3e0af"},{"_id":"themes/next/layout/index.swig","shasum":"9fcae9769998e5f4182b363ccf3ae5a026728d50","modified":1456928287242,"hash":"9fcae9769998e5f4182b363ccf3ae5a026728d50"},{"_id":"themes/next/layout/category.swig","shasum":"ca5b5b4c091e575487a398e5f1c0947fe3a13bfc","modified":1456928287242,"hash":"ca5b5b4c091e575487a398e5f1c0947fe3a13bfc"},{"_id":"themes/next/layout/_partials/share/jiathis.swig","shasum":"63315fcf210799f894208c9f512737096df84962","modified":1456928287242,"hash":"63315fcf210799f894208c9f512737096df84962"},{"_id":"themes/next/layout/archive.swig","shasum":"ed242c832d27743375a5fb524dc5a116a6a723a7","modified":1456928287242,"hash":"ed242c832d27743375a5fb524dc5a116a6a723a7"},{"_id":"themes/next/layout/post.swig","shasum":"3f3a183543cbb0d396484242952b02992366afef","modified":1456928287242,"hash":"3f3a183543cbb0d396484242952b02992366afef"},{"_id":"themes/next/source/css/_common/_component/back-to-top.styl","shasum":"88cd66910260006aa8e9e795df4948d4b67bfa11","modified":1456928287242,"hash":"88cd66910260006aa8e9e795df4948d4b67bfa11"},{"_id":"themes/next/source/css/_common/_component/buttons.styl","shasum":"81063e0979f04a0f9af37f321d7321dda9abf593","modified":1456928287246,"hash":"81063e0979f04a0f9af37f321d7321dda9abf593"},{"_id":"themes/next/layout/tag.swig","shasum":"f1dcfbc0eef76f1f6be29f31a343338d5bbfe814","modified":1456928287242,"hash":"f1dcfbc0eef76f1f6be29f31a343338d5bbfe814"},{"_id":"themes/next/source/css/_common/_component/duoshuo.styl","shasum":"c307f1e4827d7cb82816a5f9de109ae14ed4199c","modified":1456928287246,"hash":"c307f1e4827d7cb82816a5f9de109ae14ed4199c"},{"_id":"themes/next/layout/page.swig","shasum":"0b0924774a562ff45ed98e40c4e913df9a77fe08","modified":1456928287242,"hash":"0b0924774a562ff45ed98e40c4e913df9a77fe08"},{"_id":"themes/next/source/css/_common/_component/gallery.styl","shasum":"fa6e23ebddb6f235803b51974f36be2a43b2c9c4","modified":1456928287246,"hash":"fa6e23ebddb6f235803b51974f36be2a43b2c9c4"},{"_id":"themes/next/source/css/_common/_component/jiathis.styl","shasum":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1456928287246,"hash":"327b5f63d55ec26f7663185c1a778440588d9803"},{"_id":"themes/next/source/css/_common/_component/posts-expand.styl","shasum":"4b82dbbb6e536e6e8ee3cec6e62c2fd4bea60a09","modified":1456928287246,"hash":"4b82dbbb6e536e6e8ee3cec6e62c2fd4bea60a09"},{"_id":"themes/next/source/css/_common/_component/comments.styl","shasum":"54e73681ba6f57ef961138f94d2ee8ac845990c3","modified":1456928287246,"hash":"54e73681ba6f57ef961138f94d2ee8ac845990c3"},{"_id":"themes/next/source/css/_common/_component/posts-type.styl","shasum":"40b593134bf96d1d6095b3439d47820659d7f10b","modified":1456928287246,"hash":"40b593134bf96d1d6095b3439d47820659d7f10b"},{"_id":"themes/next/source/css/_common/_component/tag-cloud.styl","shasum":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1456928287246,"hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0"},{"_id":"themes/next/source/css/_common/_core/helpers.styl","shasum":"41a31d651b60b4f458fc56a1d191dfbbdcb6d794","modified":1456928287246,"hash":"41a31d651b60b4f458fc56a1d191dfbbdcb6d794"},{"_id":"themes/next/source/css/_common/_component/posts-collapse.styl","shasum":"8f9e8f5f65956ccf1d52ff8526392803dff579d3","modified":1456928287246,"hash":"8f9e8f5f65956ccf1d52ff8526392803dff579d3"},{"_id":"themes/next/source/css/_common/_component/pagination.styl","shasum":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1456928287246,"hash":"711c8830886619d4f4a0598b0cde5499dce50c62"},{"_id":"themes/next/source/css/_common/_core/base.styl","shasum":"e79a08484b191dca14ccfc005053eb95786dafae","modified":1456928287246,"hash":"e79a08484b191dca14ccfc005053eb95786dafae"},{"_id":"themes/next/source/css/_common/_core/tables.styl","shasum":"be6c1a04595cf38673511366a3d89fcdb046f533","modified":1456928287246,"hash":"be6c1a04595cf38673511366a3d89fcdb046f533"},{"_id":"themes/next/source/css/_common/_core/scaffolding.styl","shasum":"d776e241cf650b00ee1dd21b9ff377c250d9eeaa","modified":1456928287246,"hash":"d776e241cf650b00ee1dd21b9ff377c250d9eeaa"},{"_id":"themes/next/source/css/_common/_fonts/icon-feather.styl","shasum":"f49f8966496166bd62f79f75a3277d4d5b1102e8","modified":1456928287246,"hash":"f49f8966496166bd62f79f75a3277d4d5b1102e8"},{"_id":"themes/next/source/css/_common/_core/normalize.styl","shasum":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1456928287246,"hash":"ece571f38180febaf02ace8187ead8318a300ea7"},{"_id":"themes/next/source/css/_common/_fonts/icon-default.styl","shasum":"86bd4135afa2589ad074e0cf8ebb054ff3d10f24","modified":1456928287246,"hash":"86bd4135afa2589ad074e0cf8ebb054ff3d10f24"},{"_id":"themes/next/source/css/_common/_page/archive.styl","shasum":"dff879f55ca65fa79c07e9098719e53eeea7ac88","modified":1456928287246,"hash":"dff879f55ca65fa79c07e9098719e53eeea7ac88"},{"_id":"themes/next/source/css/_common/_fonts/icon-linecons.styl","shasum":"3874252c8392b5a18e849ac69b6d66999ec1de16","modified":1456928287246,"hash":"3874252c8392b5a18e849ac69b6d66999ec1de16"},{"_id":"themes/next/source/css/_common/_page/post-detail.styl","shasum":"73796f6f13caa7151a2ee8e55755627e0d189f55","modified":1456928287246,"hash":"73796f6f13caa7151a2ee8e55755627e0d189f55"},{"_id":"themes/next/source/css/_common/_fonts/icon-fifty-shades.styl","shasum":"90e68936ea0f26af93c2c517fe1b891538f9c1b1","modified":1456928287246,"hash":"90e68936ea0f26af93c2c517fe1b891538f9c1b1"},{"_id":"themes/next/source/css/_common/_section/body.styl","shasum":"ca1a4766cbe25baac757c6b47a4858d221afdc40","modified":1456928287246,"hash":"ca1a4766cbe25baac757c6b47a4858d221afdc40"},{"_id":"themes/next/source/css/_common/_fonts/icon-font.styl","shasum":"6fd7caf8194656b90c3b7976295f157bce593b54","modified":1456928287246,"hash":"6fd7caf8194656b90c3b7976295f157bce593b54"},{"_id":"themes/next/source/css/_common/_page/categories.styl","shasum":"4f696a2eaeee2f214adcf273eab25c62a398077a","modified":1456928287246,"hash":"4f696a2eaeee2f214adcf273eab25c62a398077a"},{"_id":"themes/next/source/css/_common/_section/footer.styl","shasum":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1456928287246,"hash":"8994ffcce84deac0471532f270f97c44fea54dc0"},{"_id":"themes/next/source/css/_common/_section/header.styl","shasum":"ba501332fb111bd72dc0777f2e1c8a29ad538ff9","modified":1456928287250,"hash":"ba501332fb111bd72dc0777f2e1c8a29ad538ff9"},{"_id":"themes/next/source/css/_common/_section/layout.styl","shasum":"4daaadd156ece64ae05908ad6bb0159c8a27c071","modified":1456928287250,"hash":"4daaadd156ece64ae05908ad6bb0159c8a27c071"},{"_id":"themes/next/source/css/_common/_section/media.styl","shasum":"fa9809d2ecc753cf32f70803c1d0821c405211f4","modified":1456928287250,"hash":"fa9809d2ecc753cf32f70803c1d0821c405211f4"},{"_id":"themes/next/source/css/_common/_section/sidebar.styl","shasum":"d57e1769ebd2c472d2b27d17a706d3f564f94033","modified":1456928287250,"hash":"d57e1769ebd2c472d2b27d17a706d3f564f94033"},{"_id":"themes/next/source/css/_common/_vendor/highlight/highlight.styl","shasum":"6259f4780f2aae1e6f85b892d8822c1c7ebc28bc","modified":1456928287250,"hash":"6259f4780f2aae1e6f85b892d8822c1c7ebc28bc"},{"_id":"themes/next/source/css/_common/_vendor/highlight/theme.styl","shasum":"ae19721ceee5ba460e131cb2427dae3c1ff39d6f","modified":1456928287250,"hash":"ae19721ceee5ba460e131cb2427dae3c1ff39d6f"},{"_id":"themes/next/source/css/_mixins/base.styl","shasum":"66985fe77bd323f7f8f634908e17166f51e96e95","modified":1456928287250,"hash":"66985fe77bd323f7f8f634908e17166f51e96e95"},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","shasum":"b0037a87ee1a613f315c331e8ecf1673c6d82211","modified":1456928287250,"hash":"b0037a87ee1a613f315c331e8ecf1673c6d82211"},{"_id":"themes/next/source/css/_schemes/default/_search.styl","shasum":"05045d24850a982dc8069012c86c878b130b60eb","modified":1456928287250,"hash":"05045d24850a982dc8069012c86c878b130b60eb"},{"_id":"themes/next/source/css/_custom/custom.styl","shasum":"68b6859fb48fe8358e567fc324f218cecfc3a533","modified":1456928287250,"hash":"68b6859fb48fe8358e567fc324f218cecfc3a533"},{"_id":"themes/next/source/css/_variables/Mist.styl","shasum":"f5dda1ca48c1b73a0bd34e08413de57699f24083","modified":1456928287250,"hash":"f5dda1ca48c1b73a0bd34e08413de57699f24083"},{"_id":"themes/next/source/css/_schemes/default/index.styl","shasum":"2588e55132e10d82c0608f03c2c72a2bace8fa4e","modified":1456928287250,"hash":"2588e55132e10d82c0608f03c2c72a2bace8fa4e"},{"_id":"themes/next/source/css/_variables/base.styl","shasum":"59acc8bf6e6b55f576b001e520e048cd0ca801fb","modified":1456928287250,"hash":"59acc8bf6e6b55f576b001e520e048cd0ca801fb"},{"_id":"themes/next/source/css/main.styl","shasum":"b05c342e94ded24a5f2b203cedf77d3faa817fd5","modified":1456928287250,"hash":"b05c342e94ded24a5f2b203cedf77d3faa817fd5"},{"_id":"themes/next/source/fonts/icon-default/icomoon.eot","shasum":"a58d5e893c6faefc90d5c2589cc314dff8ffca7a","modified":1456928287250,"hash":"a58d5e893c6faefc90d5c2589cc314dff8ffca7a"},{"_id":"themes/next/source/fonts/icon-default/icomoon.svg","shasum":"4f18f0bb815b1aeba57739069c3416106240b7c1","modified":1456928287250,"hash":"4f18f0bb815b1aeba57739069c3416106240b7c1"},{"_id":"themes/next/source/fonts/icon-default/icomoon.woff","shasum":"4d0adc55240f331c6de225e23afd76ea5318da9c","modified":1456928287250,"hash":"4d0adc55240f331c6de225e23afd76ea5318da9c"},{"_id":"themes/next/source/fonts/icon-default/icomoon.ttf","shasum":"e6452f07b050ee0ff265b3b99a1e7ef82eb561b2","modified":1456928287250,"hash":"e6452f07b050ee0ff265b3b99a1e7ef82eb561b2"},{"_id":"themes/next/source/css/_schemes/default/_menu.styl","shasum":"4bba29cece65ffc5122f4e052063dea4439fe4ae","modified":1456928287250,"hash":"4bba29cece65ffc5122f4e052063dea4439fe4ae"},{"_id":"themes/next/source/fonts/icon-feather/icomoon.eot","shasum":"6d0eb1a5bfef4f2bf77089bd090e88c5b2f7944d","modified":1456928287254,"hash":"6d0eb1a5bfef4f2bf77089bd090e88c5b2f7944d"},{"_id":"themes/next/source/fonts/icon-feather/icomoon.svg","shasum":"690836f81c0feb1a49e2253d4f984ad543414986","modified":1456928287254,"hash":"690836f81c0feb1a49e2253d4f984ad543414986"},{"_id":"themes/next/source/fonts/icon-feather/icomoon.ttf","shasum":"8c865cffa3845be32406737fcc0466cf9cd965b3","modified":1456928287254,"hash":"8c865cffa3845be32406737fcc0466cf9cd965b3"},{"_id":"themes/next/source/fonts/icon-feather/icomoon.woff","shasum":"9159eea8641b840e0f7aa6e087dae414044ecdd3","modified":1456928287254,"hash":"9159eea8641b840e0f7aa6e087dae414044ecdd3"},{"_id":"themes/next/source/fonts/icon-fifty-shades/icomoon.woff","shasum":"088a16303b0700e1c9e2c6962240b4c2f0fc3aa4","modified":1456928287254,"hash":"088a16303b0700e1c9e2c6962240b4c2f0fc3aa4"},{"_id":"themes/next/source/fonts/icon-fifty-shades/icomoon.eot","shasum":"f27c3643af6ed6f3d29a0be0c8dbea9b157857db","modified":1456928287254,"hash":"f27c3643af6ed6f3d29a0be0c8dbea9b157857db"},{"_id":"themes/next/source/fonts/icon-fifty-shades/icomoon.ttf","shasum":"e0b5e4a23a949bac499908bcef2fae56430e230e","modified":1456928287254,"hash":"e0b5e4a23a949bac499908bcef2fae56430e230e"},{"_id":"themes/next/source/fonts/icon-fifty-shades/icomoon.svg","shasum":"f0790da03008b6cb3ae4215cbb656cb4b4599633","modified":1456928287254,"hash":"f0790da03008b6cb3ae4215cbb656cb4b4599633"},{"_id":"themes/next/source/fonts/icon-icomoon/icomoon.woff","shasum":"05f1ec0bd307da5e731a86eb4961589a6042aebb","modified":1456928287254,"hash":"05f1ec0bd307da5e731a86eb4961589a6042aebb"},{"_id":"themes/next/source/fonts/icon-icomoon/icomoon.svg","shasum":"e316347805eb93425faa678611c5e42a7152da8f","modified":1456928287254,"hash":"e316347805eb93425faa678611c5e42a7152da8f"},{"_id":"themes/next/source/fonts/icon-icomoon/icomoon.ttf","shasum":"f399713d1c9400d4d3373e38991a7e362a754a94","modified":1456928287254,"hash":"f399713d1c9400d4d3373e38991a7e362a754a94"},{"_id":"themes/next/source/fonts/icon-icomoon/icomoon.eot","shasum":"301fcf00c24750dddf1c529f944ca62c7f1a217d","modified":1456928287254,"hash":"301fcf00c24750dddf1c529f944ca62c7f1a217d"},{"_id":"themes/next/source/fonts/icon-linecons/icomoon.eot","shasum":"176695cc0dc12daba049b2bb889397a7bf2e553c","modified":1456928287254,"hash":"176695cc0dc12daba049b2bb889397a7bf2e553c"},{"_id":"themes/next/source/fonts/icon-linecons/icomoon.ttf","shasum":"c8ec218adabc788b17f976f60dd1c5fa872d9fc4","modified":1456928287254,"hash":"c8ec218adabc788b17f976f60dd1c5fa872d9fc4"},{"_id":"themes/next/source/images/bkdefault_avatar.jpg","shasum":"b687bb4bfbe35a32b592c24d652ba80cfdc770fc","modified":1456928287254,"hash":"b687bb4bfbe35a32b592c24d652ba80cfdc770fc"},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","shasum":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1456928287258,"hash":"c6524ece3f8039a5f612feaf865d21ec8a794564"},{"_id":"themes/next/source/images/cc-by-nc.svg","shasum":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1456928287258,"hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7"},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","shasum":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1456928287258,"hash":"3031be41e8753c70508aa88e84ed8f4f653f157e"},{"_id":"themes/next/source/images/cc-by-nd.svg","shasum":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1456928287258,"hash":"c563508ce9ced1e66948024ba1153400ac0e0621"},{"_id":"themes/next/source/images/cc-by-sa.svg","shasum":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1456928287258,"hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e"},{"_id":"themes/next/source/images/cc-by.svg","shasum":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1456928287258,"hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e"},{"_id":"themes/next/source/fonts/icon-linecons/icomoon.woff","shasum":"d1ed08a17670fa259df02c1d52dc9ce754343775","modified":1456928287254,"hash":"d1ed08a17670fa259df02c1d52dc9ce754343775"},{"_id":"themes/next/source/images/placeholder.gif","shasum":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1456928287258,"hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b"},{"_id":"themes/next/source/images/searchicon.png","shasum":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1456928287258,"hash":"67727a6a969be0b2659b908518fa6706eed307b8"},{"_id":"themes/next/source/js/bootstrap.scrollspy.js","shasum":"ae7bdce88b515aade4eea8bf7407eec458bcd625","modified":1456928287258,"hash":"ae7bdce88b515aade4eea8bf7407eec458bcd625"},{"_id":"themes/next/source/js/helpers.js","shasum":"c2117b0ec653df4c45dd9d9575b190cbe1035335","modified":1456928287258,"hash":"c2117b0ec653df4c45dd9d9575b190cbe1035335"},{"_id":"themes/next/source/js/fancy-box.js","shasum":"116cafc741e048497287121a508d7a54c050c70c","modified":1456928287258,"hash":"116cafc741e048497287121a508d7a54c050c70c"},{"_id":"themes/next/source/js/hook-duoshuo.js","shasum":"a7a618126d6853d52f4e32be116d3985325ad17d","modified":1456928287258,"hash":"a7a618126d6853d52f4e32be116d3985325ad17d"},{"_id":"themes/next/source/images/cc-zero.svg","shasum":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1456928287258,"hash":"87669bf8ac268a91d027a0a4802c92a1473e9030"},{"_id":"themes/next/source/images/loading.gif","shasum":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1456928287258,"hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b"},{"_id":"themes/next/source/js/motion_fallback.js","shasum":"a767d522c65a8b2fbad49135c9332135c6785c3e","modified":1456928287258,"hash":"a767d522c65a8b2fbad49135c9332135c6785c3e"},{"_id":"themes/next/source/js/motion_global.js","shasum":"e6df9e7e61109667df0e22c4f7cc25c85015440b","modified":1456928287258,"hash":"e6df9e7e61109667df0e22c4f7cc25c85015440b"},{"_id":"themes/next/source/js/search-toggle.js","shasum":"0bf617514cd86307f0678a226761341100dd86d4","modified":1456928287258,"hash":"0bf617514cd86307f0678a226761341100dd86d4"},{"_id":"themes/next/source/js/ua-parser.min.js","shasum":"acf0ee6a47ffb7231472b56e43996e3f947c258a","modified":1456928287258,"hash":"acf0ee6a47ffb7231472b56e43996e3f947c258a"},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1456928287258,"hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c"},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","shasum":"273b123496a42ba45c3416adb027cd99745058b0","modified":1456928287258,"hash":"273b123496a42ba45c3416adb027cd99745058b0"},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1456928287258,"hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0"},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","shasum":"17df19f97628e77be09c352bf27425faea248251","modified":1456928287258,"hash":"17df19f97628e77be09c352bf27425faea248251"},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1456928287262,"hash":"30c58913f327e28f466a00f4c1ac8001b560aed8"},{"_id":"themes/next/source/js/lazyload.js","shasum":"b92e9acdc7afc15468314c03f4a643b0c93944cf","modified":1456928287258,"hash":"b92e9acdc7afc15468314c03f4a643b0c93944cf"},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1456928287262,"hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8"},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1456928287262,"hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3"},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1456928287258,"hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a"},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1456928287262,"hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f"},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","shasum":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1456928287262,"hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876"},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","shasum":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1456928287262,"hash":"53e194f4a72e649c04fb586dd57762b8c022800b"},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","shasum":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1456928287262,"hash":"5f163444617b6cf267342f06ac166a237bb62df9"},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","shasum":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1456928287262,"hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4"},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","shasum":"53360764b429c212f424399384417ccc233bb3be","modified":1456928287262,"hash":"53360764b429c212f424399384417ccc233bb3be"},{"_id":"themes/next/source/vendors/velocity/bower.json","shasum":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1456928287262,"hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03"},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","shasum":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1456928287266,"hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df"},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","shasum":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1456928287266,"hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6"},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","shasum":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1456928287262,"hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d"},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","shasum":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1456928287266,"hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908"},{"_id":"themes/next/source/fonts/icon-linecons/icomoon.svg","shasum":"888a285a4a7329210b2210742c673611c27425eb","modified":1456928287254,"hash":"888a285a4a7329210b2210742c673611c27425eb"},{"_id":"themes/next/tests/helpers.js","shasum":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1456928287266,"hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f"},{"_id":"themes/next/source/vendors/jquery/index.js","shasum":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1456928287262,"hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276"},{"_id":"themes/next/tests/intern.js","shasum":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1456928287266,"hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73"},{"_id":"themes/next/source/images/default_avatar.jpg","shasum":"6c5db2d64774e5a009853a915d163fa2f713e425","modified":1461734232000,"hash":"4b0f1a0286251d0421896a43be09f752f658f004"},{"_id":"themes/next/source/vendors/velocity/velocity.js","shasum":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1456928287266,"hash":"e63dc7cea055ca60a95d286f32349d88b10c5a4d"},{"_id":"public/tags/index.html","hash":"1618c2bda79f5cd8ab1ff89cdede68b567bfcfd4","modified":1487063127058},{"_id":"public/categories/index.html","modified":1452934557857,"shasum":"656005e72c023346fbfbbdf152a6525533169175"},{"_id":"public/about/index.html","modified":1452934557918,"shasum":"36522a96754a831f15040a3f3e4447a06e5a321b"},{"_id":"public/2015/11/27/jquery07/index.html","hash":"df922b2fb185acc513475a2856bb9a970226f4f8","modified":1487063127074},{"_id":"public/2015/11/25/jquery06/index.html","hash":"a96f8a8cdabb20430877c96e84652ce794b6a85a","modified":1487063127074},{"_id":"public/2015/11/24/jquery05/index.html","hash":"c144bc8e147111c98e6bff4ed8d879a34b416686","modified":1487063127074},{"_id":"public/2015/11/23/jquery04/index.html","hash":"87f0783a09bc41ffcc37b27d19f1db1703050850","modified":1487063127074},{"_id":"public/2015/11/20/jquery03/index.html","hash":"82c578375c179f006f2cf59f1b5c7e6d872cc67a","modified":1487063127074},{"_id":"public/2015/11/19/jquery02/index.html","hash":"3fa5ecb09b049bab131d22700b5bf778f77b64ec","modified":1487063127074},{"_id":"public/2015/11/18/jquery01/index.html","hash":"24a37900411bafd40e267cdf6fd54f91100664ad","modified":1487063127074},{"_id":"public/2015/11/16/front-end1/index.html","hash":"d53c024d61e75414ae66ba9c9ba3f40c5da259c5","modified":1487063127074},{"_id":"public/2015/11/10/url/index.html","hash":"7ab127f6662370673ed422796fc4ff352dee0af8","modified":1487063127074},{"_id":"public/2015/11/05/sublime2/index.html","hash":"0458786ca2f48ad897ce8b94abad0b8a55020789","modified":1487063127074},{"_id":"public/2015/11/04/sublime1/index.html","hash":"4d247c00d8b7a94ed098ac5188c011f4565187c4","modified":1487063127074},{"_id":"public/2015/11/03/redux1/index.html","hash":"ccd49b416f2e2803bcd64bbeb675f1b43da3cbf7","modified":1487063127074},{"_id":"public/2015/10/30/dockerfile/index.html","hash":"3ec4c6f12557a8a9fba3644659da79c7250c7bae","modified":1487063127074},{"_id":"public/2015/10/29/underscore03/index.html","hash":"0a22aa28d10920777d1f3e6764bd50fd347e528c","modified":1487063127074},{"_id":"public/2015/10/28/underscore02/index.html","hash":"2d90a555a772251063d7d364d5b5496ac7f27979","modified":1487063127074},{"_id":"public/2015/10/27/underscore01/index.html","hash":"7e2814902448405825418c5ce755ec55054bdca0","modified":1487063127074},{"_id":"public/2014/10/17/hello-world/index.html","hash":"df5329c169f4a88d5d57ef4cc564ab7074022fc6","modified":1487063127074},{"_id":"public/archives/index.html","hash":"daec485712730cb50ad389b2b95b9d3d0ef3b465","modified":1487063127058},{"_id":"public/archives/page/2/index.html","hash":"1f90ec9a1e6848ad123612674a1e207f3f833f80","modified":1487063127058},{"_id":"public/archives/2014/index.html","hash":"d10887ec0a2e74ecf8280c539c96eb07f253ca2f","modified":1487063127058},{"_id":"public/archives/2014/10/index.html","hash":"b10f5e0d1c186368793766eea48ab12c7c79f90b","modified":1487063127058},{"_id":"public/archives/2015/index.html","hash":"182c1c41c6bc7cb8a3964c4020c8d93a7e31d029","modified":1487063127058},{"_id":"public/archives/2015/page/2/index.html","hash":"bdb153a88e25d6d7efefe099d3e97eedf6220d6f","modified":1487063127058},{"_id":"public/archives/2015/10/index.html","hash":"28136977e7ef9e0a945fb9f5b737f96bd029a88a","modified":1487063127058},{"_id":"public/archives/2015/11/index.html","hash":"ae65956437c0f4eaef342f75818ad1d2f07df3cf","modified":1487063127058},{"_id":"public/archives/2015/11/page/2/index.html","hash":"3c0609f217cb3941d8daeccf2eee326a2c60df99","modified":1487063127058},{"_id":"public/index.html","hash":"95247efa7099dffb550c88453cb2dba0b3e81e80","modified":1487063127074},{"_id":"public/page/2/index.html","hash":"fdbbd30b9cbb6ccf1320bd47d4f62e0189187004","modified":1487063127074},{"_id":"public/tags/hello/index.html","hash":"7123dcb19a11884b01a9bbe6f1b5e1d811199780","modified":1487063127074},{"_id":"themes/next/.bowerrc","hash":"80e096fdc1cf912ee85dd9f7e6e77fd40cf60f10","modified":1456928287234},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1456928287234},{"_id":"themes/next/.gitignore","hash":"8919d7f39d611f548e96fd914a78cede24016390","modified":1456928287234},{"_id":"themes/next/.jshintrc","hash":"12c5e37da3432bee2219ed1c667076d54f1639c0","modified":1456928287238},{"_id":"themes/next/tests/.jshintrc","hash":"16d54197dd83677442c0373b8c71825a84f177b7","modified":1456928287266},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1456928287262},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1456928287262},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1487063127074},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1487063127074},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1487063127074},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1487063127074},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1487063127074},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1487063127074},{"_id":"public/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1487063127074},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1487063127074},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1487063127074},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1487063127074},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1487063127090},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1487063127074},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1487063127074},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1487063127074},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1487063127074},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1487063127074},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1487063127074},{"_id":"public/images/bkdefault_avatar.jpg","hash":"b687bb4bfbe35a32b592c24d652ba80cfdc770fc","modified":1487063127074},{"_id":"public/fonts/icon-linecons/icomoon.woff","hash":"d1ed08a17670fa259df02c1d52dc9ce754343775","modified":1487063127074},{"_id":"public/fonts/icon-linecons/icomoon.ttf","hash":"c8ec218adabc788b17f976f60dd1c5fa872d9fc4","modified":1487063127074},{"_id":"public/fonts/icon-linecons/icomoon.eot","hash":"176695cc0dc12daba049b2bb889397a7bf2e553c","modified":1487063127090},{"_id":"public/fonts/icon-icomoon/icomoon.woff","hash":"05f1ec0bd307da5e731a86eb4961589a6042aebb","modified":1487063127090},{"_id":"public/fonts/icon-icomoon/icomoon.ttf","hash":"f399713d1c9400d4d3373e38991a7e362a754a94","modified":1487063127090},{"_id":"public/fonts/icon-icomoon/icomoon.svg","hash":"e316347805eb93425faa678611c5e42a7152da8f","modified":1487063127090},{"_id":"public/fonts/icon-icomoon/icomoon.eot","hash":"301fcf00c24750dddf1c529f944ca62c7f1a217d","modified":1487063127090},{"_id":"public/fonts/icon-fifty-shades/icomoon.woff","hash":"088a16303b0700e1c9e2c6962240b4c2f0fc3aa4","modified":1487063127090},{"_id":"public/fonts/icon-fifty-shades/icomoon.ttf","hash":"e0b5e4a23a949bac499908bcef2fae56430e230e","modified":1487063127090},{"_id":"public/fonts/icon-fifty-shades/icomoon.svg","hash":"f0790da03008b6cb3ae4215cbb656cb4b4599633","modified":1487063127090},{"_id":"public/fonts/icon-fifty-shades/icomoon.eot","hash":"f27c3643af6ed6f3d29a0be0c8dbea9b157857db","modified":1487063127090},{"_id":"public/fonts/icon-feather/icomoon.woff","hash":"9159eea8641b840e0f7aa6e087dae414044ecdd3","modified":1487063127090},{"_id":"public/fonts/icon-feather/icomoon.ttf","hash":"8c865cffa3845be32406737fcc0466cf9cd965b3","modified":1487063127090},{"_id":"public/fonts/icon-feather/icomoon.svg","hash":"690836f81c0feb1a49e2253d4f984ad543414986","modified":1487063127090},{"_id":"public/fonts/icon-feather/icomoon.eot","hash":"6d0eb1a5bfef4f2bf77089bd090e88c5b2f7944d","modified":1487063127090},{"_id":"public/fonts/icon-default/icomoon.woff","hash":"4d0adc55240f331c6de225e23afd76ea5318da9c","modified":1487063127090},{"_id":"public/fonts/icon-default/icomoon.ttf","hash":"e6452f07b050ee0ff265b3b99a1e7ef82eb561b2","modified":1487063127090},{"_id":"public/fonts/icon-default/icomoon.svg","hash":"4f18f0bb815b1aeba57739069c3416106240b7c1","modified":1487063127090},{"_id":"public/fonts/icon-default/icomoon.eot","hash":"a58d5e893c6faefc90d5c2589cc314dff8ffca7a","modified":1487063127090},{"_id":"public/fonts/icon-linecons/icomoon.svg","hash":"888a285a4a7329210b2210742c673611c27425eb","modified":1487063127638},{"_id":"public/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1487063127638},{"_id":"public/vendors/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1487063127638},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1487063127638},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1487063127638},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1487063127638},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1487063127638},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1487063127638},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1487063127638},{"_id":"public/js/ua-parser.min.js","hash":"acf0ee6a47ffb7231472b56e43996e3f947c258a","modified":1487063127638},{"_id":"public/js/search-toggle.js","hash":"0bf617514cd86307f0678a226761341100dd86d4","modified":1487063127638},{"_id":"public/js/motion_global.js","hash":"e6df9e7e61109667df0e22c4f7cc25c85015440b","modified":1487063127638},{"_id":"public/js/motion_fallback.js","hash":"a767d522c65a8b2fbad49135c9332135c6785c3e","modified":1487063127638},{"_id":"public/js/lazyload.js","hash":"b92e9acdc7afc15468314c03f4a643b0c93944cf","modified":1487063127638},{"_id":"public/js/hook-duoshuo.js","hash":"e529f5d6dda3aee77fadfed879da9fe1fb570165","modified":1487063127638},{"_id":"public/js/helpers.js","hash":"c2117b0ec653df4c45dd9d9575b190cbe1035335","modified":1487063127638},{"_id":"public/js/fancy-box.js","hash":"116cafc741e048497287121a508d7a54c050c70c","modified":1487063127638},{"_id":"public/js/bootstrap.scrollspy.js","hash":"ae7bdce88b515aade4eea8bf7407eec458bcd625","modified":1487063127638},{"_id":"public/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1487063127638},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1487063127638},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1487063127638},{"_id":"public/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1487063127638},{"_id":"public/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1487063127638},{"_id":"public/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1487063127638},{"_id":"public/css/main.css","hash":"3518f2ab0802f424cdd9771fbe9fede41715186b","modified":1487063127638},{"_id":"public/images/default_avatar.jpg","hash":"4b0f1a0286251d0421896a43be09f752f658f004","modified":1487063127622},{"_id":"source/_posts/1.0.md","hash":"b512056387464dd00737f54a1aeac7a5813a8e3e","modified":1461248704000},{"_id":"source/_posts/1.1.0-tool.md","hash":"0645f7ea9faaee6cf649d2a0e478e0799b41212b","modified":1461247279000},{"_id":"source/_posts/1.1.0-setup.md","hash":"518557ce66a6c01c49a3aa10c6d8d43861d48e97","modified":1461248789000},{"_id":"source/_posts/1.1.1-env-osx.md","hash":"74b7e89629734c80cec553425d48505cb1bc0270","modified":1461292761000},{"_id":"source/_posts/1.1.3-env-linux.md","hash":"900f4a090dd25e9d919f5c541e7d3cbc3a164593","modified":1461292851000},{"_id":"source/_posts/1.1.2-env-windows.md","hash":"4971f7957383b1e8bfb38d553fb1953380b01494","modified":1461292798000},{"_id":"source/_posts/1.2-learn-language.md","hash":"3ea0665a345fd5e62d7e6c35a703f91fd89203c5","modified":1461394101000},{"_id":"source/_posts/1.4.0-html.md","hash":"137140c0d2556e66e2d01482fbbd15485606efee","modified":1461394378000},{"_id":"source/_posts/1.3-web-basic.md","hash":"dc2ea3e1fbb2cc4ae43ca6b9f4a5183d70a88a71","modified":1461394244000},{"_id":"source/_posts/1.4.1-css.md","hash":"7deb5c00d11bfb4f4f632fa4647ea2859c600659","modified":1461496883000},{"_id":"source/_posts/2.0.0-back-front.md","hash":"b488358c1d6f94a5a57030d7bca5c41b784b9111","modified":1461497083000},{"_id":"source/_posts/1.4.2-js.md","hash":"91a2a0c4d0b34d2eee6299e9d5deb51edf734135","modified":1461497796000},{"_id":"source/_posts/2.1.0-backend-language.md","hash":"f2d827c15158faf583bcb99e6b50b24f11732d75","modified":1461558842000},{"_id":"source/_posts/2.1.2-mvc.md","hash":"4adbd60a59c32787b95bf8bd16dbd5f937cf44ca","modified":1461558999000},{"_id":"source/_posts/2.1.3-serviceful.md","hash":"339b8fa7888584f1f718d94a30ffc2a9d02e9ee9","modified":1461559489000},{"_id":"source/_posts/2.2.0-choice-frontend.md","hash":"e53b0e61c02c8a827376a31803f7488acd5e3bb1","modified":1461648933000},{"_id":"source/_posts/2.2.2-communication.md","hash":"d121e39a46178335495917ad1db41068d0a9946c","modified":1461644792000},{"_id":"source/_posts/2.1.4-persistence.md","hash":"a5281fe63ef6b6299a03de25139105e31ea35af7","modified":1461653918000},{"_id":"source/_posts/3.0.0-coding.md","hash":"a0e1975abf15561e04a38948f16415434e830fb0","modified":1461728595000},{"_id":"source/_posts/3.0.1-builder.md","hash":"bed5158a3046664826c7c7fa4c95d31f332bcf89","modified":1461728761000},{"_id":"source/_posts/3.0.2-git.md","hash":"2907ebbf3958c575a46f3344bc6ee76dcdc202af","modified":1461728902000},{"_id":"source/_posts/3.0.3-tasking.md","hash":"e1c4f8943384f8004c15a6dc844be42872cc13c7","modified":1461821390000},{"_id":"source/_posts/3.0.4-typing.md","hash":"d9d4bcd544aa6e803924e4727e2e825d8f0190fd","modified":1461821463000},{"_id":"source/_posts/3.0.5-knowledge.md","hash":"e7e206a769a9bb973e05ae13e77af640d22fbddb","modified":1461821554000},{"_id":"source/_posts/3.1.0-how-to-test.md","hash":"da11c9911dbb43cabbbc50e407db28b2dac5d28f","modified":1461906871000},{"_id":"source/_posts/3.1.1-test-double.md","hash":"881d7f553b8ab8bc0666d300597752661aaf2d69","modified":1461904569000},{"_id":"source/_posts/3.1.2-tdd.md","hash":"de2287c96514643c42f199909ac447cc856c9b78","modified":1461904708000},{"_id":"source/_posts/3.2.2-refactor.md","hash":"5d9f6a56b40cf74af895b17f2482606c02df206c","modified":1462279805000},{"_id":"source/_posts/3.2.1-readable.md","hash":"fb212b192a2308aca677b47d237583c541e08aef","modified":1462279722000},{"_id":"source/_posts/3.2.3-intellij-refactor.md","hash":"5d79e1d5801dddcf6c559eef8c8c559f0dbaf895","modified":1462279979000},{"_id":"source/_posts/3.3.0-refactor-to-pattern.md","hash":"430161daa3b8d5405fd47bbb6ee3d6d6d70d8ced","modified":1462335500000},{"_id":"source/_posts/4.0.0-golive.md","hash":"86542441687a02455d93db0ed7b05d1424c7c2c6","modified":1462335659000},{"_id":"source/_posts/4.2.0-lnmp.md","hash":"c0af4887a7e4f836ca7bbfdfef90dbbc17132bd4","modified":1462414115000},{"_id":"source/_posts/4.2.1-cache.md","hash":"6cfb89c934737168a4447e5fb20f411db348b451","modified":1462414210000},{"_id":"source/_posts/4.1.0-runenv.md","hash":"38f50b3c8193c1e9ee7e245c27dc8f994ed1a433","modified":1462335966000},{"_id":"source/_posts/4.3.1-configurable.md","hash":"20887f01c1ac8a9a7e463e453aacb536a3126861","modified":1462414341000},{"_id":"source/_posts/5.0.0-data-analytics.md","hash":"0441f02ca3f58640317a0cd5dba2f65687c31b28","modified":1462498167000},{"_id":"source/_posts/4.4.0-auto-deploy.md","hash":"1b80f0460e1de669a61d13e07e13322b720d2060","modified":1462498071000},{"_id":"source/_posts/5.1.0-lean.md","hash":"f85791c8845428913731d92ecf78899e33e89291","modified":1462498322000},{"_id":"source/_posts/5.1.1-da.md","hash":"9ddb029df704dedb22071d5526e4197a800b6681","modified":1462605831000},{"_id":"source/_posts/5.1.2-ga.md","hash":"1bbb2d42d8b1708cfbfb48a2c36fe03833f482bc","modified":1462605930000},{"_id":"source/_posts/5.2.0-performance.md","hash":"695683929e23a6e414d14c9ae2a50f1429489e1f","modified":1462606067000},{"_id":"source/_posts/5.3.0-seo.md","hash":"de455962a96658c285f3e09e360a286ecbe61670","modified":1462682049000},{"_id":"source/_posts/5.4.0-first-ux.md","hash":"4f9b90f8a6def26a843973ccc46e4503e7c8dc2d","modified":1462682194000},{"_id":"source/_posts/5.4.1-learn-design.md","hash":"a6dcd7db4f77885ffb1525a5c017d9b626d6fc01","modified":1462682268000},{"_id":"source/_posts/6.1.1-ci.md","hash":"de5bf9cef80b815152949e264a062bdbfe3a5b45","modified":1462765319000},{"_id":"source/_posts/7.0.0-legacy-system.md","hash":"c1926d83ad1ac9b3942b13adb3f46b67b167ebae","modified":1462847921000},{"_id":"source/_posts/7.1.1-legacy-code.md","hash":"ddf982aa9f441199843ba58d1e6532d577c995d3","modified":1462848039000},{"_id":"source/_posts/7.1.2-change-code.md","hash":"ec778e09a2ce179193af62445f32480675c55078","modified":1462848046000},{"_id":"source/_posts/7.2.1-refactor2.md","hash":"c4dc24db47ae3cfca3973c1df4d67ac6d82f3612","modified":1462933433000},{"_id":"source/_posts/6.3.0-cl.md","hash":"71c53adf37337e3861dfcf20ac51b29cb3952a48","modified":1462765529000},{"_id":"source/_posts/8.1.2-retro.md","hash":"824dd0b8f2914193a5b4515897c2e4bdcf72a0d8","modified":1462933848000},{"_id":"source/_posts/8.2.1-emergent-design.md","hash":"1aa67a21154e6e1110e226d7943b3862b407e01d","modified":1463017217000},{"_id":"source/_posts/8.3.0-architecture.md","hash":"bb9588ebe746d96074093bee7ac49b084820adb8","modified":1463017337000},{"_id":"source/_posts/8.3.1-seperate.md","hash":"b085d76034153dd6669c59bdfe37d4e87bec2111","modified":1463017533000},{"_id":"source/_posts/8.2.0-arch-pattern.md","hash":"7619bd55f2ba4770d66e6e96e8e38e830282bd37","modified":1462933855000},{"_id":"source/_posts/6.2.1-cd.md","hash":"93c999e958ce2b517c4ab99ced2e5a914af731ab","modified":1462765412000},{"_id":"themes/next/source/images/old_default_avatar.jpg","hash":"6c5db2d64774e5a009853a915d163fa2f713e425","modified":1456989976000},{"_id":"public/archives/page/3/index.html","hash":"50cce656617468617cfa67f1f7597ac38513a6c6","modified":1487063127058},{"_id":"public/archives/page/4/index.html","hash":"c16ebd9c36ab090c9a43c1d494b08af64e1936fd","modified":1487063127058},{"_id":"public/archives/page/5/index.html","hash":"2f40014e3dbf1a172ba4d222e3957152a46048ea","modified":1487063127058},{"_id":"public/archives/page/6/index.html","hash":"9249193b2432269cb9f17e724ad422ab62e9b53d","modified":1487063127058},{"_id":"public/archives/page/7/index.html","hash":"a72d5fed47fda1ebb7517d7461ff2879688ac0ee","modified":1487063127058},{"_id":"public/archives/page/8/index.html","hash":"f7ecc091c89df73113b08e7b25324c51d55a30d5","modified":1487063127058},{"_id":"public/archives/2016/index.html","hash":"8068f683f6775a1aaee031bf39a57bae66167f00","modified":1487063127058},{"_id":"public/archives/2016/page/2/index.html","hash":"c8238c01aaa4476cf7bfba93a95d8675b41c20de","modified":1487063127058},{"_id":"public/archives/2016/page/3/index.html","hash":"78855a9a0bd7af42a4c83d343159f3cebef0d8e9","modified":1487063127058},{"_id":"public/archives/2016/page/4/index.html","hash":"630edce95c814b418d3314942753590dce3a8ef7","modified":1487063127058},{"_id":"public/archives/2016/page/5/index.html","hash":"5c3c75a2036c13fa18a41ecaf9b984eea098cf31","modified":1487063127058},{"_id":"public/archives/2016/page/6/index.html","hash":"d719e39d04791ebf7c0f780646ab2ea63665ed68","modified":1487063127058},{"_id":"public/archives/2016/04/index.html","hash":"2fdddcc36e5ee4f6dc3be11a094a85fc987e8f57","modified":1487063127058},{"_id":"public/archives/2016/04/page/2/index.html","hash":"2954368df702e1b2a6fce58a889962cf0151e292","modified":1487063127074},{"_id":"public/archives/2016/04/page/3/index.html","hash":"b4a8b53de00bda48c3599341f6022003e647fad0","modified":1487063127074},{"_id":"public/archives/2016/05/index.html","hash":"6949bbd7197347e5f7be1d0ad60ce50d6fd2f709","modified":1487063127074},{"_id":"public/archives/2016/05/page/2/index.html","hash":"9980dfce5bbeaa030a535fdd68adefa84192babd","modified":1487063127074},{"_id":"public/archives/2016/05/page/3/index.html","hash":"ba388e17b4f0f5ecba137f2a41030241c0309503","modified":1487063127074},{"_id":"public/2016/05/12/8.3.1-seperate/index.html","hash":"876041596e42eb904f99bcd2f393dcc20ed6479e","modified":1487063127074},{"_id":"public/2016/05/12/8.3.0-architecture/index.html","hash":"95b01cf8a80973c8ab294caff4953c8193dfece1","modified":1487063127074},{"_id":"public/2016/05/12/8.2.1-emergent-design/index.html","hash":"7ca74fd55ab03783b5568a1721a536ce7ad4c01d","modified":1487063127074},{"_id":"public/2016/05/11/8.2.0-arch-pattern/index.html","hash":"a4cdb9a0547f2d9f568700cff5d953e6f8204c7a","modified":1487063127074},{"_id":"public/2016/05/11/8.1.2-retro/index.html","hash":"43f6dd19030e517e7cf998b48c9b84d80fb98afc","modified":1487063127074},{"_id":"public/2016/05/11/7.2.1-refactor2/index.html","hash":"c9c1dbe032b9642d3bceb7732aa4dcb11f7d9053","modified":1487063127074},{"_id":"public/2016/05/10/7.1.2-change-code/index.html","hash":"0045c2d71beb9f91b2d6ea216f32abc3e622fea4","modified":1487063127074},{"_id":"public/2016/05/10/7.1.1-legacy-code/index.html","hash":"83891a7f670b337e6980c468615c24511ea1a0e1","modified":1487063127074},{"_id":"public/2016/05/10/7.0.0-legacy-system/index.html","hash":"2cdc77af7e2fc39053456de0883b4df25b7039db","modified":1487063127074},{"_id":"public/2016/05/09/6.3.0-cl/index.html","hash":"7b22d7793f200ddddbbd427857b887795c70d6b8","modified":1487063127074},{"_id":"public/2016/05/09/6.2.1-cd/index.html","hash":"ed38b615f429d29f9ca8d462b170354e30e5232b","modified":1487063127074},{"_id":"public/2016/05/09/6.1.1-ci/index.html","hash":"74998563e4c2b6fc235b8a4a05d86502e0448c29","modified":1487063127074},{"_id":"public/2016/05/08/5.4.1-learn-design/index.html","hash":"acc8f9cb361da92024fee2a941daed788eead39c","modified":1487063127074},{"_id":"public/2016/05/08/5.4.0-first-ux/index.html","hash":"7cd4aa97a84a6cfa4d8743d1a947c0fd4e9f9c37","modified":1487063127074},{"_id":"public/2016/05/08/5.3.0-seo/index.html","hash":"b691440bc0b5135440ddd6f7b818d9f38a355e11","modified":1487063127074},{"_id":"public/2016/05/07/5.2.0-performance/index.html","hash":"a65d2210adebf3207c36208154f96d1440da6f5b","modified":1487063127074},{"_id":"public/2016/05/07/5.1.2-ga/index.html","hash":"867c56d48ced6741c93960e35691e0e1708089a6","modified":1487063127074},{"_id":"public/2016/05/07/5.1.1-da/index.html","hash":"e6a58ddc502b842a86f298a56ab15ebddf8fee07","modified":1487063127074},{"_id":"public/2016/05/06/5.1.0-lean/index.html","hash":"7c6e58b7770c822da72f296d1c227244c3b5bbdf","modified":1487063127074},{"_id":"public/2016/05/06/5.0.0-data-analytics/index.html","hash":"d868610119a7a8220f911c911e4798e3b7e20df3","modified":1487063127074},{"_id":"public/2016/05/06/4.4.0-auto-deploy/index.html","hash":"89f72b39aff384cf05b1a3c0a95d99b82bee5ce1","modified":1487063127074},{"_id":"public/2016/05/05/4.3.1-configurable/index.html","hash":"cd5dc2dcbb67eb5ff6b41ab9d016602149522b84","modified":1487063127074},{"_id":"public/2016/05/05/4.2.1-cache/index.html","hash":"ccb930426dc1df224719d36ecd056f2c3e07ddf3","modified":1487063127074},{"_id":"public/2016/05/05/4.2.0-lnmp/index.html","hash":"d0b862a1b6a1e2f673fb8f84b2a7633de8f1d91b","modified":1487063127074},{"_id":"public/2016/05/04/4.1.0-runenv/index.html","hash":"81dd20f40312209842f98af843661acb0c206c75","modified":1487063127074},{"_id":"public/2016/05/04/4.0.0-golive/index.html","hash":"c55bd133dd890331a25153f6915b0643547f3e37","modified":1487063127074},{"_id":"public/2016/05/04/3.3.0-refactor-to-pattern/index.html","hash":"d4a7753ad01b49543d47d0d87132a20ba8815e77","modified":1487063127074},{"_id":"public/2016/05/03/3.2.3-intellij-refactor/index.html","hash":"d3ffb88db643fd9f9611e8dd36f56f7185db8f21","modified":1487063127074},{"_id":"public/2016/05/03/3.2.2-refactor/index.html","hash":"eb9f2d0b143b6c54446366e52d68ad5ee6698cd1","modified":1487063127074},{"_id":"public/2016/05/03/3.2.1-readable/index.html","hash":"9490bd7876105b5810db1f783ba6cf0115d998e3","modified":1487063127074},{"_id":"public/2016/04/29/3.1.2-tdd/index.html","hash":"9779d391ea69c8d5355b188ffec5f4d6c787f9b7","modified":1487063127074},{"_id":"public/2016/04/29/3.1.1-test-double/index.html","hash":"a33d093a303e761f2dce1b3525d3e70659d74998","modified":1487063127074},{"_id":"public/2016/04/29/3.1.0-how-to-test/index.html","hash":"38108c8fa04234c0196263e220fad7bc4be15d40","modified":1487063127074},{"_id":"public/2016/04/28/3.0.5-knowledge/index.html","hash":"7d2aaf33e7aad8c800f55c5ab8895d826b537100","modified":1487063127074},{"_id":"public/2016/04/28/3.0.4-typing/index.html","hash":"10ad324424f9a91900e344081b96800468ba2f41","modified":1487063127074},{"_id":"public/2016/04/28/3.0.3-tasking/index.html","hash":"664cb3a41285f97975b77c636df1eb6bd14fcd73","modified":1487063127074},{"_id":"public/2016/04/27/3.0.2-git/index.html","hash":"65e04e7360806e7917358dc5d6cc605fe4edffa6","modified":1487063127074},{"_id":"public/2016/04/27/3.0.1-builder/index.html","hash":"4d040cdd68aab4c9529cee5aed0d2ea729906c90","modified":1487063127074},{"_id":"public/2016/04/27/3.0.0-coding/index.html","hash":"89327e06fe43cbedf83274ed8b785f56a5f47950","modified":1487063127074},{"_id":"public/2016/04/26/2.2.2-communication/index.html","hash":"1d4a184a31ea33682caf2382c2ec68445dc3af86","modified":1487063127074},{"_id":"public/2016/04/26/2.2.0-choice-frontend/index.html","hash":"fa7fe443a788d139de3432c30369a63388602ed8","modified":1487063127074},{"_id":"public/2016/04/26/2.1.4-persistence/index.html","hash":"fc2f2263f51598863e2bcd158bfbe81cedc63fab","modified":1487063127074},{"_id":"public/2016/04/25/2.1.3-serviceful/index.html","hash":"9eacd4b27b2d1e5bfb6ff871fc46068932b76991","modified":1487063127074},{"_id":"public/2016/04/25/2.1.2-mvc/index.html","hash":"2338156d0185892b5073e9c8a9c304c5a7ba0be9","modified":1487063127074},{"_id":"public/2016/04/25/2.1.0-backend-language/index.html","hash":"e46c66fec637f80ef250c216d31fb3fb57faf356","modified":1487063127074},{"_id":"public/2016/04/24/2.0.0-back-front/index.html","hash":"c0f9209b7c589919e816f979c35e98d78841e3e3","modified":1487063127074},{"_id":"public/2016/04/24/1.4.2-js/index.html","hash":"8c7ba07cb21be6f9131aaf52c389c44d0e06e25c","modified":1487063127074},{"_id":"public/2016/04/24/1.4.1-css/index.html","hash":"f683295372cb02e1aceaabb1652bcd5f96963d45","modified":1487063127074},{"_id":"public/2016/04/23/1.4.0-html/index.html","hash":"1a151306c0b8cab6232d574089fe58e890ee7700","modified":1487063127074},{"_id":"public/2016/04/23/1.3-web-basic/index.html","hash":"08936b0323eca19e99a4853ddf8dd2ba0f34c1a7","modified":1487063127074},{"_id":"public/2016/04/23/1.2-learn-language/index.html","hash":"483a96d5c93be9fb84b3fbea8e62fcf75bfac298","modified":1487063127074},{"_id":"public/2016/04/22/1.1.3-env-linux/index.html","hash":"611c6d88701b1474dc2ad12a84d799f18f705737","modified":1487063127074},{"_id":"public/2016/04/22/1.1.2-env-windows/index.html","hash":"88acf6ac11e43086211f977cc6290bedeba4d1b4","modified":1487063127074},{"_id":"public/2016/04/22/1.1.1-env-osx/index.html","hash":"ac190fcc65e658161eccbdb73514a5423e09b053","modified":1487063127074},{"_id":"public/2016/04/21/1.1.0-tool/index.html","hash":"46b295d0636d124c9201af89ea5b2d677a95cd6a","modified":1487063127074},{"_id":"public/2016/04/20/1.1.0-setup/index.html","hash":"23377cb9814f38ae2931ae4e071ff5939bb25913","modified":1487063127074},{"_id":"public/2016/04/20/1.0/index.html","hash":"c4d21fac986c1b57f2ea84c542a30b3df88c8c88","modified":1487063127074},{"_id":"public/page/3/index.html","hash":"14509ce9fb565ba8cf3ebb6a58f068b3c244e1a9","modified":1487063127074},{"_id":"public/page/4/index.html","hash":"1d4da1001ec394820e2f69c4e42e6a79609cb835","modified":1487063127074},{"_id":"public/page/5/index.html","hash":"33249c25b2b2ba73bc0d53afeec98899c7c6a087","modified":1487063127074},{"_id":"public/page/6/index.html","hash":"9c53f9d762ddb91cbf8719cc0cdc83281aaca3f8","modified":1487063127074},{"_id":"public/page/7/index.html","hash":"0a4fa082a86eecd2a83769a0bc6039dcfb330c17","modified":1487063127074},{"_id":"public/page/8/index.html","hash":"0aef77071724232553192f52e9e51c176da60377","modified":1487063127074},{"_id":"public/images/old_default_avatar.jpg","hash":"6c5db2d64774e5a009853a915d163fa2f713e425","modified":1487063127638}],"Category":[],"Data":[],"Page":[{"title":"tags","date":"2016-01-16T07:39:01.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"title: tags\ndate: 2016-01-16 15:39:01\ntype: \"tags\"\n---\n","updated":"2016-03-02T14:18:07.222Z","path":"tags/index.html","_id":"cijgvit5b0001zp8g16j8oz2u","comments":1,"layout":"page","content":"","excerpt":"","more":""}],"Post":[{"title":"Docker - 关于Dockerfile的一些笔记","date":"2015-10-30T13:45:08.000Z","_content":"\nDocker 这种新的容器技术最近一年可谓热得发紫，前阵子去上海参加 PHP Conference China 2015 的时候，来自七牛的技术朋友在一个关于\"SaaS 产品交付探索\"的主题演讲中也介绍了 Docker。从上海回来之后，我开始尝试在自己的项目中使用 Docker 来搭建节省磁盘空间和扩展性良好的开发环境。\n\n​\n\n\n在 Docker 中，Dockerfile 是一个镜像的表示，使用 Dockerfile 可以允许用户创建自定义的镜像，通过 Dockerfile 来描述构建镜像的步骤，并自动构建一个容器。\n\n\n\n# 基本结构\n\n\n\nDockerfile 由一行行命令语句组成，并且支持以 # 开头的注释行。\n\n一般的，Dockerfile 分为四部分：基础镜像信息、维护者信息、镜像操作指令和容器启动时执行指令。\n\n<!-- more --> \n\n例如\n\n``` \n\n# This dockerfile uses the ubuntu image\n\n# VERSION 2 - EDITION 1\n\n# Author: docker_user\n\n# Command format: Instruction [arguments / command] ..\n\n\n\n# Base image to use, this must be set as the first line\n\nFROM ubuntu\n\n\n\n# Maintainer: docker_user <docker_user at email.com> (@docker_user)\n\nMAINTAINER docker_user docker_user@email.com\n\n\n\n# Commands to update the image\n\nRUN echo \"deb http://archive.ubuntu.com/ubuntu/ raring main universe\" >> /etc/apt/sources.list\n\nRUN apt-get update && apt-get install -y nginx\n\nRUN echo \"\\ndaemon off;\" >> /etc/nginx/nginx.conf\n\n\n\n# Commands when creating a new container\n\nCMD /usr/sbin/nginx\n\n```\n\n其中，一开始必须指明所基于的镜像名称，接下来推荐说明维护者信息。\n\n\n\n后面则是镜像操作指令，例如 RUN 指令，RUN 指令将对镜像执行跟随的命令。每运行一条 RUN 指令，镜像添加新的一层，并提交。\n\n\n\n最后是 CMD 指令，来指定运行容器时的操作命令。\n\n下面是一个更复杂的例子\n\n\n\n```\n\n# Nginx\n\n#\n\n# VERSION               0.0.1\n\n\n\nFROM      ubuntu\n\nMAINTAINER Victor Vieux <victor@docker.com>\n\n\n\nRUN apt-get update && apt-get install -y inotify-tools nginx apache2 openssh-server\n\n\n\n# Firefox over VNC\n\n#\n\n# VERSION               0.3\n\n\n\nFROM ubuntu\n\n\n\n# Install vnc, xvfb in order to create a 'fake' display and firefox\n\nRUN apt-get update && apt-get install -y x11vnc xvfb firefox\n\nRUN mkdir /.vnc\n\n# Setup a password\n\nRUN x11vnc -storepasswd 1234 ~/.vnc/passwd\n\n# Autostart firefox (might not be the best way, but it does the trick)\n\nRUN bash -c 'echo \"firefox\" >> /.bashrc'\n\n\n\nEXPOSE 5900\n\nCMD    [\"x11vnc\", \"-forever\", \"-usepw\", \"-create\"]\n\n\n\n# Multiple images example\n\n#\n\n# VERSION               0.1\n\n\n\nFROM ubuntu\n\nRUN echo foo > bar\n\n# Will output something like ===> 907ad6c2736f\n\n\n\nFROM ubuntu\n\nRUN echo moo > oink\n\n# Will output something like ===> 695d7793cbe4\n\n\n\n# You᾿ll now have two images, 907ad6c2736f with /bar, and 695d7793cbe4 with\n\n# /oink.\n\n```\n\n\n\n# 指令\n\n\n\n指令的一般格式为 INSTRUCTION arguments，指令包括 FROM、MAINTAINER、RUN 等。\n\n\n\n## FROM\n\n\n\n格式为 FROM `<image>` 或 FROM `<image>:<tag>` 。\n\n第一条指令必须为 FROM 指令。并且，如果在同一个Dockerfile中创建多个镜像时，可以使用多个 FROM 指令（每个镜像一次）。\n\n\n\n## MAINTAINER\n\n\n\n格式为 MAINTAINER `<name>`，指定维护者信息。\n\n\n\n## RUN\n\n\n\n格式为 RUN `<command>` 或 RUN [\"executable\", \"param1\", \"param2\"]。\n\n\n\n前者将在 shell 终端中运行命令，即 /bin/sh -c；后者则使用 exec 执行。指定使用其它终端可以通过第二种方式实现，例如 RUN [\"/bin/bash\", \"-c\", \"echo hello\"]。\n\n\n\n每条 RUN 指令将在当前镜像基础上执行指定命令，并提交为新的镜像。当命令较长时可以使用 \\ 来换行。\n\n\n\n## CMD\n\n\n\n支持三种格式\n\n* CMD [\"executable\",\"param1\",\"param2\"] 使用 exec 执行，推荐方式；\n\n* CMD command param1 param2 在 /bin/sh 中执行，提供给需要交互的应用；\n\n* CMD [\"param1\",\"param2\"] 提供给 ENTRYPOINT 的默认参数；\n\n\n\n指定启动容器时执行的命令，每个 Dockerfile 只能有一条 CMD 命令。如果指定了多条命令，只有最后一条会被执行。\n\n\n\n如果用户启动容器时候指定了运行的命令，则会覆盖掉 CMD 指定的命令。\n\n\n\n## EXPOSE\n\n\n\n格式为 EXPOSE `<port> [<port>...]`。\n\n\n\n告诉 Docker 服务端容器暴露的端口号，供互联系统使用。在启动容器时需要通过 -P，Docker 主机会自动分配一个端口转发到指定的端口。\n\n\n\n## ENV\n\n\n\n格式为 ENV `<key> <value>`。 指定一个环境变量，会被后续 RUN 指令使用，并在容器运行时保持。\n\n\n\n例如\n\n```\n\nENV PG_MAJOR 9.3\n\nENV PG_VERSION 9.3.4\n\nRUN curl -SL http://example.com/postgres-$PG_VERSION.tar.xz | tar -xJC /usr/src/postgress && …\n\nENV PATH /usr/local/postgres-$PG_MAJOR/bin:$PATH\n\n```\n\n\n\n## ADD\n\n\n\n格式为 ADD `<src> <dest>`。\n\n\n\n该命令将复制指定的 `<src>` 到容器中的 `<dest>`。 其中 `<src>` 可以是Dockerfile所在目录的一个相对路径；也可以是一个 URL；还可以是一个 tar 文件（自动解压为目录）。\n\n\n\n## COPY\n\n\n\n格式为 COPY `<src> <dest>`。\n\n复制本地主机的 `<src>`（为 Dockerfile 所在目录的相对路径）到容器中的 `<dest>`。\n\n当使用本地目录为源目录时，推荐使用 COPY。\n\n\n\n## ENTRYPOINT\n\n\n\n两种格式：\n\n* ENTRYPOINT [\"executable\", \"param1\", \"param2\"]\n\n* ENTRYPOINT command param1 param2（shell中执行）。\n\n配置容器启动后执行的命令，并且不可被 docker run 提供的参数覆盖。\n\n每个 Dockerfile 中只能有一个 ENTRYPOINT，当指定多个时，只有最后一个起效。\n\n\n\n## VOLUME\n\n\n\n格式为 VOLUME [\"/data\"]。\n\n创建一个可以从本地主机或其他容器挂载的挂载点，一般用来存放数据库和需要保持的数据等。\n\n\n\n## USER\n\n\n\n格式为 USER daemon。\n\n指定运行容器时的用户名或 UID，后续的 RUN 也会使用指定用户。\n\n当服务不需要管理员权限时，可以通过该命令指定运行用户。并且可以在之前创建所需要的用户，例如：RUN groupadd -r postgres && useradd -r -g postgres postgres。要临时获取管理员权限可以使用 gosu，而不推荐 sudo。\n\n\n\n## WORKDIR\n\n\n\n格式为 WORKDIR /path/to/workdir。\n\n为后续的 RUN、CMD、ENTRYPOINT 指令配置工作目录。\n\n可以使用多个 WORKDIR 指令，后续命令如果参数是相对路径，则会基于之前命令指定的路径。\n\n例如\n\n```\n\nWORKDIR /a\n\nWORKDIR b\n\nWORKDIR c\n\nRUN pwd\n\n```\n\n则最终路径为 /a/b/c。\n\n\n\n## ONBUILD\n\n\n\n格式为 ONBUILD [INSTRUCTION]。\n\n配置当所创建的镜像作为其它新创建镜像的基础镜像时，所执行的操作指令。\n\n例如，Dockerfile 使用如下的内容创建了镜像 image-A。\n\n```\n\n[...]\n\nONBUILD ADD . /app/src\n\nONBUILD RUN /usr/local/bin/python-build --dir /app/src\n\n[...]\n\n```\n\n\n\n如果基于 image-A 创建新的镜像时，新的Dockerfile中使用 FROM image-A\n\n指定基础镜像时，会自动执行ONBUILD 指令内容，等价于在后面添加了两条指令。\n\n\n\n```\n\nFROM image-A\n\n\n\n#Automatically run the following\n\nADD . /app/src\n\nRUN /usr/local/bin/python-build --dir /app/src\n\n```\n\n\n\n使用 ONBUILD 指令的镜像，推荐在标签中注明，例如 ruby:1.9-onbuild。","source":"_posts/dockerfile.md","raw":"title: Docker - 关于Dockerfile的一些笔记\ndate: 2015-10-30 21:45:08\ntags:\n---\n\nDocker 这种新的容器技术最近一年可谓热得发紫，前阵子去上海参加 PHP Conference China 2015 的时候，来自七牛的技术朋友在一个关于\"SaaS 产品交付探索\"的主题演讲中也介绍了 Docker。从上海回来之后，我开始尝试在自己的项目中使用 Docker 来搭建节省磁盘空间和扩展性良好的开发环境。\n\n​\n\n\n在 Docker 中，Dockerfile 是一个镜像的表示，使用 Dockerfile 可以允许用户创建自定义的镜像，通过 Dockerfile 来描述构建镜像的步骤，并自动构建一个容器。\n\n\n\n# 基本结构\n\n\n\nDockerfile 由一行行命令语句组成，并且支持以 # 开头的注释行。\n\n一般的，Dockerfile 分为四部分：基础镜像信息、维护者信息、镜像操作指令和容器启动时执行指令。\n\n<!-- more --> \n\n例如\n\n``` \n\n# This dockerfile uses the ubuntu image\n\n# VERSION 2 - EDITION 1\n\n# Author: docker_user\n\n# Command format: Instruction [arguments / command] ..\n\n\n\n# Base image to use, this must be set as the first line\n\nFROM ubuntu\n\n\n\n# Maintainer: docker_user <docker_user at email.com> (@docker_user)\n\nMAINTAINER docker_user docker_user@email.com\n\n\n\n# Commands to update the image\n\nRUN echo \"deb http://archive.ubuntu.com/ubuntu/ raring main universe\" >> /etc/apt/sources.list\n\nRUN apt-get update && apt-get install -y nginx\n\nRUN echo \"\\ndaemon off;\" >> /etc/nginx/nginx.conf\n\n\n\n# Commands when creating a new container\n\nCMD /usr/sbin/nginx\n\n```\n\n其中，一开始必须指明所基于的镜像名称，接下来推荐说明维护者信息。\n\n\n\n后面则是镜像操作指令，例如 RUN 指令，RUN 指令将对镜像执行跟随的命令。每运行一条 RUN 指令，镜像添加新的一层，并提交。\n\n\n\n最后是 CMD 指令，来指定运行容器时的操作命令。\n\n下面是一个更复杂的例子\n\n\n\n```\n\n# Nginx\n\n#\n\n# VERSION               0.0.1\n\n\n\nFROM      ubuntu\n\nMAINTAINER Victor Vieux <victor@docker.com>\n\n\n\nRUN apt-get update && apt-get install -y inotify-tools nginx apache2 openssh-server\n\n\n\n# Firefox over VNC\n\n#\n\n# VERSION               0.3\n\n\n\nFROM ubuntu\n\n\n\n# Install vnc, xvfb in order to create a 'fake' display and firefox\n\nRUN apt-get update && apt-get install -y x11vnc xvfb firefox\n\nRUN mkdir /.vnc\n\n# Setup a password\n\nRUN x11vnc -storepasswd 1234 ~/.vnc/passwd\n\n# Autostart firefox (might not be the best way, but it does the trick)\n\nRUN bash -c 'echo \"firefox\" >> /.bashrc'\n\n\n\nEXPOSE 5900\n\nCMD    [\"x11vnc\", \"-forever\", \"-usepw\", \"-create\"]\n\n\n\n# Multiple images example\n\n#\n\n# VERSION               0.1\n\n\n\nFROM ubuntu\n\nRUN echo foo > bar\n\n# Will output something like ===> 907ad6c2736f\n\n\n\nFROM ubuntu\n\nRUN echo moo > oink\n\n# Will output something like ===> 695d7793cbe4\n\n\n\n# You᾿ll now have two images, 907ad6c2736f with /bar, and 695d7793cbe4 with\n\n# /oink.\n\n```\n\n\n\n# 指令\n\n\n\n指令的一般格式为 INSTRUCTION arguments，指令包括 FROM、MAINTAINER、RUN 等。\n\n\n\n## FROM\n\n\n\n格式为 FROM `<image>` 或 FROM `<image>:<tag>` 。\n\n第一条指令必须为 FROM 指令。并且，如果在同一个Dockerfile中创建多个镜像时，可以使用多个 FROM 指令（每个镜像一次）。\n\n\n\n## MAINTAINER\n\n\n\n格式为 MAINTAINER `<name>`，指定维护者信息。\n\n\n\n## RUN\n\n\n\n格式为 RUN `<command>` 或 RUN [\"executable\", \"param1\", \"param2\"]。\n\n\n\n前者将在 shell 终端中运行命令，即 /bin/sh -c；后者则使用 exec 执行。指定使用其它终端可以通过第二种方式实现，例如 RUN [\"/bin/bash\", \"-c\", \"echo hello\"]。\n\n\n\n每条 RUN 指令将在当前镜像基础上执行指定命令，并提交为新的镜像。当命令较长时可以使用 \\ 来换行。\n\n\n\n## CMD\n\n\n\n支持三种格式\n\n* CMD [\"executable\",\"param1\",\"param2\"] 使用 exec 执行，推荐方式；\n\n* CMD command param1 param2 在 /bin/sh 中执行，提供给需要交互的应用；\n\n* CMD [\"param1\",\"param2\"] 提供给 ENTRYPOINT 的默认参数；\n\n\n\n指定启动容器时执行的命令，每个 Dockerfile 只能有一条 CMD 命令。如果指定了多条命令，只有最后一条会被执行。\n\n\n\n如果用户启动容器时候指定了运行的命令，则会覆盖掉 CMD 指定的命令。\n\n\n\n## EXPOSE\n\n\n\n格式为 EXPOSE `<port> [<port>...]`。\n\n\n\n告诉 Docker 服务端容器暴露的端口号，供互联系统使用。在启动容器时需要通过 -P，Docker 主机会自动分配一个端口转发到指定的端口。\n\n\n\n## ENV\n\n\n\n格式为 ENV `<key> <value>`。 指定一个环境变量，会被后续 RUN 指令使用，并在容器运行时保持。\n\n\n\n例如\n\n```\n\nENV PG_MAJOR 9.3\n\nENV PG_VERSION 9.3.4\n\nRUN curl -SL http://example.com/postgres-$PG_VERSION.tar.xz | tar -xJC /usr/src/postgress && …\n\nENV PATH /usr/local/postgres-$PG_MAJOR/bin:$PATH\n\n```\n\n\n\n## ADD\n\n\n\n格式为 ADD `<src> <dest>`。\n\n\n\n该命令将复制指定的 `<src>` 到容器中的 `<dest>`。 其中 `<src>` 可以是Dockerfile所在目录的一个相对路径；也可以是一个 URL；还可以是一个 tar 文件（自动解压为目录）。\n\n\n\n## COPY\n\n\n\n格式为 COPY `<src> <dest>`。\n\n复制本地主机的 `<src>`（为 Dockerfile 所在目录的相对路径）到容器中的 `<dest>`。\n\n当使用本地目录为源目录时，推荐使用 COPY。\n\n\n\n## ENTRYPOINT\n\n\n\n两种格式：\n\n* ENTRYPOINT [\"executable\", \"param1\", \"param2\"]\n\n* ENTRYPOINT command param1 param2（shell中执行）。\n\n配置容器启动后执行的命令，并且不可被 docker run 提供的参数覆盖。\n\n每个 Dockerfile 中只能有一个 ENTRYPOINT，当指定多个时，只有最后一个起效。\n\n\n\n## VOLUME\n\n\n\n格式为 VOLUME [\"/data\"]。\n\n创建一个可以从本地主机或其他容器挂载的挂载点，一般用来存放数据库和需要保持的数据等。\n\n\n\n## USER\n\n\n\n格式为 USER daemon。\n\n指定运行容器时的用户名或 UID，后续的 RUN 也会使用指定用户。\n\n当服务不需要管理员权限时，可以通过该命令指定运行用户。并且可以在之前创建所需要的用户，例如：RUN groupadd -r postgres && useradd -r -g postgres postgres。要临时获取管理员权限可以使用 gosu，而不推荐 sudo。\n\n\n\n## WORKDIR\n\n\n\n格式为 WORKDIR /path/to/workdir。\n\n为后续的 RUN、CMD、ENTRYPOINT 指令配置工作目录。\n\n可以使用多个 WORKDIR 指令，后续命令如果参数是相对路径，则会基于之前命令指定的路径。\n\n例如\n\n```\n\nWORKDIR /a\n\nWORKDIR b\n\nWORKDIR c\n\nRUN pwd\n\n```\n\n则最终路径为 /a/b/c。\n\n\n\n## ONBUILD\n\n\n\n格式为 ONBUILD [INSTRUCTION]。\n\n配置当所创建的镜像作为其它新创建镜像的基础镜像时，所执行的操作指令。\n\n例如，Dockerfile 使用如下的内容创建了镜像 image-A。\n\n```\n\n[...]\n\nONBUILD ADD . /app/src\n\nONBUILD RUN /usr/local/bin/python-build --dir /app/src\n\n[...]\n\n```\n\n\n\n如果基于 image-A 创建新的镜像时，新的Dockerfile中使用 FROM image-A\n\n指定基础镜像时，会自动执行ONBUILD 指令内容，等价于在后面添加了两条指令。\n\n\n\n```\n\nFROM image-A\n\n\n\n#Automatically run the following\n\nADD . /app/src\n\nRUN /usr/local/bin/python-build --dir /app/src\n\n```\n\n\n\n使用 ONBUILD 指令的镜像，推荐在标签中注明，例如 ruby:1.9-onbuild。","slug":"dockerfile","published":1,"updated":"2016-03-02T14:18:07.218Z","_id":"cijgvit450000zp8gv3y1pfr0","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Docker 这种新的容器技术最近一年可谓热得发紫，前阵子去上海参加 PHP Conference China 2015 的时候，来自七牛的技术朋友在一个关于”SaaS 产品交付探索”的主题演讲中也介绍了 Docker。从上海回来之后，我开始尝试在自己的项目中使用 Docker 来搭建节省磁盘空间和扩展性良好的开发环境。</p>\n<p>​</p>\n<p>在 Docker 中，Dockerfile 是一个镜像的表示，使用 Dockerfile 可以允许用户创建自定义的镜像，通过 Dockerfile 来描述构建镜像的步骤，并自动构建一个容器。</p>\n<h1 id=\"基本结构\"><a href=\"#基本结构\" class=\"headerlink\" title=\"基本结构\"></a>基本结构</h1><p>Dockerfile 由一行行命令语句组成，并且支持以 # 开头的注释行。</p>\n<p>一般的，Dockerfile 分为四部分：基础镜像信息、维护者信息、镜像操作指令和容器启动时执行指令。</p>\n<a id=\"more\"></a> \n<p>例如</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># This dockerfile uses the ubuntu image</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># VERSION 2 - EDITION 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Author: docker_user</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Command format: Instruction [arguments / command] ..</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Base image to use, this must be set as the first line</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> ubuntu</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Maintainer: docker_user &lt;docker_user at email.com&gt; (@docker_user)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">MAINTAINER</span> docker_user docker_user@email.com</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Commands to update the image</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">RUN</span> <span class=\"bash\"><span class=\"built_in\">echo</span> <span class=\"string\">\"deb http://archive.ubuntu.com/ubuntu/ raring main universe\"</span> &gt;&gt; /etc/apt/sources.list</span><br><span class=\"line\"></span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span> <span class=\"bash\">apt-get update &amp;&amp; apt-get install -y nginx</span><br><span class=\"line\"></span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span> <span class=\"bash\"><span class=\"built_in\">echo</span> <span class=\"string\">\"\\ndaemon off;\"</span> &gt;&gt; /etc/nginx/nginx.conf</span><br><span class=\"line\"></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Commands when creating a new container</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CMD</span> <span class=\"bash\">/usr/sbin/nginx</span></span><br></pre></td></tr></table></figure>\n<p>其中，一开始必须指明所基于的镜像名称，接下来推荐说明维护者信息。</p>\n<p>后面则是镜像操作指令，例如 RUN 指令，RUN 指令将对镜像执行跟随的命令。每运行一条 RUN 指令，镜像添加新的一层，并提交。</p>\n<p>最后是 CMD 指令，来指定运行容器时的操作命令。</p>\n<p>下面是一个更复杂的例子</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Nginx</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># VERSION               0.0.1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">FROM</span>      ubuntu</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">MAINTAINER</span> Victor Vieux &lt;victor@docker.com&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">RUN</span> <span class=\"bash\">apt-get update &amp;&amp; apt-get install -y inotify-tools nginx apache2 openssh-server</span><br><span class=\"line\"></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Firefox over VNC</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># VERSION               0.3</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> ubuntu</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Install vnc, xvfb in order to create a 'fake' display and firefox</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">RUN</span> <span class=\"bash\">apt-get update &amp;&amp; apt-get install -y x11vnc xvfb firefox</span><br><span class=\"line\"></span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span> <span class=\"bash\">mkdir /.vnc</span><br><span class=\"line\"></span></span><br><span class=\"line\"><span class=\"comment\"># Setup a password</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">RUN</span> <span class=\"bash\">x11vnc -storepasswd 1234 ~/.vnc/passwd</span><br><span class=\"line\"></span></span><br><span class=\"line\"><span class=\"comment\"># Autostart firefox (might not be the best way, but it does the trick)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">RUN</span> <span class=\"bash\">bash -c <span class=\"string\">'echo \"firefox\" &gt;&gt; /.bashrc'</span></span><br><span class=\"line\"></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">EXPOSE</span> <span class=\"number\">5900</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CMD</span>    <span class=\"bash\">[<span class=\"string\">\"x11vnc\"</span>, <span class=\"string\">\"-forever\"</span>, <span class=\"string\">\"-usepw\"</span>, <span class=\"string\">\"-create\"</span>]</span><br><span class=\"line\"></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Multiple images example</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># VERSION               0.1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> ubuntu</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">RUN</span> <span class=\"bash\"><span class=\"built_in\">echo</span> foo &gt; bar</span><br><span class=\"line\"></span></span><br><span class=\"line\"><span class=\"comment\"># Will output something like ===&gt; 907ad6c2736f</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> ubuntu</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">RUN</span> <span class=\"bash\"><span class=\"built_in\">echo</span> moo &gt; oink</span><br><span class=\"line\"></span></span><br><span class=\"line\"><span class=\"comment\"># Will output something like ===&gt; 695d7793cbe4</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># You᾿ll now have two images, 907ad6c2736f with /bar, and 695d7793cbe4 with</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># /oink.</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"指令\"><a href=\"#指令\" class=\"headerlink\" title=\"指令\"></a>指令</h1><p>指令的一般格式为 INSTRUCTION arguments，指令包括 FROM、MAINTAINER、RUN 等。</p>\n<h2 id=\"FROM\"><a href=\"#FROM\" class=\"headerlink\" title=\"FROM\"></a>FROM</h2><p>格式为 FROM <code>&lt;image&gt;</code> 或 FROM <code>&lt;image&gt;:&lt;tag&gt;</code> 。</p>\n<p>第一条指令必须为 FROM 指令。并且，如果在同一个Dockerfile中创建多个镜像时，可以使用多个 FROM 指令（每个镜像一次）。</p>\n<h2 id=\"MAINTAINER\"><a href=\"#MAINTAINER\" class=\"headerlink\" title=\"MAINTAINER\"></a>MAINTAINER</h2><p>格式为 MAINTAINER <code>&lt;name&gt;</code>，指定维护者信息。</p>\n<h2 id=\"RUN\"><a href=\"#RUN\" class=\"headerlink\" title=\"RUN\"></a>RUN</h2><p>格式为 RUN <code>&lt;command&gt;</code> 或 RUN [“executable”, “param1”, “param2”]。</p>\n<p>前者将在 shell 终端中运行命令，即 /bin/sh -c；后者则使用 exec 执行。指定使用其它终端可以通过第二种方式实现，例如 RUN [“/bin/bash”, “-c”, “echo hello”]。</p>\n<p>每条 RUN 指令将在当前镜像基础上执行指定命令，并提交为新的镜像。当命令较长时可以使用 \\ 来换行。</p>\n<h2 id=\"CMD\"><a href=\"#CMD\" class=\"headerlink\" title=\"CMD\"></a>CMD</h2><p>支持三种格式</p>\n<ul>\n<li><p>CMD [“executable”,”param1”,”param2”] 使用 exec 执行，推荐方式；</p>\n</li>\n<li><p>CMD command param1 param2 在 /bin/sh 中执行，提供给需要交互的应用；</p>\n</li>\n<li><p>CMD [“param1”,”param2”] 提供给 ENTRYPOINT 的默认参数；</p>\n</li>\n</ul>\n<p>指定启动容器时执行的命令，每个 Dockerfile 只能有一条 CMD 命令。如果指定了多条命令，只有最后一条会被执行。</p>\n<p>如果用户启动容器时候指定了运行的命令，则会覆盖掉 CMD 指定的命令。</p>\n<h2 id=\"EXPOSE\"><a href=\"#EXPOSE\" class=\"headerlink\" title=\"EXPOSE\"></a>EXPOSE</h2><p>格式为 EXPOSE <code>&lt;port&gt; [&lt;port&gt;...]</code>。</p>\n<p>告诉 Docker 服务端容器暴露的端口号，供互联系统使用。在启动容器时需要通过 -P，Docker 主机会自动分配一个端口转发到指定的端口。</p>\n<h2 id=\"ENV\"><a href=\"#ENV\" class=\"headerlink\" title=\"ENV\"></a>ENV</h2><p>格式为 ENV <code>&lt;key&gt; &lt;value&gt;</code>。 指定一个环境变量，会被后续 RUN 指令使用，并在容器运行时保持。</p>\n<p>例如</p>\n<figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">ENV PG_MAJOR <span class=\"number\">9.3</span></span><br><span class=\"line\"></span><br><span class=\"line\">ENV PG_VERSION <span class=\"number\">9.3</span>.<span class=\"number\">4</span></span><br><span class=\"line\"></span><br><span class=\"line\">RUN curl -SL http://example.com/postgres-$PG_VERSION.tar.xz | tar -xJC /usr/src/postgress &amp;&amp; …</span><br><span class=\"line\"></span><br><span class=\"line\">ENV PATH /usr/local/postgres-$PG_MAJOR/bin:$PATH</span><br></pre></td></tr></table></figure>\n<h2 id=\"ADD\"><a href=\"#ADD\" class=\"headerlink\" title=\"ADD\"></a>ADD</h2><p>格式为 ADD <code>&lt;src&gt; &lt;dest&gt;</code>。</p>\n<p>该命令将复制指定的 <code>&lt;src&gt;</code> 到容器中的 <code>&lt;dest&gt;</code>。 其中 <code>&lt;src&gt;</code> 可以是Dockerfile所在目录的一个相对路径；也可以是一个 URL；还可以是一个 tar 文件（自动解压为目录）。</p>\n<h2 id=\"COPY\"><a href=\"#COPY\" class=\"headerlink\" title=\"COPY\"></a>COPY</h2><p>格式为 COPY <code>&lt;src&gt; &lt;dest&gt;</code>。</p>\n<p>复制本地主机的 <code>&lt;src&gt;</code>（为 Dockerfile 所在目录的相对路径）到容器中的 <code>&lt;dest&gt;</code>。</p>\n<p>当使用本地目录为源目录时，推荐使用 COPY。</p>\n<h2 id=\"ENTRYPOINT\"><a href=\"#ENTRYPOINT\" class=\"headerlink\" title=\"ENTRYPOINT\"></a>ENTRYPOINT</h2><p>两种格式：</p>\n<ul>\n<li><p>ENTRYPOINT [“executable”, “param1”, “param2”]</p>\n</li>\n<li><p>ENTRYPOINT command param1 param2（shell中执行）。</p>\n</li>\n</ul>\n<p>配置容器启动后执行的命令，并且不可被 docker run 提供的参数覆盖。</p>\n<p>每个 Dockerfile 中只能有一个 ENTRYPOINT，当指定多个时，只有最后一个起效。</p>\n<h2 id=\"VOLUME\"><a href=\"#VOLUME\" class=\"headerlink\" title=\"VOLUME\"></a>VOLUME</h2><p>格式为 VOLUME [“/data”]。</p>\n<p>创建一个可以从本地主机或其他容器挂载的挂载点，一般用来存放数据库和需要保持的数据等。</p>\n<h2 id=\"USER\"><a href=\"#USER\" class=\"headerlink\" title=\"USER\"></a>USER</h2><p>格式为 USER daemon。</p>\n<p>指定运行容器时的用户名或 UID，后续的 RUN 也会使用指定用户。</p>\n<p>当服务不需要管理员权限时，可以通过该命令指定运行用户。并且可以在之前创建所需要的用户，例如：RUN groupadd -r postgres &amp;&amp; useradd -r -g postgres postgres。要临时获取管理员权限可以使用 gosu，而不推荐 sudo。</p>\n<h2 id=\"WORKDIR\"><a href=\"#WORKDIR\" class=\"headerlink\" title=\"WORKDIR\"></a>WORKDIR</h2><p>格式为 WORKDIR /path/to/workdir。</p>\n<p>为后续的 RUN、CMD、ENTRYPOINT 指令配置工作目录。</p>\n<p>可以使用多个 WORKDIR 指令，后续命令如果参数是相对路径，则会基于之前命令指定的路径。</p>\n<p>例如</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span> <span class=\"bash\">/a</span><br><span class=\"line\"></span></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span> <span class=\"bash\">b</span><br><span class=\"line\"></span></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span> <span class=\"bash\">c</span><br><span class=\"line\"></span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span> <span class=\"bash\"><span class=\"built_in\">pwd</span></span></span><br></pre></td></tr></table></figure>\n<p>则最终路径为 /a/b/c。</p>\n<h2 id=\"ONBUILD\"><a href=\"#ONBUILD\" class=\"headerlink\" title=\"ONBUILD\"></a>ONBUILD</h2><p>格式为 ONBUILD [INSTRUCTION]。</p>\n<p>配置当所创建的镜像作为其它新创建镜像的基础镜像时，所执行的操作指令。</p>\n<p>例如，Dockerfile 使用如下的内容创建了镜像 image-A。</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[...]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ONBUILD</span> <span class=\"keyword\">ADD</span> <span class=\"bash\">. /app/src</span><br><span class=\"line\"></span></span><br><span class=\"line\"><span class=\"keyword\">ONBUILD</span> <span class=\"keyword\">RUN</span> <span class=\"bash\">/usr/<span class=\"built_in\">local</span>/bin/python-build --dir /app/src</span><br><span class=\"line\"></span></span><br><span class=\"line\">[...]</span><br></pre></td></tr></table></figure>\n<p>如果基于 image-A 创建新的镜像时，新的Dockerfile中使用 FROM image-A</p>\n<p>指定基础镜像时，会自动执行ONBUILD 指令内容，等价于在后面添加了两条指令。</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> image-A</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Automatically run the following</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ADD</span> <span class=\"bash\">. /app/src</span><br><span class=\"line\"></span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span> <span class=\"bash\">/usr/<span class=\"built_in\">local</span>/bin/python-build --dir /app/src</span></span><br></pre></td></tr></table></figure>\n<p>使用 ONBUILD 指令的镜像，推荐在标签中注明，例如 ruby:1.9-onbuild。</p>\n","excerpt":"<p>Docker 这种新的容器技术最近一年可谓热得发紫，前阵子去上海参加 PHP Conference China 2015 的时候，来自七牛的技术朋友在一个关于”SaaS 产品交付探索”的主题演讲中也介绍了 Docker。从上海回来之后，我开始尝试在自己的项目中使用 Docker 来搭建节省磁盘空间和扩展性良好的开发环境。</p>\n<p>​</p>\n<p>在 Docker 中，Dockerfile 是一个镜像的表示，使用 Dockerfile 可以允许用户创建自定义的镜像，通过 Dockerfile 来描述构建镜像的步骤，并自动构建一个容器。</p>\n<h1 id=\"基本结构\"><a href=\"#基本结构\" class=\"headerlink\" title=\"基本结构\"></a>基本结构</h1><p>Dockerfile 由一行行命令语句组成，并且支持以 # 开头的注释行。</p>\n<p>一般的，Dockerfile 分为四部分：基础镜像信息、维护者信息、镜像操作指令和容器启动时执行指令。</p>","more":"<p>例如</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># This dockerfile uses the ubuntu image</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># VERSION 2 - EDITION 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Author: docker_user</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Command format: Instruction [arguments / command] ..</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Base image to use, this must be set as the first line</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> ubuntu</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Maintainer: docker_user &lt;docker_user at email.com&gt; (@docker_user)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">MAINTAINER</span> docker_user docker_user@email.com</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Commands to update the image</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">RUN</span> <span class=\"bash\"><span class=\"built_in\">echo</span> <span class=\"string\">\"deb http://archive.ubuntu.com/ubuntu/ raring main universe\"</span> &gt;&gt; /etc/apt/sources.list</span><br><span class=\"line\"></span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span> <span class=\"bash\">apt-get update &amp;&amp; apt-get install -y nginx</span><br><span class=\"line\"></span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span> <span class=\"bash\"><span class=\"built_in\">echo</span> <span class=\"string\">\"\\ndaemon off;\"</span> &gt;&gt; /etc/nginx/nginx.conf</span><br><span class=\"line\"></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Commands when creating a new container</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CMD</span> <span class=\"bash\">/usr/sbin/nginx</span></span><br></pre></td></tr></table></figure>\n<p>其中，一开始必须指明所基于的镜像名称，接下来推荐说明维护者信息。</p>\n<p>后面则是镜像操作指令，例如 RUN 指令，RUN 指令将对镜像执行跟随的命令。每运行一条 RUN 指令，镜像添加新的一层，并提交。</p>\n<p>最后是 CMD 指令，来指定运行容器时的操作命令。</p>\n<p>下面是一个更复杂的例子</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Nginx</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># VERSION               0.0.1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">FROM</span>      ubuntu</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">MAINTAINER</span> Victor Vieux &lt;victor@docker.com&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">RUN</span> <span class=\"bash\">apt-get update &amp;&amp; apt-get install -y inotify-tools nginx apache2 openssh-server</span><br><span class=\"line\"></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Firefox over VNC</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># VERSION               0.3</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> ubuntu</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Install vnc, xvfb in order to create a 'fake' display and firefox</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">RUN</span> <span class=\"bash\">apt-get update &amp;&amp; apt-get install -y x11vnc xvfb firefox</span><br><span class=\"line\"></span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span> <span class=\"bash\">mkdir /.vnc</span><br><span class=\"line\"></span></span><br><span class=\"line\"><span class=\"comment\"># Setup a password</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">RUN</span> <span class=\"bash\">x11vnc -storepasswd 1234 ~/.vnc/passwd</span><br><span class=\"line\"></span></span><br><span class=\"line\"><span class=\"comment\"># Autostart firefox (might not be the best way, but it does the trick)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">RUN</span> <span class=\"bash\">bash -c <span class=\"string\">'echo \"firefox\" &gt;&gt; /.bashrc'</span></span><br><span class=\"line\"></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">EXPOSE</span> <span class=\"number\">5900</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CMD</span>    <span class=\"bash\">[<span class=\"string\">\"x11vnc\"</span>, <span class=\"string\">\"-forever\"</span>, <span class=\"string\">\"-usepw\"</span>, <span class=\"string\">\"-create\"</span>]</span><br><span class=\"line\"></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Multiple images example</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># VERSION               0.1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> ubuntu</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">RUN</span> <span class=\"bash\"><span class=\"built_in\">echo</span> foo &gt; bar</span><br><span class=\"line\"></span></span><br><span class=\"line\"><span class=\"comment\"># Will output something like ===&gt; 907ad6c2736f</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> ubuntu</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">RUN</span> <span class=\"bash\"><span class=\"built_in\">echo</span> moo &gt; oink</span><br><span class=\"line\"></span></span><br><span class=\"line\"><span class=\"comment\"># Will output something like ===&gt; 695d7793cbe4</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># You᾿ll now have two images, 907ad6c2736f with /bar, and 695d7793cbe4 with</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># /oink.</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"指令\"><a href=\"#指令\" class=\"headerlink\" title=\"指令\"></a>指令</h1><p>指令的一般格式为 INSTRUCTION arguments，指令包括 FROM、MAINTAINER、RUN 等。</p>\n<h2 id=\"FROM\"><a href=\"#FROM\" class=\"headerlink\" title=\"FROM\"></a>FROM</h2><p>格式为 FROM <code>&lt;image&gt;</code> 或 FROM <code>&lt;image&gt;:&lt;tag&gt;</code> 。</p>\n<p>第一条指令必须为 FROM 指令。并且，如果在同一个Dockerfile中创建多个镜像时，可以使用多个 FROM 指令（每个镜像一次）。</p>\n<h2 id=\"MAINTAINER\"><a href=\"#MAINTAINER\" class=\"headerlink\" title=\"MAINTAINER\"></a>MAINTAINER</h2><p>格式为 MAINTAINER <code>&lt;name&gt;</code>，指定维护者信息。</p>\n<h2 id=\"RUN\"><a href=\"#RUN\" class=\"headerlink\" title=\"RUN\"></a>RUN</h2><p>格式为 RUN <code>&lt;command&gt;</code> 或 RUN [“executable”, “param1”, “param2”]。</p>\n<p>前者将在 shell 终端中运行命令，即 /bin/sh -c；后者则使用 exec 执行。指定使用其它终端可以通过第二种方式实现，例如 RUN [“/bin/bash”, “-c”, “echo hello”]。</p>\n<p>每条 RUN 指令将在当前镜像基础上执行指定命令，并提交为新的镜像。当命令较长时可以使用 \\ 来换行。</p>\n<h2 id=\"CMD\"><a href=\"#CMD\" class=\"headerlink\" title=\"CMD\"></a>CMD</h2><p>支持三种格式</p>\n<ul>\n<li><p>CMD [“executable”,”param1”,”param2”] 使用 exec 执行，推荐方式；</p>\n</li>\n<li><p>CMD command param1 param2 在 /bin/sh 中执行，提供给需要交互的应用；</p>\n</li>\n<li><p>CMD [“param1”,”param2”] 提供给 ENTRYPOINT 的默认参数；</p>\n</li>\n</ul>\n<p>指定启动容器时执行的命令，每个 Dockerfile 只能有一条 CMD 命令。如果指定了多条命令，只有最后一条会被执行。</p>\n<p>如果用户启动容器时候指定了运行的命令，则会覆盖掉 CMD 指定的命令。</p>\n<h2 id=\"EXPOSE\"><a href=\"#EXPOSE\" class=\"headerlink\" title=\"EXPOSE\"></a>EXPOSE</h2><p>格式为 EXPOSE <code>&lt;port&gt; [&lt;port&gt;...]</code>。</p>\n<p>告诉 Docker 服务端容器暴露的端口号，供互联系统使用。在启动容器时需要通过 -P，Docker 主机会自动分配一个端口转发到指定的端口。</p>\n<h2 id=\"ENV\"><a href=\"#ENV\" class=\"headerlink\" title=\"ENV\"></a>ENV</h2><p>格式为 ENV <code>&lt;key&gt; &lt;value&gt;</code>。 指定一个环境变量，会被后续 RUN 指令使用，并在容器运行时保持。</p>\n<p>例如</p>\n<figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">ENV PG_MAJOR <span class=\"number\">9.3</span></span><br><span class=\"line\"></span><br><span class=\"line\">ENV PG_VERSION <span class=\"number\">9.3</span>.<span class=\"number\">4</span></span><br><span class=\"line\"></span><br><span class=\"line\">RUN curl -SL http://example.com/postgres-$PG_VERSION.tar.xz | tar -xJC /usr/src/postgress &amp;&amp; …</span><br><span class=\"line\"></span><br><span class=\"line\">ENV PATH /usr/local/postgres-$PG_MAJOR/bin:$PATH</span><br></pre></td></tr></table></figure>\n<h2 id=\"ADD\"><a href=\"#ADD\" class=\"headerlink\" title=\"ADD\"></a>ADD</h2><p>格式为 ADD <code>&lt;src&gt; &lt;dest&gt;</code>。</p>\n<p>该命令将复制指定的 <code>&lt;src&gt;</code> 到容器中的 <code>&lt;dest&gt;</code>。 其中 <code>&lt;src&gt;</code> 可以是Dockerfile所在目录的一个相对路径；也可以是一个 URL；还可以是一个 tar 文件（自动解压为目录）。</p>\n<h2 id=\"COPY\"><a href=\"#COPY\" class=\"headerlink\" title=\"COPY\"></a>COPY</h2><p>格式为 COPY <code>&lt;src&gt; &lt;dest&gt;</code>。</p>\n<p>复制本地主机的 <code>&lt;src&gt;</code>（为 Dockerfile 所在目录的相对路径）到容器中的 <code>&lt;dest&gt;</code>。</p>\n<p>当使用本地目录为源目录时，推荐使用 COPY。</p>\n<h2 id=\"ENTRYPOINT\"><a href=\"#ENTRYPOINT\" class=\"headerlink\" title=\"ENTRYPOINT\"></a>ENTRYPOINT</h2><p>两种格式：</p>\n<ul>\n<li><p>ENTRYPOINT [“executable”, “param1”, “param2”]</p>\n</li>\n<li><p>ENTRYPOINT command param1 param2（shell中执行）。</p>\n</li>\n</ul>\n<p>配置容器启动后执行的命令，并且不可被 docker run 提供的参数覆盖。</p>\n<p>每个 Dockerfile 中只能有一个 ENTRYPOINT，当指定多个时，只有最后一个起效。</p>\n<h2 id=\"VOLUME\"><a href=\"#VOLUME\" class=\"headerlink\" title=\"VOLUME\"></a>VOLUME</h2><p>格式为 VOLUME [“/data”]。</p>\n<p>创建一个可以从本地主机或其他容器挂载的挂载点，一般用来存放数据库和需要保持的数据等。</p>\n<h2 id=\"USER\"><a href=\"#USER\" class=\"headerlink\" title=\"USER\"></a>USER</h2><p>格式为 USER daemon。</p>\n<p>指定运行容器时的用户名或 UID，后续的 RUN 也会使用指定用户。</p>\n<p>当服务不需要管理员权限时，可以通过该命令指定运行用户。并且可以在之前创建所需要的用户，例如：RUN groupadd -r postgres &amp;&amp; useradd -r -g postgres postgres。要临时获取管理员权限可以使用 gosu，而不推荐 sudo。</p>\n<h2 id=\"WORKDIR\"><a href=\"#WORKDIR\" class=\"headerlink\" title=\"WORKDIR\"></a>WORKDIR</h2><p>格式为 WORKDIR /path/to/workdir。</p>\n<p>为后续的 RUN、CMD、ENTRYPOINT 指令配置工作目录。</p>\n<p>可以使用多个 WORKDIR 指令，后续命令如果参数是相对路径，则会基于之前命令指定的路径。</p>\n<p>例如</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span> <span class=\"bash\">/a</span><br><span class=\"line\"></span></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span> <span class=\"bash\">b</span><br><span class=\"line\"></span></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span> <span class=\"bash\">c</span><br><span class=\"line\"></span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span> <span class=\"bash\"><span class=\"built_in\">pwd</span></span></span><br></pre></td></tr></table></figure>\n<p>则最终路径为 /a/b/c。</p>\n<h2 id=\"ONBUILD\"><a href=\"#ONBUILD\" class=\"headerlink\" title=\"ONBUILD\"></a>ONBUILD</h2><p>格式为 ONBUILD [INSTRUCTION]。</p>\n<p>配置当所创建的镜像作为其它新创建镜像的基础镜像时，所执行的操作指令。</p>\n<p>例如，Dockerfile 使用如下的内容创建了镜像 image-A。</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[...]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ONBUILD</span> <span class=\"keyword\">ADD</span> <span class=\"bash\">. /app/src</span><br><span class=\"line\"></span></span><br><span class=\"line\"><span class=\"keyword\">ONBUILD</span> <span class=\"keyword\">RUN</span> <span class=\"bash\">/usr/<span class=\"built_in\">local</span>/bin/python-build --dir /app/src</span><br><span class=\"line\"></span></span><br><span class=\"line\">[...]</span><br></pre></td></tr></table></figure>\n<p>如果基于 image-A 创建新的镜像时，新的Dockerfile中使用 FROM image-A</p>\n<p>指定基础镜像时，会自动执行ONBUILD 指令内容，等价于在后面添加了两条指令。</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> image-A</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Automatically run the following</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ADD</span> <span class=\"bash\">. /app/src</span><br><span class=\"line\"></span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span> <span class=\"bash\">/usr/<span class=\"built_in\">local</span>/bin/python-build --dir /app/src</span></span><br></pre></td></tr></table></figure>\n<p>使用 ONBUILD 指令的镜像，推荐在标签中注明，例如 ruby:1.9-onbuild。</p>"},{"title":"从输入 URL 到页面加载完成的过程中都发生了什么","date":"2015-11-10T13:14:42.000Z","_content":"\n## 根据 URL 请求页面过程\n\n说实话，这类文章网上一抓一大把，而我仍想写这篇博客，一方面是想再仔细缕一下这个过程，另一方面是希望用清晰的语言和结构来解释，也算是小小地挑战一下自己。\n\n\n\n### 过程概述\n\n* 浏览器查找域名对应的 IP 地址；\n\n* 浏览器根据 IP 地址与服务器建立 socket 连接；\n\n* 浏览器与服务器通信： 浏览器请求，服务器处理请求；\n\n* 浏览器与服务器断开连接。\n\n\n\n天啦撸，结束了？也太简单了吧。。。各位看官，不急，都说了是概述，且向下看。\n\n<!-- more --> \n\n### 根据域名查找 IP 地址\n\n#### 概念解释\n\n* IP 地址：IP 协议为互联网上的每一个网络和每一台主机分配的一个逻辑地址。IP 地址如同门牌号码，通过 IP 地址才能确定一台主机位置。服务器本质也是一台主机，想要访问某个服务器，必须先知道它的 IP 地址；\n\n* 域名（ DN ）：IP 地址由四个数字组成，中间用点号连接，在使用过程中难记忆且易输入错误，所以用我们熟悉的字母和数字组合来代替纯数字的 IP 地址，比如我们只会记住 www.baidu.com（百度域名） 而不是 220.181.112.244（百度的其中一个 IP 地址）；\n\n* DNS： 每个域名都对应一个或多个提供相同服务服务器的 IP 地址，只有知道服务器 IP 地址才能建立连接，所以需要通过 DNS 把域名解析成一个 IP 地址。\n\n\n\n知道了上面的概念，大概就知道了想要获得服务器的门牌号码，需要先将域名转换成 IP 地址。转换过程如下（以查询 www.baidu.com 的 IP 地址为例，其中2、3、4步均在上一步未查询成功的情况下进行）\n\n\n\n#### 查找过程\n\n* 浏览器搜索自己的 DNS 缓存（维护一张域名与 IP 地址的对应表）；\n\n* 搜索操作系统中的 DNS 缓存（维护一张域名与 IP 地址的对应表）；\n\n* 搜索操作系统的 hosts 文件（ Windows 环境下，维护一张域名与 IP 地址的对应表）；\n\n* 操作系统将域名发送至 LDNS（本地区域名服务器，如果你在学校接入互联网，则 LDNS 服务器就在学校，如果通过电信接入互联网，则 LDNS 服务器就在你当地的电信那里。）LDNS 查询 自己的 DNS 缓存（一般查找成功率在 80% 左右），查找成功则返回结果，失败则发起一个迭代 DNS 解析请求；\n\n  * LDNS 向 Root Name Server （根域名服务器，其虽然没有每个域名的的具体信息，但存储了负责每个域，如 com、net、org等的解析的顶级域名服务器的地址）发起请求，此处，Root Name Server 返回 com 域的顶级域名服务器的地址；\n\n  * LDNS 向 com 域的顶级域名服务器发起请求，返回 baidu.com 域名服务器地址；\n\n  * LDNS 向 baidu.com 域名服务器发起请求，得到 www.baidu.com 的 IP 地址；\n\n* LDNS 将得到的 IP 地址返回给操作系统，同时自己也将 IP 地址缓存起来；\n\n* 操作系统将 IP 地址返回给浏览器，同时自己也将 IP 地址缓存起来；\n\n* 至此，浏览器已经得到了域名对应的 IP 地址。\n\n\n\n#### 补充说明\n\n* 域名与 URL 是两个概念：域名是一台或一组服务器的名称，用来确定服务器在 Internet 上的位置；URL 是统一资源定位符，用来确定某一个文件的具体位置，例如，oulve.com 是我个人主页的域名，根据这个域名可以找到oulve的服务器，oulve.com/a/1 是 URL ，可以根据这个 URL 定位我写的第一篇博客；\n\n* IP 地址与域名不是一一对应的关系：可以把多个提供相同服务的服务器 IP 设置为同一个域名，但在同一时刻一个域名只能解析出一个 IP地址；同时，一个 IP 地址可以绑定多个域名，数量不限；\n\n\n\n### 建立连接--三次握手\n\n知道了服务器的 IP 地址，下面便开始与服务器建立连接了。\n\n\n\n通俗地讲，通信连接的建立需要经历以下三个过程：\n\n* 主机向服务器发送一个建立连接的请求（**您好，我想认识您**）；\n\n* 服务器接到请求后发送同意连接的信号（**好的，很高兴认识您**）；\n\n* 主机接到同意连接的信号后，再次向服务器发送了确认信号（**我也很高兴认识您**），自此，主机与服务器两者建立了连接。\n\n\n\n#### 补充说明\n\n* TCP 协议：三次握手的过程采用 TCP 协议，其可以保证信息传输的可靠性，三次握手过程中，若一方收不到确认信号，协议会要求重新发送信号。\n\n\n\n### 网页请求与显示\n\n当服务器与主机建立了连接之后，下面主机便与服务器进行通信。网页请求是一个单向请求的过程，即是一个主机向服务器请求数据，服务器返回相应的数据的过程。\n\n* 浏览器根据 URL 内容生成 HTTP 请求，请求中包含请求文件的位置、请求文件的方式等等；\n\n* 服务器接到请求后，会根据 HTTP 请求中的内容来决定如何获取相应的 HTML 文件；\n\n* 服务器将得到的 HTML 文件发送给浏览器；\n\n* 在浏览器还没有完全接收 HTML 文件时便开始渲染、显示网页；\n\n* 在执行 HTML 中代码时，根据需要，浏览器会继续请求图片、CSS、JavsScript等文件，过程同请求 HTML ；\n\n\n\n### 断开连接--四次挥手\n\n* 主机向服务器发送一个断开连接的请求（**不早了，我该走了**）；\n\n* 服务器接到请求后发送确认收到请求的信号（**知道了**）；\n\n* 服务器向主机发送断开通知（**我也该走了**）；\n\n* 主机接到断开通知后断开连接并反馈一个确认信号（**嗯，好的**），服务器收到确认信号后断开连接；\n\n\n\n#### 补充说明\n\n* 为什么服务器在接到断开请求时不立即同意断开：当服务器收到断开连接的请求时，可能仍然有数据未发送完毕，所有服务器先发送确认信号，等所有数据发送完毕后再同意断开。\n\n* 第四次握手后，主机发送确认信号后并没有立即断开连接，而是等待了 2 个报文传送周期，原因是：如果第四次握手的确认信息丢失，服务器将会重新发送第三次握手的断开连接的信号，而服务器发觉丢包与重新发送的断开连接到达主机的时间正好为 2 个报文传输周期。","source":"_posts/url.md","raw":"title: 从输入 URL 到页面加载完成的过程中都发生了什么\ndate: 2015-11-10 21:14:42\ntags:\n---\n\n## 根据 URL 请求页面过程\n\n说实话，这类文章网上一抓一大把，而我仍想写这篇博客，一方面是想再仔细缕一下这个过程，另一方面是希望用清晰的语言和结构来解释，也算是小小地挑战一下自己。\n\n\n\n### 过程概述\n\n* 浏览器查找域名对应的 IP 地址；\n\n* 浏览器根据 IP 地址与服务器建立 socket 连接；\n\n* 浏览器与服务器通信： 浏览器请求，服务器处理请求；\n\n* 浏览器与服务器断开连接。\n\n\n\n天啦撸，结束了？也太简单了吧。。。各位看官，不急，都说了是概述，且向下看。\n\n<!-- more --> \n\n### 根据域名查找 IP 地址\n\n#### 概念解释\n\n* IP 地址：IP 协议为互联网上的每一个网络和每一台主机分配的一个逻辑地址。IP 地址如同门牌号码，通过 IP 地址才能确定一台主机位置。服务器本质也是一台主机，想要访问某个服务器，必须先知道它的 IP 地址；\n\n* 域名（ DN ）：IP 地址由四个数字组成，中间用点号连接，在使用过程中难记忆且易输入错误，所以用我们熟悉的字母和数字组合来代替纯数字的 IP 地址，比如我们只会记住 www.baidu.com（百度域名） 而不是 220.181.112.244（百度的其中一个 IP 地址）；\n\n* DNS： 每个域名都对应一个或多个提供相同服务服务器的 IP 地址，只有知道服务器 IP 地址才能建立连接，所以需要通过 DNS 把域名解析成一个 IP 地址。\n\n\n\n知道了上面的概念，大概就知道了想要获得服务器的门牌号码，需要先将域名转换成 IP 地址。转换过程如下（以查询 www.baidu.com 的 IP 地址为例，其中2、3、4步均在上一步未查询成功的情况下进行）\n\n\n\n#### 查找过程\n\n* 浏览器搜索自己的 DNS 缓存（维护一张域名与 IP 地址的对应表）；\n\n* 搜索操作系统中的 DNS 缓存（维护一张域名与 IP 地址的对应表）；\n\n* 搜索操作系统的 hosts 文件（ Windows 环境下，维护一张域名与 IP 地址的对应表）；\n\n* 操作系统将域名发送至 LDNS（本地区域名服务器，如果你在学校接入互联网，则 LDNS 服务器就在学校，如果通过电信接入互联网，则 LDNS 服务器就在你当地的电信那里。）LDNS 查询 自己的 DNS 缓存（一般查找成功率在 80% 左右），查找成功则返回结果，失败则发起一个迭代 DNS 解析请求；\n\n  * LDNS 向 Root Name Server （根域名服务器，其虽然没有每个域名的的具体信息，但存储了负责每个域，如 com、net、org等的解析的顶级域名服务器的地址）发起请求，此处，Root Name Server 返回 com 域的顶级域名服务器的地址；\n\n  * LDNS 向 com 域的顶级域名服务器发起请求，返回 baidu.com 域名服务器地址；\n\n  * LDNS 向 baidu.com 域名服务器发起请求，得到 www.baidu.com 的 IP 地址；\n\n* LDNS 将得到的 IP 地址返回给操作系统，同时自己也将 IP 地址缓存起来；\n\n* 操作系统将 IP 地址返回给浏览器，同时自己也将 IP 地址缓存起来；\n\n* 至此，浏览器已经得到了域名对应的 IP 地址。\n\n\n\n#### 补充说明\n\n* 域名与 URL 是两个概念：域名是一台或一组服务器的名称，用来确定服务器在 Internet 上的位置；URL 是统一资源定位符，用来确定某一个文件的具体位置，例如，oulve.com 是我个人主页的域名，根据这个域名可以找到oulve的服务器，oulve.com/a/1 是 URL ，可以根据这个 URL 定位我写的第一篇博客；\n\n* IP 地址与域名不是一一对应的关系：可以把多个提供相同服务的服务器 IP 设置为同一个域名，但在同一时刻一个域名只能解析出一个 IP地址；同时，一个 IP 地址可以绑定多个域名，数量不限；\n\n\n\n### 建立连接--三次握手\n\n知道了服务器的 IP 地址，下面便开始与服务器建立连接了。\n\n\n\n通俗地讲，通信连接的建立需要经历以下三个过程：\n\n* 主机向服务器发送一个建立连接的请求（**您好，我想认识您**）；\n\n* 服务器接到请求后发送同意连接的信号（**好的，很高兴认识您**）；\n\n* 主机接到同意连接的信号后，再次向服务器发送了确认信号（**我也很高兴认识您**），自此，主机与服务器两者建立了连接。\n\n\n\n#### 补充说明\n\n* TCP 协议：三次握手的过程采用 TCP 协议，其可以保证信息传输的可靠性，三次握手过程中，若一方收不到确认信号，协议会要求重新发送信号。\n\n\n\n### 网页请求与显示\n\n当服务器与主机建立了连接之后，下面主机便与服务器进行通信。网页请求是一个单向请求的过程，即是一个主机向服务器请求数据，服务器返回相应的数据的过程。\n\n* 浏览器根据 URL 内容生成 HTTP 请求，请求中包含请求文件的位置、请求文件的方式等等；\n\n* 服务器接到请求后，会根据 HTTP 请求中的内容来决定如何获取相应的 HTML 文件；\n\n* 服务器将得到的 HTML 文件发送给浏览器；\n\n* 在浏览器还没有完全接收 HTML 文件时便开始渲染、显示网页；\n\n* 在执行 HTML 中代码时，根据需要，浏览器会继续请求图片、CSS、JavsScript等文件，过程同请求 HTML ；\n\n\n\n### 断开连接--四次挥手\n\n* 主机向服务器发送一个断开连接的请求（**不早了，我该走了**）；\n\n* 服务器接到请求后发送确认收到请求的信号（**知道了**）；\n\n* 服务器向主机发送断开通知（**我也该走了**）；\n\n* 主机接到断开通知后断开连接并反馈一个确认信号（**嗯，好的**），服务器收到确认信号后断开连接；\n\n\n\n#### 补充说明\n\n* 为什么服务器在接到断开请求时不立即同意断开：当服务器收到断开连接的请求时，可能仍然有数据未发送完毕，所有服务器先发送确认信号，等所有数据发送完毕后再同意断开。\n\n* 第四次握手后，主机发送确认信号后并没有立即断开连接，而是等待了 2 个报文传送周期，原因是：如果第四次握手的确认信息丢失，服务器将会重新发送第三次握手的断开连接的信号，而服务器发觉丢包与重新发送的断开连接到达主机的时间正好为 2 个报文传输周期。","slug":"url","published":1,"updated":"2016-03-02T14:18:07.222Z","_id":"cijgvit5f0004zp8gl45kejj3","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"根据-URL-请求页面过程\"><a href=\"#根据-URL-请求页面过程\" class=\"headerlink\" title=\"根据 URL 请求页面过程\"></a>根据 URL 请求页面过程</h2><p>说实话，这类文章网上一抓一大把，而我仍想写这篇博客，一方面是想再仔细缕一下这个过程，另一方面是希望用清晰的语言和结构来解释，也算是小小地挑战一下自己。</p>\n<h3 id=\"过程概述\"><a href=\"#过程概述\" class=\"headerlink\" title=\"过程概述\"></a>过程概述</h3><ul>\n<li><p>浏览器查找域名对应的 IP 地址；</p>\n</li>\n<li><p>浏览器根据 IP 地址与服务器建立 socket 连接；</p>\n</li>\n<li><p>浏览器与服务器通信： 浏览器请求，服务器处理请求；</p>\n</li>\n<li><p>浏览器与服务器断开连接。</p>\n</li>\n</ul>\n<p>天啦撸，结束了？也太简单了吧。。。各位看官，不急，都说了是概述，且向下看。</p>\n<a id=\"more\"></a> \n<h3 id=\"根据域名查找-IP-地址\"><a href=\"#根据域名查找-IP-地址\" class=\"headerlink\" title=\"根据域名查找 IP 地址\"></a>根据域名查找 IP 地址</h3><h4 id=\"概念解释\"><a href=\"#概念解释\" class=\"headerlink\" title=\"概念解释\"></a>概念解释</h4><ul>\n<li><p>IP 地址：IP 协议为互联网上的每一个网络和每一台主机分配的一个逻辑地址。IP 地址如同门牌号码，通过 IP 地址才能确定一台主机位置。服务器本质也是一台主机，想要访问某个服务器，必须先知道它的 IP 地址；</p>\n</li>\n<li><p>域名（ DN ）：IP 地址由四个数字组成，中间用点号连接，在使用过程中难记忆且易输入错误，所以用我们熟悉的字母和数字组合来代替纯数字的 IP 地址，比如我们只会记住 www.baidu.com（百度域名） 而不是 220.181.112.244（百度的其中一个 IP 地址）；</p>\n</li>\n<li><p>DNS： 每个域名都对应一个或多个提供相同服务服务器的 IP 地址，只有知道服务器 IP 地址才能建立连接，所以需要通过 DNS 把域名解析成一个 IP 地址。</p>\n</li>\n</ul>\n<p>知道了上面的概念，大概就知道了想要获得服务器的门牌号码，需要先将域名转换成 IP 地址。转换过程如下（以查询 www.baidu.com 的 IP 地址为例，其中2、3、4步均在上一步未查询成功的情况下进行）</p>\n<h4 id=\"查找过程\"><a href=\"#查找过程\" class=\"headerlink\" title=\"查找过程\"></a>查找过程</h4><ul>\n<li><p>浏览器搜索自己的 DNS 缓存（维护一张域名与 IP 地址的对应表）；</p>\n</li>\n<li><p>搜索操作系统中的 DNS 缓存（维护一张域名与 IP 地址的对应表）；</p>\n</li>\n<li><p>搜索操作系统的 hosts 文件（ Windows 环境下，维护一张域名与 IP 地址的对应表）；</p>\n</li>\n<li><p>操作系统将域名发送至 LDNS（本地区域名服务器，如果你在学校接入互联网，则 LDNS 服务器就在学校，如果通过电信接入互联网，则 LDNS 服务器就在你当地的电信那里。）LDNS 查询 自己的 DNS 缓存（一般查找成功率在 80% 左右），查找成功则返回结果，失败则发起一个迭代 DNS 解析请求；</p>\n<ul>\n<li><p>LDNS 向 Root Name Server （根域名服务器，其虽然没有每个域名的的具体信息，但存储了负责每个域，如 com、net、org等的解析的顶级域名服务器的地址）发起请求，此处，Root Name Server 返回 com 域的顶级域名服务器的地址；</p>\n</li>\n<li><p>LDNS 向 com 域的顶级域名服务器发起请求，返回 baidu.com 域名服务器地址；</p>\n</li>\n<li><p>LDNS 向 baidu.com 域名服务器发起请求，得到 www.baidu.com 的 IP 地址；</p>\n</li>\n</ul>\n</li>\n<li><p>LDNS 将得到的 IP 地址返回给操作系统，同时自己也将 IP 地址缓存起来；</p>\n</li>\n<li><p>操作系统将 IP 地址返回给浏览器，同时自己也将 IP 地址缓存起来；</p>\n</li>\n<li><p>至此，浏览器已经得到了域名对应的 IP 地址。</p>\n</li>\n</ul>\n<h4 id=\"补充说明\"><a href=\"#补充说明\" class=\"headerlink\" title=\"补充说明\"></a>补充说明</h4><ul>\n<li><p>域名与 URL 是两个概念：域名是一台或一组服务器的名称，用来确定服务器在 Internet 上的位置；URL 是统一资源定位符，用来确定某一个文件的具体位置，例如，oulve.com 是我个人主页的域名，根据这个域名可以找到oulve的服务器，oulve.com/a/1 是 URL ，可以根据这个 URL 定位我写的第一篇博客；</p>\n</li>\n<li><p>IP 地址与域名不是一一对应的关系：可以把多个提供相同服务的服务器 IP 设置为同一个域名，但在同一时刻一个域名只能解析出一个 IP地址；同时，一个 IP 地址可以绑定多个域名，数量不限；</p>\n</li>\n</ul>\n<h3 id=\"建立连接–三次握手\"><a href=\"#建立连接–三次握手\" class=\"headerlink\" title=\"建立连接–三次握手\"></a>建立连接–三次握手</h3><p>知道了服务器的 IP 地址，下面便开始与服务器建立连接了。</p>\n<p>通俗地讲，通信连接的建立需要经历以下三个过程：</p>\n<ul>\n<li><p>主机向服务器发送一个建立连接的请求（<strong>您好，我想认识您</strong>）；</p>\n</li>\n<li><p>服务器接到请求后发送同意连接的信号（<strong>好的，很高兴认识您</strong>）；</p>\n</li>\n<li><p>主机接到同意连接的信号后，再次向服务器发送了确认信号（<strong>我也很高兴认识您</strong>），自此，主机与服务器两者建立了连接。</p>\n</li>\n</ul>\n<h4 id=\"补充说明-1\"><a href=\"#补充说明-1\" class=\"headerlink\" title=\"补充说明\"></a>补充说明</h4><ul>\n<li>TCP 协议：三次握手的过程采用 TCP 协议，其可以保证信息传输的可靠性，三次握手过程中，若一方收不到确认信号，协议会要求重新发送信号。</li>\n</ul>\n<h3 id=\"网页请求与显示\"><a href=\"#网页请求与显示\" class=\"headerlink\" title=\"网页请求与显示\"></a>网页请求与显示</h3><p>当服务器与主机建立了连接之后，下面主机便与服务器进行通信。网页请求是一个单向请求的过程，即是一个主机向服务器请求数据，服务器返回相应的数据的过程。</p>\n<ul>\n<li><p>浏览器根据 URL 内容生成 HTTP 请求，请求中包含请求文件的位置、请求文件的方式等等；</p>\n</li>\n<li><p>服务器接到请求后，会根据 HTTP 请求中的内容来决定如何获取相应的 HTML 文件；</p>\n</li>\n<li><p>服务器将得到的 HTML 文件发送给浏览器；</p>\n</li>\n<li><p>在浏览器还没有完全接收 HTML 文件时便开始渲染、显示网页；</p>\n</li>\n<li><p>在执行 HTML 中代码时，根据需要，浏览器会继续请求图片、CSS、JavsScript等文件，过程同请求 HTML ；</p>\n</li>\n</ul>\n<h3 id=\"断开连接–四次挥手\"><a href=\"#断开连接–四次挥手\" class=\"headerlink\" title=\"断开连接–四次挥手\"></a>断开连接–四次挥手</h3><ul>\n<li><p>主机向服务器发送一个断开连接的请求（<strong>不早了，我该走了</strong>）；</p>\n</li>\n<li><p>服务器接到请求后发送确认收到请求的信号（<strong>知道了</strong>）；</p>\n</li>\n<li><p>服务器向主机发送断开通知（<strong>我也该走了</strong>）；</p>\n</li>\n<li><p>主机接到断开通知后断开连接并反馈一个确认信号（<strong>嗯，好的</strong>），服务器收到确认信号后断开连接；</p>\n</li>\n</ul>\n<h4 id=\"补充说明-2\"><a href=\"#补充说明-2\" class=\"headerlink\" title=\"补充说明\"></a>补充说明</h4><ul>\n<li><p>为什么服务器在接到断开请求时不立即同意断开：当服务器收到断开连接的请求时，可能仍然有数据未发送完毕，所有服务器先发送确认信号，等所有数据发送完毕后再同意断开。</p>\n</li>\n<li><p>第四次握手后，主机发送确认信号后并没有立即断开连接，而是等待了 2 个报文传送周期，原因是：如果第四次握手的确认信息丢失，服务器将会重新发送第三次握手的断开连接的信号，而服务器发觉丢包与重新发送的断开连接到达主机的时间正好为 2 个报文传输周期。</p>\n</li>\n</ul>\n","excerpt":"<h2 id=\"根据-URL-请求页面过程\"><a href=\"#根据-URL-请求页面过程\" class=\"headerlink\" title=\"根据 URL 请求页面过程\"></a>根据 URL 请求页面过程</h2><p>说实话，这类文章网上一抓一大把，而我仍想写这篇博客，一方面是想再仔细缕一下这个过程，另一方面是希望用清晰的语言和结构来解释，也算是小小地挑战一下自己。</p>\n<h3 id=\"过程概述\"><a href=\"#过程概述\" class=\"headerlink\" title=\"过程概述\"></a>过程概述</h3><ul>\n<li><p>浏览器查找域名对应的 IP 地址；</p>\n</li>\n<li><p>浏览器根据 IP 地址与服务器建立 socket 连接；</p>\n</li>\n<li><p>浏览器与服务器通信： 浏览器请求，服务器处理请求；</p>\n</li>\n<li><p>浏览器与服务器断开连接。</p>\n</li>\n</ul>\n<p>天啦撸，结束了？也太简单了吧。。。各位看官，不急，都说了是概述，且向下看。</p>","more":"<h3 id=\"根据域名查找-IP-地址\"><a href=\"#根据域名查找-IP-地址\" class=\"headerlink\" title=\"根据域名查找 IP 地址\"></a>根据域名查找 IP 地址</h3><h4 id=\"概念解释\"><a href=\"#概念解释\" class=\"headerlink\" title=\"概念解释\"></a>概念解释</h4><ul>\n<li><p>IP 地址：IP 协议为互联网上的每一个网络和每一台主机分配的一个逻辑地址。IP 地址如同门牌号码，通过 IP 地址才能确定一台主机位置。服务器本质也是一台主机，想要访问某个服务器，必须先知道它的 IP 地址；</p>\n</li>\n<li><p>域名（ DN ）：IP 地址由四个数字组成，中间用点号连接，在使用过程中难记忆且易输入错误，所以用我们熟悉的字母和数字组合来代替纯数字的 IP 地址，比如我们只会记住 www.baidu.com（百度域名） 而不是 220.181.112.244（百度的其中一个 IP 地址）；</p>\n</li>\n<li><p>DNS： 每个域名都对应一个或多个提供相同服务服务器的 IP 地址，只有知道服务器 IP 地址才能建立连接，所以需要通过 DNS 把域名解析成一个 IP 地址。</p>\n</li>\n</ul>\n<p>知道了上面的概念，大概就知道了想要获得服务器的门牌号码，需要先将域名转换成 IP 地址。转换过程如下（以查询 www.baidu.com 的 IP 地址为例，其中2、3、4步均在上一步未查询成功的情况下进行）</p>\n<h4 id=\"查找过程\"><a href=\"#查找过程\" class=\"headerlink\" title=\"查找过程\"></a>查找过程</h4><ul>\n<li><p>浏览器搜索自己的 DNS 缓存（维护一张域名与 IP 地址的对应表）；</p>\n</li>\n<li><p>搜索操作系统中的 DNS 缓存（维护一张域名与 IP 地址的对应表）；</p>\n</li>\n<li><p>搜索操作系统的 hosts 文件（ Windows 环境下，维护一张域名与 IP 地址的对应表）；</p>\n</li>\n<li><p>操作系统将域名发送至 LDNS（本地区域名服务器，如果你在学校接入互联网，则 LDNS 服务器就在学校，如果通过电信接入互联网，则 LDNS 服务器就在你当地的电信那里。）LDNS 查询 自己的 DNS 缓存（一般查找成功率在 80% 左右），查找成功则返回结果，失败则发起一个迭代 DNS 解析请求；</p>\n<ul>\n<li><p>LDNS 向 Root Name Server （根域名服务器，其虽然没有每个域名的的具体信息，但存储了负责每个域，如 com、net、org等的解析的顶级域名服务器的地址）发起请求，此处，Root Name Server 返回 com 域的顶级域名服务器的地址；</p>\n</li>\n<li><p>LDNS 向 com 域的顶级域名服务器发起请求，返回 baidu.com 域名服务器地址；</p>\n</li>\n<li><p>LDNS 向 baidu.com 域名服务器发起请求，得到 www.baidu.com 的 IP 地址；</p>\n</li>\n</ul>\n</li>\n<li><p>LDNS 将得到的 IP 地址返回给操作系统，同时自己也将 IP 地址缓存起来；</p>\n</li>\n<li><p>操作系统将 IP 地址返回给浏览器，同时自己也将 IP 地址缓存起来；</p>\n</li>\n<li><p>至此，浏览器已经得到了域名对应的 IP 地址。</p>\n</li>\n</ul>\n<h4 id=\"补充说明\"><a href=\"#补充说明\" class=\"headerlink\" title=\"补充说明\"></a>补充说明</h4><ul>\n<li><p>域名与 URL 是两个概念：域名是一台或一组服务器的名称，用来确定服务器在 Internet 上的位置；URL 是统一资源定位符，用来确定某一个文件的具体位置，例如，oulve.com 是我个人主页的域名，根据这个域名可以找到oulve的服务器，oulve.com/a/1 是 URL ，可以根据这个 URL 定位我写的第一篇博客；</p>\n</li>\n<li><p>IP 地址与域名不是一一对应的关系：可以把多个提供相同服务的服务器 IP 设置为同一个域名，但在同一时刻一个域名只能解析出一个 IP地址；同时，一个 IP 地址可以绑定多个域名，数量不限；</p>\n</li>\n</ul>\n<h3 id=\"建立连接–三次握手\"><a href=\"#建立连接–三次握手\" class=\"headerlink\" title=\"建立连接–三次握手\"></a>建立连接–三次握手</h3><p>知道了服务器的 IP 地址，下面便开始与服务器建立连接了。</p>\n<p>通俗地讲，通信连接的建立需要经历以下三个过程：</p>\n<ul>\n<li><p>主机向服务器发送一个建立连接的请求（<strong>您好，我想认识您</strong>）；</p>\n</li>\n<li><p>服务器接到请求后发送同意连接的信号（<strong>好的，很高兴认识您</strong>）；</p>\n</li>\n<li><p>主机接到同意连接的信号后，再次向服务器发送了确认信号（<strong>我也很高兴认识您</strong>），自此，主机与服务器两者建立了连接。</p>\n</li>\n</ul>\n<h4 id=\"补充说明-1\"><a href=\"#补充说明-1\" class=\"headerlink\" title=\"补充说明\"></a>补充说明</h4><ul>\n<li>TCP 协议：三次握手的过程采用 TCP 协议，其可以保证信息传输的可靠性，三次握手过程中，若一方收不到确认信号，协议会要求重新发送信号。</li>\n</ul>\n<h3 id=\"网页请求与显示\"><a href=\"#网页请求与显示\" class=\"headerlink\" title=\"网页请求与显示\"></a>网页请求与显示</h3><p>当服务器与主机建立了连接之后，下面主机便与服务器进行通信。网页请求是一个单向请求的过程，即是一个主机向服务器请求数据，服务器返回相应的数据的过程。</p>\n<ul>\n<li><p>浏览器根据 URL 内容生成 HTTP 请求，请求中包含请求文件的位置、请求文件的方式等等；</p>\n</li>\n<li><p>服务器接到请求后，会根据 HTTP 请求中的内容来决定如何获取相应的 HTML 文件；</p>\n</li>\n<li><p>服务器将得到的 HTML 文件发送给浏览器；</p>\n</li>\n<li><p>在浏览器还没有完全接收 HTML 文件时便开始渲染、显示网页；</p>\n</li>\n<li><p>在执行 HTML 中代码时，根据需要，浏览器会继续请求图片、CSS、JavsScript等文件，过程同请求 HTML ；</p>\n</li>\n</ul>\n<h3 id=\"断开连接–四次挥手\"><a href=\"#断开连接–四次挥手\" class=\"headerlink\" title=\"断开连接–四次挥手\"></a>断开连接–四次挥手</h3><ul>\n<li><p>主机向服务器发送一个断开连接的请求（<strong>不早了，我该走了</strong>）；</p>\n</li>\n<li><p>服务器接到请求后发送确认收到请求的信号（<strong>知道了</strong>）；</p>\n</li>\n<li><p>服务器向主机发送断开通知（<strong>我也该走了</strong>）；</p>\n</li>\n<li><p>主机接到断开通知后断开连接并反馈一个确认信号（<strong>嗯，好的</strong>），服务器收到确认信号后断开连接；</p>\n</li>\n</ul>\n<h4 id=\"补充说明-2\"><a href=\"#补充说明-2\" class=\"headerlink\" title=\"补充说明\"></a>补充说明</h4><ul>\n<li><p>为什么服务器在接到断开请求时不立即同意断开：当服务器收到断开连接的请求时，可能仍然有数据未发送完毕，所有服务器先发送确认信号，等所有数据发送完毕后再同意断开。</p>\n</li>\n<li><p>第四次握手后，主机发送确认信号后并没有立即断开连接，而是等待了 2 个报文传送周期，原因是：如果第四次握手的确认信息丢失，服务器将会重新发送第三次握手的断开连接的信号，而服务器发觉丢包与重新发送的断开连接到达主机的时间正好为 2 个报文传输周期。</p>\n</li>\n</ul>"},{"title":"underscore源码通读（三）","date":"2015-10-29T13:02:14.000Z","_content":"\n后面的代码真是越看越难理解，经常需要结合内部/接口函数一起，所以采用跳读的方式解析，基本按照模块由易到难的顺序解析。\n\n\n\n```javascript\n\n456  _.initial = function(array, n, guard) {\n\n    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));\n\n};\n\n```\n\n\n\n这个guard参数说是保证默认返回第一个值，不过我看了很久觉得意义不大，猜测可能是以前的接口。这里的slice = Array.prototype.slice。这里有两个地方比较好，一是用Array的原型函数来处理array参数，这样可以避免判断array是否数组，二是用max来避免超出数组长度。\n\n<!-- more --> \n\n```javascript\n\n671 _.range = function(start, stop, step) {\n\n    if (arguments.length <= 1) {\n\n        stop = start || 0;\n\n        start = 0;\n\n    }\n\n    step = step || 1;\n\n\n\n    var length = Math.max(Math.ceil((stop - start) / step), 0);\n\n    var range = Array(length);\n\n\n\n    for (var idx = 0; idx < length; idx++, start += step) {\n\n        range[idx] = start;\n\n    }\n\n\n\n    return range;\n\n};\n\n```\n\n\n\n这个函数本什没有什么特别的，只不过我在调用的时候将step赋值为小数，就出现了javascript著名的精度问题。网上应该有不少的解决方案，这里提供一种目前我在项目中用到的解决方法：将数字转为字符串在去小数点之后转为整数进行计算，计算完成后转字符串加上小数点再转成小数，举个例子\n\n\n\n```\n\n1.11 ==> \"1.11\" ==> \"111\" ==> 111\n\n2.2 ==> \"2.2\" ==> \"220\" ==> 220\n\n111+220 ==> 331 ==> \"331\" ==> \"3.31\" ==> 3.31\n\n```\n\n\n\n数组代码看得累了，从后面的看起吧~\n\n\n\n```javascript\n\n1269 _.noConflict = function() {\n\n    root._ = previousUnderscore;\n\n    return this;\n\n};\n\n```\n\n\n\n这个让渡函数其实原理比较简单，就是初始化underscore前 previousUnderscore=window._\n\n对原有对象进行储存，如果需要让渡避免冲突，则进行还原同时返回当前underscore对象。再来看看JQuery的实现原理：\n\n\n\n```javascript\n\nnoConflict: function( deep ) {\n\n    if ( window.$ === jQuery ) {\n\n        window.$ = _$;\n\n    }\n\n\n\n    if ( deep && window.jQuery === jQuery ) {\n\n        window.jQuery = _jQuery;\n\n    }\n\n\n\n    return jQuery;\n\n}\n\n```\n\n\n\n刚开始看的时候犯2了，函数可以用===来比较？不是只能比较简单的数据对象？呵呵，其实这个是通过引用地址来判断的，因为之前初始化的时候window.$=JQuery 所以$会指向JQuery的地址，所以可以这样判断。后面一个if考虑到JQuery这个变量名也被占用的时候，也进行让渡，最后返回JQuery对象。可能是考虑多版本的情况吧~\n\n\n\n```javascript\n\n1487  _.mixin = function(obj) {\n\n    _.each(_.functions(obj), function(name) {\n\n        var func = _[name] = obj[name];\n\n        _.prototype[name] = function() {\n\n            var args = [this._wrapped];\n\n            push.apply(args, arguments);\n\n            return result(this, func.apply(_, args));\n\n        };\n\n    });\n\n};\n\n\n\n// Add all of the Underscore functions to the wrapper object.\n\n_.mixin(_);\n\n```\n\n\n\n这个用于扩展underscore自身的接口函数，通过循环遍历对象来浅拷贝对象属性。这里考虑到函数的实例化，所以一方面将函数作为内部函数使用，同时扩展到prototype属性上。考虑得比较周全。\n\n\n\n```javascript\n\n1469  _.chain = function(obj) {\n\n    var instance = _(obj);\n\n    instance._chain = true;\n\n    return instance;\n\n};\n\n```\n\n\n\n这个函数让underscore支持链式调用，链式调用写起来很美观，但是调试略显不方便。结合之前的代码来看，underscore实现链式调用的基本原理是：将参数缓存在内部属性_wrapped中，调用函数时传入该属性值，执行后返回当前this指针。直到执行value函数时返回_wraped中的值。","source":"_posts/underscore03.md","raw":"title: underscore源码通读（三）\ndate: 2015-10-29 21:02:14\ntags:\n---\n\n后面的代码真是越看越难理解，经常需要结合内部/接口函数一起，所以采用跳读的方式解析，基本按照模块由易到难的顺序解析。\n\n\n\n```javascript\n\n456  _.initial = function(array, n, guard) {\n\n    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));\n\n};\n\n```\n\n\n\n这个guard参数说是保证默认返回第一个值，不过我看了很久觉得意义不大，猜测可能是以前的接口。这里的slice = Array.prototype.slice。这里有两个地方比较好，一是用Array的原型函数来处理array参数，这样可以避免判断array是否数组，二是用max来避免超出数组长度。\n\n<!-- more --> \n\n```javascript\n\n671 _.range = function(start, stop, step) {\n\n    if (arguments.length <= 1) {\n\n        stop = start || 0;\n\n        start = 0;\n\n    }\n\n    step = step || 1;\n\n\n\n    var length = Math.max(Math.ceil((stop - start) / step), 0);\n\n    var range = Array(length);\n\n\n\n    for (var idx = 0; idx < length; idx++, start += step) {\n\n        range[idx] = start;\n\n    }\n\n\n\n    return range;\n\n};\n\n```\n\n\n\n这个函数本什没有什么特别的，只不过我在调用的时候将step赋值为小数，就出现了javascript著名的精度问题。网上应该有不少的解决方案，这里提供一种目前我在项目中用到的解决方法：将数字转为字符串在去小数点之后转为整数进行计算，计算完成后转字符串加上小数点再转成小数，举个例子\n\n\n\n```\n\n1.11 ==> \"1.11\" ==> \"111\" ==> 111\n\n2.2 ==> \"2.2\" ==> \"220\" ==> 220\n\n111+220 ==> 331 ==> \"331\" ==> \"3.31\" ==> 3.31\n\n```\n\n\n\n数组代码看得累了，从后面的看起吧~\n\n\n\n```javascript\n\n1269 _.noConflict = function() {\n\n    root._ = previousUnderscore;\n\n    return this;\n\n};\n\n```\n\n\n\n这个让渡函数其实原理比较简单，就是初始化underscore前 previousUnderscore=window._\n\n对原有对象进行储存，如果需要让渡避免冲突，则进行还原同时返回当前underscore对象。再来看看JQuery的实现原理：\n\n\n\n```javascript\n\nnoConflict: function( deep ) {\n\n    if ( window.$ === jQuery ) {\n\n        window.$ = _$;\n\n    }\n\n\n\n    if ( deep && window.jQuery === jQuery ) {\n\n        window.jQuery = _jQuery;\n\n    }\n\n\n\n    return jQuery;\n\n}\n\n```\n\n\n\n刚开始看的时候犯2了，函数可以用===来比较？不是只能比较简单的数据对象？呵呵，其实这个是通过引用地址来判断的，因为之前初始化的时候window.$=JQuery 所以$会指向JQuery的地址，所以可以这样判断。后面一个if考虑到JQuery这个变量名也被占用的时候，也进行让渡，最后返回JQuery对象。可能是考虑多版本的情况吧~\n\n\n\n```javascript\n\n1487  _.mixin = function(obj) {\n\n    _.each(_.functions(obj), function(name) {\n\n        var func = _[name] = obj[name];\n\n        _.prototype[name] = function() {\n\n            var args = [this._wrapped];\n\n            push.apply(args, arguments);\n\n            return result(this, func.apply(_, args));\n\n        };\n\n    });\n\n};\n\n\n\n// Add all of the Underscore functions to the wrapper object.\n\n_.mixin(_);\n\n```\n\n\n\n这个用于扩展underscore自身的接口函数，通过循环遍历对象来浅拷贝对象属性。这里考虑到函数的实例化，所以一方面将函数作为内部函数使用，同时扩展到prototype属性上。考虑得比较周全。\n\n\n\n```javascript\n\n1469  _.chain = function(obj) {\n\n    var instance = _(obj);\n\n    instance._chain = true;\n\n    return instance;\n\n};\n\n```\n\n\n\n这个函数让underscore支持链式调用，链式调用写起来很美观，但是调试略显不方便。结合之前的代码来看，underscore实现链式调用的基本原理是：将参数缓存在内部属性_wrapped中，调用函数时传入该属性值，执行后返回当前this指针。直到执行value函数时返回_wraped中的值。","slug":"underscore03","published":1,"updated":"2016-03-02T14:18:07.222Z","_id":"cijgvit5h0005zp8gb11hm49n","comments":1,"layout":"post","photos":[],"link":"","content":"<p>后面的代码真是越看越难理解，经常需要结合内部/接口函数一起，所以采用跳读的方式解析，基本按照模块由易到难的顺序解析。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">456</span>  _.initial = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array, n, guard</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> slice.call(array, <span class=\"number\">0</span>, <span class=\"built_in\">Math</span>.max(<span class=\"number\">0</span>, array.length - (n == <span class=\"literal\">null</span> || guard ? <span class=\"number\">1</span> : n)));</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>这个guard参数说是保证默认返回第一个值，不过我看了很久觉得意义不大，猜测可能是以前的接口。这里的slice = Array.prototype.slice。这里有两个地方比较好，一是用Array的原型函数来处理array参数，这样可以避免判断array是否数组，二是用max来避免超出数组长度。</p>\n<a id=\"more\"></a> \n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">671</span> _.range = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">start, stop, step</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>.length &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        stop = start || <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        start = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    step = step || <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> length = <span class=\"built_in\">Math</span>.max(<span class=\"built_in\">Math</span>.ceil((stop - start) / step), <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> range = <span class=\"built_in\">Array</span>(length);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> idx = <span class=\"number\">0</span>; idx &lt; length; idx++, start += step) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        range[idx] = start;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> range;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>这个函数本什没有什么特别的，只不过我在调用的时候将step赋值为小数，就出现了javascript著名的精度问题。网上应该有不少的解决方案，这里提供一种目前我在项目中用到的解决方法：将数字转为字符串在去小数点之后转为整数进行计算，计算完成后转字符串加上小数点再转成小数，举个例子</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1.11</span> =<span class=\"function\">=&gt;</span> <span class=\"string\">\"1.11\"</span> =<span class=\"function\">=&gt;</span> <span class=\"string\">\"111\"</span> =<span class=\"function\">=&gt;</span> <span class=\"number\">111</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2.2</span> =<span class=\"function\">=&gt;</span> <span class=\"string\">\"2.2\"</span> =<span class=\"function\">=&gt;</span> <span class=\"string\">\"220\"</span> =<span class=\"function\">=&gt;</span> <span class=\"number\">220</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">111</span>+<span class=\"number\">220</span> =<span class=\"function\">=&gt;</span> <span class=\"number\">331</span> =<span class=\"function\">=&gt;</span> <span class=\"string\">\"331\"</span> =<span class=\"function\">=&gt;</span> <span class=\"string\">\"3.31\"</span> =<span class=\"function\">=&gt;</span> <span class=\"number\">3.31</span></span><br></pre></td></tr></table></figure>\n<p>数组代码看得累了，从后面的看起吧~</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1269</span> _.noConflict = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    root._ = previousUnderscore;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>这个让渡函数其实原理比较简单，就是初始化underscore前 previousUnderscore=window._</p>\n<p>对原有对象进行储存，如果需要让渡避免冲突，则进行还原同时返回当前underscore对象。再来看看JQuery的实现原理：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">noConflict: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> deep </span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( <span class=\"built_in\">window</span>.$ === jQuery ) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">window</span>.$ = _$;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( deep &amp;&amp; <span class=\"built_in\">window</span>.jQuery === jQuery ) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">window</span>.jQuery = _jQuery;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> jQuery;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>刚开始看的时候犯2了，函数可以用===来比较？不是只能比较简单的数据对象？呵呵，其实这个是通过引用地址来判断的，因为之前初始化的时候window.$=JQuery 所以$会指向JQuery的地址，所以可以这样判断。后面一个if考虑到JQuery这个变量名也被占用的时候，也进行让渡，最后返回JQuery对象。可能是考虑多版本的情况吧~</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1487</span>  _.mixin = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    _.each(_.functions(obj), <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> func = _[name] = obj[name];</span><br><span class=\"line\"></span><br><span class=\"line\">        _.prototype[name] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">var</span> args = [<span class=\"keyword\">this</span>._wrapped];</span><br><span class=\"line\"></span><br><span class=\"line\">            push.apply(args, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> result(<span class=\"keyword\">this</span>, func.apply(_, args));</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Add all of the Underscore functions to the wrapper object.</span></span><br><span class=\"line\"></span><br><span class=\"line\">_.mixin(_);</span><br></pre></td></tr></table></figure>\n<p>这个用于扩展underscore自身的接口函数，通过循环遍历对象来浅拷贝对象属性。这里考虑到函数的实例化，所以一方面将函数作为内部函数使用，同时扩展到prototype属性上。考虑得比较周全。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1469</span>  _.chain = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> instance = _(obj);</span><br><span class=\"line\"></span><br><span class=\"line\">    instance._chain = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>这个函数让underscore支持链式调用，链式调用写起来很美观，但是调试略显不方便。结合之前的代码来看，underscore实现链式调用的基本原理是：将参数缓存在内部属性_wrapped中，调用函数时传入该属性值，执行后返回当前this指针。直到执行value函数时返回_wraped中的值。</p>\n","excerpt":"<p>后面的代码真是越看越难理解，经常需要结合内部/接口函数一起，所以采用跳读的方式解析，基本按照模块由易到难的顺序解析。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">456</span>  _.initial = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array, n, guard</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> slice.call(array, <span class=\"number\">0</span>, <span class=\"built_in\">Math</span>.max(<span class=\"number\">0</span>, array.length - (n == <span class=\"literal\">null</span> || guard ? <span class=\"number\">1</span> : n)));</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>这个guard参数说是保证默认返回第一个值，不过我看了很久觉得意义不大，猜测可能是以前的接口。这里的slice = Array.prototype.slice。这里有两个地方比较好，一是用Array的原型函数来处理array参数，这样可以避免判断array是否数组，二是用max来避免超出数组长度。</p>","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">671</span> _.range = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">start, stop, step</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>.length &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        stop = start || <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        start = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    step = step || <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> length = <span class=\"built_in\">Math</span>.max(<span class=\"built_in\">Math</span>.ceil((stop - start) / step), <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> range = <span class=\"built_in\">Array</span>(length);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> idx = <span class=\"number\">0</span>; idx &lt; length; idx++, start += step) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        range[idx] = start;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> range;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>这个函数本什没有什么特别的，只不过我在调用的时候将step赋值为小数，就出现了javascript著名的精度问题。网上应该有不少的解决方案，这里提供一种目前我在项目中用到的解决方法：将数字转为字符串在去小数点之后转为整数进行计算，计算完成后转字符串加上小数点再转成小数，举个例子</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1.11</span> =<span class=\"function\">=&gt;</span> <span class=\"string\">\"1.11\"</span> =<span class=\"function\">=&gt;</span> <span class=\"string\">\"111\"</span> =<span class=\"function\">=&gt;</span> <span class=\"number\">111</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2.2</span> =<span class=\"function\">=&gt;</span> <span class=\"string\">\"2.2\"</span> =<span class=\"function\">=&gt;</span> <span class=\"string\">\"220\"</span> =<span class=\"function\">=&gt;</span> <span class=\"number\">220</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">111</span>+<span class=\"number\">220</span> =<span class=\"function\">=&gt;</span> <span class=\"number\">331</span> =<span class=\"function\">=&gt;</span> <span class=\"string\">\"331\"</span> =<span class=\"function\">=&gt;</span> <span class=\"string\">\"3.31\"</span> =<span class=\"function\">=&gt;</span> <span class=\"number\">3.31</span></span><br></pre></td></tr></table></figure>\n<p>数组代码看得累了，从后面的看起吧~</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1269</span> _.noConflict = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    root._ = previousUnderscore;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>这个让渡函数其实原理比较简单，就是初始化underscore前 previousUnderscore=window._</p>\n<p>对原有对象进行储存，如果需要让渡避免冲突，则进行还原同时返回当前underscore对象。再来看看JQuery的实现原理：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">noConflict: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> deep </span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( <span class=\"built_in\">window</span>.$ === jQuery ) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">window</span>.$ = _$;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( deep &amp;&amp; <span class=\"built_in\">window</span>.jQuery === jQuery ) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">window</span>.jQuery = _jQuery;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> jQuery;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>刚开始看的时候犯2了，函数可以用===来比较？不是只能比较简单的数据对象？呵呵，其实这个是通过引用地址来判断的，因为之前初始化的时候window.$=JQuery 所以$会指向JQuery的地址，所以可以这样判断。后面一个if考虑到JQuery这个变量名也被占用的时候，也进行让渡，最后返回JQuery对象。可能是考虑多版本的情况吧~</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1487</span>  _.mixin = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    _.each(_.functions(obj), <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> func = _[name] = obj[name];</span><br><span class=\"line\"></span><br><span class=\"line\">        _.prototype[name] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">var</span> args = [<span class=\"keyword\">this</span>._wrapped];</span><br><span class=\"line\"></span><br><span class=\"line\">            push.apply(args, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> result(<span class=\"keyword\">this</span>, func.apply(_, args));</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Add all of the Underscore functions to the wrapper object.</span></span><br><span class=\"line\"></span><br><span class=\"line\">_.mixin(_);</span><br></pre></td></tr></table></figure>\n<p>这个用于扩展underscore自身的接口函数，通过循环遍历对象来浅拷贝对象属性。这里考虑到函数的实例化，所以一方面将函数作为内部函数使用，同时扩展到prototype属性上。考虑得比较周全。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1469</span>  _.chain = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> instance = _(obj);</span><br><span class=\"line\"></span><br><span class=\"line\">    instance._chain = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>这个函数让underscore支持链式调用，链式调用写起来很美观，但是调试略显不方便。结合之前的代码来看，underscore实现链式调用的基本原理是：将参数缓存在内部属性_wrapped中，调用函数时传入该属性值，执行后返回当前this指针。直到执行value函数时返回_wraped中的值。</p>"},{"title":"underscore源码通读（二）","date":"2015-10-28T11:55:11.000Z","_content":"\n先看一下两个比较重要的内部函数\n\n\n\n```javascript\n\n63 var optimizeCb = function(func, context, argCount) {\n\n    if (context === void 0) return func; \n\n    switch (argCount == null ? 3 : argCount) { \n\n        case 1: return function(value) { \n\n            return func.call(context, value); \n\n        }; \n\n        case 2: return function(value, other) { \n\n            return func.call(context, value, other); \n\n        }; \n\n        case 3: return function(value, index, collection) { \n\n            return func.call(context, value, index, collection); \n\n        }; \n\n        case 4: return function(accumulator, value, index, collection) { \n\n            return func.call(context, accumulator, value, index, collection); \n\n        }; \n\n    } \n\n    return function() { \n\n        return func.apply(context, arguments); \n\n    }; \n\n};\n\n```\n\n<!-- more --> \n\n这个函数是underscore内部很重要的函数，主要用来执行函数并改变所执行函数的作用域，最后加了一个argCount参数来指定参数个数，对参数个数小于等于4的情况进行分类处理。对不同参数的解释大概是：\n\n\n\n- 1的情况一般是用在接受单值的情况，比如times,sortedIndex之类的函数。\n\n- 2的情况据说是给比如jQuery,zepto事件绑定，代理什么的，但是在源代码中没有看到被调用。\n\n- 3的情况用于迭代器函数，比如foreach,map,pick等。\n\n- 4的情况用reduce和reduceRight函数。\n\n\n\n```javascript\n\n87 var cb = function(value, context, argCount) {\n\n    if (value == null) return _.identity;\n\n    if (_.isFunction(value)) return optimizeCb(value, context, argCount);\n\n    if (_.isObject(value)) return _.matcher(value);\n\n    return _.property(value);\n\n};\n\n```\n\n\n\n这也是一个比较常用的内部函数，只是对参数进行了判断：如果是函数则返回上面说到的回调函数；如果是对象则返回一个能判断对象是否相等的函数；默认返回一个获取对象属性的函数。\n\n\n\n```javascript\n\n140 _.each = _.forEach = function(obj, iteratee, context) {\n\n    iteratee = optimizeCb(iteratee, context);\n\n    var i, length;\n\n    if (isArrayLike(obj)) {\n\n        for (i = 0, length = obj.length; i < length; i++) {\n\n            iteratee(obj[i], i, obj);\n\n        }\n\n    } else {\n\n        var keys = _.keys(obj);\n\n        for (i = 0, length = keys.length; i < length; i++) {\n\n            iteratee(obj[keys[i]], keys[i], obj);\n\n        }\n\n    }\n\n    \n\n    return obj;\n\n};\n\n\n\n// Return the results of applying the iteratee to each element.\n\n_.map = _.collect = function(obj, iteratee, context) {\n\n    iteratee = cb(iteratee, context);\n\n    var keys = !isArrayLike(obj) && _.keys(obj),\n\n    length = (keys || obj).length,\n\n    results = Array(length);\n\n    for (var index = 0; index < length; index++) {\n\n        var currentKey = keys ? keys[index] : index;\n\n        results[index] = iteratee(obj[currentKey], currentKey, obj);\n\n    }\n\n\n\n    return results;\n\n};\n\n```\n\n\n\n从代码上看，each函数是包括map函数的，map只能处理对象，each可以处理对象和数组。至于forEach和collect在API文档中看不到，应该是为了兼容以前老版本做的别名处理。\n\n\n\n```javascript\n\n170 function createReduce(dir) {\n\n    // Optimized iterator function as using arguments.length\n\n    // in the main function will deoptimize the, see #1991.\n\n    function iterator(obj, iteratee, memo, keys, index, length) {\n\n        for (; index >= 0 && index < length; index += dir) {\n\n            var currentKey = keys ? keys[index] : index;\n\n            memo = iteratee(memo, obj[currentKey], currentKey, obj);\n\n        }\n\n\n\n        return memo;\n\n    }\n\n\n\n    return function(obj, iteratee, memo, context) {\n\n        iteratee = optimizeCb(iteratee, context, 4);\n\n        var keys = !isArrayLike(obj) && _.keys(obj),\n\n        length = (keys || obj).length,\n\n        index = dir > 0 ? 0 : length - 1;\n\n        // Determine the initial value if none is provided.\n\n        if (arguments.length < 3) {\n\n            memo = obj[keys ? keys[index] : index];\n\n            index += dir;\n\n        }\n\n        \n\n        return iterator(obj, iteratee, memo, keys, index, length);\n\n    };\n\n}\n\n```\n\n\n\n这个是reduce和reduceRight调用的内部函数，将memo这个变量作为入参传递给iterator\n\n函数，调用自定义的iteratee函数进行循环处理，每次处理完的结果都赋值给memo变量，最后返回memo变量的结果。这里有两个问题\n\n\n\n- 为什么这里不按照常理逻辑来写代码而要用闭包呢？闭包大致有这么几个作用：避免命名冲突；私有化变量；变量持久化。这里的作用主要就是变量（函数）持久化，好处就是重复调用的时候不需要再重新创建函数，从而提升执行速度。\n\n- 为什么要用两层闭包呢？第一层闭包持久化iterator函数，调用reduce和reduceRight函数避免重复新建函数。第二层闭包保存keys,index,length这些变量。\n\n\n\n```javascript\n\n263 _.invoke = function(obj, method) {\n\n    var args = slice.call(arguments, 2);\n\n    var isFunc = _.isFunction(method);\n\n    return _.map(obj, function(value) {\n\n        var func = isFunc ? method : value[method];\n\n        return func == null ? func : func.apply(value, args);\n\n    });\n\n};\n\n```\n\n\n\n这里用slice.call(arguments, 2)来获取后面的不定参数，然后用func.apply(value, args)来传入该参数比较有意思。","source":"_posts/underscore02.md","raw":"title: underscore源码通读（二）\ndate: 2015-10-28 19:55:11\ntags:\n---\n\n先看一下两个比较重要的内部函数\n\n\n\n```javascript\n\n63 var optimizeCb = function(func, context, argCount) {\n\n    if (context === void 0) return func; \n\n    switch (argCount == null ? 3 : argCount) { \n\n        case 1: return function(value) { \n\n            return func.call(context, value); \n\n        }; \n\n        case 2: return function(value, other) { \n\n            return func.call(context, value, other); \n\n        }; \n\n        case 3: return function(value, index, collection) { \n\n            return func.call(context, value, index, collection); \n\n        }; \n\n        case 4: return function(accumulator, value, index, collection) { \n\n            return func.call(context, accumulator, value, index, collection); \n\n        }; \n\n    } \n\n    return function() { \n\n        return func.apply(context, arguments); \n\n    }; \n\n};\n\n```\n\n<!-- more --> \n\n这个函数是underscore内部很重要的函数，主要用来执行函数并改变所执行函数的作用域，最后加了一个argCount参数来指定参数个数，对参数个数小于等于4的情况进行分类处理。对不同参数的解释大概是：\n\n\n\n- 1的情况一般是用在接受单值的情况，比如times,sortedIndex之类的函数。\n\n- 2的情况据说是给比如jQuery,zepto事件绑定，代理什么的，但是在源代码中没有看到被调用。\n\n- 3的情况用于迭代器函数，比如foreach,map,pick等。\n\n- 4的情况用reduce和reduceRight函数。\n\n\n\n```javascript\n\n87 var cb = function(value, context, argCount) {\n\n    if (value == null) return _.identity;\n\n    if (_.isFunction(value)) return optimizeCb(value, context, argCount);\n\n    if (_.isObject(value)) return _.matcher(value);\n\n    return _.property(value);\n\n};\n\n```\n\n\n\n这也是一个比较常用的内部函数，只是对参数进行了判断：如果是函数则返回上面说到的回调函数；如果是对象则返回一个能判断对象是否相等的函数；默认返回一个获取对象属性的函数。\n\n\n\n```javascript\n\n140 _.each = _.forEach = function(obj, iteratee, context) {\n\n    iteratee = optimizeCb(iteratee, context);\n\n    var i, length;\n\n    if (isArrayLike(obj)) {\n\n        for (i = 0, length = obj.length; i < length; i++) {\n\n            iteratee(obj[i], i, obj);\n\n        }\n\n    } else {\n\n        var keys = _.keys(obj);\n\n        for (i = 0, length = keys.length; i < length; i++) {\n\n            iteratee(obj[keys[i]], keys[i], obj);\n\n        }\n\n    }\n\n    \n\n    return obj;\n\n};\n\n\n\n// Return the results of applying the iteratee to each element.\n\n_.map = _.collect = function(obj, iteratee, context) {\n\n    iteratee = cb(iteratee, context);\n\n    var keys = !isArrayLike(obj) && _.keys(obj),\n\n    length = (keys || obj).length,\n\n    results = Array(length);\n\n    for (var index = 0; index < length; index++) {\n\n        var currentKey = keys ? keys[index] : index;\n\n        results[index] = iteratee(obj[currentKey], currentKey, obj);\n\n    }\n\n\n\n    return results;\n\n};\n\n```\n\n\n\n从代码上看，each函数是包括map函数的，map只能处理对象，each可以处理对象和数组。至于forEach和collect在API文档中看不到，应该是为了兼容以前老版本做的别名处理。\n\n\n\n```javascript\n\n170 function createReduce(dir) {\n\n    // Optimized iterator function as using arguments.length\n\n    // in the main function will deoptimize the, see #1991.\n\n    function iterator(obj, iteratee, memo, keys, index, length) {\n\n        for (; index >= 0 && index < length; index += dir) {\n\n            var currentKey = keys ? keys[index] : index;\n\n            memo = iteratee(memo, obj[currentKey], currentKey, obj);\n\n        }\n\n\n\n        return memo;\n\n    }\n\n\n\n    return function(obj, iteratee, memo, context) {\n\n        iteratee = optimizeCb(iteratee, context, 4);\n\n        var keys = !isArrayLike(obj) && _.keys(obj),\n\n        length = (keys || obj).length,\n\n        index = dir > 0 ? 0 : length - 1;\n\n        // Determine the initial value if none is provided.\n\n        if (arguments.length < 3) {\n\n            memo = obj[keys ? keys[index] : index];\n\n            index += dir;\n\n        }\n\n        \n\n        return iterator(obj, iteratee, memo, keys, index, length);\n\n    };\n\n}\n\n```\n\n\n\n这个是reduce和reduceRight调用的内部函数，将memo这个变量作为入参传递给iterator\n\n函数，调用自定义的iteratee函数进行循环处理，每次处理完的结果都赋值给memo变量，最后返回memo变量的结果。这里有两个问题\n\n\n\n- 为什么这里不按照常理逻辑来写代码而要用闭包呢？闭包大致有这么几个作用：避免命名冲突；私有化变量；变量持久化。这里的作用主要就是变量（函数）持久化，好处就是重复调用的时候不需要再重新创建函数，从而提升执行速度。\n\n- 为什么要用两层闭包呢？第一层闭包持久化iterator函数，调用reduce和reduceRight函数避免重复新建函数。第二层闭包保存keys,index,length这些变量。\n\n\n\n```javascript\n\n263 _.invoke = function(obj, method) {\n\n    var args = slice.call(arguments, 2);\n\n    var isFunc = _.isFunction(method);\n\n    return _.map(obj, function(value) {\n\n        var func = isFunc ? method : value[method];\n\n        return func == null ? func : func.apply(value, args);\n\n    });\n\n};\n\n```\n\n\n\n这里用slice.call(arguments, 2)来获取后面的不定参数，然后用func.apply(value, args)来传入该参数比较有意思。","slug":"underscore02","published":1,"updated":"2016-03-02T14:18:07.222Z","_id":"cijgvit5j0006zp8gmmrl7zov","comments":1,"layout":"post","photos":[],"link":"","content":"<p>先看一下两个比较重要的内部函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">63</span> <span class=\"keyword\">var</span> optimizeCb = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func, context, argCount</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (context === <span class=\"keyword\">void</span> <span class=\"number\">0</span>) <span class=\"keyword\">return</span> func; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (argCount == <span class=\"literal\">null</span> ? <span class=\"number\">3</span> : argCount) &#123; </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>: <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123; </span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> func.call(context, value); </span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;; </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">2</span>: <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, other</span>) </span>&#123; </span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> func.call(context, value, other); </span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;; </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">3</span>: <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, collection</span>) </span>&#123; </span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> func.call(context, value, index, collection); </span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;; </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">4</span>: <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">accumulator, value, index, collection</span>) </span>&#123; </span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> func.call(context, accumulator, value, index, collection); </span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;; </span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> func.apply(context, <span class=\"built_in\">arguments</span>); </span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;; </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a> \n<p>这个函数是underscore内部很重要的函数，主要用来执行函数并改变所执行函数的作用域，最后加了一个argCount参数来指定参数个数，对参数个数小于等于4的情况进行分类处理。对不同参数的解释大概是：</p>\n<ul>\n<li><p>1的情况一般是用在接受单值的情况，比如times,sortedIndex之类的函数。</p>\n</li>\n<li><p>2的情况据说是给比如jQuery,zepto事件绑定，代理什么的，但是在源代码中没有看到被调用。</p>\n</li>\n<li><p>3的情况用于迭代器函数，比如foreach,map,pick等。</p>\n</li>\n<li><p>4的情况用reduce和reduceRight函数。</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">87</span> <span class=\"keyword\">var</span> cb = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, context, argCount</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> _.identity;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_.isFunction(value)) <span class=\"keyword\">return</span> optimizeCb(value, context, argCount);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_.isObject(value)) <span class=\"keyword\">return</span> _.matcher(value);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> _.property(value);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>这也是一个比较常用的内部函数，只是对参数进行了判断：如果是函数则返回上面说到的回调函数；如果是对象则返回一个能判断对象是否相等的函数；默认返回一个获取对象属性的函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">140</span> _.each = _.forEach = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, iteratee, context</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    iteratee = optimizeCb(iteratee, context);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> i, length;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isArrayLike(obj)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>, length = obj.length; i &lt; length; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            iteratee(obj[i], i, obj);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> keys = _.keys(obj);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>, length = keys.length; i &lt; length; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            iteratee(obj[keys[i]], keys[i], obj);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Return the results of applying the iteratee to each element.</span></span><br><span class=\"line\"></span><br><span class=\"line\">_.map = _.collect = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, iteratee, context</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    iteratee = cb(iteratee, context);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> keys = !isArrayLike(obj) &amp;&amp; _.keys(obj),</span><br><span class=\"line\"></span><br><span class=\"line\">    length = (keys || obj).length,</span><br><span class=\"line\"></span><br><span class=\"line\">    results = <span class=\"built_in\">Array</span>(length);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> index = <span class=\"number\">0</span>; index &lt; length; index++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> currentKey = keys ? keys[index] : index;</span><br><span class=\"line\"></span><br><span class=\"line\">        results[index] = iteratee(obj[currentKey], currentKey, obj);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> results;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>从代码上看，each函数是包括map函数的，map只能处理对象，each可以处理对象和数组。至于forEach和collect在API文档中看不到，应该是为了兼容以前老版本做的别名处理。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">170</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createReduce</span>(<span class=\"params\">dir</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Optimized iterator function as using arguments.length</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// in the main function will deoptimize the, see #1991.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">iterator</span>(<span class=\"params\">obj, iteratee, memo, keys, index, length</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (; index &gt;= <span class=\"number\">0</span> &amp;&amp; index &lt; length; index += dir) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">var</span> currentKey = keys ? keys[index] : index;</span><br><span class=\"line\"></span><br><span class=\"line\">            memo = iteratee(memo, obj[currentKey], currentKey, obj);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> memo;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, iteratee, memo, context</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        iteratee = optimizeCb(iteratee, context, <span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> keys = !isArrayLike(obj) &amp;&amp; _.keys(obj),</span><br><span class=\"line\"></span><br><span class=\"line\">        length = (keys || obj).length,</span><br><span class=\"line\"></span><br><span class=\"line\">        index = dir &gt; <span class=\"number\">0</span> ? <span class=\"number\">0</span> : length - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Determine the initial value if none is provided.</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>.length &lt; <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            memo = obj[keys ? keys[index] : index];</span><br><span class=\"line\"></span><br><span class=\"line\">            index += dir;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> iterator(obj, iteratee, memo, keys, index, length);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个是reduce和reduceRight调用的内部函数，将memo这个变量作为入参传递给iterator</p>\n<p>函数，调用自定义的iteratee函数进行循环处理，每次处理完的结果都赋值给memo变量，最后返回memo变量的结果。这里有两个问题</p>\n<ul>\n<li><p>为什么这里不按照常理逻辑来写代码而要用闭包呢？闭包大致有这么几个作用：避免命名冲突；私有化变量；变量持久化。这里的作用主要就是变量（函数）持久化，好处就是重复调用的时候不需要再重新创建函数，从而提升执行速度。</p>\n</li>\n<li><p>为什么要用两层闭包呢？第一层闭包持久化iterator函数，调用reduce和reduceRight函数避免重复新建函数。第二层闭包保存keys,index,length这些变量。</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">263</span> _.invoke = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, method</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> args = slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> isFunc = _.isFunction(method);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> _.map(obj, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> func = isFunc ? method : value[method];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> func == <span class=\"literal\">null</span> ? func : func.apply(value, args);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>这里用slice.call(arguments, 2)来获取后面的不定参数，然后用func.apply(value, args)来传入该参数比较有意思。</p>\n","excerpt":"<p>先看一下两个比较重要的内部函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">63</span> <span class=\"keyword\">var</span> optimizeCb = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func, context, argCount</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (context === <span class=\"keyword\">void</span> <span class=\"number\">0</span>) <span class=\"keyword\">return</span> func; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (argCount == <span class=\"literal\">null</span> ? <span class=\"number\">3</span> : argCount) &#123; </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>: <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123; </span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> func.call(context, value); </span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;; </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">2</span>: <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, other</span>) </span>&#123; </span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> func.call(context, value, other); </span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;; </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">3</span>: <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, collection</span>) </span>&#123; </span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> func.call(context, value, index, collection); </span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;; </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">4</span>: <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">accumulator, value, index, collection</span>) </span>&#123; </span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> func.call(context, accumulator, value, index, collection); </span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;; </span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> func.apply(context, <span class=\"built_in\">arguments</span>); </span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;; </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","more":"<p>这个函数是underscore内部很重要的函数，主要用来执行函数并改变所执行函数的作用域，最后加了一个argCount参数来指定参数个数，对参数个数小于等于4的情况进行分类处理。对不同参数的解释大概是：</p>\n<ul>\n<li><p>1的情况一般是用在接受单值的情况，比如times,sortedIndex之类的函数。</p>\n</li>\n<li><p>2的情况据说是给比如jQuery,zepto事件绑定，代理什么的，但是在源代码中没有看到被调用。</p>\n</li>\n<li><p>3的情况用于迭代器函数，比如foreach,map,pick等。</p>\n</li>\n<li><p>4的情况用reduce和reduceRight函数。</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">87</span> <span class=\"keyword\">var</span> cb = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, context, argCount</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> _.identity;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_.isFunction(value)) <span class=\"keyword\">return</span> optimizeCb(value, context, argCount);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_.isObject(value)) <span class=\"keyword\">return</span> _.matcher(value);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> _.property(value);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>这也是一个比较常用的内部函数，只是对参数进行了判断：如果是函数则返回上面说到的回调函数；如果是对象则返回一个能判断对象是否相等的函数；默认返回一个获取对象属性的函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">140</span> _.each = _.forEach = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, iteratee, context</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    iteratee = optimizeCb(iteratee, context);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> i, length;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isArrayLike(obj)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>, length = obj.length; i &lt; length; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            iteratee(obj[i], i, obj);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> keys = _.keys(obj);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>, length = keys.length; i &lt; length; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            iteratee(obj[keys[i]], keys[i], obj);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Return the results of applying the iteratee to each element.</span></span><br><span class=\"line\"></span><br><span class=\"line\">_.map = _.collect = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, iteratee, context</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    iteratee = cb(iteratee, context);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> keys = !isArrayLike(obj) &amp;&amp; _.keys(obj),</span><br><span class=\"line\"></span><br><span class=\"line\">    length = (keys || obj).length,</span><br><span class=\"line\"></span><br><span class=\"line\">    results = <span class=\"built_in\">Array</span>(length);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> index = <span class=\"number\">0</span>; index &lt; length; index++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> currentKey = keys ? keys[index] : index;</span><br><span class=\"line\"></span><br><span class=\"line\">        results[index] = iteratee(obj[currentKey], currentKey, obj);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> results;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>从代码上看，each函数是包括map函数的，map只能处理对象，each可以处理对象和数组。至于forEach和collect在API文档中看不到，应该是为了兼容以前老版本做的别名处理。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">170</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createReduce</span>(<span class=\"params\">dir</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Optimized iterator function as using arguments.length</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// in the main function will deoptimize the, see #1991.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">iterator</span>(<span class=\"params\">obj, iteratee, memo, keys, index, length</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (; index &gt;= <span class=\"number\">0</span> &amp;&amp; index &lt; length; index += dir) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">var</span> currentKey = keys ? keys[index] : index;</span><br><span class=\"line\"></span><br><span class=\"line\">            memo = iteratee(memo, obj[currentKey], currentKey, obj);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> memo;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, iteratee, memo, context</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        iteratee = optimizeCb(iteratee, context, <span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> keys = !isArrayLike(obj) &amp;&amp; _.keys(obj),</span><br><span class=\"line\"></span><br><span class=\"line\">        length = (keys || obj).length,</span><br><span class=\"line\"></span><br><span class=\"line\">        index = dir &gt; <span class=\"number\">0</span> ? <span class=\"number\">0</span> : length - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Determine the initial value if none is provided.</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>.length &lt; <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            memo = obj[keys ? keys[index] : index];</span><br><span class=\"line\"></span><br><span class=\"line\">            index += dir;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> iterator(obj, iteratee, memo, keys, index, length);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个是reduce和reduceRight调用的内部函数，将memo这个变量作为入参传递给iterator</p>\n<p>函数，调用自定义的iteratee函数进行循环处理，每次处理完的结果都赋值给memo变量，最后返回memo变量的结果。这里有两个问题</p>\n<ul>\n<li><p>为什么这里不按照常理逻辑来写代码而要用闭包呢？闭包大致有这么几个作用：避免命名冲突；私有化变量；变量持久化。这里的作用主要就是变量（函数）持久化，好处就是重复调用的时候不需要再重新创建函数，从而提升执行速度。</p>\n</li>\n<li><p>为什么要用两层闭包呢？第一层闭包持久化iterator函数，调用reduce和reduceRight函数避免重复新建函数。第二层闭包保存keys,index,length这些变量。</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">263</span> _.invoke = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, method</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> args = slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> isFunc = _.isFunction(method);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> _.map(obj, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> func = isFunc ? method : value[method];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> func == <span class=\"literal\">null</span> ? func : func.apply(value, args);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>这里用slice.call(arguments, 2)来获取后面的不定参数，然后用func.apply(value, args)来传入该参数比较有意思。</p>"},{"title":"underscore源码通读（一）","date":"2015-10-27T12:51:00.000Z","_content":"\n> underscore 源码版本 1.8.2\n\n\n\n# 起因\n\n\n\n很多人向我推荐研究js，可以看看一些第三方js类库的源码，而源码之中最好解读也最简短的就是underscore，它也是我平常比较喜欢的一个库，因为它性价比高：体积小、能力强。打开一看，才1000多行，试着读了一下，确实很值得一看，所以对精彩部分做了一下整理。\n\n\n\n# 闭包\n\n\n\n整个函数在一个闭包中，避免污染全局变量。通过传入this（其实就是window对象）来改变函数的作用域。和jquery的自执行函数其实是异曲同工之妙。这种传入全局变量的方式一方面有利于代码阅读，另一方面方便压缩。\n\n\n\nunderscore写法：\n\n```javascript\n\n(function(){ \n\n    ...\n\n}.call(this));\n\n```\n\n<!-- more --> \n\njquery写法：\n\n```javascript\n\n(function(window, undefined) { \n\n    ...\n\n})(window);\n\n```\n\n\n\n# 原型赋值\n\n\n\n```javascript\n\n18 var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;\n\n```\n\n\n\n`Array`,`Object`,`Function` 这些本质都是函数，获取函数原型属性prototype\n\n也是为了便于压缩。简单解释一下，如果代码中要扩展属性，可能这样写\n\n\n\n```javascript\n\nObject.prototype.xxx = ...\n\n```\n\n\n\n而这种代码是不可压缩的，Object,prototype这些名字改了浏览器就不认得了。\n\n\n\n但是上面的代码中创建了ObjProto之后，源生代码经过压缩之后，ObjProto就可能命名成a变量，那么原来的代码就压缩成\n\n\n\n```javascript\n\na.xxx = ...\n\n```\n\n\n\n一个小建议就是凡事一段代码被使用两次以上都建议定义变量(函数)，有利于修改和压缩代码。\n\n\n\n# 格式\n\n\n\n```javascript\n\n29 var\n\nnativeIsArray = Array.isArray,\n\nnativeKeys = Object.keys,\n\nnativeBind = FuncProto.bind,\n\nnativeCreate = Object.create;\n\n```\n\n\n\n这种定义的方式省略了多余的var，格式也美观，让我想到了sublime中的一个插件alignment。\n\n\n\n# 数据判断\n\n\n\n```javascript\n\n1194 _.isElement = function(obj) { \n\n    return !!(obj && obj.nodeType === 1); \n\n};\n\n```\n\n\n\n判断是否为dom，dom的nodeType属性值为1。这里用!!强转为boolean值\n\n\n\n```javascript\n\n1200 _.isArray = nativeIsArray || function(obj) { \n\n    return toString.call(obj) === '[object Array]'; \n\n};\n\n```\n\n\n\n判断是否为数组。由于Array.isArray函数是ECMAScript 5新增函数，所以为了兼容之前的版本，在原生判断函数不存在的情况下，后面重写了一个判断函数。用call函数来改变作用域可以避免当obj没有toString函数报错的情况。\n\n\n\n```javascript\n\n1205 _.isObject = function(obj) { \n\n    var type = typeof obj; \n\n    return type === 'function' || type === 'object' && !!obj;\n\n};\n\n```\n\n\n\n判断是否为对象。先用typeof判断数据类型。函数也属于对象，但是由于typeof null也是object，所以用!!obj来区分这种情况。\n\n\n\n```javascript\n\n1219 if (!_.isArguments(arguments)) {\n\n    _.isArguments = function(obj) { \n\n        return _.has(obj, 'callee');\n\n    };\n\n}\n\n```\n\n\n\n判断是否为arguments,很简单，arguments有个特有属性callee。\n\n\n\n```javascript\n\n1239 _.isNaN = function(obj) {\n\n    return _.isNumber(obj) && obj !== +obj; \n\n};\n\n```\n\n\n\nNaN这个值有两个特点：1.它是一个数；2.不等于它自己。\n\n\n\n‘+’放在变量前面一般作用是把后面的变量变成一个数，在这里已经判断为一个数仍加上’+’，是为了把var num = new Number()这种没有值的数字也归为NaN。\n\n\n\n```javascript\n\n1244 _.isBoolean = function(obj) {\n\n    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';\n\n};\n\n```\n\n\n\n是不是以为如果是布尔值不是true就是false？还有第3中情况var b = new Boolean()。b也是布尔值。\n\n\n\n```javascript\n\n1254 _.isUndefined = function(obj) {\n\n    return obj === void 0;\n\n};\n\n```\n\n\n\n用void 0来表示undefined，非常有意思的小技巧。不过常用方式还是if(xxx)来判断是不是undefined。\n\n\n\neq是underscore的一个内置函数，代码太长，不粘贴了。isEmpty调用了这个函数。整个思路由易到难，先用===比较简单数据，然后用toString来判断是否相等，最后用递归处理复杂的Array、Function和Object对象。\n\n\n\n```javascript\n\n1091 if (a === b) return a !== 0 || 1 / a === 1 / b;\n\n```\n\n\n\n这里为了区分’+0’和’-0’，因为这两个数对计算结果是有影响的。\n\n\n\n```javascript\n\nif (className !== toString.call(b)) return false;\n\nswitch (className) { \n\n        // Strings, numbers, regular expressions, dates, and booleans are compared by value. \n\n    case '[object RegExp]': \n\n        // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')\n\n    case '[object String]': \n\n        // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is \n\n        // equivalent to `new String(\"5\")`. \n\n        return '' + a === '' + b; \n\n    case '[object Number]': \n\n        // `NaN`s are equivalent, but non-reflexive. \n\n        // Object(NaN) is equivalent to NaN if (+a !== +a) \n\n        return +b !== +b; \n\n        // An `egal` comparison is performed for other numeric values. \n\n        return +a === 0 ? 1 / +a === 1 / b : +a === +b; \n\n    case '[object Date]': \n\n    case '[object Boolean]': \n\n        // Coerce dates and booleans to numeric primitive values. Dates are compared by their \n\n        // millisecond representations. Note that invalid dates with millisecond representations \n\n        // of `NaN` are not equivalent. \n\n        return +a === +b;\n\n}\n\n```\n\n\n\n这里是对简单对象进行判断，分为两类，一类是String和RegExp，这种数据直接toString然后判断。另一类是Number、Date和Boolean，通过转换成数字判断。\n\n\n\n```javascript\n\n1150 aStack.push(a);\n\nbStack.push(b);\n\nif (areArrays) { \n\n    length = a.length; \n\n    if (length !== b.length) return false; \n\n    while (length--) { \n\n        if (!eq(a[length], b[length], aStack, bStack)) return false; \n\n    }\n\n} else { \n\n    var keys = _.keys(a), key;\n\n    length = keys.length; \n\n    if (_.keys(b).length !== length) return false; \n\n    while (length--) { \n\n        key = keys[length]; \n\n        if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;   \n\n    }\n\n}\n\naStack.pop();\n\nbStack.pop();\n\n```\n\n\n\n对于数组和对象只能用递归了，同时用aStack和bStack来暂存递归中的子对象。这里一个小技巧的就是先判断数组/属性的长度，如果不相等可以有效地减少递归。\n\n","source":"_posts/underscore01.md","raw":"title: underscore源码通读（一）\ndate: 2015-10-27 20:51:00\ntags:\n---\n\n> underscore 源码版本 1.8.2\n\n\n\n# 起因\n\n\n\n很多人向我推荐研究js，可以看看一些第三方js类库的源码，而源码之中最好解读也最简短的就是underscore，它也是我平常比较喜欢的一个库，因为它性价比高：体积小、能力强。打开一看，才1000多行，试着读了一下，确实很值得一看，所以对精彩部分做了一下整理。\n\n\n\n# 闭包\n\n\n\n整个函数在一个闭包中，避免污染全局变量。通过传入this（其实就是window对象）来改变函数的作用域。和jquery的自执行函数其实是异曲同工之妙。这种传入全局变量的方式一方面有利于代码阅读，另一方面方便压缩。\n\n\n\nunderscore写法：\n\n```javascript\n\n(function(){ \n\n    ...\n\n}.call(this));\n\n```\n\n<!-- more --> \n\njquery写法：\n\n```javascript\n\n(function(window, undefined) { \n\n    ...\n\n})(window);\n\n```\n\n\n\n# 原型赋值\n\n\n\n```javascript\n\n18 var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;\n\n```\n\n\n\n`Array`,`Object`,`Function` 这些本质都是函数，获取函数原型属性prototype\n\n也是为了便于压缩。简单解释一下，如果代码中要扩展属性，可能这样写\n\n\n\n```javascript\n\nObject.prototype.xxx = ...\n\n```\n\n\n\n而这种代码是不可压缩的，Object,prototype这些名字改了浏览器就不认得了。\n\n\n\n但是上面的代码中创建了ObjProto之后，源生代码经过压缩之后，ObjProto就可能命名成a变量，那么原来的代码就压缩成\n\n\n\n```javascript\n\na.xxx = ...\n\n```\n\n\n\n一个小建议就是凡事一段代码被使用两次以上都建议定义变量(函数)，有利于修改和压缩代码。\n\n\n\n# 格式\n\n\n\n```javascript\n\n29 var\n\nnativeIsArray = Array.isArray,\n\nnativeKeys = Object.keys,\n\nnativeBind = FuncProto.bind,\n\nnativeCreate = Object.create;\n\n```\n\n\n\n这种定义的方式省略了多余的var，格式也美观，让我想到了sublime中的一个插件alignment。\n\n\n\n# 数据判断\n\n\n\n```javascript\n\n1194 _.isElement = function(obj) { \n\n    return !!(obj && obj.nodeType === 1); \n\n};\n\n```\n\n\n\n判断是否为dom，dom的nodeType属性值为1。这里用!!强转为boolean值\n\n\n\n```javascript\n\n1200 _.isArray = nativeIsArray || function(obj) { \n\n    return toString.call(obj) === '[object Array]'; \n\n};\n\n```\n\n\n\n判断是否为数组。由于Array.isArray函数是ECMAScript 5新增函数，所以为了兼容之前的版本，在原生判断函数不存在的情况下，后面重写了一个判断函数。用call函数来改变作用域可以避免当obj没有toString函数报错的情况。\n\n\n\n```javascript\n\n1205 _.isObject = function(obj) { \n\n    var type = typeof obj; \n\n    return type === 'function' || type === 'object' && !!obj;\n\n};\n\n```\n\n\n\n判断是否为对象。先用typeof判断数据类型。函数也属于对象，但是由于typeof null也是object，所以用!!obj来区分这种情况。\n\n\n\n```javascript\n\n1219 if (!_.isArguments(arguments)) {\n\n    _.isArguments = function(obj) { \n\n        return _.has(obj, 'callee');\n\n    };\n\n}\n\n```\n\n\n\n判断是否为arguments,很简单，arguments有个特有属性callee。\n\n\n\n```javascript\n\n1239 _.isNaN = function(obj) {\n\n    return _.isNumber(obj) && obj !== +obj; \n\n};\n\n```\n\n\n\nNaN这个值有两个特点：1.它是一个数；2.不等于它自己。\n\n\n\n‘+’放在变量前面一般作用是把后面的变量变成一个数，在这里已经判断为一个数仍加上’+’，是为了把var num = new Number()这种没有值的数字也归为NaN。\n\n\n\n```javascript\n\n1244 _.isBoolean = function(obj) {\n\n    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';\n\n};\n\n```\n\n\n\n是不是以为如果是布尔值不是true就是false？还有第3中情况var b = new Boolean()。b也是布尔值。\n\n\n\n```javascript\n\n1254 _.isUndefined = function(obj) {\n\n    return obj === void 0;\n\n};\n\n```\n\n\n\n用void 0来表示undefined，非常有意思的小技巧。不过常用方式还是if(xxx)来判断是不是undefined。\n\n\n\neq是underscore的一个内置函数，代码太长，不粘贴了。isEmpty调用了这个函数。整个思路由易到难，先用===比较简单数据，然后用toString来判断是否相等，最后用递归处理复杂的Array、Function和Object对象。\n\n\n\n```javascript\n\n1091 if (a === b) return a !== 0 || 1 / a === 1 / b;\n\n```\n\n\n\n这里为了区分’+0’和’-0’，因为这两个数对计算结果是有影响的。\n\n\n\n```javascript\n\nif (className !== toString.call(b)) return false;\n\nswitch (className) { \n\n        // Strings, numbers, regular expressions, dates, and booleans are compared by value. \n\n    case '[object RegExp]': \n\n        // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')\n\n    case '[object String]': \n\n        // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is \n\n        // equivalent to `new String(\"5\")`. \n\n        return '' + a === '' + b; \n\n    case '[object Number]': \n\n        // `NaN`s are equivalent, but non-reflexive. \n\n        // Object(NaN) is equivalent to NaN if (+a !== +a) \n\n        return +b !== +b; \n\n        // An `egal` comparison is performed for other numeric values. \n\n        return +a === 0 ? 1 / +a === 1 / b : +a === +b; \n\n    case '[object Date]': \n\n    case '[object Boolean]': \n\n        // Coerce dates and booleans to numeric primitive values. Dates are compared by their \n\n        // millisecond representations. Note that invalid dates with millisecond representations \n\n        // of `NaN` are not equivalent. \n\n        return +a === +b;\n\n}\n\n```\n\n\n\n这里是对简单对象进行判断，分为两类，一类是String和RegExp，这种数据直接toString然后判断。另一类是Number、Date和Boolean，通过转换成数字判断。\n\n\n\n```javascript\n\n1150 aStack.push(a);\n\nbStack.push(b);\n\nif (areArrays) { \n\n    length = a.length; \n\n    if (length !== b.length) return false; \n\n    while (length--) { \n\n        if (!eq(a[length], b[length], aStack, bStack)) return false; \n\n    }\n\n} else { \n\n    var keys = _.keys(a), key;\n\n    length = keys.length; \n\n    if (_.keys(b).length !== length) return false; \n\n    while (length--) { \n\n        key = keys[length]; \n\n        if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;   \n\n    }\n\n}\n\naStack.pop();\n\nbStack.pop();\n\n```\n\n\n\n对于数组和对象只能用递归了，同时用aStack和bStack来暂存递归中的子对象。这里一个小技巧的就是先判断数组/属性的长度，如果不相等可以有效地减少递归。\n\n","slug":"underscore01","published":1,"updated":"2016-03-02T14:18:07.222Z","_id":"cijgvit5k0007zp8ga99maurj","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>underscore 源码版本 1.8.2</p>\n</blockquote>\n<h1 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h1><p>很多人向我推荐研究js，可以看看一些第三方js类库的源码，而源码之中最好解读也最简短的就是underscore，它也是我平常比较喜欢的一个库，因为它性价比高：体积小、能力强。打开一看，才1000多行，试着读了一下，确实很值得一看，所以对精彩部分做了一下整理。</p>\n<h1 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h1><p>整个函数在一个闭包中，避免污染全局变量。通过传入this（其实就是window对象）来改变函数的作用域。和jquery的自执行函数其实是异曲同工之妙。这种传入全局变量的方式一方面有利于代码阅读，另一方面方便压缩。</p>\n<p>underscore写法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; </span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;.call(<span class=\"keyword\">this</span>));</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a> \n<p>jquery写法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">window, undefined</span>) </span>&#123; </span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)(<span class=\"built_in\">window</span>);</span><br></pre></td></tr></table></figure>\n<h1 id=\"原型赋值\"><a href=\"#原型赋值\" class=\"headerlink\" title=\"原型赋值\"></a>原型赋值</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">18</span> <span class=\"keyword\">var</span> ArrayProto = <span class=\"built_in\">Array</span>.prototype, ObjProto = <span class=\"built_in\">Object</span>.prototype, FuncProto = <span class=\"built_in\">Function</span>.prototype;</span><br></pre></td></tr></table></figure>\n<p><code>Array</code>,<code>Object</code>,<code>Function</code> 这些本质都是函数，获取函数原型属性prototype</p>\n<p>也是为了便于压缩。简单解释一下，如果代码中要扩展属性，可能这样写</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.xxx = ...</span><br></pre></td></tr></table></figure>\n<p>而这种代码是不可压缩的，Object,prototype这些名字改了浏览器就不认得了。</p>\n<p>但是上面的代码中创建了ObjProto之后，源生代码经过压缩之后，ObjProto就可能命名成a变量，那么原来的代码就压缩成</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">a.xxx = ...</span><br></pre></td></tr></table></figure>\n<p>一个小建议就是凡事一段代码被使用两次以上都建议定义变量(函数)，有利于修改和压缩代码。</p>\n<h1 id=\"格式\"><a href=\"#格式\" class=\"headerlink\" title=\"格式\"></a>格式</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">29</span> <span class=\"keyword\">var</span></span><br><span class=\"line\"></span><br><span class=\"line\">nativeIsArray = <span class=\"built_in\">Array</span>.isArray,</span><br><span class=\"line\"></span><br><span class=\"line\">nativeKeys = <span class=\"built_in\">Object</span>.keys,</span><br><span class=\"line\"></span><br><span class=\"line\">nativeBind = FuncProto.bind,</span><br><span class=\"line\"></span><br><span class=\"line\">nativeCreate = <span class=\"built_in\">Object</span>.create;</span><br></pre></td></tr></table></figure>\n<p>这种定义的方式省略了多余的var，格式也美观，让我想到了sublime中的一个插件alignment。</p>\n<h1 id=\"数据判断\"><a href=\"#数据判断\" class=\"headerlink\" title=\"数据判断\"></a>数据判断</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1194</span> _.isElement = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> !!(obj &amp;&amp; obj.nodeType === <span class=\"number\">1</span>); </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>判断是否为dom，dom的nodeType属性值为1。这里用!!强转为boolean值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1200</span> _.isArray = nativeIsArray || <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> toString.call(obj) === <span class=\"string\">'[object Array]'</span>; </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>判断是否为数组。由于Array.isArray函数是ECMAScript 5新增函数，所以为了兼容之前的版本，在原生判断函数不存在的情况下，后面重写了一个判断函数。用call函数来改变作用域可以避免当obj没有toString函数报错的情况。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1205</span> _.isObject = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> type = <span class=\"keyword\">typeof</span> obj; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> type === <span class=\"string\">'function'</span> || type === <span class=\"string\">'object'</span> &amp;&amp; !!obj;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>判断是否为对象。先用typeof判断数据类型。函数也属于对象，但是由于typeof null也是object，所以用!!obj来区分这种情况。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1219</span> <span class=\"keyword\">if</span> (!_.isArguments(<span class=\"built_in\">arguments</span>)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    _.isArguments = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123; </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> _.has(obj, <span class=\"string\">'callee'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>判断是否为arguments,很简单，arguments有个特有属性callee。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1239</span> _.isNaN = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> _.isNumber(obj) &amp;&amp; obj !== +obj; </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>NaN这个值有两个特点：1.它是一个数；2.不等于它自己。</p>\n<p>‘+’放在变量前面一般作用是把后面的变量变成一个数，在这里已经判断为一个数仍加上’+’，是为了把var num = new Number()这种没有值的数字也归为NaN。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1244</span> _.isBoolean = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj === <span class=\"literal\">true</span> || obj === <span class=\"literal\">false</span> || toString.call(obj) === <span class=\"string\">'[object Boolean]'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>是不是以为如果是布尔值不是true就是false？还有第3中情况var b = new Boolean()。b也是布尔值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1254</span> _.isUndefined = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj === <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>用void 0来表示undefined，非常有意思的小技巧。不过常用方式还是if(xxx)来判断是不是undefined。</p>\n<p>eq是underscore的一个内置函数，代码太长，不粘贴了。isEmpty调用了这个函数。整个思路由易到难，先用===比较简单数据，然后用toString来判断是否相等，最后用递归处理复杂的Array、Function和Object对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1091</span> <span class=\"keyword\">if</span> (a === b) <span class=\"keyword\">return</span> a !== <span class=\"number\">0</span> || <span class=\"number\">1</span> / a === <span class=\"number\">1</span> / b;</span><br></pre></td></tr></table></figure>\n<p>这里为了区分’+0’和’-0’，因为这两个数对计算结果是有影响的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (className !== toString.call(b)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">switch</span> (className) &#123; </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Strings, numbers, regular expressions, dates, and booleans are compared by value. </span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'[object RegExp]'</span>: </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// RegExps are coerced to strings for comparison (<span class=\"doctag\">Note:</span> '' + /a/i === '/a/i')</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'[object String]'</span>: </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is </span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// equivalent to `new String(\"5\")`. </span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">''</span> + a === <span class=\"string\">''</span> + b; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'[object Number]'</span>: </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// `NaN`s are equivalent, but non-reflexive. </span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Object(NaN) is equivalent to NaN if (+a !== +a) </span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> +b !== +b; </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// An `egal` comparison is performed for other numeric values. </span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> +a === <span class=\"number\">0</span> ? <span class=\"number\">1</span> / +a === <span class=\"number\">1</span> / b : +a === +b; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'[object Date]'</span>: </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'[object Boolean]'</span>: </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Coerce dates and booleans to numeric primitive values. Dates are compared by their </span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// millisecond representations. Note that invalid dates with millisecond representations </span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// of `NaN` are not equivalent. </span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> +a === +b;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里是对简单对象进行判断，分为两类，一类是String和RegExp，这种数据直接toString然后判断。另一类是Number、Date和Boolean，通过转换成数字判断。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1150</span> aStack.push(a);</span><br><span class=\"line\"></span><br><span class=\"line\">bStack.push(b);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (areArrays) &#123; </span><br><span class=\"line\"></span><br><span class=\"line\">    length = a.length; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (length !== b.length) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (length--) &#123; </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!eq(a[length], b[length], aStack, bStack)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; </span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> keys = _.keys(a), key;</span><br><span class=\"line\"></span><br><span class=\"line\">    length = keys.length; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_.keys(b).length !== length) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (length--) &#123; </span><br><span class=\"line\"></span><br><span class=\"line\">        key = keys[length]; </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(_.has(b, key) &amp;&amp; eq(a[key], b[key], aStack, bStack))) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;   </span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">aStack.pop();</span><br><span class=\"line\"></span><br><span class=\"line\">bStack.pop();</span><br></pre></td></tr></table></figure>\n<p>对于数组和对象只能用递归了，同时用aStack和bStack来暂存递归中的子对象。这里一个小技巧的就是先判断数组/属性的长度，如果不相等可以有效地减少递归。</p>\n","excerpt":"<blockquote>\n<p>underscore 源码版本 1.8.2</p>\n</blockquote>\n<h1 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h1><p>很多人向我推荐研究js，可以看看一些第三方js类库的源码，而源码之中最好解读也最简短的就是underscore，它也是我平常比较喜欢的一个库，因为它性价比高：体积小、能力强。打开一看，才1000多行，试着读了一下，确实很值得一看，所以对精彩部分做了一下整理。</p>\n<h1 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h1><p>整个函数在一个闭包中，避免污染全局变量。通过传入this（其实就是window对象）来改变函数的作用域。和jquery的自执行函数其实是异曲同工之妙。这种传入全局变量的方式一方面有利于代码阅读，另一方面方便压缩。</p>\n<p>underscore写法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; </span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;.call(<span class=\"keyword\">this</span>));</span><br></pre></td></tr></table></figure>","more":"<p>jquery写法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">window, undefined</span>) </span>&#123; </span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)(<span class=\"built_in\">window</span>);</span><br></pre></td></tr></table></figure>\n<h1 id=\"原型赋值\"><a href=\"#原型赋值\" class=\"headerlink\" title=\"原型赋值\"></a>原型赋值</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">18</span> <span class=\"keyword\">var</span> ArrayProto = <span class=\"built_in\">Array</span>.prototype, ObjProto = <span class=\"built_in\">Object</span>.prototype, FuncProto = <span class=\"built_in\">Function</span>.prototype;</span><br></pre></td></tr></table></figure>\n<p><code>Array</code>,<code>Object</code>,<code>Function</code> 这些本质都是函数，获取函数原型属性prototype</p>\n<p>也是为了便于压缩。简单解释一下，如果代码中要扩展属性，可能这样写</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.xxx = ...</span><br></pre></td></tr></table></figure>\n<p>而这种代码是不可压缩的，Object,prototype这些名字改了浏览器就不认得了。</p>\n<p>但是上面的代码中创建了ObjProto之后，源生代码经过压缩之后，ObjProto就可能命名成a变量，那么原来的代码就压缩成</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">a.xxx = ...</span><br></pre></td></tr></table></figure>\n<p>一个小建议就是凡事一段代码被使用两次以上都建议定义变量(函数)，有利于修改和压缩代码。</p>\n<h1 id=\"格式\"><a href=\"#格式\" class=\"headerlink\" title=\"格式\"></a>格式</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">29</span> <span class=\"keyword\">var</span></span><br><span class=\"line\"></span><br><span class=\"line\">nativeIsArray = <span class=\"built_in\">Array</span>.isArray,</span><br><span class=\"line\"></span><br><span class=\"line\">nativeKeys = <span class=\"built_in\">Object</span>.keys,</span><br><span class=\"line\"></span><br><span class=\"line\">nativeBind = FuncProto.bind,</span><br><span class=\"line\"></span><br><span class=\"line\">nativeCreate = <span class=\"built_in\">Object</span>.create;</span><br></pre></td></tr></table></figure>\n<p>这种定义的方式省略了多余的var，格式也美观，让我想到了sublime中的一个插件alignment。</p>\n<h1 id=\"数据判断\"><a href=\"#数据判断\" class=\"headerlink\" title=\"数据判断\"></a>数据判断</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1194</span> _.isElement = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> !!(obj &amp;&amp; obj.nodeType === <span class=\"number\">1</span>); </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>判断是否为dom，dom的nodeType属性值为1。这里用!!强转为boolean值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1200</span> _.isArray = nativeIsArray || <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> toString.call(obj) === <span class=\"string\">'[object Array]'</span>; </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>判断是否为数组。由于Array.isArray函数是ECMAScript 5新增函数，所以为了兼容之前的版本，在原生判断函数不存在的情况下，后面重写了一个判断函数。用call函数来改变作用域可以避免当obj没有toString函数报错的情况。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1205</span> _.isObject = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> type = <span class=\"keyword\">typeof</span> obj; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> type === <span class=\"string\">'function'</span> || type === <span class=\"string\">'object'</span> &amp;&amp; !!obj;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>判断是否为对象。先用typeof判断数据类型。函数也属于对象，但是由于typeof null也是object，所以用!!obj来区分这种情况。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1219</span> <span class=\"keyword\">if</span> (!_.isArguments(<span class=\"built_in\">arguments</span>)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    _.isArguments = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123; </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> _.has(obj, <span class=\"string\">'callee'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>判断是否为arguments,很简单，arguments有个特有属性callee。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1239</span> _.isNaN = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> _.isNumber(obj) &amp;&amp; obj !== +obj; </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>NaN这个值有两个特点：1.它是一个数；2.不等于它自己。</p>\n<p>‘+’放在变量前面一般作用是把后面的变量变成一个数，在这里已经判断为一个数仍加上’+’，是为了把var num = new Number()这种没有值的数字也归为NaN。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1244</span> _.isBoolean = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj === <span class=\"literal\">true</span> || obj === <span class=\"literal\">false</span> || toString.call(obj) === <span class=\"string\">'[object Boolean]'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>是不是以为如果是布尔值不是true就是false？还有第3中情况var b = new Boolean()。b也是布尔值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1254</span> _.isUndefined = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj === <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>用void 0来表示undefined，非常有意思的小技巧。不过常用方式还是if(xxx)来判断是不是undefined。</p>\n<p>eq是underscore的一个内置函数，代码太长，不粘贴了。isEmpty调用了这个函数。整个思路由易到难，先用===比较简单数据，然后用toString来判断是否相等，最后用递归处理复杂的Array、Function和Object对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1091</span> <span class=\"keyword\">if</span> (a === b) <span class=\"keyword\">return</span> a !== <span class=\"number\">0</span> || <span class=\"number\">1</span> / a === <span class=\"number\">1</span> / b;</span><br></pre></td></tr></table></figure>\n<p>这里为了区分’+0’和’-0’，因为这两个数对计算结果是有影响的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (className !== toString.call(b)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">switch</span> (className) &#123; </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Strings, numbers, regular expressions, dates, and booleans are compared by value. </span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'[object RegExp]'</span>: </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// RegExps are coerced to strings for comparison (<span class=\"doctag\">Note:</span> '' + /a/i === '/a/i')</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'[object String]'</span>: </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is </span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// equivalent to `new String(\"5\")`. </span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">''</span> + a === <span class=\"string\">''</span> + b; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'[object Number]'</span>: </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// `NaN`s are equivalent, but non-reflexive. </span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Object(NaN) is equivalent to NaN if (+a !== +a) </span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> +b !== +b; </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// An `egal` comparison is performed for other numeric values. </span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> +a === <span class=\"number\">0</span> ? <span class=\"number\">1</span> / +a === <span class=\"number\">1</span> / b : +a === +b; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'[object Date]'</span>: </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'[object Boolean]'</span>: </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Coerce dates and booleans to numeric primitive values. Dates are compared by their </span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// millisecond representations. Note that invalid dates with millisecond representations </span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// of `NaN` are not equivalent. </span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> +a === +b;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里是对简单对象进行判断，分为两类，一类是String和RegExp，这种数据直接toString然后判断。另一类是Number、Date和Boolean，通过转换成数字判断。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1150</span> aStack.push(a);</span><br><span class=\"line\"></span><br><span class=\"line\">bStack.push(b);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (areArrays) &#123; </span><br><span class=\"line\"></span><br><span class=\"line\">    length = a.length; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (length !== b.length) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (length--) &#123; </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!eq(a[length], b[length], aStack, bStack)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; </span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> keys = _.keys(a), key;</span><br><span class=\"line\"></span><br><span class=\"line\">    length = keys.length; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_.keys(b).length !== length) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (length--) &#123; </span><br><span class=\"line\"></span><br><span class=\"line\">        key = keys[length]; </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(_.has(b, key) &amp;&amp; eq(a[key], b[key], aStack, bStack))) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;   </span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">aStack.pop();</span><br><span class=\"line\"></span><br><span class=\"line\">bStack.pop();</span><br></pre></td></tr></table></figure>\n<p>对于数组和对象只能用递归了，同时用aStack和bStack来暂存递归中的子对象。这里一个小技巧的就是先判断数组/属性的长度，如果不相等可以有效地减少递归。</p>"},{"title":"在SublimeText上搭建ReactJS开发环境","date":"2015-11-05T12:51:28.000Z","_content":"\n## 编辑器选择\n\n最近在学习ReactJS，这东西确实不错，但是在实际开发中却有很多问题。不是ReactJS本身的问题，而是开发环境，目前而言并没发现一个真正完美支持JSX语法的编辑器或IDE，这对于ReactJS开发者来说无疑是一个很头疼的事情，以往所习惯的码字方式都要改变，基本上要纯手打，虽然纯手打可以帮助记忆代码，但在工作效率上却就会大打折扣。\n\n\n\n### HBuilder\n\n之前一直用的是DCloud研发的[Hbuilder](http://www.dcloud.io/)来做WEB开发，可能很多人都不熟悉这个工具，简单说就是一个国产的WEB开发专用的IDE，集成了很多功能，习惯了之后工作效率确实提升不少。但Hbuilder在第三方插件方面比较弱，ReactJS的相关插件一个都没有，于是我只能换编辑器了。\n\n<!-- more --> \n\n### Atom\n\n现在的编辑器也很多，这里就不一一列举了。就目前我了解的来说，支持JSX语法高亮、代码提示以及代码校验的插件不多。Atom上有一个比较完善的ReactJS插件[ATOM REACT](http://orktes.github.io/atom-react/)，试用了一下，确实功能挺多，让我小激动了一下。但是Atom的性能却让我很不爽，首先是内存占用太大，我用的OSX，内存一下飙到900M+，一个IDE都没这么占内存。其次就是编辑较大的文件就会卡顿，那敲代码的延迟感简直不能忍，于是我放弃了Atom，可惜了这么好的一个插件。\n\n\n\n### SublimeText\n\n这个编辑器就不多说明了，做WEB开发的多少都了解一些，我之前用过一段时间的SublimeText，觉得找插件很麻烦，就投靠了可以一次搞定的HBuilder。现在重新启用了这个神器，因为我找到了几个很棒的ReactJS插件，下面就来具体说说。\n\n\n\n## SublimeText插件\n\n做ReactJS开发最需要的无疑是这两条：语法高亮、代码提示，如果能够想Emmet那样自动扩展就更好了，这里我可以告诉你，确实可以实现。\n\n\n\n### 语法高亮\n\n[Babel-Sublime](https://github.com/babel/babel-sublime)插件很好的支持了JSX语法的高亮显示，连包裹在组件中的HTML标签都能实现高亮显示，具体的插件安装以及设置方法就不多说了，自行看GitHub上的介绍吧，很简单。\n\n\n\n### 代码提示\n\n[Sublime-React](https://github.com/reactjs/sublime-react)插件严格的说并不是一个代码提示插件，而是一个类似于Emmet的自动扩展代码插件，只需要简单敲几个字母然后按下**TAB**键就能自动扩展成你想要的完整代码片段，效果如下图所示。\n\n\n\n![Sublime-React](http://7xnvp3.com1.z0.glb.clouddn.com/1055563878-563aee89c4438_articlex.gif)\n\n\n\n```\n\n//支持的代码片段如下\n\ncdm→  componentDidMount: fn() { ... }\n\ncdup→  componentDidUpdate: fn(pp, ps) { ... }\n\ncs→  var cx = React.addons.classSet;\n\ncwm→  componentWillMount: fn() { ... }\n\ncwr→  componentWillReceiveProps: fn(np) { ... }\n\ncwu→  componentWillUpdate: fn(np, ns) { ... }\n\ncwun→  componentWillUnmount: fn() { ... }\n\ncx→  cx({ ... })\n\nfdn→  React.findDOMNode(...)\n\nfup→  forceUpdate(...)\n\ngdp→  getDefaultProps: fn() { return {...} } \n\ngis→  getInitialState: fn() { return {...} } \n\nism→  isMounted()\n\nprops→  this.props.\n\npt→  propTypes { ... }\n\nrcc→  component skeleton\n\nrefs→  this.refs.\n\nren→  render: fn() { return ... }\n\nscu→  shouldComponentUpdate: fn(np, ns) { ... }\n\nsst→  this.setState({ ... })\n\nstate→  this.state.\n\n```\n\n\n\n### JSX中使用Emmet\n\n虽然上面这个插件可以实现JSX的代码扩展，但是在JSX中包裹的HTML却不能直接支持Emmet，需要通过安装其他插件以及修改相应设置来实现。首先是安装需要的插件：**RegReplace**和**Chain Of Command**，直接在插件库中搜索安装即可。接下来就是设置了，先在 `KeyBinding – Users` 中插入下面这段代码：\n\n```\n\n{\n\n    \"keys\": [\"tab\"],\n\n    \"command\": \"expand_abbreviation_by_tab\", \n\n    \"context\": [{\n\n        \"operand\": \"source.js\", \n\n        \"operator\": \"equal\", \n\n        \"match_all\": true, \n\n        \"key\": \"selector\"\n\n    },{\n\n        \"key\": \"preceding_text\", \n\n        \"operator\": \"regex_contains\", \n\n        \"operand\": \"(\\\\b(a\\\\b|div|span|p\\\\b|button)(\\\\.\\\\w*|>\\\\w*)?)\", \n\n        \"match_all\": true\n\n    },{\n\n        \"key\": \"selection_empty\", \n\n        \"operator\": \"equal\", \n\n        \"operand\": true, \n\n        \"match_all\": true\n\n    }]\n\n}\n\n```\n\n这样就实现了在JSX中按TAB键来扩展HTML片段了，但是JSX中的HTML和标准的HTML又有不同的地方，就是HTML中的 `class`，在JSX中是 `className`，所以这里就需要修改RegReplace的设置，找到 `Packagea Setting --> Reg Replace --> Settings-User`，插入下面这段代码：\n\n```\n\n{\n\n    \"replacements\": {\n\n        \"js_class\": {\n\n            \"find\": \" class=\\\"\",\n\n            \"replace\": \" className=\\\"\",\n\n            \"greedy\": true,\n\n            \"case\": false\n\n        }\n\n    }\n\n}\n\n```\n\n这样就大功告成了，开始快乐的学习ReactJS吧~~！欢迎各位大神来补充。","source":"_posts/sublime2.md","raw":"title: 在SublimeText上搭建ReactJS开发环境\ndate: 2015-11-05 20:51:28\ntags:\n---\n\n## 编辑器选择\n\n最近在学习ReactJS，这东西确实不错，但是在实际开发中却有很多问题。不是ReactJS本身的问题，而是开发环境，目前而言并没发现一个真正完美支持JSX语法的编辑器或IDE，这对于ReactJS开发者来说无疑是一个很头疼的事情，以往所习惯的码字方式都要改变，基本上要纯手打，虽然纯手打可以帮助记忆代码，但在工作效率上却就会大打折扣。\n\n\n\n### HBuilder\n\n之前一直用的是DCloud研发的[Hbuilder](http://www.dcloud.io/)来做WEB开发，可能很多人都不熟悉这个工具，简单说就是一个国产的WEB开发专用的IDE，集成了很多功能，习惯了之后工作效率确实提升不少。但Hbuilder在第三方插件方面比较弱，ReactJS的相关插件一个都没有，于是我只能换编辑器了。\n\n<!-- more --> \n\n### Atom\n\n现在的编辑器也很多，这里就不一一列举了。就目前我了解的来说，支持JSX语法高亮、代码提示以及代码校验的插件不多。Atom上有一个比较完善的ReactJS插件[ATOM REACT](http://orktes.github.io/atom-react/)，试用了一下，确实功能挺多，让我小激动了一下。但是Atom的性能却让我很不爽，首先是内存占用太大，我用的OSX，内存一下飙到900M+，一个IDE都没这么占内存。其次就是编辑较大的文件就会卡顿，那敲代码的延迟感简直不能忍，于是我放弃了Atom，可惜了这么好的一个插件。\n\n\n\n### SublimeText\n\n这个编辑器就不多说明了，做WEB开发的多少都了解一些，我之前用过一段时间的SublimeText，觉得找插件很麻烦，就投靠了可以一次搞定的HBuilder。现在重新启用了这个神器，因为我找到了几个很棒的ReactJS插件，下面就来具体说说。\n\n\n\n## SublimeText插件\n\n做ReactJS开发最需要的无疑是这两条：语法高亮、代码提示，如果能够想Emmet那样自动扩展就更好了，这里我可以告诉你，确实可以实现。\n\n\n\n### 语法高亮\n\n[Babel-Sublime](https://github.com/babel/babel-sublime)插件很好的支持了JSX语法的高亮显示，连包裹在组件中的HTML标签都能实现高亮显示，具体的插件安装以及设置方法就不多说了，自行看GitHub上的介绍吧，很简单。\n\n\n\n### 代码提示\n\n[Sublime-React](https://github.com/reactjs/sublime-react)插件严格的说并不是一个代码提示插件，而是一个类似于Emmet的自动扩展代码插件，只需要简单敲几个字母然后按下**TAB**键就能自动扩展成你想要的完整代码片段，效果如下图所示。\n\n\n\n![Sublime-React](http://7xnvp3.com1.z0.glb.clouddn.com/1055563878-563aee89c4438_articlex.gif)\n\n\n\n```\n\n//支持的代码片段如下\n\ncdm→  componentDidMount: fn() { ... }\n\ncdup→  componentDidUpdate: fn(pp, ps) { ... }\n\ncs→  var cx = React.addons.classSet;\n\ncwm→  componentWillMount: fn() { ... }\n\ncwr→  componentWillReceiveProps: fn(np) { ... }\n\ncwu→  componentWillUpdate: fn(np, ns) { ... }\n\ncwun→  componentWillUnmount: fn() { ... }\n\ncx→  cx({ ... })\n\nfdn→  React.findDOMNode(...)\n\nfup→  forceUpdate(...)\n\ngdp→  getDefaultProps: fn() { return {...} } \n\ngis→  getInitialState: fn() { return {...} } \n\nism→  isMounted()\n\nprops→  this.props.\n\npt→  propTypes { ... }\n\nrcc→  component skeleton\n\nrefs→  this.refs.\n\nren→  render: fn() { return ... }\n\nscu→  shouldComponentUpdate: fn(np, ns) { ... }\n\nsst→  this.setState({ ... })\n\nstate→  this.state.\n\n```\n\n\n\n### JSX中使用Emmet\n\n虽然上面这个插件可以实现JSX的代码扩展，但是在JSX中包裹的HTML却不能直接支持Emmet，需要通过安装其他插件以及修改相应设置来实现。首先是安装需要的插件：**RegReplace**和**Chain Of Command**，直接在插件库中搜索安装即可。接下来就是设置了，先在 `KeyBinding – Users` 中插入下面这段代码：\n\n```\n\n{\n\n    \"keys\": [\"tab\"],\n\n    \"command\": \"expand_abbreviation_by_tab\", \n\n    \"context\": [{\n\n        \"operand\": \"source.js\", \n\n        \"operator\": \"equal\", \n\n        \"match_all\": true, \n\n        \"key\": \"selector\"\n\n    },{\n\n        \"key\": \"preceding_text\", \n\n        \"operator\": \"regex_contains\", \n\n        \"operand\": \"(\\\\b(a\\\\b|div|span|p\\\\b|button)(\\\\.\\\\w*|>\\\\w*)?)\", \n\n        \"match_all\": true\n\n    },{\n\n        \"key\": \"selection_empty\", \n\n        \"operator\": \"equal\", \n\n        \"operand\": true, \n\n        \"match_all\": true\n\n    }]\n\n}\n\n```\n\n这样就实现了在JSX中按TAB键来扩展HTML片段了，但是JSX中的HTML和标准的HTML又有不同的地方，就是HTML中的 `class`，在JSX中是 `className`，所以这里就需要修改RegReplace的设置，找到 `Packagea Setting --> Reg Replace --> Settings-User`，插入下面这段代码：\n\n```\n\n{\n\n    \"replacements\": {\n\n        \"js_class\": {\n\n            \"find\": \" class=\\\"\",\n\n            \"replace\": \" className=\\\"\",\n\n            \"greedy\": true,\n\n            \"case\": false\n\n        }\n\n    }\n\n}\n\n```\n\n这样就大功告成了，开始快乐的学习ReactJS吧~~！欢迎各位大神来补充。","slug":"sublime2","published":1,"updated":"2016-03-02T14:18:07.222Z","_id":"cijgvit5l0008zp8gdbdw635o","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"编辑器选择\"><a href=\"#编辑器选择\" class=\"headerlink\" title=\"编辑器选择\"></a>编辑器选择</h2><p>最近在学习ReactJS，这东西确实不错，但是在实际开发中却有很多问题。不是ReactJS本身的问题，而是开发环境，目前而言并没发现一个真正完美支持JSX语法的编辑器或IDE，这对于ReactJS开发者来说无疑是一个很头疼的事情，以往所习惯的码字方式都要改变，基本上要纯手打，虽然纯手打可以帮助记忆代码，但在工作效率上却就会大打折扣。</p>\n<h3 id=\"HBuilder\"><a href=\"#HBuilder\" class=\"headerlink\" title=\"HBuilder\"></a>HBuilder</h3><p>之前一直用的是DCloud研发的<a href=\"http://www.dcloud.io/\" target=\"_blank\" rel=\"external\">Hbuilder</a>来做WEB开发，可能很多人都不熟悉这个工具，简单说就是一个国产的WEB开发专用的IDE，集成了很多功能，习惯了之后工作效率确实提升不少。但Hbuilder在第三方插件方面比较弱，ReactJS的相关插件一个都没有，于是我只能换编辑器了。</p>\n<a id=\"more\"></a> \n<h3 id=\"Atom\"><a href=\"#Atom\" class=\"headerlink\" title=\"Atom\"></a>Atom</h3><p>现在的编辑器也很多，这里就不一一列举了。就目前我了解的来说，支持JSX语法高亮、代码提示以及代码校验的插件不多。Atom上有一个比较完善的ReactJS插件<a href=\"http://orktes.github.io/atom-react/\" target=\"_blank\" rel=\"external\">ATOM REACT</a>，试用了一下，确实功能挺多，让我小激动了一下。但是Atom的性能却让我很不爽，首先是内存占用太大，我用的OSX，内存一下飙到900M+，一个IDE都没这么占内存。其次就是编辑较大的文件就会卡顿，那敲代码的延迟感简直不能忍，于是我放弃了Atom，可惜了这么好的一个插件。</p>\n<h3 id=\"SublimeText\"><a href=\"#SublimeText\" class=\"headerlink\" title=\"SublimeText\"></a>SublimeText</h3><p>这个编辑器就不多说明了，做WEB开发的多少都了解一些，我之前用过一段时间的SublimeText，觉得找插件很麻烦，就投靠了可以一次搞定的HBuilder。现在重新启用了这个神器，因为我找到了几个很棒的ReactJS插件，下面就来具体说说。</p>\n<h2 id=\"SublimeText插件\"><a href=\"#SublimeText插件\" class=\"headerlink\" title=\"SublimeText插件\"></a>SublimeText插件</h2><p>做ReactJS开发最需要的无疑是这两条：语法高亮、代码提示，如果能够想Emmet那样自动扩展就更好了，这里我可以告诉你，确实可以实现。</p>\n<h3 id=\"语法高亮\"><a href=\"#语法高亮\" class=\"headerlink\" title=\"语法高亮\"></a>语法高亮</h3><p><a href=\"https://github.com/babel/babel-sublime\" target=\"_blank\" rel=\"external\">Babel-Sublime</a>插件很好的支持了JSX语法的高亮显示，连包裹在组件中的HTML标签都能实现高亮显示，具体的插件安装以及设置方法就不多说了，自行看GitHub上的介绍吧，很简单。</p>\n<h3 id=\"代码提示\"><a href=\"#代码提示\" class=\"headerlink\" title=\"代码提示\"></a>代码提示</h3><p><a href=\"https://github.com/reactjs/sublime-react\" target=\"_blank\" rel=\"external\">Sublime-React</a>插件严格的说并不是一个代码提示插件，而是一个类似于Emmet的自动扩展代码插件，只需要简单敲几个字母然后按下<strong>TAB</strong>键就能自动扩展成你想要的完整代码片段，效果如下图所示。</p>\n<p><img src=\"http://7xnvp3.com1.z0.glb.clouddn.com/1055563878-563aee89c4438_articlex.gif\" alt=\"Sublime-React\"></p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//支持的代码片段如下</span></span><br><span class=\"line\"></span><br><span class=\"line\">cdm→  componentDidMount: <span class=\"function\"><span class=\"keyword\">fn</span></span>() &#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">cdup→  componentDidUpdate: <span class=\"function\"><span class=\"keyword\">fn</span></span>(pp, ps) &#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">cs→  var cx = React.addons.classSet;</span><br><span class=\"line\"></span><br><span class=\"line\">cwm→  componentWillMount: <span class=\"function\"><span class=\"keyword\">fn</span></span>() &#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">cwr→  componentWillReceiveProps: <span class=\"function\"><span class=\"keyword\">fn</span></span>(np) &#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">cwu→  componentWillUpdate: <span class=\"function\"><span class=\"keyword\">fn</span></span>(np, ns) &#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">cwun→  componentWillUnmount: <span class=\"function\"><span class=\"keyword\">fn</span></span>() &#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">cx→  cx(&#123; ... &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">fdn→  React.findDOMNode(...)</span><br><span class=\"line\"></span><br><span class=\"line\">fup→  forceUpdate(...)</span><br><span class=\"line\"></span><br><span class=\"line\">gdp→  getDefaultProps: <span class=\"function\"><span class=\"keyword\">fn</span></span>() &#123; <span class=\"keyword\">return</span> &#123;...&#125; &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">gis→  getInitialState: <span class=\"function\"><span class=\"keyword\">fn</span></span>() &#123; <span class=\"keyword\">return</span> &#123;...&#125; &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">ism→  isMounted()</span><br><span class=\"line\"></span><br><span class=\"line\">props→  this.props.</span><br><span class=\"line\"></span><br><span class=\"line\">pt→  propTypes &#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">rcc→  component skeleton</span><br><span class=\"line\"></span><br><span class=\"line\">refs→  this.refs.</span><br><span class=\"line\"></span><br><span class=\"line\">ren→  render: <span class=\"function\"><span class=\"keyword\">fn</span></span>() &#123; <span class=\"keyword\">return</span> ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">scu→  shouldComponentUpdate: <span class=\"function\"><span class=\"keyword\">fn</span></span>(np, ns) &#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">sst→  this.setState(&#123; ... &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">state→  this.state.</span><br></pre></td></tr></table></figure>\n<h3 id=\"JSX中使用Emmet\"><a href=\"#JSX中使用Emmet\" class=\"headerlink\" title=\"JSX中使用Emmet\"></a>JSX中使用Emmet</h3><p>虽然上面这个插件可以实现JSX的代码扩展，但是在JSX中包裹的HTML却不能直接支持Emmet，需要通过安装其他插件以及修改相应设置来实现。首先是安装需要的插件：<strong>RegReplace</strong>和<strong>Chain Of Command</strong>，直接在插件库中搜索安装即可。接下来就是设置了，先在 <code>KeyBinding – Users</code> 中插入下面这段代码：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">\"keys\"</span>: [<span class=\"string\">\"tab\"</span>],</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">\"command\"</span>: <span class=\"string\">\"expand_abbreviation_by_tab\"</span>, </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">\"context\"</span>: [&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">\"operand\"</span>: <span class=\"string\">\"source.js\"</span>, </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">\"operator\"</span>: <span class=\"string\">\"equal\"</span>, </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">\"match_all\"</span>: <span class=\"literal\">true</span>, </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">\"key\"</span>: <span class=\"string\">\"selector\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;,&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">\"key\"</span>: <span class=\"string\">\"preceding_text\"</span>, </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">\"operator\"</span>: <span class=\"string\">\"regex_contains\"</span>, </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">\"operand\"</span>: <span class=\"string\">\"(\\\\b(a\\\\b|div|span|p\\\\b|button)(\\\\.\\\\w*|&gt;\\\\w*)?)\"</span>, </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">\"match_all\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;,&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">\"key\"</span>: <span class=\"string\">\"selection_empty\"</span>, </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">\"operator\"</span>: <span class=\"string\">\"equal\"</span>, </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">\"operand\"</span>: <span class=\"literal\">true</span>, </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">\"match_all\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样就实现了在JSX中按TAB键来扩展HTML片段了，但是JSX中的HTML和标准的HTML又有不同的地方，就是HTML中的 <code>class</code>，在JSX中是 <code>className</code>，所以这里就需要修改RegReplace的设置，找到 <code>Packagea Setting --&gt; Reg Replace --&gt; Settings-User</code>，插入下面这段代码：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">\"replacements\"</span>: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">\"js_class\"</span>: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"attr\">\"find\"</span>: <span class=\"string\">\" class=\\\"\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"attr\">\"replace\"</span>: <span class=\"string\">\" className=\\\"\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"attr\">\"greedy\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"attr\">\"case\"</span>: <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样就大功告成了，开始快乐的学习ReactJS吧~~！欢迎各位大神来补充。</p>\n","excerpt":"<h2 id=\"编辑器选择\"><a href=\"#编辑器选择\" class=\"headerlink\" title=\"编辑器选择\"></a>编辑器选择</h2><p>最近在学习ReactJS，这东西确实不错，但是在实际开发中却有很多问题。不是ReactJS本身的问题，而是开发环境，目前而言并没发现一个真正完美支持JSX语法的编辑器或IDE，这对于ReactJS开发者来说无疑是一个很头疼的事情，以往所习惯的码字方式都要改变，基本上要纯手打，虽然纯手打可以帮助记忆代码，但在工作效率上却就会大打折扣。</p>\n<h3 id=\"HBuilder\"><a href=\"#HBuilder\" class=\"headerlink\" title=\"HBuilder\"></a>HBuilder</h3><p>之前一直用的是DCloud研发的<a href=\"http://www.dcloud.io/\">Hbuilder</a>来做WEB开发，可能很多人都不熟悉这个工具，简单说就是一个国产的WEB开发专用的IDE，集成了很多功能，习惯了之后工作效率确实提升不少。但Hbuilder在第三方插件方面比较弱，ReactJS的相关插件一个都没有，于是我只能换编辑器了。</p>","more":"<h3 id=\"Atom\"><a href=\"#Atom\" class=\"headerlink\" title=\"Atom\"></a>Atom</h3><p>现在的编辑器也很多，这里就不一一列举了。就目前我了解的来说，支持JSX语法高亮、代码提示以及代码校验的插件不多。Atom上有一个比较完善的ReactJS插件<a href=\"http://orktes.github.io/atom-react/\">ATOM REACT</a>，试用了一下，确实功能挺多，让我小激动了一下。但是Atom的性能却让我很不爽，首先是内存占用太大，我用的OSX，内存一下飙到900M+，一个IDE都没这么占内存。其次就是编辑较大的文件就会卡顿，那敲代码的延迟感简直不能忍，于是我放弃了Atom，可惜了这么好的一个插件。</p>\n<h3 id=\"SublimeText\"><a href=\"#SublimeText\" class=\"headerlink\" title=\"SublimeText\"></a>SublimeText</h3><p>这个编辑器就不多说明了，做WEB开发的多少都了解一些，我之前用过一段时间的SublimeText，觉得找插件很麻烦，就投靠了可以一次搞定的HBuilder。现在重新启用了这个神器，因为我找到了几个很棒的ReactJS插件，下面就来具体说说。</p>\n<h2 id=\"SublimeText插件\"><a href=\"#SublimeText插件\" class=\"headerlink\" title=\"SublimeText插件\"></a>SublimeText插件</h2><p>做ReactJS开发最需要的无疑是这两条：语法高亮、代码提示，如果能够想Emmet那样自动扩展就更好了，这里我可以告诉你，确实可以实现。</p>\n<h3 id=\"语法高亮\"><a href=\"#语法高亮\" class=\"headerlink\" title=\"语法高亮\"></a>语法高亮</h3><p><a href=\"https://github.com/babel/babel-sublime\">Babel-Sublime</a>插件很好的支持了JSX语法的高亮显示，连包裹在组件中的HTML标签都能实现高亮显示，具体的插件安装以及设置方法就不多说了，自行看GitHub上的介绍吧，很简单。</p>\n<h3 id=\"代码提示\"><a href=\"#代码提示\" class=\"headerlink\" title=\"代码提示\"></a>代码提示</h3><p><a href=\"https://github.com/reactjs/sublime-react\">Sublime-React</a>插件严格的说并不是一个代码提示插件，而是一个类似于Emmet的自动扩展代码插件，只需要简单敲几个字母然后按下<strong>TAB</strong>键就能自动扩展成你想要的完整代码片段，效果如下图所示。</p>\n<p><img src=\"http://7xnvp3.com1.z0.glb.clouddn.com/1055563878-563aee89c4438_articlex.gif\" alt=\"Sublime-React\"></p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//支持的代码片段如下</span></span><br><span class=\"line\"></span><br><span class=\"line\">cdm→  componentDidMount: <span class=\"function\"><span class=\"keyword\">fn</span></span>() &#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">cdup→  componentDidUpdate: <span class=\"function\"><span class=\"keyword\">fn</span></span>(pp, ps) &#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">cs→  var cx = React.addons.classSet;</span><br><span class=\"line\"></span><br><span class=\"line\">cwm→  componentWillMount: <span class=\"function\"><span class=\"keyword\">fn</span></span>() &#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">cwr→  componentWillReceiveProps: <span class=\"function\"><span class=\"keyword\">fn</span></span>(np) &#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">cwu→  componentWillUpdate: <span class=\"function\"><span class=\"keyword\">fn</span></span>(np, ns) &#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">cwun→  componentWillUnmount: <span class=\"function\"><span class=\"keyword\">fn</span></span>() &#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">cx→  cx(&#123; ... &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">fdn→  React.findDOMNode(...)</span><br><span class=\"line\"></span><br><span class=\"line\">fup→  forceUpdate(...)</span><br><span class=\"line\"></span><br><span class=\"line\">gdp→  getDefaultProps: <span class=\"function\"><span class=\"keyword\">fn</span></span>() &#123; <span class=\"keyword\">return</span> &#123;...&#125; &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">gis→  getInitialState: <span class=\"function\"><span class=\"keyword\">fn</span></span>() &#123; <span class=\"keyword\">return</span> &#123;...&#125; &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">ism→  isMounted()</span><br><span class=\"line\"></span><br><span class=\"line\">props→  this.props.</span><br><span class=\"line\"></span><br><span class=\"line\">pt→  propTypes &#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">rcc→  component skeleton</span><br><span class=\"line\"></span><br><span class=\"line\">refs→  this.refs.</span><br><span class=\"line\"></span><br><span class=\"line\">ren→  render: <span class=\"function\"><span class=\"keyword\">fn</span></span>() &#123; <span class=\"keyword\">return</span> ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">scu→  shouldComponentUpdate: <span class=\"function\"><span class=\"keyword\">fn</span></span>(np, ns) &#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">sst→  this.setState(&#123; ... &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">state→  this.state.</span><br></pre></td></tr></table></figure>\n<h3 id=\"JSX中使用Emmet\"><a href=\"#JSX中使用Emmet\" class=\"headerlink\" title=\"JSX中使用Emmet\"></a>JSX中使用Emmet</h3><p>虽然上面这个插件可以实现JSX的代码扩展，但是在JSX中包裹的HTML却不能直接支持Emmet，需要通过安装其他插件以及修改相应设置来实现。首先是安装需要的插件：<strong>RegReplace</strong>和<strong>Chain Of Command</strong>，直接在插件库中搜索安装即可。接下来就是设置了，先在 <code>KeyBinding – Users</code> 中插入下面这段代码：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">\"keys\"</span>: [<span class=\"string\">\"tab\"</span>],</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">\"command\"</span>: <span class=\"string\">\"expand_abbreviation_by_tab\"</span>, </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">\"context\"</span>: [&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">\"operand\"</span>: <span class=\"string\">\"source.js\"</span>, </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">\"operator\"</span>: <span class=\"string\">\"equal\"</span>, </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">\"match_all\"</span>: <span class=\"literal\">true</span>, </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">\"key\"</span>: <span class=\"string\">\"selector\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;,&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">\"key\"</span>: <span class=\"string\">\"preceding_text\"</span>, </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">\"operator\"</span>: <span class=\"string\">\"regex_contains\"</span>, </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">\"operand\"</span>: <span class=\"string\">\"(\\\\b(a\\\\b|div|span|p\\\\b|button)(\\\\.\\\\w*|&gt;\\\\w*)?)\"</span>, </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">\"match_all\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;,&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">\"key\"</span>: <span class=\"string\">\"selection_empty\"</span>, </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">\"operator\"</span>: <span class=\"string\">\"equal\"</span>, </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">\"operand\"</span>: <span class=\"literal\">true</span>, </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">\"match_all\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样就实现了在JSX中按TAB键来扩展HTML片段了，但是JSX中的HTML和标准的HTML又有不同的地方，就是HTML中的 <code>class</code>，在JSX中是 <code>className</code>，所以这里就需要修改RegReplace的设置，找到 <code>Packagea Setting --&gt; Reg Replace --&gt; Settings-User</code>，插入下面这段代码：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">\"replacements\"</span>: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">\"js_class\"</span>: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"attr\">\"find\"</span>: <span class=\"string\">\" class=\\\"\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"attr\">\"replace\"</span>: <span class=\"string\">\" className=\\\"\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"attr\">\"greedy\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"attr\">\"case\"</span>: <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样就大功告成了，开始快乐的学习ReactJS吧~~！欢迎各位大神来补充。</p>"},{"title":"我的 Sublime Text 必备插件","date":"2015-11-04T11:52:35.000Z","_content":"\n## 常用插件清单 :\n\n* SideBarEnhancements\n\n* HTML-CSS-JS Prettify\n\n* SublimeCodeIntel\n\n* Emmet\n\n\n\n## SideBarEnhancements\n\nSublime Text有一个缺点，当你想使用浏览器浏览你的html页面的时候，你需要在你的文件上点击鼠标右键，选择Open In Browser才可以浏览器浏览，而这是用默认浏览器浏览，如果想用第二个浏览器都没办法. 所以，可以通过SideBarEnhancements这个插件来更方便的浏览\n\n\n\n### 第一步 : 安装\n\n通过 `Package Control->Install Package` 搜索 `sidebarenhancements` 安装\n\n\n\n### 第二步 : 配置 ( 一 )\n\n右键某html，js，css等文件，找到 `Open With` 然后点击 `Edit Applications`\n\n将里面内容设置为:\n\n<!-- more --> \n\n```\n\n[\n\n    {\"id\": \"side-bar-files-open-with\",\n\n        \"children\":\n\n        [\n\n\n\n            {\n\n                \"caption\": \"Firefox\",\n\n                \"id\": \"side-bar-files-open-with-chrome\",\n\n\n\n                \"command\": \"side_bar_files_open_with\",\n\n                \"args\": {\n\n                            \"paths\": [],\n\n                            \"application\": \"/Applications/Firefox.app\", \n\n                            //火狐浏览器的路径 Windows中，后缀为.exe\n\n                            \"extensions\":\".*\", \n\n                            \"args\":[]\n\n                        },\n\n                \"open_automatically\" : false \n\n            },\n\n\n\n            {\n\n                \"caption\": \"Chrome\",\n\n                \"id\": \"side-bar-files-open-with-chrome\",\n\n\n\n                \"command\": \"side_bar_files_open_with\",\n\n                \"args\": {\n\n                            \"paths\": [],\n\n                            \"application\": \"/Applications/Chrome.app\",\n\n                            //Chrome浏览器的路径 Windows中，后缀为.exe\n\n                            \"extensions\":\".*\", \n\n                            \"args\":[]\n\n                        },\n\n                \"open_automatically\" : false\n\n            },\n\n            \n\n            //如果想再添加浏览器，复制下面这个对象，改相应的路径就可以了.\n\n            {\n\n                \"caption\": \"Safari\",\n\n                \"id\": \"side-bar-files-open-with-chrome\",\n\n\n\n                \"command\": \"side_bar_files_open_with\",\n\n                \"args\": {\n\n                            \"paths\": [],\n\n                            \"application\": \"/Applications/Safari.app\",\n\n                            //Safari浏览器的路径 Windows中，后缀为.exe\n\n                            \"extensions\":\".*\", \n\n                            \"args\":[]\n\n                        },\n\n                \"open_automatically\" : false \n\n            }\n\n        \n\n            \n\n        ]\n\n    }\n\n]\n\n```\n\n\n\n### 第三步 : 配置 ( 二 )\n\n打开 `Preferences` 里面的 `Key Bindings - User` 把内容修改为:\n\n```\n\n//keys 对应的值就是按键，比如按F2就会用Firefox打开这个页面\n\n[\n\n    { \"keys\": [\"f2\"], \"command\": \"side_bar_files_open_with\",\n\n            \"args\": {\n\n                \"paths\": [],\n\n                \"application\": \"/Applications/Firefox.app\", \n\n                //对应上面的Firefox路径\n\n                \"extensions\":\".*\" \n\n            } \n\n    },\n\n\n\n    { \"keys\": [\"f1\"], \"command\": \"side_bar_files_open_with\",\n\n            \"args\": {\n\n                \"paths\": [],\n\n                \"application\": \"/Applications/Safari.app\",\n\n                //对应上面的Safari路径\n\n                \"extensions\":\".*\" \n\n            } \n\n    },\n\n    \n\n    //如果有新添加的浏览器，只需要把下面这个对象复制一份，路径与新添加的对应就可以了.\n\n    { \"keys\": [\"f4\"], \"command\": \"side_bar_files_open_with\",\n\n            \"args\": {\n\n                \"paths\": [],\n\n                \"application\": \"/Applications/Chrome.app\",\n\n                //对应上面的Chrome路径\n\n                \"extensions\":\".*\" \n\n            } \n\n    }\n\n]\n\n```\n\n现在，`F1` 就是 Safari，`F2` 是Firefox，`F4` 是 Chrome\n\n\n\n## HTML-CSS-JS Prettify\n\n### 第一步 : 安装\n\n通过 `Package Control->Install Package` 搜索 `HTML-CSS-JS Prettify` 安装\n\n\n\n### 第二步 : 使用\n\n* 选中格式化代码，然后在按 `Cmd+Shift+H` (如果是Windows系统按 `Ctrl+Shift+H`，这两个快捷键是默认的).\n\n* 但是，这时候如果报错sh: node: command not found，说明node没有安装，那么就需要安装node. 安装好后，Linux和Mac不需要做什么更改，而Windows用户则需要配置一下node_path.\n\n* 首先，在菜单栏里点击Preferences点击第一个Browse Packages，然后进入HTML-CSS-JS Prettify文件夹，找到HTMLPrettify.sublime-settings文件，用Sublime Text打开进行更改windows对应的值，就是安装的node的路径\n\n\n\n### 第三步 : 配置 ( 快捷键 )\n\n如果对快捷键不满意，可以自己设置 . 打开 `Preferences` 里面的 `Key Bindings - User`，添加内容: `{ \"keys\": [\"alt+q\"], \"command\": \"htmlprettify\" }` ，当然快捷键你可以自己更改.\n\n\n\n### 第四步 : 配置 ( 代码整理样式 )\n\n如果对代码对其效果不满意，可以选择 `Preferences` 里的 `Package Settings` 找到 `HTML/CSS/JS Prettify` 里的 `Set Prettify Preferences` .里面是一些规则的设置. 这个文件就是github(详细设置可到github中看)中提到的.jsbeautifyrc文件\n\n\n\n## SublimeCodeIntel\n\n它的功能是代码提示，支持这些语言 : `JavaScript, Mason, XBL, XUL, RHTML, SCSS, Python, HTML, Ruby, Python3, XML, Sass, XSLT, Django,HTML5, Perl, CSS, Twig, Less, Smarty, Node.js, Tcl, TemplateToolkit, PHP` .\n\n\n\n它还有一个功能，就是跳转到函数定义的地方\n\n\n\n### 第一步 : 安装\n\n通过 `Package Control->Install Package` 搜索 `SublimeCodeIntel` 安装.\n\n(安装过程中非常慢，慢慢等着吧，我挂了VPN快了不少)\n\n\n\n### 第二步 : 配置\n\n选择 `Preferences->Package Settings->SublimeCodeIntel->Setting Default`，将其内容全部复制到 `Setting User` 中 . 按 `Command+F` (或者 `ctrl+F` )搜索 `codeintel_selected_catalogs`，将其内容改为如下:\n\n```\n\n\"codeintel_selected_catalogs\": [\n\n  \"HTML5\", \"HTML\", \"JavaScript\"\n\n],\n\n```\n\n\n\n### 第三步 : 使用\n\n* 按 `d` 会提示 `div tag` 选择这个 `div tag` 就会出现 :\n\n```html\n\n<div></div>\n\n```\n\n\n\n但输入 `div.class` 或者 `div#id`，按下 `Tab` 会出现下面效果\n\n```html\n\n<div class=\"class\"></div>\n\n<div id=\"id\"></div>\n\n```\n\n\n\n这个功能2其实 `Emmet` 也有，但是 `Emmet` 没有功能1的代码提示\n\n\n\n## Emmet\n\n`Emmet` (前身为大名鼎鼎的 `Zen Coding` )是一个能大幅度提高前端开发效率的一个工具:\n\n\n\n### 第一步 : 安装\n\n通过 `Package Control->Install Package` 搜索 `Emmet` 安装.\n\n\n\n### 第二步 : 使用\n\n快速设置 `class` 属性和 `id` 属性，在 `SublimeCodeIntel` 插件功能2就可以了，但是下面的功能 `SublimeCodeIntel` 却没有:\n\n输入 `ul>li*5`，按下 `Tab`，会有如下结果 :\n\n```html\n\n<ul>\n\n    <li></li>\n\n    <li></li>\n\n    <li></li>\n\n    <li></li>\n\n    <li></li>\n\n</ul>\n\n```\n\n\n\n更多使用方法可以 **百度**，**Google** 搜索这个插件怎么用，也可以去[官方文档](http://docs.emmet.io/)查看.\n\n\n\n### 第三步 : 配置\n\nEmmet还有一个功能，选取相同词，可以一次更改多个词，在mac中默认快捷键是 `Canmand+D` (我记得是，要不然我也不会改键).\n\n我习惯 `Cammand+D(Ctrl+d)` 是删除当前行，所以在 `Preferences->Key Bindings - User` 添加下面这两行:\n\n```\n\n{ \"keys\": [\"command+shift+d\"], \"command\":\"find_under_expand\" }, { \"keys\": [\"command+d\"], \"command\":\"run_macro_file\", \"args\": {\"file\":\"Packages/Default/Delete Line.sublime-macro\"} } // 修改过后，command+shift+d就是选取相同的词，command+d删除当前行\n\n```\n\n","source":"_posts/sublime1.md","raw":"title: 我的 Sublime Text 必备插件\ndate: 2015-11-04 19:52:35\ntags:\n---\n\n## 常用插件清单 :\n\n* SideBarEnhancements\n\n* HTML-CSS-JS Prettify\n\n* SublimeCodeIntel\n\n* Emmet\n\n\n\n## SideBarEnhancements\n\nSublime Text有一个缺点，当你想使用浏览器浏览你的html页面的时候，你需要在你的文件上点击鼠标右键，选择Open In Browser才可以浏览器浏览，而这是用默认浏览器浏览，如果想用第二个浏览器都没办法. 所以，可以通过SideBarEnhancements这个插件来更方便的浏览\n\n\n\n### 第一步 : 安装\n\n通过 `Package Control->Install Package` 搜索 `sidebarenhancements` 安装\n\n\n\n### 第二步 : 配置 ( 一 )\n\n右键某html，js，css等文件，找到 `Open With` 然后点击 `Edit Applications`\n\n将里面内容设置为:\n\n<!-- more --> \n\n```\n\n[\n\n    {\"id\": \"side-bar-files-open-with\",\n\n        \"children\":\n\n        [\n\n\n\n            {\n\n                \"caption\": \"Firefox\",\n\n                \"id\": \"side-bar-files-open-with-chrome\",\n\n\n\n                \"command\": \"side_bar_files_open_with\",\n\n                \"args\": {\n\n                            \"paths\": [],\n\n                            \"application\": \"/Applications/Firefox.app\", \n\n                            //火狐浏览器的路径 Windows中，后缀为.exe\n\n                            \"extensions\":\".*\", \n\n                            \"args\":[]\n\n                        },\n\n                \"open_automatically\" : false \n\n            },\n\n\n\n            {\n\n                \"caption\": \"Chrome\",\n\n                \"id\": \"side-bar-files-open-with-chrome\",\n\n\n\n                \"command\": \"side_bar_files_open_with\",\n\n                \"args\": {\n\n                            \"paths\": [],\n\n                            \"application\": \"/Applications/Chrome.app\",\n\n                            //Chrome浏览器的路径 Windows中，后缀为.exe\n\n                            \"extensions\":\".*\", \n\n                            \"args\":[]\n\n                        },\n\n                \"open_automatically\" : false\n\n            },\n\n            \n\n            //如果想再添加浏览器，复制下面这个对象，改相应的路径就可以了.\n\n            {\n\n                \"caption\": \"Safari\",\n\n                \"id\": \"side-bar-files-open-with-chrome\",\n\n\n\n                \"command\": \"side_bar_files_open_with\",\n\n                \"args\": {\n\n                            \"paths\": [],\n\n                            \"application\": \"/Applications/Safari.app\",\n\n                            //Safari浏览器的路径 Windows中，后缀为.exe\n\n                            \"extensions\":\".*\", \n\n                            \"args\":[]\n\n                        },\n\n                \"open_automatically\" : false \n\n            }\n\n        \n\n            \n\n        ]\n\n    }\n\n]\n\n```\n\n\n\n### 第三步 : 配置 ( 二 )\n\n打开 `Preferences` 里面的 `Key Bindings - User` 把内容修改为:\n\n```\n\n//keys 对应的值就是按键，比如按F2就会用Firefox打开这个页面\n\n[\n\n    { \"keys\": [\"f2\"], \"command\": \"side_bar_files_open_with\",\n\n            \"args\": {\n\n                \"paths\": [],\n\n                \"application\": \"/Applications/Firefox.app\", \n\n                //对应上面的Firefox路径\n\n                \"extensions\":\".*\" \n\n            } \n\n    },\n\n\n\n    { \"keys\": [\"f1\"], \"command\": \"side_bar_files_open_with\",\n\n            \"args\": {\n\n                \"paths\": [],\n\n                \"application\": \"/Applications/Safari.app\",\n\n                //对应上面的Safari路径\n\n                \"extensions\":\".*\" \n\n            } \n\n    },\n\n    \n\n    //如果有新添加的浏览器，只需要把下面这个对象复制一份，路径与新添加的对应就可以了.\n\n    { \"keys\": [\"f4\"], \"command\": \"side_bar_files_open_with\",\n\n            \"args\": {\n\n                \"paths\": [],\n\n                \"application\": \"/Applications/Chrome.app\",\n\n                //对应上面的Chrome路径\n\n                \"extensions\":\".*\" \n\n            } \n\n    }\n\n]\n\n```\n\n现在，`F1` 就是 Safari，`F2` 是Firefox，`F4` 是 Chrome\n\n\n\n## HTML-CSS-JS Prettify\n\n### 第一步 : 安装\n\n通过 `Package Control->Install Package` 搜索 `HTML-CSS-JS Prettify` 安装\n\n\n\n### 第二步 : 使用\n\n* 选中格式化代码，然后在按 `Cmd+Shift+H` (如果是Windows系统按 `Ctrl+Shift+H`，这两个快捷键是默认的).\n\n* 但是，这时候如果报错sh: node: command not found，说明node没有安装，那么就需要安装node. 安装好后，Linux和Mac不需要做什么更改，而Windows用户则需要配置一下node_path.\n\n* 首先，在菜单栏里点击Preferences点击第一个Browse Packages，然后进入HTML-CSS-JS Prettify文件夹，找到HTMLPrettify.sublime-settings文件，用Sublime Text打开进行更改windows对应的值，就是安装的node的路径\n\n\n\n### 第三步 : 配置 ( 快捷键 )\n\n如果对快捷键不满意，可以自己设置 . 打开 `Preferences` 里面的 `Key Bindings - User`，添加内容: `{ \"keys\": [\"alt+q\"], \"command\": \"htmlprettify\" }` ，当然快捷键你可以自己更改.\n\n\n\n### 第四步 : 配置 ( 代码整理样式 )\n\n如果对代码对其效果不满意，可以选择 `Preferences` 里的 `Package Settings` 找到 `HTML/CSS/JS Prettify` 里的 `Set Prettify Preferences` .里面是一些规则的设置. 这个文件就是github(详细设置可到github中看)中提到的.jsbeautifyrc文件\n\n\n\n## SublimeCodeIntel\n\n它的功能是代码提示，支持这些语言 : `JavaScript, Mason, XBL, XUL, RHTML, SCSS, Python, HTML, Ruby, Python3, XML, Sass, XSLT, Django,HTML5, Perl, CSS, Twig, Less, Smarty, Node.js, Tcl, TemplateToolkit, PHP` .\n\n\n\n它还有一个功能，就是跳转到函数定义的地方\n\n\n\n### 第一步 : 安装\n\n通过 `Package Control->Install Package` 搜索 `SublimeCodeIntel` 安装.\n\n(安装过程中非常慢，慢慢等着吧，我挂了VPN快了不少)\n\n\n\n### 第二步 : 配置\n\n选择 `Preferences->Package Settings->SublimeCodeIntel->Setting Default`，将其内容全部复制到 `Setting User` 中 . 按 `Command+F` (或者 `ctrl+F` )搜索 `codeintel_selected_catalogs`，将其内容改为如下:\n\n```\n\n\"codeintel_selected_catalogs\": [\n\n  \"HTML5\", \"HTML\", \"JavaScript\"\n\n],\n\n```\n\n\n\n### 第三步 : 使用\n\n* 按 `d` 会提示 `div tag` 选择这个 `div tag` 就会出现 :\n\n```html\n\n<div></div>\n\n```\n\n\n\n但输入 `div.class` 或者 `div#id`，按下 `Tab` 会出现下面效果\n\n```html\n\n<div class=\"class\"></div>\n\n<div id=\"id\"></div>\n\n```\n\n\n\n这个功能2其实 `Emmet` 也有，但是 `Emmet` 没有功能1的代码提示\n\n\n\n## Emmet\n\n`Emmet` (前身为大名鼎鼎的 `Zen Coding` )是一个能大幅度提高前端开发效率的一个工具:\n\n\n\n### 第一步 : 安装\n\n通过 `Package Control->Install Package` 搜索 `Emmet` 安装.\n\n\n\n### 第二步 : 使用\n\n快速设置 `class` 属性和 `id` 属性，在 `SublimeCodeIntel` 插件功能2就可以了，但是下面的功能 `SublimeCodeIntel` 却没有:\n\n输入 `ul>li*5`，按下 `Tab`，会有如下结果 :\n\n```html\n\n<ul>\n\n    <li></li>\n\n    <li></li>\n\n    <li></li>\n\n    <li></li>\n\n    <li></li>\n\n</ul>\n\n```\n\n\n\n更多使用方法可以 **百度**，**Google** 搜索这个插件怎么用，也可以去[官方文档](http://docs.emmet.io/)查看.\n\n\n\n### 第三步 : 配置\n\nEmmet还有一个功能，选取相同词，可以一次更改多个词，在mac中默认快捷键是 `Canmand+D` (我记得是，要不然我也不会改键).\n\n我习惯 `Cammand+D(Ctrl+d)` 是删除当前行，所以在 `Preferences->Key Bindings - User` 添加下面这两行:\n\n```\n\n{ \"keys\": [\"command+shift+d\"], \"command\":\"find_under_expand\" }, { \"keys\": [\"command+d\"], \"command\":\"run_macro_file\", \"args\": {\"file\":\"Packages/Default/Delete Line.sublime-macro\"} } // 修改过后，command+shift+d就是选取相同的词，command+d删除当前行\n\n```\n\n","slug":"sublime1","published":1,"updated":"2016-03-02T14:18:07.218Z","_id":"cijgvit5n0009zp8gxq8kfwto","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"常用插件清单\"><a href=\"#常用插件清单\" class=\"headerlink\" title=\"常用插件清单 :\"></a>常用插件清单 :</h2><ul>\n<li><p>SideBarEnhancements</p>\n</li>\n<li><p>HTML-CSS-JS Prettify</p>\n</li>\n<li><p>SublimeCodeIntel</p>\n</li>\n<li><p>Emmet</p>\n</li>\n</ul>\n<h2 id=\"SideBarEnhancements\"><a href=\"#SideBarEnhancements\" class=\"headerlink\" title=\"SideBarEnhancements\"></a>SideBarEnhancements</h2><p>Sublime Text有一个缺点，当你想使用浏览器浏览你的html页面的时候，你需要在你的文件上点击鼠标右键，选择Open In Browser才可以浏览器浏览，而这是用默认浏览器浏览，如果想用第二个浏览器都没办法. 所以，可以通过SideBarEnhancements这个插件来更方便的浏览</p>\n<h3 id=\"第一步-安装\"><a href=\"#第一步-安装\" class=\"headerlink\" title=\"第一步 : 安装\"></a>第一步 : 安装</h3><p>通过 <code>Package Control-&gt;Install Package</code> 搜索 <code>sidebarenhancements</code> 安装</p>\n<h3 id=\"第二步-配置-一\"><a href=\"#第二步-配置-一\" class=\"headerlink\" title=\"第二步 : 配置 ( 一 )\"></a>第二步 : 配置 ( 一 )</h3><p>右键某html，js，css等文件，找到 <code>Open With</code> 然后点击 <code>Edit Applications</code></p>\n<p>将里面内容设置为:</p>\n<a id=\"more\"></a> \n<figure class=\"highlight clojure\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[</span><br><span class=\"line\"></span><br><span class=\"line\">    &#123;<span class=\"string\">\"id\"</span>: <span class=\"string\">\"side-bar-files-open-with\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"string\">\"children\"</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">        [</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"string\">\"caption\"</span>: <span class=\"string\">\"Firefox\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"string\">\"id\"</span>: <span class=\"string\">\"side-bar-files-open-with-chrome\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"string\">\"command\"</span>: <span class=\"string\">\"side_bar_files_open_with\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"string\">\"args\"</span>: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"string\">\"paths\"</span>: [],</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"string\">\"application\"</span>: <span class=\"string\">\"/Applications/Firefox.app\"</span>, </span><br><span class=\"line\"></span><br><span class=\"line\">                            //火狐浏览器的路径 Windows中，后缀为.exe</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"string\">\"extensions\"</span>:<span class=\"string\">\".*\"</span>, </span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"string\">\"args\"</span>:[]</span><br><span class=\"line\"></span><br><span class=\"line\">                        &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"string\">\"open_automatically\"</span> : <span class=\"literal\">false</span> </span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"string\">\"caption\"</span>: <span class=\"string\">\"Chrome\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"string\">\"id\"</span>: <span class=\"string\">\"side-bar-files-open-with-chrome\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"string\">\"command\"</span>: <span class=\"string\">\"side_bar_files_open_with\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"string\">\"args\"</span>: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"string\">\"paths\"</span>: [],</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"string\">\"application\"</span>: <span class=\"string\">\"/Applications/Chrome.app\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">                            //Chrome浏览器的路径 Windows中，后缀为.exe</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"string\">\"extensions\"</span>:<span class=\"string\">\".*\"</span>, </span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"string\">\"args\"</span>:[]</span><br><span class=\"line\"></span><br><span class=\"line\">                        &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"string\">\"open_automatically\"</span> : <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">            </span><br><span class=\"line\"></span><br><span class=\"line\">            //如果想再添加浏览器，复制下面这个对象，改相应的路径就可以了.</span><br><span class=\"line\"></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"string\">\"caption\"</span>: <span class=\"string\">\"Safari\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"string\">\"id\"</span>: <span class=\"string\">\"side-bar-files-open-with-chrome\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"string\">\"command\"</span>: <span class=\"string\">\"side_bar_files_open_with\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"string\">\"args\"</span>: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"string\">\"paths\"</span>: [],</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"string\">\"application\"</span>: <span class=\"string\">\"/Applications/Safari.app\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">                            //Safari浏览器的路径 Windows中，后缀为.exe</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"string\">\"extensions\"</span>:<span class=\"string\">\".*\"</span>, </span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"string\">\"args\"</span>:[]</span><br><span class=\"line\"></span><br><span class=\"line\">                        &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"string\">\"open_automatically\"</span> : <span class=\"literal\">false</span> </span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">            </span><br><span class=\"line\"></span><br><span class=\"line\">        ]</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h3 id=\"第三步-配置-二\"><a href=\"#第三步-配置-二\" class=\"headerlink\" title=\"第三步 : 配置 ( 二 )\"></a>第三步 : 配置 ( 二 )</h3><p>打开 <code>Preferences</code> 里面的 <code>Key Bindings - User</code> 把内容修改为:</p>\n<figure class=\"highlight prolog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">//keys 对应的值就是按键，比如按<span class=\"symbol\">F2</span>就会用<span class=\"symbol\">Firefox</span>打开这个页面</span><br><span class=\"line\"></span><br><span class=\"line\">[</span><br><span class=\"line\"></span><br><span class=\"line\">    &#123; <span class=\"string\">\"keys\"</span>: [<span class=\"string\">\"f2\"</span>], <span class=\"string\">\"command\"</span>: <span class=\"string\">\"side_bar_files_open_with\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"string\">\"args\"</span>: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"string\">\"paths\"</span>: [],</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"string\">\"application\"</span>: <span class=\"string\">\"/Applications/Firefox.app\"</span>, </span><br><span class=\"line\"></span><br><span class=\"line\">                //对应上面的<span class=\"symbol\">Firefox</span>路径</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"string\">\"extensions\"</span>:<span class=\"string\">\".*\"</span> </span><br><span class=\"line\"></span><br><span class=\"line\">            &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#123; <span class=\"string\">\"keys\"</span>: [<span class=\"string\">\"f1\"</span>], <span class=\"string\">\"command\"</span>: <span class=\"string\">\"side_bar_files_open_with\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"string\">\"args\"</span>: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"string\">\"paths\"</span>: [],</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"string\">\"application\"</span>: <span class=\"string\">\"/Applications/Safari.app\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">                //对应上面的<span class=\"symbol\">Safari</span>路径</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"string\">\"extensions\"</span>:<span class=\"string\">\".*\"</span> </span><br><span class=\"line\"></span><br><span class=\"line\">            &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    //如果有新添加的浏览器，只需要把下面这个对象复制一份，路径与新添加的对应就可以了.</span><br><span class=\"line\"></span><br><span class=\"line\">    &#123; <span class=\"string\">\"keys\"</span>: [<span class=\"string\">\"f4\"</span>], <span class=\"string\">\"command\"</span>: <span class=\"string\">\"side_bar_files_open_with\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"string\">\"args\"</span>: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"string\">\"paths\"</span>: [],</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"string\">\"application\"</span>: <span class=\"string\">\"/Applications/Chrome.app\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">                //对应上面的<span class=\"symbol\">Chrome</span>路径</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"string\">\"extensions\"</span>:<span class=\"string\">\".*\"</span> </span><br><span class=\"line\"></span><br><span class=\"line\">            &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>现在，<code>F1</code> 就是 Safari，<code>F2</code> 是Firefox，<code>F4</code> 是 Chrome</p>\n<h2 id=\"HTML-CSS-JS-Prettify\"><a href=\"#HTML-CSS-JS-Prettify\" class=\"headerlink\" title=\"HTML-CSS-JS Prettify\"></a>HTML-CSS-JS Prettify</h2><h3 id=\"第一步-安装-1\"><a href=\"#第一步-安装-1\" class=\"headerlink\" title=\"第一步 : 安装\"></a>第一步 : 安装</h3><p>通过 <code>Package Control-&gt;Install Package</code> 搜索 <code>HTML-CSS-JS Prettify</code> 安装</p>\n<h3 id=\"第二步-使用\"><a href=\"#第二步-使用\" class=\"headerlink\" title=\"第二步 : 使用\"></a>第二步 : 使用</h3><ul>\n<li><p>选中格式化代码，然后在按 <code>Cmd+Shift+H</code> (如果是Windows系统按 <code>Ctrl+Shift+H</code>，这两个快捷键是默认的).</p>\n</li>\n<li><p>但是，这时候如果报错sh: node: command not found，说明node没有安装，那么就需要安装node. 安装好后，Linux和Mac不需要做什么更改，而Windows用户则需要配置一下node_path.</p>\n</li>\n<li><p>首先，在菜单栏里点击Preferences点击第一个Browse Packages，然后进入HTML-CSS-JS Prettify文件夹，找到HTMLPrettify.sublime-settings文件，用Sublime Text打开进行更改windows对应的值，就是安装的node的路径</p>\n</li>\n</ul>\n<h3 id=\"第三步-配置-快捷键\"><a href=\"#第三步-配置-快捷键\" class=\"headerlink\" title=\"第三步 : 配置 ( 快捷键 )\"></a>第三步 : 配置 ( 快捷键 )</h3><p>如果对快捷键不满意，可以自己设置 . 打开 <code>Preferences</code> 里面的 <code>Key Bindings - User</code>，添加内容: <code>{ &quot;keys&quot;: [&quot;alt+q&quot;], &quot;command&quot;: &quot;htmlprettify&quot; }</code> ，当然快捷键你可以自己更改.</p>\n<h3 id=\"第四步-配置-代码整理样式\"><a href=\"#第四步-配置-代码整理样式\" class=\"headerlink\" title=\"第四步 : 配置 ( 代码整理样式 )\"></a>第四步 : 配置 ( 代码整理样式 )</h3><p>如果对代码对其效果不满意，可以选择 <code>Preferences</code> 里的 <code>Package Settings</code> 找到 <code>HTML/CSS/JS Prettify</code> 里的 <code>Set Prettify Preferences</code> .里面是一些规则的设置. 这个文件就是github(详细设置可到github中看)中提到的.jsbeautifyrc文件</p>\n<h2 id=\"SublimeCodeIntel\"><a href=\"#SublimeCodeIntel\" class=\"headerlink\" title=\"SublimeCodeIntel\"></a>SublimeCodeIntel</h2><p>它的功能是代码提示，支持这些语言 : <code>JavaScript, Mason, XBL, XUL, RHTML, SCSS, Python, HTML, Ruby, Python3, XML, Sass, XSLT, Django,HTML5, Perl, CSS, Twig, Less, Smarty, Node.js, Tcl, TemplateToolkit, PHP</code> .</p>\n<p>它还有一个功能，就是跳转到函数定义的地方</p>\n<h3 id=\"第一步-安装-2\"><a href=\"#第一步-安装-2\" class=\"headerlink\" title=\"第一步 : 安装\"></a>第一步 : 安装</h3><p>通过 <code>Package Control-&gt;Install Package</code> 搜索 <code>SublimeCodeIntel</code> 安装.</p>\n<p>(安装过程中非常慢，慢慢等着吧，我挂了VPN快了不少)</p>\n<h3 id=\"第二步-配置\"><a href=\"#第二步-配置\" class=\"headerlink\" title=\"第二步 : 配置\"></a>第二步 : 配置</h3><p>选择 <code>Preferences-&gt;Package Settings-&gt;SublimeCodeIntel-&gt;Setting Default</code>，将其内容全部复制到 <code>Setting User</code> 中 . 按 <code>Command+F</code> (或者 <code>ctrl+F</code> )搜索 <code>codeintel_selected_catalogs</code>，将其内容改为如下:</p>\n<figure class=\"highlight prolog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"codeintel_selected_catalogs\"</span>: [</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"string\">\"HTML5\"</span>, <span class=\"string\">\"HTML\"</span>, <span class=\"string\">\"JavaScript\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">],</span><br></pre></td></tr></table></figure>\n<h3 id=\"第三步-使用\"><a href=\"#第三步-使用\" class=\"headerlink\" title=\"第三步 : 使用\"></a>第三步 : 使用</h3><ul>\n<li>按 <code>d</code> 会提示 <code>div tag</code> 选择这个 <code>div tag</code> 就会出现 :</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>但输入 <code>div.class</code> 或者 <code>div#id</code>，按下 <code>Tab</code> 会出现下面效果</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"class\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"id\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这个功能2其实 <code>Emmet</code> 也有，但是 <code>Emmet</code> 没有功能1的代码提示</p>\n<h2 id=\"Emmet\"><a href=\"#Emmet\" class=\"headerlink\" title=\"Emmet\"></a>Emmet</h2><p><code>Emmet</code> (前身为大名鼎鼎的 <code>Zen Coding</code> )是一个能大幅度提高前端开发效率的一个工具:</p>\n<h3 id=\"第一步-安装-3\"><a href=\"#第一步-安装-3\" class=\"headerlink\" title=\"第一步 : 安装\"></a>第一步 : 安装</h3><p>通过 <code>Package Control-&gt;Install Package</code> 搜索 <code>Emmet</code> 安装.</p>\n<h3 id=\"第二步-使用-1\"><a href=\"#第二步-使用-1\" class=\"headerlink\" title=\"第二步 : 使用\"></a>第二步 : 使用</h3><p>快速设置 <code>class</code> 属性和 <code>id</code> 属性，在 <code>SublimeCodeIntel</code> 插件功能2就可以了，但是下面的功能 <code>SublimeCodeIntel</code> 却没有:</p>\n<p>输入 <code>ul&gt;li*5</code>，按下 <code>Tab</code>，会有如下结果 :</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>更多使用方法可以 <strong>百度</strong>，<strong>Google</strong> 搜索这个插件怎么用，也可以去<a href=\"http://docs.emmet.io/\" target=\"_blank\" rel=\"external\">官方文档</a>查看.</p>\n<h3 id=\"第三步-配置\"><a href=\"#第三步-配置\" class=\"headerlink\" title=\"第三步 : 配置\"></a>第三步 : 配置</h3><p>Emmet还有一个功能，选取相同词，可以一次更改多个词，在mac中默认快捷键是 <code>Canmand+D</code> (我记得是，要不然我也不会改键).</p>\n<p>我习惯 <code>Cammand+D(Ctrl+d)</code> 是删除当前行，所以在 <code>Preferences-&gt;Key Bindings - User</code> 添加下面这两行:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#123; <span class=\"string\">\"keys\"</span>: [<span class=\"string\">\"command+shift+d\"</span>], <span class=\"string\">\"command\"</span>:<span class=\"string\">\"find_under_expand\"</span> &#125;, &#123; <span class=\"string\">\"keys\"</span>: [<span class=\"string\">\"command+d\"</span>], <span class=\"string\">\"command\"</span>:<span class=\"string\">\"run_macro_file\"</span>, <span class=\"string\">\"args\"</span>: &#123;<span class=\"string\">\"file\"</span>:<span class=\"string\">\"Packages/Default/Delete Line.sublime-macro\"</span>&#125; &#125; // 修改过后，<span class=\"built_in\">command</span>+<span class=\"built_in\">shift</span>+d就是选取相同的词，<span class=\"built_in\">command</span>+d删除当前行</span><br></pre></td></tr></table></figure>\n","excerpt":"<h2 id=\"常用插件清单\"><a href=\"#常用插件清单\" class=\"headerlink\" title=\"常用插件清单 :\"></a>常用插件清单 :</h2><ul>\n<li><p>SideBarEnhancements</p>\n</li>\n<li><p>HTML-CSS-JS Prettify</p>\n</li>\n<li><p>SublimeCodeIntel</p>\n</li>\n<li><p>Emmet</p>\n</li>\n</ul>\n<h2 id=\"SideBarEnhancements\"><a href=\"#SideBarEnhancements\" class=\"headerlink\" title=\"SideBarEnhancements\"></a>SideBarEnhancements</h2><p>Sublime Text有一个缺点，当你想使用浏览器浏览你的html页面的时候，你需要在你的文件上点击鼠标右键，选择Open In Browser才可以浏览器浏览，而这是用默认浏览器浏览，如果想用第二个浏览器都没办法. 所以，可以通过SideBarEnhancements这个插件来更方便的浏览</p>\n<h3 id=\"第一步-安装\"><a href=\"#第一步-安装\" class=\"headerlink\" title=\"第一步 : 安装\"></a>第一步 : 安装</h3><p>通过 <code>Package Control-&gt;Install Package</code> 搜索 <code>sidebarenhancements</code> 安装</p>\n<h3 id=\"第二步-配置-一\"><a href=\"#第二步-配置-一\" class=\"headerlink\" title=\"第二步 : 配置 ( 一 )\"></a>第二步 : 配置 ( 一 )</h3><p>右键某html，js，css等文件，找到 <code>Open With</code> 然后点击 <code>Edit Applications</code></p>\n<p>将里面内容设置为:</p>","more":"<figure class=\"highlight clojure\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[</span><br><span class=\"line\"></span><br><span class=\"line\">    &#123;<span class=\"string\">\"id\"</span>: <span class=\"string\">\"side-bar-files-open-with\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"string\">\"children\"</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">        [</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"string\">\"caption\"</span>: <span class=\"string\">\"Firefox\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"string\">\"id\"</span>: <span class=\"string\">\"side-bar-files-open-with-chrome\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"string\">\"command\"</span>: <span class=\"string\">\"side_bar_files_open_with\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"string\">\"args\"</span>: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"string\">\"paths\"</span>: [],</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"string\">\"application\"</span>: <span class=\"string\">\"/Applications/Firefox.app\"</span>, </span><br><span class=\"line\"></span><br><span class=\"line\">                            //火狐浏览器的路径 Windows中，后缀为.exe</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"string\">\"extensions\"</span>:<span class=\"string\">\".*\"</span>, </span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"string\">\"args\"</span>:[]</span><br><span class=\"line\"></span><br><span class=\"line\">                        &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"string\">\"open_automatically\"</span> : <span class=\"literal\">false</span> </span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"string\">\"caption\"</span>: <span class=\"string\">\"Chrome\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"string\">\"id\"</span>: <span class=\"string\">\"side-bar-files-open-with-chrome\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"string\">\"command\"</span>: <span class=\"string\">\"side_bar_files_open_with\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"string\">\"args\"</span>: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"string\">\"paths\"</span>: [],</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"string\">\"application\"</span>: <span class=\"string\">\"/Applications/Chrome.app\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">                            //Chrome浏览器的路径 Windows中，后缀为.exe</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"string\">\"extensions\"</span>:<span class=\"string\">\".*\"</span>, </span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"string\">\"args\"</span>:[]</span><br><span class=\"line\"></span><br><span class=\"line\">                        &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"string\">\"open_automatically\"</span> : <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">            </span><br><span class=\"line\"></span><br><span class=\"line\">            //如果想再添加浏览器，复制下面这个对象，改相应的路径就可以了.</span><br><span class=\"line\"></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"string\">\"caption\"</span>: <span class=\"string\">\"Safari\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"string\">\"id\"</span>: <span class=\"string\">\"side-bar-files-open-with-chrome\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"string\">\"command\"</span>: <span class=\"string\">\"side_bar_files_open_with\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"string\">\"args\"</span>: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"string\">\"paths\"</span>: [],</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"string\">\"application\"</span>: <span class=\"string\">\"/Applications/Safari.app\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">                            //Safari浏览器的路径 Windows中，后缀为.exe</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"string\">\"extensions\"</span>:<span class=\"string\">\".*\"</span>, </span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"string\">\"args\"</span>:[]</span><br><span class=\"line\"></span><br><span class=\"line\">                        &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"string\">\"open_automatically\"</span> : <span class=\"literal\">false</span> </span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">            </span><br><span class=\"line\"></span><br><span class=\"line\">        ]</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h3 id=\"第三步-配置-二\"><a href=\"#第三步-配置-二\" class=\"headerlink\" title=\"第三步 : 配置 ( 二 )\"></a>第三步 : 配置 ( 二 )</h3><p>打开 <code>Preferences</code> 里面的 <code>Key Bindings - User</code> 把内容修改为:</p>\n<figure class=\"highlight prolog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">//keys 对应的值就是按键，比如按<span class=\"symbol\">F2</span>就会用<span class=\"symbol\">Firefox</span>打开这个页面</span><br><span class=\"line\"></span><br><span class=\"line\">[</span><br><span class=\"line\"></span><br><span class=\"line\">    &#123; <span class=\"string\">\"keys\"</span>: [<span class=\"string\">\"f2\"</span>], <span class=\"string\">\"command\"</span>: <span class=\"string\">\"side_bar_files_open_with\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"string\">\"args\"</span>: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"string\">\"paths\"</span>: [],</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"string\">\"application\"</span>: <span class=\"string\">\"/Applications/Firefox.app\"</span>, </span><br><span class=\"line\"></span><br><span class=\"line\">                //对应上面的<span class=\"symbol\">Firefox</span>路径</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"string\">\"extensions\"</span>:<span class=\"string\">\".*\"</span> </span><br><span class=\"line\"></span><br><span class=\"line\">            &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#123; <span class=\"string\">\"keys\"</span>: [<span class=\"string\">\"f1\"</span>], <span class=\"string\">\"command\"</span>: <span class=\"string\">\"side_bar_files_open_with\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"string\">\"args\"</span>: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"string\">\"paths\"</span>: [],</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"string\">\"application\"</span>: <span class=\"string\">\"/Applications/Safari.app\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">                //对应上面的<span class=\"symbol\">Safari</span>路径</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"string\">\"extensions\"</span>:<span class=\"string\">\".*\"</span> </span><br><span class=\"line\"></span><br><span class=\"line\">            &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    //如果有新添加的浏览器，只需要把下面这个对象复制一份，路径与新添加的对应就可以了.</span><br><span class=\"line\"></span><br><span class=\"line\">    &#123; <span class=\"string\">\"keys\"</span>: [<span class=\"string\">\"f4\"</span>], <span class=\"string\">\"command\"</span>: <span class=\"string\">\"side_bar_files_open_with\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"string\">\"args\"</span>: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"string\">\"paths\"</span>: [],</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"string\">\"application\"</span>: <span class=\"string\">\"/Applications/Chrome.app\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">                //对应上面的<span class=\"symbol\">Chrome</span>路径</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"string\">\"extensions\"</span>:<span class=\"string\">\".*\"</span> </span><br><span class=\"line\"></span><br><span class=\"line\">            &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>现在，<code>F1</code> 就是 Safari，<code>F2</code> 是Firefox，<code>F4</code> 是 Chrome</p>\n<h2 id=\"HTML-CSS-JS-Prettify\"><a href=\"#HTML-CSS-JS-Prettify\" class=\"headerlink\" title=\"HTML-CSS-JS Prettify\"></a>HTML-CSS-JS Prettify</h2><h3 id=\"第一步-安装-1\"><a href=\"#第一步-安装-1\" class=\"headerlink\" title=\"第一步 : 安装\"></a>第一步 : 安装</h3><p>通过 <code>Package Control-&gt;Install Package</code> 搜索 <code>HTML-CSS-JS Prettify</code> 安装</p>\n<h3 id=\"第二步-使用\"><a href=\"#第二步-使用\" class=\"headerlink\" title=\"第二步 : 使用\"></a>第二步 : 使用</h3><ul>\n<li><p>选中格式化代码，然后在按 <code>Cmd+Shift+H</code> (如果是Windows系统按 <code>Ctrl+Shift+H</code>，这两个快捷键是默认的).</p>\n</li>\n<li><p>但是，这时候如果报错sh: node: command not found，说明node没有安装，那么就需要安装node. 安装好后，Linux和Mac不需要做什么更改，而Windows用户则需要配置一下node_path.</p>\n</li>\n<li><p>首先，在菜单栏里点击Preferences点击第一个Browse Packages，然后进入HTML-CSS-JS Prettify文件夹，找到HTMLPrettify.sublime-settings文件，用Sublime Text打开进行更改windows对应的值，就是安装的node的路径</p>\n</li>\n</ul>\n<h3 id=\"第三步-配置-快捷键\"><a href=\"#第三步-配置-快捷键\" class=\"headerlink\" title=\"第三步 : 配置 ( 快捷键 )\"></a>第三步 : 配置 ( 快捷键 )</h3><p>如果对快捷键不满意，可以自己设置 . 打开 <code>Preferences</code> 里面的 <code>Key Bindings - User</code>，添加内容: <code>{ &quot;keys&quot;: [&quot;alt+q&quot;], &quot;command&quot;: &quot;htmlprettify&quot; }</code> ，当然快捷键你可以自己更改.</p>\n<h3 id=\"第四步-配置-代码整理样式\"><a href=\"#第四步-配置-代码整理样式\" class=\"headerlink\" title=\"第四步 : 配置 ( 代码整理样式 )\"></a>第四步 : 配置 ( 代码整理样式 )</h3><p>如果对代码对其效果不满意，可以选择 <code>Preferences</code> 里的 <code>Package Settings</code> 找到 <code>HTML/CSS/JS Prettify</code> 里的 <code>Set Prettify Preferences</code> .里面是一些规则的设置. 这个文件就是github(详细设置可到github中看)中提到的.jsbeautifyrc文件</p>\n<h2 id=\"SublimeCodeIntel\"><a href=\"#SublimeCodeIntel\" class=\"headerlink\" title=\"SublimeCodeIntel\"></a>SublimeCodeIntel</h2><p>它的功能是代码提示，支持这些语言 : <code>JavaScript, Mason, XBL, XUL, RHTML, SCSS, Python, HTML, Ruby, Python3, XML, Sass, XSLT, Django,HTML5, Perl, CSS, Twig, Less, Smarty, Node.js, Tcl, TemplateToolkit, PHP</code> .</p>\n<p>它还有一个功能，就是跳转到函数定义的地方</p>\n<h3 id=\"第一步-安装-2\"><a href=\"#第一步-安装-2\" class=\"headerlink\" title=\"第一步 : 安装\"></a>第一步 : 安装</h3><p>通过 <code>Package Control-&gt;Install Package</code> 搜索 <code>SublimeCodeIntel</code> 安装.</p>\n<p>(安装过程中非常慢，慢慢等着吧，我挂了VPN快了不少)</p>\n<h3 id=\"第二步-配置\"><a href=\"#第二步-配置\" class=\"headerlink\" title=\"第二步 : 配置\"></a>第二步 : 配置</h3><p>选择 <code>Preferences-&gt;Package Settings-&gt;SublimeCodeIntel-&gt;Setting Default</code>，将其内容全部复制到 <code>Setting User</code> 中 . 按 <code>Command+F</code> (或者 <code>ctrl+F</code> )搜索 <code>codeintel_selected_catalogs</code>，将其内容改为如下:</p>\n<figure class=\"highlight prolog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"codeintel_selected_catalogs\"</span>: [</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"string\">\"HTML5\"</span>, <span class=\"string\">\"HTML\"</span>, <span class=\"string\">\"JavaScript\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">],</span><br></pre></td></tr></table></figure>\n<h3 id=\"第三步-使用\"><a href=\"#第三步-使用\" class=\"headerlink\" title=\"第三步 : 使用\"></a>第三步 : 使用</h3><ul>\n<li>按 <code>d</code> 会提示 <code>div tag</code> 选择这个 <code>div tag</code> 就会出现 :</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>但输入 <code>div.class</code> 或者 <code>div#id</code>，按下 <code>Tab</code> 会出现下面效果</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"class\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"id\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这个功能2其实 <code>Emmet</code> 也有，但是 <code>Emmet</code> 没有功能1的代码提示</p>\n<h2 id=\"Emmet\"><a href=\"#Emmet\" class=\"headerlink\" title=\"Emmet\"></a>Emmet</h2><p><code>Emmet</code> (前身为大名鼎鼎的 <code>Zen Coding</code> )是一个能大幅度提高前端开发效率的一个工具:</p>\n<h3 id=\"第一步-安装-3\"><a href=\"#第一步-安装-3\" class=\"headerlink\" title=\"第一步 : 安装\"></a>第一步 : 安装</h3><p>通过 <code>Package Control-&gt;Install Package</code> 搜索 <code>Emmet</code> 安装.</p>\n<h3 id=\"第二步-使用-1\"><a href=\"#第二步-使用-1\" class=\"headerlink\" title=\"第二步 : 使用\"></a>第二步 : 使用</h3><p>快速设置 <code>class</code> 属性和 <code>id</code> 属性，在 <code>SublimeCodeIntel</code> 插件功能2就可以了，但是下面的功能 <code>SublimeCodeIntel</code> 却没有:</p>\n<p>输入 <code>ul&gt;li*5</code>，按下 <code>Tab</code>，会有如下结果 :</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>更多使用方法可以 <strong>百度</strong>，<strong>Google</strong> 搜索这个插件怎么用，也可以去<a href=\"http://docs.emmet.io/\">官方文档</a>查看.</p>\n<h3 id=\"第三步-配置\"><a href=\"#第三步-配置\" class=\"headerlink\" title=\"第三步 : 配置\"></a>第三步 : 配置</h3><p>Emmet还有一个功能，选取相同词，可以一次更改多个词，在mac中默认快捷键是 <code>Canmand+D</code> (我记得是，要不然我也不会改键).</p>\n<p>我习惯 <code>Cammand+D(Ctrl+d)</code> 是删除当前行，所以在 <code>Preferences-&gt;Key Bindings - User</code> 添加下面这两行:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#123; <span class=\"string\">\"keys\"</span>: [<span class=\"string\">\"command+shift+d\"</span>], <span class=\"string\">\"command\"</span>:<span class=\"string\">\"find_under_expand\"</span> &#125;, &#123; <span class=\"string\">\"keys\"</span>: [<span class=\"string\">\"command+d\"</span>], <span class=\"string\">\"command\"</span>:<span class=\"string\">\"run_macro_file\"</span>, <span class=\"string\">\"args\"</span>: &#123;<span class=\"string\">\"file\"</span>:<span class=\"string\">\"Packages/Default/Delete Line.sublime-macro\"</span>&#125; &#125; // 修改过后，<span class=\"built_in\">command</span>+<span class=\"built_in\">shift</span>+d就是选取相同的词，<span class=\"built_in\">command</span>+d删除当前行</span><br></pre></td></tr></table></figure>"},{"title":"对 Redux 的梳理与理解","date":"2015-11-03T13:00:38.000Z","_content":"\n# Redux 介绍\n\n> 本文主要是对 [Redux 官方文档](http://rackt.github.io/redux/) 的梳理以及自身对 Redux 的理解。\n\n\n\n## 单页面应用的痛点\n\n对于复杂的单页面应用，状态（state）管理非常重要。state 可能包括：服务端的响应数据、本地对响应数据的缓存、本地创建的数据（比如，表单数据）以及一些 UI 的状态信息（比如，路由、选中的 tab、是否显示下拉列表、页码控制等等）。如果 state 变化不可预测，就会难于调试（state 不易重现，很难复现一些 bug）和不易于扩展（比如，优化更新渲染、服务端渲染、路由切换时获取数据等等）。\n\n\n\nRedux 就是用来确保 state 变化的可预测性，主要的约束有：\n\n\n\n* state 以单一对象存储在 store 对象中\n\n* state 只读\n\n* 使用纯函数 reducer 执行 state 更新\n\n\n\n> state 为单一对象，使得 Redux 只需要维护一棵状态树，服务端很容易初始化状态，易于服务器渲染。state 只能通过 dispatch(action) 来触发更新，更新逻辑由 reducer 来执行。\n\n<!-- more -->\n\n## Actions、Reducers 和 Store\n\naction 可以理解为应用向 store 传递的数据信息（一般为用户交互信息）。在实际应用中，传递的信息可以约定一个固定的数据格式，比如: [Flux Standard Action](https://github.com/acdlite/flux-standard-action/)。 为了便于测试和易于扩展，Redux 引入了 Action Creator:\n\n```javascript\n\nfunction addTodo(text) {\n\n    return {\n\n        type: ADD_TODO,\n\n        text,\n\n    }\n\n}\n\nstore.dispatch(addTodo(text))\n\n```\n\n\n\n> dispatch(action) 是一个同步的过程：执行 reducer 更新 state -> 调用 store 的监听处理函数。如果需要在 dispatch 时执行一些异步操作（fetch action data），可以通过引入 Middleware 解决。\n\n\n\nreducer 实际上就是一个函数：`(previousState, action) => newState`\n\n。用来执行根据指定 action 来更新 state 的逻辑。通过 combineReducers(reducers) 可以把多个 reducer 合并成一个 root reducer。\n\n\n\n> reducer 不存储 state, reducer 函数逻辑中不应该直接改变 state 对象, 而是返回新的 state 对象（可以考虑使用 [immutable-js](http://facebook.github.io/immutable-js/)）。\n\n\n\nstore 是一个单一对象：\n\n* 管理应用的 state\n\n* 通过 `store.getState()` 可以获取 state\n\n* 通过 `store.dispatch(action)` 来触发 state 更新\n\n* 通过 `store.subscribe(listener)` 来注册 state 变化监听器\n\n* 通过 `createStore(reducer, [initialState])` 创建\n\n\n\n> 在 Redux 应用中，只允许有一个 store 对象，可以通过 combineReducers(reducers) 来实现对 state 管理的逻辑划分（多个 reducer）。\n\n\n\n## Middleware\n\nmiddleware 其实就是高阶函数，作用于 dispatch 返回一个新的 dispatch（附加了该中间件功能）。可以形式化为：`newDispatch = middleware1(middleware2(...(dispatch)...))` 。\n\n```javascript\n\n// thunk-middleware\n\nexport default function thunkMiddleware({ dispatch, getState }) {\n\n    return next => action =>\n\n        typeof action === 'function' ? action(dispatch, getState) : next(action)\n\n}\n\n```\n\n\n\n通过 thunk-middleware 我们可以看出中间件的一般形式：中间件函数接受两个参数参数： dispatch 和 getState（也就是说中间件可以获取 state 以及 `dispatch new action`）。中间件一般返回 `next(action)`（thunk-middleware 比较特殊，它用于 dispatch 执行异步回调的 action）。store 的创建过程如下：\n\n```javascript\n\n// thunk-middleware\n\nconst reducer = combineReducers(reducers)\n\nconst finalCreateStore = applyMiddleware(promiseMiddleware, warningMiddleware,\n\n    loggerMiddleWare)(createStore)\n\nconst store = finalCreateStore(reducer)\n\n```\n\n\n\n## 异步 Actions\n\n单页面应用中充斥着大量的异步请求（ajax）。dispatch(action) 是同步的，如果要处理异步 action，需要使用一些中间件。 [redux-thunks](https://github.com/gaearon/redux-thunk/) 和 [redux-promise](https://github.com/aclite/redux-promise/) 分别是使用异步回调和 Promise 来解决异步 action 问题的。\n\n\n\n## Redux 和传统 Flux 框架的比较\n\n![Flux](http://7xnvp3.com1.z0.glb.clouddn.com/bVoR1E.jpg)\n\n![Redux](http://7xnvp3.com1.z0.glb.clouddn.com/bVoR1G.jpg)\n\n图来自 [UNIDIRECTIONAL USER INTERFACE ARCHITECTURES](http://staltz.com/unidirectional-user-interface-architectures.html)\n\n\n\n## Redux 和 React\n\nRedux 和 React 是没有必然关系的，Redux 用于管理 state，与具体的 View 框架无关。不过，Redux 特别适合那些 `state => UI` 的框架（比如：React, Deku）。\n\n\n\n> 简单来看：Smart component` 是连接 Redux 的组件（@connect），一般不可复用。Dumb component 是纯粹的组件，一般可复用。两者的共同点是：无状态，或者说状态提取到上层，统一由 redux 的 store 来管理。redux state -> Smart component -> Dumb component -> Dumb component（通过 props 传递）。在实践中，少量 Dumb component 允许自带 UI 状态信息（组件 unmount 后，不需要保留 UI 状态）。值得注意的是，Smart component 是应用更新状态的最小单元。实践中，可以将 route handlers 作为 Smart component，一个 Smart component 对应一个 reducer。","source":"_posts/redux1.md","raw":"title: 对 Redux 的梳理与理解\ndate: 2015-11-03 21:00:38\ntags:\n---\n\n# Redux 介绍\n\n> 本文主要是对 [Redux 官方文档](http://rackt.github.io/redux/) 的梳理以及自身对 Redux 的理解。\n\n\n\n## 单页面应用的痛点\n\n对于复杂的单页面应用，状态（state）管理非常重要。state 可能包括：服务端的响应数据、本地对响应数据的缓存、本地创建的数据（比如，表单数据）以及一些 UI 的状态信息（比如，路由、选中的 tab、是否显示下拉列表、页码控制等等）。如果 state 变化不可预测，就会难于调试（state 不易重现，很难复现一些 bug）和不易于扩展（比如，优化更新渲染、服务端渲染、路由切换时获取数据等等）。\n\n\n\nRedux 就是用来确保 state 变化的可预测性，主要的约束有：\n\n\n\n* state 以单一对象存储在 store 对象中\n\n* state 只读\n\n* 使用纯函数 reducer 执行 state 更新\n\n\n\n> state 为单一对象，使得 Redux 只需要维护一棵状态树，服务端很容易初始化状态，易于服务器渲染。state 只能通过 dispatch(action) 来触发更新，更新逻辑由 reducer 来执行。\n\n<!-- more -->\n\n## Actions、Reducers 和 Store\n\naction 可以理解为应用向 store 传递的数据信息（一般为用户交互信息）。在实际应用中，传递的信息可以约定一个固定的数据格式，比如: [Flux Standard Action](https://github.com/acdlite/flux-standard-action/)。 为了便于测试和易于扩展，Redux 引入了 Action Creator:\n\n```javascript\n\nfunction addTodo(text) {\n\n    return {\n\n        type: ADD_TODO,\n\n        text,\n\n    }\n\n}\n\nstore.dispatch(addTodo(text))\n\n```\n\n\n\n> dispatch(action) 是一个同步的过程：执行 reducer 更新 state -> 调用 store 的监听处理函数。如果需要在 dispatch 时执行一些异步操作（fetch action data），可以通过引入 Middleware 解决。\n\n\n\nreducer 实际上就是一个函数：`(previousState, action) => newState`\n\n。用来执行根据指定 action 来更新 state 的逻辑。通过 combineReducers(reducers) 可以把多个 reducer 合并成一个 root reducer。\n\n\n\n> reducer 不存储 state, reducer 函数逻辑中不应该直接改变 state 对象, 而是返回新的 state 对象（可以考虑使用 [immutable-js](http://facebook.github.io/immutable-js/)）。\n\n\n\nstore 是一个单一对象：\n\n* 管理应用的 state\n\n* 通过 `store.getState()` 可以获取 state\n\n* 通过 `store.dispatch(action)` 来触发 state 更新\n\n* 通过 `store.subscribe(listener)` 来注册 state 变化监听器\n\n* 通过 `createStore(reducer, [initialState])` 创建\n\n\n\n> 在 Redux 应用中，只允许有一个 store 对象，可以通过 combineReducers(reducers) 来实现对 state 管理的逻辑划分（多个 reducer）。\n\n\n\n## Middleware\n\nmiddleware 其实就是高阶函数，作用于 dispatch 返回一个新的 dispatch（附加了该中间件功能）。可以形式化为：`newDispatch = middleware1(middleware2(...(dispatch)...))` 。\n\n```javascript\n\n// thunk-middleware\n\nexport default function thunkMiddleware({ dispatch, getState }) {\n\n    return next => action =>\n\n        typeof action === 'function' ? action(dispatch, getState) : next(action)\n\n}\n\n```\n\n\n\n通过 thunk-middleware 我们可以看出中间件的一般形式：中间件函数接受两个参数参数： dispatch 和 getState（也就是说中间件可以获取 state 以及 `dispatch new action`）。中间件一般返回 `next(action)`（thunk-middleware 比较特殊，它用于 dispatch 执行异步回调的 action）。store 的创建过程如下：\n\n```javascript\n\n// thunk-middleware\n\nconst reducer = combineReducers(reducers)\n\nconst finalCreateStore = applyMiddleware(promiseMiddleware, warningMiddleware,\n\n    loggerMiddleWare)(createStore)\n\nconst store = finalCreateStore(reducer)\n\n```\n\n\n\n## 异步 Actions\n\n单页面应用中充斥着大量的异步请求（ajax）。dispatch(action) 是同步的，如果要处理异步 action，需要使用一些中间件。 [redux-thunks](https://github.com/gaearon/redux-thunk/) 和 [redux-promise](https://github.com/aclite/redux-promise/) 分别是使用异步回调和 Promise 来解决异步 action 问题的。\n\n\n\n## Redux 和传统 Flux 框架的比较\n\n![Flux](http://7xnvp3.com1.z0.glb.clouddn.com/bVoR1E.jpg)\n\n![Redux](http://7xnvp3.com1.z0.glb.clouddn.com/bVoR1G.jpg)\n\n图来自 [UNIDIRECTIONAL USER INTERFACE ARCHITECTURES](http://staltz.com/unidirectional-user-interface-architectures.html)\n\n\n\n## Redux 和 React\n\nRedux 和 React 是没有必然关系的，Redux 用于管理 state，与具体的 View 框架无关。不过，Redux 特别适合那些 `state => UI` 的框架（比如：React, Deku）。\n\n\n\n> 简单来看：Smart component` 是连接 Redux 的组件（@connect），一般不可复用。Dumb component 是纯粹的组件，一般可复用。两者的共同点是：无状态，或者说状态提取到上层，统一由 redux 的 store 来管理。redux state -> Smart component -> Dumb component -> Dumb component（通过 props 传递）。在实践中，少量 Dumb component 允许自带 UI 状态信息（组件 unmount 后，不需要保留 UI 状态）。值得注意的是，Smart component 是应用更新状态的最小单元。实践中，可以将 route handlers 作为 Smart component，一个 Smart component 对应一个 reducer。","slug":"redux1","published":1,"updated":"2016-03-02T14:18:07.218Z","_id":"cijgvit5q000azp8g9luacl44","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Redux-介绍\"><a href=\"#Redux-介绍\" class=\"headerlink\" title=\"Redux 介绍\"></a>Redux 介绍</h1><blockquote>\n<p>本文主要是对 <a href=\"http://rackt.github.io/redux/\" target=\"_blank\" rel=\"external\">Redux 官方文档</a> 的梳理以及自身对 Redux 的理解。</p>\n</blockquote>\n<h2 id=\"单页面应用的痛点\"><a href=\"#单页面应用的痛点\" class=\"headerlink\" title=\"单页面应用的痛点\"></a>单页面应用的痛点</h2><p>对于复杂的单页面应用，状态（state）管理非常重要。state 可能包括：服务端的响应数据、本地对响应数据的缓存、本地创建的数据（比如，表单数据）以及一些 UI 的状态信息（比如，路由、选中的 tab、是否显示下拉列表、页码控制等等）。如果 state 变化不可预测，就会难于调试（state 不易重现，很难复现一些 bug）和不易于扩展（比如，优化更新渲染、服务端渲染、路由切换时获取数据等等）。</p>\n<p>Redux 就是用来确保 state 变化的可预测性，主要的约束有：</p>\n<ul>\n<li><p>state 以单一对象存储在 store 对象中</p>\n</li>\n<li><p>state 只读</p>\n</li>\n<li><p>使用纯函数 reducer 执行 state 更新</p>\n</li>\n</ul>\n<blockquote>\n<p>state 为单一对象，使得 Redux 只需要维护一棵状态树，服务端很容易初始化状态，易于服务器渲染。state 只能通过 dispatch(action) 来触发更新，更新逻辑由 reducer 来执行。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"Actions、Reducers-和-Store\"><a href=\"#Actions、Reducers-和-Store\" class=\"headerlink\" title=\"Actions、Reducers 和 Store\"></a>Actions、Reducers 和 Store</h2><p>action 可以理解为应用向 store 传递的数据信息（一般为用户交互信息）。在实际应用中，传递的信息可以约定一个固定的数据格式，比如: <a href=\"https://github.com/acdlite/flux-standard-action/\" target=\"_blank\" rel=\"external\">Flux Standard Action</a>。 为了便于测试和易于扩展，Redux 引入了 Action Creator:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addTodo</span>(<span class=\"params\">text</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        type: ADD_TODO,</span><br><span class=\"line\"></span><br><span class=\"line\">        text,</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">store.dispatch(addTodo(text))</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>dispatch(action) 是一个同步的过程：执行 reducer 更新 state -&gt; 调用 store 的监听处理函数。如果需要在 dispatch 时执行一些异步操作（fetch action data），可以通过引入 Middleware 解决。</p>\n</blockquote>\n<p>reducer 实际上就是一个函数：<code>(previousState, action) =&gt; newState</code></p>\n<p>。用来执行根据指定 action 来更新 state 的逻辑。通过 combineReducers(reducers) 可以把多个 reducer 合并成一个 root reducer。</p>\n<blockquote>\n<p>reducer 不存储 state, reducer 函数逻辑中不应该直接改变 state 对象, 而是返回新的 state 对象（可以考虑使用 <a href=\"http://facebook.github.io/immutable-js/\" target=\"_blank\" rel=\"external\">immutable-js</a>）。</p>\n</blockquote>\n<p>store 是一个单一对象：</p>\n<ul>\n<li><p>管理应用的 state</p>\n</li>\n<li><p>通过 <code>store.getState()</code> 可以获取 state</p>\n</li>\n<li><p>通过 <code>store.dispatch(action)</code> 来触发 state 更新</p>\n</li>\n<li><p>通过 <code>store.subscribe(listener)</code> 来注册 state 变化监听器</p>\n</li>\n<li><p>通过 <code>createStore(reducer, [initialState])</code> 创建</p>\n</li>\n</ul>\n<blockquote>\n<p>在 Redux 应用中，只允许有一个 store 对象，可以通过 combineReducers(reducers) 来实现对 state 管理的逻辑划分（多个 reducer）。</p>\n</blockquote>\n<h2 id=\"Middleware\"><a href=\"#Middleware\" class=\"headerlink\" title=\"Middleware\"></a>Middleware</h2><p>middleware 其实就是高阶函数，作用于 dispatch 返回一个新的 dispatch（附加了该中间件功能）。可以形式化为：<code>newDispatch = middleware1(middleware2(...(dispatch)...))</code> 。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// thunk-middleware</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">thunkMiddleware</span>(<span class=\"params\">&#123; dispatch, getState &#125;</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> next =&gt; action =&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">typeof</span> action === <span class=\"string\">'function'</span> ? action(dispatch, getState) : next(action)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过 thunk-middleware 我们可以看出中间件的一般形式：中间件函数接受两个参数参数： dispatch 和 getState（也就是说中间件可以获取 state 以及 <code>dispatch new action</code>）。中间件一般返回 <code>next(action)</code>（thunk-middleware 比较特殊，它用于 dispatch 执行异步回调的 action）。store 的创建过程如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// thunk-middleware</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> reducer = combineReducers(reducers)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> finalCreateStore = applyMiddleware(promiseMiddleware, warningMiddleware,</span><br><span class=\"line\"></span><br><span class=\"line\">    loggerMiddleWare)(createStore)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = finalCreateStore(reducer)</span><br></pre></td></tr></table></figure>\n<h2 id=\"异步-Actions\"><a href=\"#异步-Actions\" class=\"headerlink\" title=\"异步 Actions\"></a>异步 Actions</h2><p>单页面应用中充斥着大量的异步请求（ajax）。dispatch(action) 是同步的，如果要处理异步 action，需要使用一些中间件。 <a href=\"https://github.com/gaearon/redux-thunk/\" target=\"_blank\" rel=\"external\">redux-thunks</a> 和 <a href=\"https://github.com/aclite/redux-promise/\" target=\"_blank\" rel=\"external\">redux-promise</a> 分别是使用异步回调和 Promise 来解决异步 action 问题的。</p>\n<h2 id=\"Redux-和传统-Flux-框架的比较\"><a href=\"#Redux-和传统-Flux-框架的比较\" class=\"headerlink\" title=\"Redux 和传统 Flux 框架的比较\"></a>Redux 和传统 Flux 框架的比较</h2><p><img src=\"http://7xnvp3.com1.z0.glb.clouddn.com/bVoR1E.jpg\" alt=\"Flux\"></p>\n<p><img src=\"http://7xnvp3.com1.z0.glb.clouddn.com/bVoR1G.jpg\" alt=\"Redux\"></p>\n<p>图来自 <a href=\"http://staltz.com/unidirectional-user-interface-architectures.html\" target=\"_blank\" rel=\"external\">UNIDIRECTIONAL USER INTERFACE ARCHITECTURES</a></p>\n<h2 id=\"Redux-和-React\"><a href=\"#Redux-和-React\" class=\"headerlink\" title=\"Redux 和 React\"></a>Redux 和 React</h2><p>Redux 和 React 是没有必然关系的，Redux 用于管理 state，与具体的 View 框架无关。不过，Redux 特别适合那些 <code>state =&gt; UI</code> 的框架（比如：React, Deku）。</p>\n<blockquote>\n<p>简单来看：Smart component` 是连接 Redux 的组件（@connect），一般不可复用。Dumb component 是纯粹的组件，一般可复用。两者的共同点是：无状态，或者说状态提取到上层，统一由 redux 的 store 来管理。redux state -&gt; Smart component -&gt; Dumb component -&gt; Dumb component（通过 props 传递）。在实践中，少量 Dumb component 允许自带 UI 状态信息（组件 unmount 后，不需要保留 UI 状态）。值得注意的是，Smart component 是应用更新状态的最小单元。实践中，可以将 route handlers 作为 Smart component，一个 Smart component 对应一个 reducer。</p>\n</blockquote>\n","excerpt":"<h1 id=\"Redux-介绍\"><a href=\"#Redux-介绍\" class=\"headerlink\" title=\"Redux 介绍\"></a>Redux 介绍</h1><blockquote>\n<p>本文主要是对 <a href=\"http://rackt.github.io/redux/\">Redux 官方文档</a> 的梳理以及自身对 Redux 的理解。</p>\n</blockquote>\n<h2 id=\"单页面应用的痛点\"><a href=\"#单页面应用的痛点\" class=\"headerlink\" title=\"单页面应用的痛点\"></a>单页面应用的痛点</h2><p>对于复杂的单页面应用，状态（state）管理非常重要。state 可能包括：服务端的响应数据、本地对响应数据的缓存、本地创建的数据（比如，表单数据）以及一些 UI 的状态信息（比如，路由、选中的 tab、是否显示下拉列表、页码控制等等）。如果 state 变化不可预测，就会难于调试（state 不易重现，很难复现一些 bug）和不易于扩展（比如，优化更新渲染、服务端渲染、路由切换时获取数据等等）。</p>\n<p>Redux 就是用来确保 state 变化的可预测性，主要的约束有：</p>\n<ul>\n<li><p>state 以单一对象存储在 store 对象中</p>\n</li>\n<li><p>state 只读</p>\n</li>\n<li><p>使用纯函数 reducer 执行 state 更新</p>\n</li>\n</ul>\n<blockquote>\n<p>state 为单一对象，使得 Redux 只需要维护一棵状态树，服务端很容易初始化状态，易于服务器渲染。state 只能通过 dispatch(action) 来触发更新，更新逻辑由 reducer 来执行。</p>\n</blockquote>","more":"<h2 id=\"Actions、Reducers-和-Store\"><a href=\"#Actions、Reducers-和-Store\" class=\"headerlink\" title=\"Actions、Reducers 和 Store\"></a>Actions、Reducers 和 Store</h2><p>action 可以理解为应用向 store 传递的数据信息（一般为用户交互信息）。在实际应用中，传递的信息可以约定一个固定的数据格式，比如: <a href=\"https://github.com/acdlite/flux-standard-action/\">Flux Standard Action</a>。 为了便于测试和易于扩展，Redux 引入了 Action Creator:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addTodo</span>(<span class=\"params\">text</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        type: ADD_TODO,</span><br><span class=\"line\"></span><br><span class=\"line\">        text,</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">store.dispatch(addTodo(text))</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>dispatch(action) 是一个同步的过程：执行 reducer 更新 state -&gt; 调用 store 的监听处理函数。如果需要在 dispatch 时执行一些异步操作（fetch action data），可以通过引入 Middleware 解决。</p>\n</blockquote>\n<p>reducer 实际上就是一个函数：<code>(previousState, action) =&gt; newState</code></p>\n<p>。用来执行根据指定 action 来更新 state 的逻辑。通过 combineReducers(reducers) 可以把多个 reducer 合并成一个 root reducer。</p>\n<blockquote>\n<p>reducer 不存储 state, reducer 函数逻辑中不应该直接改变 state 对象, 而是返回新的 state 对象（可以考虑使用 <a href=\"http://facebook.github.io/immutable-js/\">immutable-js</a>）。</p>\n</blockquote>\n<p>store 是一个单一对象：</p>\n<ul>\n<li><p>管理应用的 state</p>\n</li>\n<li><p>通过 <code>store.getState()</code> 可以获取 state</p>\n</li>\n<li><p>通过 <code>store.dispatch(action)</code> 来触发 state 更新</p>\n</li>\n<li><p>通过 <code>store.subscribe(listener)</code> 来注册 state 变化监听器</p>\n</li>\n<li><p>通过 <code>createStore(reducer, [initialState])</code> 创建</p>\n</li>\n</ul>\n<blockquote>\n<p>在 Redux 应用中，只允许有一个 store 对象，可以通过 combineReducers(reducers) 来实现对 state 管理的逻辑划分（多个 reducer）。</p>\n</blockquote>\n<h2 id=\"Middleware\"><a href=\"#Middleware\" class=\"headerlink\" title=\"Middleware\"></a>Middleware</h2><p>middleware 其实就是高阶函数，作用于 dispatch 返回一个新的 dispatch（附加了该中间件功能）。可以形式化为：<code>newDispatch = middleware1(middleware2(...(dispatch)...))</code> 。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// thunk-middleware</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">thunkMiddleware</span>(<span class=\"params\">&#123; dispatch, getState &#125;</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> next =&gt; action =&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">typeof</span> action === <span class=\"string\">'function'</span> ? action(dispatch, getState) : next(action)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过 thunk-middleware 我们可以看出中间件的一般形式：中间件函数接受两个参数参数： dispatch 和 getState（也就是说中间件可以获取 state 以及 <code>dispatch new action</code>）。中间件一般返回 <code>next(action)</code>（thunk-middleware 比较特殊，它用于 dispatch 执行异步回调的 action）。store 的创建过程如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// thunk-middleware</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> reducer = combineReducers(reducers)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> finalCreateStore = applyMiddleware(promiseMiddleware, warningMiddleware,</span><br><span class=\"line\"></span><br><span class=\"line\">    loggerMiddleWare)(createStore)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = finalCreateStore(reducer)</span><br></pre></td></tr></table></figure>\n<h2 id=\"异步-Actions\"><a href=\"#异步-Actions\" class=\"headerlink\" title=\"异步 Actions\"></a>异步 Actions</h2><p>单页面应用中充斥着大量的异步请求（ajax）。dispatch(action) 是同步的，如果要处理异步 action，需要使用一些中间件。 <a href=\"https://github.com/gaearon/redux-thunk/\">redux-thunks</a> 和 <a href=\"https://github.com/aclite/redux-promise/\">redux-promise</a> 分别是使用异步回调和 Promise 来解决异步 action 问题的。</p>\n<h2 id=\"Redux-和传统-Flux-框架的比较\"><a href=\"#Redux-和传统-Flux-框架的比较\" class=\"headerlink\" title=\"Redux 和传统 Flux 框架的比较\"></a>Redux 和传统 Flux 框架的比较</h2><p><img src=\"http://7xnvp3.com1.z0.glb.clouddn.com/bVoR1E.jpg\" alt=\"Flux\"></p>\n<p><img src=\"http://7xnvp3.com1.z0.glb.clouddn.com/bVoR1G.jpg\" alt=\"Redux\"></p>\n<p>图来自 <a href=\"http://staltz.com/unidirectional-user-interface-architectures.html\">UNIDIRECTIONAL USER INTERFACE ARCHITECTURES</a></p>\n<h2 id=\"Redux-和-React\"><a href=\"#Redux-和-React\" class=\"headerlink\" title=\"Redux 和 React\"></a>Redux 和 React</h2><p>Redux 和 React 是没有必然关系的，Redux 用于管理 state，与具体的 View 框架无关。不过，Redux 特别适合那些 <code>state =&gt; UI</code> 的框架（比如：React, Deku）。</p>\n<blockquote>\n<p>简单来看：Smart component` 是连接 Redux 的组件（@connect），一般不可复用。Dumb component 是纯粹的组件，一般可复用。两者的共同点是：无状态，或者说状态提取到上层，统一由 redux 的 store 来管理。redux state -&gt; Smart component -&gt; Dumb component -&gt; Dumb component（通过 props 传递）。在实践中，少量 Dumb component 允许自带 UI 状态信息（组件 unmount 后，不需要保留 UI 状态）。值得注意的是，Smart component 是应用更新状态的最小单元。实践中，可以将 route handlers 作为 Smart component，一个 Smart component 对应一个 reducer。</p>\n</blockquote>"},{"title":"可想实现一个自己的简单jQuery库？(七)","date":"2015-11-27T12:54:43.000Z","_content":"\n## Lesson-6\n\n\n\n这个版本完善 hasClass 和 css 方法.\n\n\n\n新增 attr 和 data\n\n\n\n```javascript\n\ncss: function(attr, val) { //链式测试\n\n\n\n    for (var i = 0; i < this.length; i++) {\n\n        if(typeof attr == 'string') {\n\n            if (arguments.length == 1) {\n\n                return getComputedStyle(this[0], null)[attr];\n\n            }\n\n            this[i].style[attr] = val;\n\n        } else {\n\n            var _this = this[i];\n\n            f.each(attr,function(attr,val) {\n\n                _this.style.cssText += '' + attr + ':' + val + ';';\n\n            });\n\n        }\n\n    }\n\n    return this;\n\n}\n\n```\n\n<!-- more -->\n\n在我们上一个版本中,没有对css方法传对象进行解析,在这我们要进行完善.\n\n\n\n刚刚好我们现在已经有了each方法!直接用上吧!\n\n\n\n在我们的for循环中,要先判断下传入的attr参数是字符串还是对象.\n\n\n\n如果是字符串,我们就按照 `css('width','100px')` 这样的方式处理\n\n\n\n如果是对象 `css({\"width\":'100px','height':'200px'})`\n\n```javascript\n\nvar _this = this[i];\n\nf.each(attr,function(attr,val) {\n\n    _this.style.cssText += '' + attr + ':' + val + ';';\n\n});\n\n```\n\n\n\n首先我们缓存下当前的this，然后用cssText方法，直接拼接进去即可.\n\n\n\n接着我们需要完善hasClass方法。这里要着重说明下！目前我搜到的一大堆hasClass方法与jQuery的实现都是不同的\n\n\n\n比如有这样的dom结构\n\n```html\n\n<div id=\"pox\">\n\n    <ul>\n\n        <li class=\"a c\">pox</li>\n\n        <li class=\"b\">pox</li>\n\n        <li>pox</li><li>pox</li>\n\n        <li>pox</li>\n\n    </ul>\n\n</div>\n\n```\n\n\n\n我们如果写 `$('#pox li').hasClass('b')` 与 `$('#pox li').hasClass('a')` 那都会是什么样的结果呢？\n\n\n\n结果是都会返回true。\n\n\n\n而现在基本能搜到的完全没有做这方面的判断。所以我们来看看我是如何实现的\n\n```javascript\n\nhasClass : function(cls) {\n\n    var reg = new RegExp('(\\\\s|^)' + cls + '(\\\\s|$)');\n\n    var arr = [];\n\n    for (var i = 0; i < this.length; i++) {\n\n        if (this[i].className.match(reg)) arr.push(true);\n\n            else arr.push(false);\n\n    }\n\n    if (arr.indexOf(true) != -1)  return true;\n\n        else  return false;\n\n}\n\n```\n\n\n\n首先我们需要一个正则匹配，还需要一个数组，进行存储每个元素是否有存在判断的class\n\n\n\n然后我们再在那个数组中寻找是否有true？如果有true，则返回true，如果一个true都没有的情况下，才能完全返回false。希望大家在这里要注意以下\n\n\n\n最后是我们的attr和data方法\n\n```javascript\n\nattr : function(attr, val) {\n\n    for (var i = 0; i < this.length; i++) {\n\n        if(typeof attr == 'string') {\n\n            if (arguments.length == 1) {\n\n                return this[i].getAttribute(attr);\n\n            }\n\n            this[i].setAttribute(attr,val);\n\n        } else {\n\n            var _this = this[i];\n\n            f.each(attr,function(attr,val) {\n\n                _this.setAttribute(attr,val);;\n\n            });\n\n        }\n\n    }\n\n    return this;\n\n},\n\ndata : function(attr, val) {\n\n    for (var i = 0; i < this.length; i++) {\n\n        if(typeof attr == 'string') {\n\n            if (arguments.length == 1) {\n\n                return this[i].getAttribute('data-' + attr);\n\n            }\n\n            this[i].setAttribute('data-' + attr,val);\n\n        } else {\n\n            var _this = this[i];\n\n            f.each(attr,function(attr,val) {\n\n                _this.setAttribute('data-' + attr,val);;\n\n            });\n\n        }\n\n    }\n\n    return this;\n\n}\n\n```\n\n\n\n这两个方法就很简单啦，跟CSS方法类似，先判断第一个参数是否为字符串，如果是字符串就是直接增加一个属性。如果是对象，就each下一个一个set即可。\n","source":"_posts/jquery07.md","raw":"title: 可想实现一个自己的简单jQuery库？(七)\ndate: 2015-11-27 20:54:43\ntags:\n---\n\n## Lesson-6\n\n\n\n这个版本完善 hasClass 和 css 方法.\n\n\n\n新增 attr 和 data\n\n\n\n```javascript\n\ncss: function(attr, val) { //链式测试\n\n\n\n    for (var i = 0; i < this.length; i++) {\n\n        if(typeof attr == 'string') {\n\n            if (arguments.length == 1) {\n\n                return getComputedStyle(this[0], null)[attr];\n\n            }\n\n            this[i].style[attr] = val;\n\n        } else {\n\n            var _this = this[i];\n\n            f.each(attr,function(attr,val) {\n\n                _this.style.cssText += '' + attr + ':' + val + ';';\n\n            });\n\n        }\n\n    }\n\n    return this;\n\n}\n\n```\n\n<!-- more -->\n\n在我们上一个版本中,没有对css方法传对象进行解析,在这我们要进行完善.\n\n\n\n刚刚好我们现在已经有了each方法!直接用上吧!\n\n\n\n在我们的for循环中,要先判断下传入的attr参数是字符串还是对象.\n\n\n\n如果是字符串,我们就按照 `css('width','100px')` 这样的方式处理\n\n\n\n如果是对象 `css({\"width\":'100px','height':'200px'})`\n\n```javascript\n\nvar _this = this[i];\n\nf.each(attr,function(attr,val) {\n\n    _this.style.cssText += '' + attr + ':' + val + ';';\n\n});\n\n```\n\n\n\n首先我们缓存下当前的this，然后用cssText方法，直接拼接进去即可.\n\n\n\n接着我们需要完善hasClass方法。这里要着重说明下！目前我搜到的一大堆hasClass方法与jQuery的实现都是不同的\n\n\n\n比如有这样的dom结构\n\n```html\n\n<div id=\"pox\">\n\n    <ul>\n\n        <li class=\"a c\">pox</li>\n\n        <li class=\"b\">pox</li>\n\n        <li>pox</li><li>pox</li>\n\n        <li>pox</li>\n\n    </ul>\n\n</div>\n\n```\n\n\n\n我们如果写 `$('#pox li').hasClass('b')` 与 `$('#pox li').hasClass('a')` 那都会是什么样的结果呢？\n\n\n\n结果是都会返回true。\n\n\n\n而现在基本能搜到的完全没有做这方面的判断。所以我们来看看我是如何实现的\n\n```javascript\n\nhasClass : function(cls) {\n\n    var reg = new RegExp('(\\\\s|^)' + cls + '(\\\\s|$)');\n\n    var arr = [];\n\n    for (var i = 0; i < this.length; i++) {\n\n        if (this[i].className.match(reg)) arr.push(true);\n\n            else arr.push(false);\n\n    }\n\n    if (arr.indexOf(true) != -1)  return true;\n\n        else  return false;\n\n}\n\n```\n\n\n\n首先我们需要一个正则匹配，还需要一个数组，进行存储每个元素是否有存在判断的class\n\n\n\n然后我们再在那个数组中寻找是否有true？如果有true，则返回true，如果一个true都没有的情况下，才能完全返回false。希望大家在这里要注意以下\n\n\n\n最后是我们的attr和data方法\n\n```javascript\n\nattr : function(attr, val) {\n\n    for (var i = 0; i < this.length; i++) {\n\n        if(typeof attr == 'string') {\n\n            if (arguments.length == 1) {\n\n                return this[i].getAttribute(attr);\n\n            }\n\n            this[i].setAttribute(attr,val);\n\n        } else {\n\n            var _this = this[i];\n\n            f.each(attr,function(attr,val) {\n\n                _this.setAttribute(attr,val);;\n\n            });\n\n        }\n\n    }\n\n    return this;\n\n},\n\ndata : function(attr, val) {\n\n    for (var i = 0; i < this.length; i++) {\n\n        if(typeof attr == 'string') {\n\n            if (arguments.length == 1) {\n\n                return this[i].getAttribute('data-' + attr);\n\n            }\n\n            this[i].setAttribute('data-' + attr,val);\n\n        } else {\n\n            var _this = this[i];\n\n            f.each(attr,function(attr,val) {\n\n                _this.setAttribute('data-' + attr,val);;\n\n            });\n\n        }\n\n    }\n\n    return this;\n\n}\n\n```\n\n\n\n这两个方法就很简单啦，跟CSS方法类似，先判断第一个参数是否为字符串，如果是字符串就是直接增加一个属性。如果是对象，就each下一个一个set即可。\n","slug":"jquery07","published":1,"updated":"2016-03-02T14:18:07.218Z","_id":"cijgvit5t000bzp8gt00baka0","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Lesson-6\"><a href=\"#Lesson-6\" class=\"headerlink\" title=\"Lesson-6\"></a>Lesson-6</h2><p>这个版本完善 hasClass 和 css 方法.</p>\n<p>新增 attr 和 data</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">css: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">attr, val</span>) </span>&#123; <span class=\"comment\">//链式测试</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.length; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> attr == <span class=\"string\">'string'</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>.length == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">return</span> getComputedStyle(<span class=\"keyword\">this</span>[<span class=\"number\">0</span>], <span class=\"literal\">null</span>)[attr];</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">this</span>[i].style[attr] = val;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span>[i];</span><br><span class=\"line\"></span><br><span class=\"line\">            f.each(attr,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">attr,val</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                _this.style.cssText += <span class=\"string\">''</span> + attr + <span class=\"string\">':'</span> + val + <span class=\"string\">';'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>在我们上一个版本中,没有对css方法传对象进行解析,在这我们要进行完善.</p>\n<p>刚刚好我们现在已经有了each方法!直接用上吧!</p>\n<p>在我们的for循环中,要先判断下传入的attr参数是字符串还是对象.</p>\n<p>如果是字符串,我们就按照 <code>css(&#39;width&#39;,&#39;100px&#39;)</code> 这样的方式处理</p>\n<p>如果是对象 <code>css({&quot;width&quot;:&#39;100px&#39;,&#39;height&#39;:&#39;200px&#39;})</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span>[i];</span><br><span class=\"line\"></span><br><span class=\"line\">f.each(attr,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">attr,val</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    _this.style.cssText += <span class=\"string\">''</span> + attr + <span class=\"string\">':'</span> + val + <span class=\"string\">';'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>首先我们缓存下当前的this，然后用cssText方法，直接拼接进去即可.</p>\n<p>接着我们需要完善hasClass方法。这里要着重说明下！目前我搜到的一大堆hasClass方法与jQuery的实现都是不同的</p>\n<p>比如有这样的dom结构</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"pox\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"a c\"</span>&gt;</span>pox<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"b\"</span>&gt;</span>pox<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>pox<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>pox<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>pox<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>我们如果写 <code>$(&#39;#pox li&#39;).hasClass(&#39;b&#39;)</code> 与 <code>$(&#39;#pox li&#39;).hasClass(&#39;a&#39;)</code> 那都会是什么样的结果呢？</p>\n<p>结果是都会返回true。</p>\n<p>而现在基本能搜到的完全没有做这方面的判断。所以我们来看看我是如何实现的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">hasClass : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cls</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'(\\\\s|^)'</span> + cls + <span class=\"string\">'(\\\\s|$)'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.length; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>[i].className.match(reg)) arr.push(<span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">else</span> arr.push(<span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr.indexOf(<span class=\"literal\">true</span>) != <span class=\"number\">-1</span>)  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">else</span>  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>首先我们需要一个正则匹配，还需要一个数组，进行存储每个元素是否有存在判断的class</p>\n<p>然后我们再在那个数组中寻找是否有true？如果有true，则返回true，如果一个true都没有的情况下，才能完全返回false。希望大家在这里要注意以下</p>\n<p>最后是我们的attr和data方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">attr : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">attr, val</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.length; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> attr == <span class=\"string\">'string'</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>.length == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>[i].getAttribute(attr);</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">this</span>[i].setAttribute(attr,val);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span>[i];</span><br><span class=\"line\"></span><br><span class=\"line\">            f.each(attr,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">attr,val</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                _this.setAttribute(attr,val);;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">data : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">attr, val</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.length; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> attr == <span class=\"string\">'string'</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>.length == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>[i].getAttribute(<span class=\"string\">'data-'</span> + attr);</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">this</span>[i].setAttribute(<span class=\"string\">'data-'</span> + attr,val);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span>[i];</span><br><span class=\"line\"></span><br><span class=\"line\">            f.each(attr,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">attr,val</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                _this.setAttribute(<span class=\"string\">'data-'</span> + attr,val);;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这两个方法就很简单啦，跟CSS方法类似，先判断第一个参数是否为字符串，如果是字符串就是直接增加一个属性。如果是对象，就each下一个一个set即可。</p>\n","excerpt":"<h2 id=\"Lesson-6\"><a href=\"#Lesson-6\" class=\"headerlink\" title=\"Lesson-6\"></a>Lesson-6</h2><p>这个版本完善 hasClass 和 css 方法.</p>\n<p>新增 attr 和 data</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">css: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">attr, val</span>) </span>&#123; <span class=\"comment\">//链式测试</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.length; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> attr == <span class=\"string\">'string'</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>.length == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">return</span> getComputedStyle(<span class=\"keyword\">this</span>[<span class=\"number\">0</span>], <span class=\"literal\">null</span>)[attr];</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">this</span>[i].style[attr] = val;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span>[i];</span><br><span class=\"line\"></span><br><span class=\"line\">            f.each(attr,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">attr,val</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                _this.style.cssText += <span class=\"string\">''</span> + attr + <span class=\"string\">':'</span> + val + <span class=\"string\">';'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"<p>在我们上一个版本中,没有对css方法传对象进行解析,在这我们要进行完善.</p>\n<p>刚刚好我们现在已经有了each方法!直接用上吧!</p>\n<p>在我们的for循环中,要先判断下传入的attr参数是字符串还是对象.</p>\n<p>如果是字符串,我们就按照 <code>css(&#39;width&#39;,&#39;100px&#39;)</code> 这样的方式处理</p>\n<p>如果是对象 <code>css({&quot;width&quot;:&#39;100px&#39;,&#39;height&#39;:&#39;200px&#39;})</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span>[i];</span><br><span class=\"line\"></span><br><span class=\"line\">f.each(attr,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">attr,val</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    _this.style.cssText += <span class=\"string\">''</span> + attr + <span class=\"string\">':'</span> + val + <span class=\"string\">';'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>首先我们缓存下当前的this，然后用cssText方法，直接拼接进去即可.</p>\n<p>接着我们需要完善hasClass方法。这里要着重说明下！目前我搜到的一大堆hasClass方法与jQuery的实现都是不同的</p>\n<p>比如有这样的dom结构</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"pox\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"a c\"</span>&gt;</span>pox<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"b\"</span>&gt;</span>pox<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>pox<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>pox<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>pox<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>我们如果写 <code>$(&#39;#pox li&#39;).hasClass(&#39;b&#39;)</code> 与 <code>$(&#39;#pox li&#39;).hasClass(&#39;a&#39;)</code> 那都会是什么样的结果呢？</p>\n<p>结果是都会返回true。</p>\n<p>而现在基本能搜到的完全没有做这方面的判断。所以我们来看看我是如何实现的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">hasClass : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cls</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'(\\\\s|^)'</span> + cls + <span class=\"string\">'(\\\\s|$)'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.length; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>[i].className.match(reg)) arr.push(<span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">else</span> arr.push(<span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr.indexOf(<span class=\"literal\">true</span>) != <span class=\"number\">-1</span>)  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">else</span>  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>首先我们需要一个正则匹配，还需要一个数组，进行存储每个元素是否有存在判断的class</p>\n<p>然后我们再在那个数组中寻找是否有true？如果有true，则返回true，如果一个true都没有的情况下，才能完全返回false。希望大家在这里要注意以下</p>\n<p>最后是我们的attr和data方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">attr : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">attr, val</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.length; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> attr == <span class=\"string\">'string'</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>.length == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>[i].getAttribute(attr);</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">this</span>[i].setAttribute(attr,val);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span>[i];</span><br><span class=\"line\"></span><br><span class=\"line\">            f.each(attr,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">attr,val</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                _this.setAttribute(attr,val);;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">data : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">attr, val</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.length; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> attr == <span class=\"string\">'string'</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>.length == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>[i].getAttribute(<span class=\"string\">'data-'</span> + attr);</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">this</span>[i].setAttribute(<span class=\"string\">'data-'</span> + attr,val);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span>[i];</span><br><span class=\"line\"></span><br><span class=\"line\">            f.each(attr,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">attr,val</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                _this.setAttribute(<span class=\"string\">'data-'</span> + attr,val);;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这两个方法就很简单啦，跟CSS方法类似，先判断第一个参数是否为字符串，如果是字符串就是直接增加一个属性。如果是对象，就each下一个一个set即可。</p>"},{"title":"可想实现一个自己的简单jQuery库？(六)","date":"2015-11-25T13:19:45.000Z","_content":"\n## Lesson-5\n\n这个版本新增6个方法，find()、first()、last()、eq()、get()、ajax()\n\n\n\n```javascript\n\nfind : function(selector) {\n\n    if(!selector) return;\n\n    var context = this.selector;\n\n    return new Kodo(context + ' ' + selector);\n\n},\n```\n\n<!-- more -->\n\n```javascript\n\nfirst : function() {\n\n    return new Kodo(this[0])\n\n},\n```\n\n```javascript\nlast : function() {\n\n    var num = this.length - 1;\n\n    return new Kodo(this[num]);\n\n},\n```\n\n```javascript\neq : function(num) {\n\n    var num = num < 0 ? (this.length - 1) : num;\n\n    console.log(num);\n\n    return new Kodo(this[num]);\n\n},\n```\n\n```javascript\nget : function(num) {\n\n    var num = num < 0 ? (this.length - 1) : num;\n\n    console.log(num);\n\n    return this[num];\n\n}\n\n```\n\n\n\n我们要仔细分辨下，这4个方法在jQuery中返回的都是什么对象？到底是dom对象还是jQuery对象.\n\n\n\n明白了这个后就很容易能写出这4个方法\n\n```javascript\n\nfind : function(selector) {\n\n    if(!selector) return;\n\n    var context = this.selector;\n\n    return new Kodo(context + ' ' + selector);\n\n}\n\n```\n\n\n\n首先find，我们知道一般都会这样写 $('div').find('span') 查找div下的span，返回的是span数组对象，而不是原生的dom对象。\n\n\n\n那么我们就可以换个思路，因为我们能拿到 $('div') 这个selector对吧？也就是 div，既然又要find('span')，我们的selector就可以写成 ('div span')，之后直接返回新的数组对象不就好了吗？\n\n\n\n`var context = this.selector;` 先缓存当前的selector上下文，之后拼接我们find的selector，所以最后return 就变为 `new Kodo(context + ' ' + selector);` 虽然效率不一定高,总是一种解决思路不是吗？\n\n```javascript\n\nfirst : function() {\n\n    return new Kodo(this[0])\n\n},\n\nlast : function() {\n\n    var num = this.length - 1;\n\n    return new Kodo(this[num]);\n\n},\n\neq : function(num) {\n\n    var num = num < 0 ? (this.length - 1) : num;\n\n    console.log(num);\n\n    return new Kodo(this[num]);\n\n},\n\nget : function(num) {\n\n    var num = num < 0 ? (this.length - 1) : num;\n\n    console.log(num);\n\n    return this[num];\n\n}\n\n```\n\n\n\nfind方法比较难解决,之后这4个就很容易了，first、last、eq分别返回的都是封装后的对象，只有get返回的是原生 dom 对象。\n\n\n\n我们根据之前的思路,直接取数组对象的index，return下新的即可，是不是很简单？\n\n\n\n之后是ajax部分\n\n\n\n之前说过之所以，可以用$.ajax直接调用，是因为可以把方法直接挂在在构造函数上，作为静态方法，所以我们只需要写好ajax最后把你想要公开的接口放在Kodo上即可\n\n```javascript\n\nKodo.get = function(url,sucBack,complete) {\n\n    var options = {\n\n        url : url,\n\n        success : sucBack,\n\n        complete : complete\n\n    };\n\n    ajax(options);\n\n};\n\nKodo.post = function(url,data,sucback,complete) {\n\n    var options = {\n\n        url : url,\n\n        type : \"POST\",\n\n        data : data,\n\n        sucback    : sucback,\n\n        complete : complete\n\n    };\n\n    ajax(options);\n\n};\n\nfunction ajax(options) {\n\n    var defaultOptions = {\n\n        url: false, //ajax 请求地址\n\n        type : \"GET\",\n\n        data : false,\n\n        success: false, //数据成功返回后的回调方法\n\n        complete: false //ajax完成后的回调方法\n\n    };\n\n    for (i in defaultOptions) {\n\n        if (options[i] === undefined) {\n\n            options[i] = defaultOptions[i];\n\n        }\n\n    }\n\n    var xhr = new XMLHttpRequest();\n\n    var url = options.url;\n\n    xhr.open(options.type, url);\n\n    xhr.onreadystatechange = onStateChange;\n\n    if (options.type === 'POST') {\n\n        xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n\n    }\n\n    xhr.send(options.data ? options.data : null);\n\n\n\n    function onStateChange() {\n\n        if (xhr.readyState == 4) {\n\n            var result,\n\n                status = xhr.status;\n\n\n\n            if ((status >= 200 && status < 300) || status == 304) {\n\n                result = xhr.responseText;\n\n                if (window.JSON) {\n\n                    result = JSON.parse(result);\n\n                } else {\n\n                    result = eval('(' + result + ')');\n\n                }\n\n                ajaxSuccess(result, xhr)\n\n            } else {\n\n                console.log(\"ERR\", xhr.status);\n\n            }\n\n        }\n\n    }\n\n    function ajaxSuccess(data, xhr) {\n\n        var status = 'success';\n\n        options.success && options.success(data, options, status, xhr)\n\n        ajaxComplete(status)\n\n    }\n\n    function ajaxComplete(status) {\n\n        options.complete && options.complete(status);\n\n    }\n\n}\n\n```\n\n\n\n在这我就不细讲ajax的具体过程，我也实现了一个比较简单的ajax，就公开了get和post方法。大家可以实现一个更加复杂好用的ajax替换我这段代码","source":"_posts/jquery06.md","raw":"title: 可想实现一个自己的简单jQuery库？(六)\ndate: 2015-11-25 21:19:45\ntags:\n---\n\n## Lesson-5\n\n这个版本新增6个方法，find()、first()、last()、eq()、get()、ajax()\n\n\n\n```javascript\n\nfind : function(selector) {\n\n    if(!selector) return;\n\n    var context = this.selector;\n\n    return new Kodo(context + ' ' + selector);\n\n},\n```\n\n<!-- more -->\n\n```javascript\n\nfirst : function() {\n\n    return new Kodo(this[0])\n\n},\n```\n\n```javascript\nlast : function() {\n\n    var num = this.length - 1;\n\n    return new Kodo(this[num]);\n\n},\n```\n\n```javascript\neq : function(num) {\n\n    var num = num < 0 ? (this.length - 1) : num;\n\n    console.log(num);\n\n    return new Kodo(this[num]);\n\n},\n```\n\n```javascript\nget : function(num) {\n\n    var num = num < 0 ? (this.length - 1) : num;\n\n    console.log(num);\n\n    return this[num];\n\n}\n\n```\n\n\n\n我们要仔细分辨下，这4个方法在jQuery中返回的都是什么对象？到底是dom对象还是jQuery对象.\n\n\n\n明白了这个后就很容易能写出这4个方法\n\n```javascript\n\nfind : function(selector) {\n\n    if(!selector) return;\n\n    var context = this.selector;\n\n    return new Kodo(context + ' ' + selector);\n\n}\n\n```\n\n\n\n首先find，我们知道一般都会这样写 $('div').find('span') 查找div下的span，返回的是span数组对象，而不是原生的dom对象。\n\n\n\n那么我们就可以换个思路，因为我们能拿到 $('div') 这个selector对吧？也就是 div，既然又要find('span')，我们的selector就可以写成 ('div span')，之后直接返回新的数组对象不就好了吗？\n\n\n\n`var context = this.selector;` 先缓存当前的selector上下文，之后拼接我们find的selector，所以最后return 就变为 `new Kodo(context + ' ' + selector);` 虽然效率不一定高,总是一种解决思路不是吗？\n\n```javascript\n\nfirst : function() {\n\n    return new Kodo(this[0])\n\n},\n\nlast : function() {\n\n    var num = this.length - 1;\n\n    return new Kodo(this[num]);\n\n},\n\neq : function(num) {\n\n    var num = num < 0 ? (this.length - 1) : num;\n\n    console.log(num);\n\n    return new Kodo(this[num]);\n\n},\n\nget : function(num) {\n\n    var num = num < 0 ? (this.length - 1) : num;\n\n    console.log(num);\n\n    return this[num];\n\n}\n\n```\n\n\n\nfind方法比较难解决,之后这4个就很容易了，first、last、eq分别返回的都是封装后的对象，只有get返回的是原生 dom 对象。\n\n\n\n我们根据之前的思路,直接取数组对象的index，return下新的即可，是不是很简单？\n\n\n\n之后是ajax部分\n\n\n\n之前说过之所以，可以用$.ajax直接调用，是因为可以把方法直接挂在在构造函数上，作为静态方法，所以我们只需要写好ajax最后把你想要公开的接口放在Kodo上即可\n\n```javascript\n\nKodo.get = function(url,sucBack,complete) {\n\n    var options = {\n\n        url : url,\n\n        success : sucBack,\n\n        complete : complete\n\n    };\n\n    ajax(options);\n\n};\n\nKodo.post = function(url,data,sucback,complete) {\n\n    var options = {\n\n        url : url,\n\n        type : \"POST\",\n\n        data : data,\n\n        sucback    : sucback,\n\n        complete : complete\n\n    };\n\n    ajax(options);\n\n};\n\nfunction ajax(options) {\n\n    var defaultOptions = {\n\n        url: false, //ajax 请求地址\n\n        type : \"GET\",\n\n        data : false,\n\n        success: false, //数据成功返回后的回调方法\n\n        complete: false //ajax完成后的回调方法\n\n    };\n\n    for (i in defaultOptions) {\n\n        if (options[i] === undefined) {\n\n            options[i] = defaultOptions[i];\n\n        }\n\n    }\n\n    var xhr = new XMLHttpRequest();\n\n    var url = options.url;\n\n    xhr.open(options.type, url);\n\n    xhr.onreadystatechange = onStateChange;\n\n    if (options.type === 'POST') {\n\n        xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n\n    }\n\n    xhr.send(options.data ? options.data : null);\n\n\n\n    function onStateChange() {\n\n        if (xhr.readyState == 4) {\n\n            var result,\n\n                status = xhr.status;\n\n\n\n            if ((status >= 200 && status < 300) || status == 304) {\n\n                result = xhr.responseText;\n\n                if (window.JSON) {\n\n                    result = JSON.parse(result);\n\n                } else {\n\n                    result = eval('(' + result + ')');\n\n                }\n\n                ajaxSuccess(result, xhr)\n\n            } else {\n\n                console.log(\"ERR\", xhr.status);\n\n            }\n\n        }\n\n    }\n\n    function ajaxSuccess(data, xhr) {\n\n        var status = 'success';\n\n        options.success && options.success(data, options, status, xhr)\n\n        ajaxComplete(status)\n\n    }\n\n    function ajaxComplete(status) {\n\n        options.complete && options.complete(status);\n\n    }\n\n}\n\n```\n\n\n\n在这我就不细讲ajax的具体过程，我也实现了一个比较简单的ajax，就公开了get和post方法。大家可以实现一个更加复杂好用的ajax替换我这段代码","slug":"jquery06","published":1,"updated":"2016-03-02T14:18:07.218Z","_id":"cijgvit5w000czp8gfcsyo7i8","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Lesson-5\"><a href=\"#Lesson-5\" class=\"headerlink\" title=\"Lesson-5\"></a>Lesson-5</h2><p>这个版本新增6个方法，find()、first()、last()、eq()、get()、ajax()</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">find : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!selector) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> context = <span class=\"keyword\">this</span>.selector;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Kodo(context + <span class=\"string\">' '</span> + selector);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">first : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Kodo(<span class=\"keyword\">this</span>[<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">last : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = <span class=\"keyword\">this</span>.length - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Kodo(<span class=\"keyword\">this</span>[num]);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eq : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = num &lt; <span class=\"number\">0</span> ? (<span class=\"keyword\">this</span>.length - <span class=\"number\">1</span>) : num;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(num);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Kodo(<span class=\"keyword\">this</span>[num]);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = num &lt; <span class=\"number\">0</span> ? (<span class=\"keyword\">this</span>.length - <span class=\"number\">1</span>) : num;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(num);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>[num];</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们要仔细分辨下，这4个方法在jQuery中返回的都是什么对象？到底是dom对象还是jQuery对象.</p>\n<p>明白了这个后就很容易能写出这4个方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">find : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!selector) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> context = <span class=\"keyword\">this</span>.selector;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Kodo(context + <span class=\"string\">' '</span> + selector);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>首先find，我们知道一般都会这样写 $(‘div’).find(‘span’) 查找div下的span，返回的是span数组对象，而不是原生的dom对象。</p>\n<p>那么我们就可以换个思路，因为我们能拿到 $(‘div’) 这个selector对吧？也就是 div，既然又要find(‘span’)，我们的selector就可以写成 (‘div span’)，之后直接返回新的数组对象不就好了吗？</p>\n<p><code>var context = this.selector;</code> 先缓存当前的selector上下文，之后拼接我们find的selector，所以最后return 就变为 <code>new Kodo(context + &#39; &#39; + selector);</code> 虽然效率不一定高,总是一种解决思路不是吗？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">first : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Kodo(<span class=\"keyword\">this</span>[<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">last : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = <span class=\"keyword\">this</span>.length - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Kodo(<span class=\"keyword\">this</span>[num]);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">eq : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = num &lt; <span class=\"number\">0</span> ? (<span class=\"keyword\">this</span>.length - <span class=\"number\">1</span>) : num;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(num);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Kodo(<span class=\"keyword\">this</span>[num]);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">get : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = num &lt; <span class=\"number\">0</span> ? (<span class=\"keyword\">this</span>.length - <span class=\"number\">1</span>) : num;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(num);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>[num];</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>find方法比较难解决,之后这4个就很容易了，first、last、eq分别返回的都是封装后的对象，只有get返回的是原生 dom 对象。</p>\n<p>我们根据之前的思路,直接取数组对象的index，return下新的即可，是不是很简单？</p>\n<p>之后是ajax部分</p>\n<p>之前说过之所以，可以用$.ajax直接调用，是因为可以把方法直接挂在在构造函数上，作为静态方法，所以我们只需要写好ajax最后把你想要公开的接口放在Kodo上即可</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Kodo.get = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url,sucBack,complete</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> options = &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        url : url,</span><br><span class=\"line\"></span><br><span class=\"line\">        success : sucBack,</span><br><span class=\"line\"></span><br><span class=\"line\">        complete : complete</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    ajax(options);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Kodo.post = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url,data,sucback,complete</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> options = &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        url : url,</span><br><span class=\"line\"></span><br><span class=\"line\">        type : <span class=\"string\">\"POST\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">        data : data,</span><br><span class=\"line\"></span><br><span class=\"line\">        sucback    : sucback,</span><br><span class=\"line\"></span><br><span class=\"line\">        complete : complete</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    ajax(options);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ajax</span>(<span class=\"params\">options</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> defaultOptions = &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        url: <span class=\"literal\">false</span>, <span class=\"comment\">//ajax 请求地址</span></span><br><span class=\"line\"></span><br><span class=\"line\">        type : <span class=\"string\">\"GET\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">        data : <span class=\"literal\">false</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">        success: <span class=\"literal\">false</span>, <span class=\"comment\">//数据成功返回后的回调方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">        complete: <span class=\"literal\">false</span> <span class=\"comment\">//ajax完成后的回调方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> defaultOptions) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (options[i] === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            options[i] = defaultOptions[i];</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> url = options.url;</span><br><span class=\"line\"></span><br><span class=\"line\">    xhr.open(options.type, url);</span><br><span class=\"line\"></span><br><span class=\"line\">    xhr.onreadystatechange = onStateChange;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (options.type === <span class=\"string\">'POST'</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        xhr.setRequestHeader(<span class=\"string\">'Content-Type'</span>, <span class=\"string\">'application/x-www-form-urlencoded'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    xhr.send(options.data ? options.data : <span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onStateChange</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (xhr.readyState == <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">var</span> result,</span><br><span class=\"line\"></span><br><span class=\"line\">                status = xhr.status;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((status &gt;= <span class=\"number\">200</span> &amp;&amp; status &lt; <span class=\"number\">300</span>) || status == <span class=\"number\">304</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                result = xhr.responseText;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.JSON) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    result = <span class=\"built_in\">JSON</span>.parse(result);</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    result = <span class=\"built_in\">eval</span>(<span class=\"string\">'('</span> + result + <span class=\"string\">')'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                ajaxSuccess(result, xhr)</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ERR\"</span>, xhr.status);</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ajaxSuccess</span>(<span class=\"params\">data, xhr</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> status = <span class=\"string\">'success'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        options.success &amp;&amp; options.success(data, options, status, xhr)</span><br><span class=\"line\"></span><br><span class=\"line\">        ajaxComplete(status)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ajaxComplete</span>(<span class=\"params\">status</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        options.complete &amp;&amp; options.complete(status);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在这我就不细讲ajax的具体过程，我也实现了一个比较简单的ajax，就公开了get和post方法。大家可以实现一个更加复杂好用的ajax替换我这段代码</p>\n","excerpt":"<h2 id=\"Lesson-5\"><a href=\"#Lesson-5\" class=\"headerlink\" title=\"Lesson-5\"></a>Lesson-5</h2><p>这个版本新增6个方法，find()、first()、last()、eq()、get()、ajax()</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">find : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!selector) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> context = <span class=\"keyword\">this</span>.selector;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Kodo(context + <span class=\"string\">' '</span> + selector);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">first : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Kodo(<span class=\"keyword\">this</span>[<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">last : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = <span class=\"keyword\">this</span>.length - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Kodo(<span class=\"keyword\">this</span>[num]);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eq : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = num &lt; <span class=\"number\">0</span> ? (<span class=\"keyword\">this</span>.length - <span class=\"number\">1</span>) : num;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(num);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Kodo(<span class=\"keyword\">this</span>[num]);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = num &lt; <span class=\"number\">0</span> ? (<span class=\"keyword\">this</span>.length - <span class=\"number\">1</span>) : num;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(num);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>[num];</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们要仔细分辨下，这4个方法在jQuery中返回的都是什么对象？到底是dom对象还是jQuery对象.</p>\n<p>明白了这个后就很容易能写出这4个方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">find : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!selector) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> context = <span class=\"keyword\">this</span>.selector;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Kodo(context + <span class=\"string\">' '</span> + selector);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>首先find，我们知道一般都会这样写 $(‘div’).find(‘span’) 查找div下的span，返回的是span数组对象，而不是原生的dom对象。</p>\n<p>那么我们就可以换个思路，因为我们能拿到 $(‘div’) 这个selector对吧？也就是 div，既然又要find(‘span’)，我们的selector就可以写成 (‘div span’)，之后直接返回新的数组对象不就好了吗？</p>\n<p><code>var context = this.selector;</code> 先缓存当前的selector上下文，之后拼接我们find的selector，所以最后return 就变为 <code>new Kodo(context + &#39; &#39; + selector);</code> 虽然效率不一定高,总是一种解决思路不是吗？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">first : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Kodo(<span class=\"keyword\">this</span>[<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">last : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = <span class=\"keyword\">this</span>.length - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Kodo(<span class=\"keyword\">this</span>[num]);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">eq : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = num &lt; <span class=\"number\">0</span> ? (<span class=\"keyword\">this</span>.length - <span class=\"number\">1</span>) : num;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(num);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Kodo(<span class=\"keyword\">this</span>[num]);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">get : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = num &lt; <span class=\"number\">0</span> ? (<span class=\"keyword\">this</span>.length - <span class=\"number\">1</span>) : num;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(num);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>[num];</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>find方法比较难解决,之后这4个就很容易了，first、last、eq分别返回的都是封装后的对象，只有get返回的是原生 dom 对象。</p>\n<p>我们根据之前的思路,直接取数组对象的index，return下新的即可，是不是很简单？</p>\n<p>之后是ajax部分</p>\n<p>之前说过之所以，可以用$.ajax直接调用，是因为可以把方法直接挂在在构造函数上，作为静态方法，所以我们只需要写好ajax最后把你想要公开的接口放在Kodo上即可</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Kodo.get = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url,sucBack,complete</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> options = &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        url : url,</span><br><span class=\"line\"></span><br><span class=\"line\">        success : sucBack,</span><br><span class=\"line\"></span><br><span class=\"line\">        complete : complete</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    ajax(options);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Kodo.post = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url,data,sucback,complete</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> options = &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        url : url,</span><br><span class=\"line\"></span><br><span class=\"line\">        type : <span class=\"string\">\"POST\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">        data : data,</span><br><span class=\"line\"></span><br><span class=\"line\">        sucback    : sucback,</span><br><span class=\"line\"></span><br><span class=\"line\">        complete : complete</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    ajax(options);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ajax</span>(<span class=\"params\">options</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> defaultOptions = &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        url: <span class=\"literal\">false</span>, <span class=\"comment\">//ajax 请求地址</span></span><br><span class=\"line\"></span><br><span class=\"line\">        type : <span class=\"string\">\"GET\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">        data : <span class=\"literal\">false</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">        success: <span class=\"literal\">false</span>, <span class=\"comment\">//数据成功返回后的回调方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">        complete: <span class=\"literal\">false</span> <span class=\"comment\">//ajax完成后的回调方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> defaultOptions) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (options[i] === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            options[i] = defaultOptions[i];</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> url = options.url;</span><br><span class=\"line\"></span><br><span class=\"line\">    xhr.open(options.type, url);</span><br><span class=\"line\"></span><br><span class=\"line\">    xhr.onreadystatechange = onStateChange;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (options.type === <span class=\"string\">'POST'</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        xhr.setRequestHeader(<span class=\"string\">'Content-Type'</span>, <span class=\"string\">'application/x-www-form-urlencoded'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    xhr.send(options.data ? options.data : <span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onStateChange</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (xhr.readyState == <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">var</span> result,</span><br><span class=\"line\"></span><br><span class=\"line\">                status = xhr.status;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((status &gt;= <span class=\"number\">200</span> &amp;&amp; status &lt; <span class=\"number\">300</span>) || status == <span class=\"number\">304</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                result = xhr.responseText;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.JSON) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    result = <span class=\"built_in\">JSON</span>.parse(result);</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    result = <span class=\"built_in\">eval</span>(<span class=\"string\">'('</span> + result + <span class=\"string\">')'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                ajaxSuccess(result, xhr)</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ERR\"</span>, xhr.status);</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ajaxSuccess</span>(<span class=\"params\">data, xhr</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> status = <span class=\"string\">'success'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        options.success &amp;&amp; options.success(data, options, status, xhr)</span><br><span class=\"line\"></span><br><span class=\"line\">        ajaxComplete(status)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ajaxComplete</span>(<span class=\"params\">status</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        options.complete &amp;&amp; options.complete(status);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在这我就不细讲ajax的具体过程，我也实现了一个比较简单的ajax，就公开了get和post方法。大家可以实现一个更加复杂好用的ajax替换我这段代码</p>"},{"title":"可想实现一个自己的简单jQuery库？(五)","date":"2015-11-24T11:22:05.000Z","_content":"\n## Lesson-4\n\n这个版本我们要增加一个用的非常多的方法!\n\n\n\n那就是each!\n\n\n\n我们知道each不仅能遍历数组，还能遍历对象.\n\n\n\n首先我们需要一个对数组进行验证的方法\n\n```javascript\n\nfunction isArray(obj) {\n\n    return Array.isArray(obj);\n\n}\n\n```\n\n<!-- more -->\n\n\n接着就是我们的重头戏\n\n```javascript\n\nKodo.each = function(obj,callback) {\n\n    var len = obj.length,\n\n        constru = obj.constructor,\n\n        i = 0;\n\n\n\n    if(constru === window.f) {\n\n        for (; i < len; i++) {\n\n            var val = callback.call(obj[i],i,obj[i]);\n\n            if(val === false) break;\n\n        }\n\n    } else if (isArray(obj)) {\n\n        for (; i < len; i++) {\n\n            var val = callback.call(obj[i],i,obj[i]);\n\n            if(val === false) break;\n\n        }\n\n    } else {\n\n        for( i in obj ) {\n\n            var val = callback.call(obj[i],i,obj[i]);\n\n            if(val === false) break;\n\n        }\n\n    }\n\n\n\n};\n\n```\n\n\n\n因为我们还可能遍历Kodo数组对象，如下：\n\n```javascript\n\nf(\"div\").each(function(index,item) {\n\n\n\n})\n\n```\n\n\n\n所以还需要一个判断 是否是Kodo数组对象\n\n```javascript\n\nif(constru === window.f) {\n\n    for (; i < len; i++) {\n\n        var val = callback.call(obj[i],i,obj[i]);\n\n        if(val === false) break;\n\n    }\n\n}\n\n```\n\n\n\n在这应该强调下call的用法，还是很多人不知道call何时使用.\n\n在我们的callback里 第一个参数是下标，第二个参数是当前的对象，然后this还要指向他自己\n\n所以 `callback.call(obj[i],i,obj[i]);` 就是这样写，第一个参数是改变this指向，第二个参数是下标，第三个是自己本身\n\n\n\n很简单不是吗?\n","source":"_posts/jquery05.md","raw":"title: 可想实现一个自己的简单jQuery库？(五)\ndate: 2015-11-24 19:22:05\ntags:\n---\n\n## Lesson-4\n\n这个版本我们要增加一个用的非常多的方法!\n\n\n\n那就是each!\n\n\n\n我们知道each不仅能遍历数组，还能遍历对象.\n\n\n\n首先我们需要一个对数组进行验证的方法\n\n```javascript\n\nfunction isArray(obj) {\n\n    return Array.isArray(obj);\n\n}\n\n```\n\n<!-- more -->\n\n\n接着就是我们的重头戏\n\n```javascript\n\nKodo.each = function(obj,callback) {\n\n    var len = obj.length,\n\n        constru = obj.constructor,\n\n        i = 0;\n\n\n\n    if(constru === window.f) {\n\n        for (; i < len; i++) {\n\n            var val = callback.call(obj[i],i,obj[i]);\n\n            if(val === false) break;\n\n        }\n\n    } else if (isArray(obj)) {\n\n        for (; i < len; i++) {\n\n            var val = callback.call(obj[i],i,obj[i]);\n\n            if(val === false) break;\n\n        }\n\n    } else {\n\n        for( i in obj ) {\n\n            var val = callback.call(obj[i],i,obj[i]);\n\n            if(val === false) break;\n\n        }\n\n    }\n\n\n\n};\n\n```\n\n\n\n因为我们还可能遍历Kodo数组对象，如下：\n\n```javascript\n\nf(\"div\").each(function(index,item) {\n\n\n\n})\n\n```\n\n\n\n所以还需要一个判断 是否是Kodo数组对象\n\n```javascript\n\nif(constru === window.f) {\n\n    for (; i < len; i++) {\n\n        var val = callback.call(obj[i],i,obj[i]);\n\n        if(val === false) break;\n\n    }\n\n}\n\n```\n\n\n\n在这应该强调下call的用法，还是很多人不知道call何时使用.\n\n在我们的callback里 第一个参数是下标，第二个参数是当前的对象，然后this还要指向他自己\n\n所以 `callback.call(obj[i],i,obj[i]);` 就是这样写，第一个参数是改变this指向，第二个参数是下标，第三个是自己本身\n\n\n\n很简单不是吗?\n","slug":"jquery05","published":1,"updated":"2016-03-02T14:18:07.218Z","_id":"cijgvit5y000dzp8gh7hngu8j","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Lesson-4\"><a href=\"#Lesson-4\" class=\"headerlink\" title=\"Lesson-4\"></a>Lesson-4</h2><p>这个版本我们要增加一个用的非常多的方法!</p>\n<p>那就是each!</p>\n<p>我们知道each不仅能遍历数组，还能遍历对象.</p>\n<p>首先我们需要一个对数组进行验证的方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isArray</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.isArray(obj);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>接着就是我们的重头戏</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Kodo.each = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj,callback</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = obj.length,</span><br><span class=\"line\"></span><br><span class=\"line\">        constru = obj.constructor,</span><br><span class=\"line\"></span><br><span class=\"line\">        i = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(constru === <span class=\"built_in\">window</span>.f) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (; i &lt; len; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">var</span> val = callback.call(obj[i],i,obj[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(val === <span class=\"literal\">false</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isArray(obj)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (; i &lt; len; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">var</span> val = callback.call(obj[i],i,obj[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(val === <span class=\"literal\">false</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>( i <span class=\"keyword\">in</span> obj ) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">var</span> val = callback.call(obj[i],i,obj[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(val === <span class=\"literal\">false</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>因为我们还可能遍历Kodo数组对象，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">f(<span class=\"string\">\"div\"</span>).each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index,item</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>所以还需要一个判断 是否是Kodo数组对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(constru === <span class=\"built_in\">window</span>.f) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; i &lt; len; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> val = callback.call(obj[i],i,obj[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(val === <span class=\"literal\">false</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在这应该强调下call的用法，还是很多人不知道call何时使用.</p>\n<p>在我们的callback里 第一个参数是下标，第二个参数是当前的对象，然后this还要指向他自己</p>\n<p>所以 <code>callback.call(obj[i],i,obj[i]);</code> 就是这样写，第一个参数是改变this指向，第二个参数是下标，第三个是自己本身</p>\n<p>很简单不是吗?</p>\n","excerpt":"<h2 id=\"Lesson-4\"><a href=\"#Lesson-4\" class=\"headerlink\" title=\"Lesson-4\"></a>Lesson-4</h2><p>这个版本我们要增加一个用的非常多的方法!</p>\n<p>那就是each!</p>\n<p>我们知道each不仅能遍历数组，还能遍历对象.</p>\n<p>首先我们需要一个对数组进行验证的方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isArray</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.isArray(obj);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"<p>接着就是我们的重头戏</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Kodo.each = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj,callback</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = obj.length,</span><br><span class=\"line\"></span><br><span class=\"line\">        constru = obj.constructor,</span><br><span class=\"line\"></span><br><span class=\"line\">        i = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(constru === <span class=\"built_in\">window</span>.f) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (; i &lt; len; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">var</span> val = callback.call(obj[i],i,obj[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(val === <span class=\"literal\">false</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isArray(obj)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (; i &lt; len; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">var</span> val = callback.call(obj[i],i,obj[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(val === <span class=\"literal\">false</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>( i <span class=\"keyword\">in</span> obj ) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">var</span> val = callback.call(obj[i],i,obj[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(val === <span class=\"literal\">false</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>因为我们还可能遍历Kodo数组对象，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">f(<span class=\"string\">\"div\"</span>).each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index,item</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>所以还需要一个判断 是否是Kodo数组对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(constru === <span class=\"built_in\">window</span>.f) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; i &lt; len; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> val = callback.call(obj[i],i,obj[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(val === <span class=\"literal\">false</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在这应该强调下call的用法，还是很多人不知道call何时使用.</p>\n<p>在我们的callback里 第一个参数是下标，第二个参数是当前的对象，然后this还要指向他自己</p>\n<p>所以 <code>callback.call(obj[i],i,obj[i]);</code> 就是这样写，第一个参数是改变this指向，第二个参数是下标，第三个是自己本身</p>\n<p>很简单不是吗?</p>"},{"title":"可想实现一个自己的简单jQuery库？(四)","date":"2015-11-23T11:54:34.000Z","_content":"\n## Lesson-3\n\n修改f(selector) 里的判断,新增domReady\n\n我们知道在jQuery中还有一种选择器写法\n```javascript\n$(function() {\n\n});\n```\n\n在dom加载完毕后马上就执行,这样的方法会比onload更快,所以domReady对于我们来说一定是必不可少的\n\n<!-- more -->\n\n我们在init方法中要新增以下判断\n```javascript\nif(!selector) { return this; }\n\nif (typeof selector == 'object') {\n    var selector = [selector];\n    for (var i = 0; i < selector.length; i++) {\n        this[i] = selector[i];\n    }\n    this.length = selector.length;\n    return this;\n} else if (typeof selector == 'function') {\n    Kodo.ready(selector);\n    return;\n}\n```\n\n首先selector可能为object的情况,比如传入的是原生dom对象,dom数组对象. 另外要记得转为数组`var selector = [selector];\n\n因为有可能是一个元素比如是window,document等否则没法循环\n\n然后selector如果是function那我们就认为他是domReady\n\nPS:在这我判断的并没有非常的全面,仅仅具备了基础功能\n```javascript\nKodo.ready = function(fn) {\n    doc.addEventListener('DOMContentLoaded',function() {\n        fn && fn();\n    },false);\n    doc.removeEventListener('DOMContentLoaded',fn,true);\n};\n```\n\n然后这个是ready的源码,由于我们只兼容高端浏览器所以仅仅需要这样写即可.\n","source":"_posts/jquery04.md","raw":"title: 可想实现一个自己的简单jQuery库？(四)\ndate: 2015-11-23 19:54:34\ntags:\n---\n\n## Lesson-3\n\n修改f(selector) 里的判断,新增domReady\n\n我们知道在jQuery中还有一种选择器写法\n```javascript\n$(function() {\n\n});\n```\n\n在dom加载完毕后马上就执行,这样的方法会比onload更快,所以domReady对于我们来说一定是必不可少的\n\n<!-- more -->\n\n我们在init方法中要新增以下判断\n```javascript\nif(!selector) { return this; }\n\nif (typeof selector == 'object') {\n    var selector = [selector];\n    for (var i = 0; i < selector.length; i++) {\n        this[i] = selector[i];\n    }\n    this.length = selector.length;\n    return this;\n} else if (typeof selector == 'function') {\n    Kodo.ready(selector);\n    return;\n}\n```\n\n首先selector可能为object的情况,比如传入的是原生dom对象,dom数组对象. 另外要记得转为数组`var selector = [selector];\n\n因为有可能是一个元素比如是window,document等否则没法循环\n\n然后selector如果是function那我们就认为他是domReady\n\nPS:在这我判断的并没有非常的全面,仅仅具备了基础功能\n```javascript\nKodo.ready = function(fn) {\n    doc.addEventListener('DOMContentLoaded',function() {\n        fn && fn();\n    },false);\n    doc.removeEventListener('DOMContentLoaded',fn,true);\n};\n```\n\n然后这个是ready的源码,由于我们只兼容高端浏览器所以仅仅需要这样写即可.\n","slug":"jquery04","published":1,"updated":"2016-03-02T14:18:07.218Z","_id":"cijgvit60000ezp8g347y4x5y","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Lesson-3\"><a href=\"#Lesson-3\" class=\"headerlink\" title=\"Lesson-3\"></a>Lesson-3</h2><p>修改f(selector) 里的判断,新增domReady</p>\n<p>我们知道在jQuery中还有一种选择器写法<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>在dom加载完毕后马上就执行,这样的方法会比onload更快,所以domReady对于我们来说一定是必不可少的</p>\n<a id=\"more\"></a>\n<p>我们在init方法中要新增以下判断<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(!selector) &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> selector == <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> selector = [selector];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; selector.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>[i] = selector[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.length = selector.length;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> selector == <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">    Kodo.ready(selector);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>首先selector可能为object的情况,比如传入的是原生dom对象,dom数组对象. 另外要记得转为数组`var selector = [selector];</p>\n<p>因为有可能是一个元素比如是window,document等否则没法循环</p>\n<p>然后selector如果是function那我们就认为他是domReady</p>\n<p>PS:在这我判断的并没有非常的全面,仅仅具备了基础功能<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Kodo.ready = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">    doc.addEventListener(<span class=\"string\">'DOMContentLoaded'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        fn &amp;&amp; fn();</span><br><span class=\"line\">    &#125;,<span class=\"literal\">false</span>);</span><br><span class=\"line\">    doc.removeEventListener(<span class=\"string\">'DOMContentLoaded'</span>,fn,<span class=\"literal\">true</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>然后这个是ready的源码,由于我们只兼容高端浏览器所以仅仅需要这样写即可.</p>\n","excerpt":"<h2 id=\"Lesson-3\"><a href=\"#Lesson-3\" class=\"headerlink\" title=\"Lesson-3\"></a>Lesson-3</h2><p>修改f(selector) 里的判断,新增domReady</p>\n<p>我们知道在jQuery中还有一种选择器写法<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>在dom加载完毕后马上就执行,这样的方法会比onload更快,所以domReady对于我们来说一定是必不可少的</p>","more":"<p>我们在init方法中要新增以下判断<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(!selector) &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> selector == <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> selector = [selector];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; selector.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>[i] = selector[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.length = selector.length;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> selector == <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">    Kodo.ready(selector);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>首先selector可能为object的情况,比如传入的是原生dom对象,dom数组对象. 另外要记得转为数组`var selector = [selector];</p>\n<p>因为有可能是一个元素比如是window,document等否则没法循环</p>\n<p>然后selector如果是function那我们就认为他是domReady</p>\n<p>PS:在这我判断的并没有非常的全面,仅仅具备了基础功能<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Kodo.ready = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">    doc.addEventListener(<span class=\"string\">'DOMContentLoaded'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        fn &amp;&amp; fn();</span><br><span class=\"line\">    &#125;,<span class=\"literal\">false</span>);</span><br><span class=\"line\">    doc.removeEventListener(<span class=\"string\">'DOMContentLoaded'</span>,fn,<span class=\"literal\">true</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>然后这个是ready的源码,由于我们只兼容高端浏览器所以仅仅需要这样写即可.</p>"},{"title":"可想实现一个自己的简单jQuery库？(三)","date":"2015-11-20T12:26:15.000Z","_content":"\n## Lesson-2\n\n这个版本新增 next(),prev(),parent(),parents()\n\n\n\n这4个选择元素的方法还是比较常用的\n\n\n\n首先我们需要一个func来过滤我们需要的dom\n\n```javascript\n\nfunction sibling(cur, dir) {\n\n    while ((cur = cur[dir]) && cur.nodeType !== 1) {}\n\n    return cur;\n\n}\n\n```\n\n<!-- more -->\n\n\n上面那段比较简单,就是普通的过滤下元素\n\n```javascript\n\nnext : function() {\n\n    return sibling(this[0], \"nextSibling\");\n\n},\n\nprev : function() {\n\n    return sibling(this[0], \"previousSibling\");\n\n},\n\n```\n\n\n\n看下next方法的源码就知道,我传入Kodo数组对象的0个dom对象,然后取它的下一个同辈元素,直接返回,prev方法同理\n\n```javascript\n\nparent : function() {\n\n    var parent = this[0].parentNode;\n\n    parent && parent.nodeType !== 11 ? parent : null;\n\n    var a = Kodo();\n\n        a[0] = parent;\n\n        a.selector = parent.tagName.toLocaleLowerCase();\n\n        a.length = 1;\n\n    return a;\n\n},\n\n```\n\n\n\n这段是取到第一个父元素,由于parent()返回的不是原生的DOM对象,是封装过的数组对象(Kodo),那我们就想办法构造一个新的Kodo对象即可\n\n\n\n所以我在里面var了一个 Kodo,然后设置这个Kodo数组对象的selector等配置,然后直接返回这个新的Kodo对象\n\n```javascript\n\nparents : function() {\n\n    var a = Kodo(),\n\n        i = 0;\n\n    while ( (this[0] = this[0][ 'parentNode' ]) && this[0].nodeType !== 9 ) {\n\n      if ( this[0].nodeType === 1 ) {\n\n        a[i] = this[0];\n\n        i++;\n\n      }\n\n    }\n\n    a.length = i;\n\n    return a;\n\n}\n\n```\n\n\n\n同理,在jQuery的parents方法中,返回的依旧是jQuery对象.我们依旧用上面的办法,构造一个新对象并且返回就好了!\n\n\n\n中间一层while循环,依次过滤出我们需要的dom元素,然后把他们都赋值到我们新var的对象里,最后别忘了设置一下新对象的length属性,返回我们的新对象即可!\n\n\n\n看了上面几个方法是不是觉得!其实很多时候我们完全可以自己新创建一个对象,然后配置好它直接返回这个新对象.比如find方法我们也可以用这样的办法:)","source":"_posts/jquery03.md","raw":"title: 可想实现一个自己的简单jQuery库？(三)\ndate: 2015-11-20 20:26:15\ntags:\n---\n\n## Lesson-2\n\n这个版本新增 next(),prev(),parent(),parents()\n\n\n\n这4个选择元素的方法还是比较常用的\n\n\n\n首先我们需要一个func来过滤我们需要的dom\n\n```javascript\n\nfunction sibling(cur, dir) {\n\n    while ((cur = cur[dir]) && cur.nodeType !== 1) {}\n\n    return cur;\n\n}\n\n```\n\n<!-- more -->\n\n\n上面那段比较简单,就是普通的过滤下元素\n\n```javascript\n\nnext : function() {\n\n    return sibling(this[0], \"nextSibling\");\n\n},\n\nprev : function() {\n\n    return sibling(this[0], \"previousSibling\");\n\n},\n\n```\n\n\n\n看下next方法的源码就知道,我传入Kodo数组对象的0个dom对象,然后取它的下一个同辈元素,直接返回,prev方法同理\n\n```javascript\n\nparent : function() {\n\n    var parent = this[0].parentNode;\n\n    parent && parent.nodeType !== 11 ? parent : null;\n\n    var a = Kodo();\n\n        a[0] = parent;\n\n        a.selector = parent.tagName.toLocaleLowerCase();\n\n        a.length = 1;\n\n    return a;\n\n},\n\n```\n\n\n\n这段是取到第一个父元素,由于parent()返回的不是原生的DOM对象,是封装过的数组对象(Kodo),那我们就想办法构造一个新的Kodo对象即可\n\n\n\n所以我在里面var了一个 Kodo,然后设置这个Kodo数组对象的selector等配置,然后直接返回这个新的Kodo对象\n\n```javascript\n\nparents : function() {\n\n    var a = Kodo(),\n\n        i = 0;\n\n    while ( (this[0] = this[0][ 'parentNode' ]) && this[0].nodeType !== 9 ) {\n\n      if ( this[0].nodeType === 1 ) {\n\n        a[i] = this[0];\n\n        i++;\n\n      }\n\n    }\n\n    a.length = i;\n\n    return a;\n\n}\n\n```\n\n\n\n同理,在jQuery的parents方法中,返回的依旧是jQuery对象.我们依旧用上面的办法,构造一个新对象并且返回就好了!\n\n\n\n中间一层while循环,依次过滤出我们需要的dom元素,然后把他们都赋值到我们新var的对象里,最后别忘了设置一下新对象的length属性,返回我们的新对象即可!\n\n\n\n看了上面几个方法是不是觉得!其实很多时候我们完全可以自己新创建一个对象,然后配置好它直接返回这个新对象.比如find方法我们也可以用这样的办法:)","slug":"jquery03","published":1,"updated":"2016-03-02T14:18:07.218Z","_id":"cijgvit62000fzp8gigel3wxn","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Lesson-2\"><a href=\"#Lesson-2\" class=\"headerlink\" title=\"Lesson-2\"></a>Lesson-2</h2><p>这个版本新增 next(),prev(),parent(),parents()</p>\n<p>这4个选择元素的方法还是比较常用的</p>\n<p>首先我们需要一个func来过滤我们需要的dom</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sibling</span>(<span class=\"params\">cur, dir</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((cur = cur[dir]) &amp;&amp; cur.nodeType !== <span class=\"number\">1</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> cur;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>上面那段比较简单,就是普通的过滤下元素</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">next : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sibling(<span class=\"keyword\">this</span>[<span class=\"number\">0</span>], <span class=\"string\">\"nextSibling\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">prev : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sibling(<span class=\"keyword\">this</span>[<span class=\"number\">0</span>], <span class=\"string\">\"previousSibling\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>看下next方法的源码就知道,我传入Kodo数组对象的0个dom对象,然后取它的下一个同辈元素,直接返回,prev方法同理</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">parent : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> parent = <span class=\"keyword\">this</span>[<span class=\"number\">0</span>].parentNode;</span><br><span class=\"line\"></span><br><span class=\"line\">    parent &amp;&amp; parent.nodeType !== <span class=\"number\">11</span> ? parent : <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = Kodo();</span><br><span class=\"line\"></span><br><span class=\"line\">        a[<span class=\"number\">0</span>] = parent;</span><br><span class=\"line\"></span><br><span class=\"line\">        a.selector = parent.tagName.toLocaleLowerCase();</span><br><span class=\"line\"></span><br><span class=\"line\">        a.length = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>这段是取到第一个父元素,由于parent()返回的不是原生的DOM对象,是封装过的数组对象(Kodo),那我们就想办法构造一个新的Kodo对象即可</p>\n<p>所以我在里面var了一个 Kodo,然后设置这个Kodo数组对象的selector等配置,然后直接返回这个新的Kodo对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">parents : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = Kodo(),</span><br><span class=\"line\"></span><br><span class=\"line\">        i = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> ( (<span class=\"keyword\">this</span>[<span class=\"number\">0</span>] = <span class=\"keyword\">this</span>[<span class=\"number\">0</span>][ <span class=\"string\">'parentNode'</span> ]) &amp;&amp; <span class=\"keyword\">this</span>[<span class=\"number\">0</span>].nodeType !== <span class=\"number\">9</span> ) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( <span class=\"keyword\">this</span>[<span class=\"number\">0</span>].nodeType === <span class=\"number\">1</span> ) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        a[i] = <span class=\"keyword\">this</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        i++;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    a.length = i;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同理,在jQuery的parents方法中,返回的依旧是jQuery对象.我们依旧用上面的办法,构造一个新对象并且返回就好了!</p>\n<p>中间一层while循环,依次过滤出我们需要的dom元素,然后把他们都赋值到我们新var的对象里,最后别忘了设置一下新对象的length属性,返回我们的新对象即可!</p>\n<p>看了上面几个方法是不是觉得!其实很多时候我们完全可以自己新创建一个对象,然后配置好它直接返回这个新对象.比如find方法我们也可以用这样的办法:)</p>\n","excerpt":"<h2 id=\"Lesson-2\"><a href=\"#Lesson-2\" class=\"headerlink\" title=\"Lesson-2\"></a>Lesson-2</h2><p>这个版本新增 next(),prev(),parent(),parents()</p>\n<p>这4个选择元素的方法还是比较常用的</p>\n<p>首先我们需要一个func来过滤我们需要的dom</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sibling</span>(<span class=\"params\">cur, dir</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((cur = cur[dir]) &amp;&amp; cur.nodeType !== <span class=\"number\">1</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> cur;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"<p>上面那段比较简单,就是普通的过滤下元素</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">next : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sibling(<span class=\"keyword\">this</span>[<span class=\"number\">0</span>], <span class=\"string\">\"nextSibling\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">prev : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sibling(<span class=\"keyword\">this</span>[<span class=\"number\">0</span>], <span class=\"string\">\"previousSibling\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>看下next方法的源码就知道,我传入Kodo数组对象的0个dom对象,然后取它的下一个同辈元素,直接返回,prev方法同理</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">parent : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> parent = <span class=\"keyword\">this</span>[<span class=\"number\">0</span>].parentNode;</span><br><span class=\"line\"></span><br><span class=\"line\">    parent &amp;&amp; parent.nodeType !== <span class=\"number\">11</span> ? parent : <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = Kodo();</span><br><span class=\"line\"></span><br><span class=\"line\">        a[<span class=\"number\">0</span>] = parent;</span><br><span class=\"line\"></span><br><span class=\"line\">        a.selector = parent.tagName.toLocaleLowerCase();</span><br><span class=\"line\"></span><br><span class=\"line\">        a.length = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>这段是取到第一个父元素,由于parent()返回的不是原生的DOM对象,是封装过的数组对象(Kodo),那我们就想办法构造一个新的Kodo对象即可</p>\n<p>所以我在里面var了一个 Kodo,然后设置这个Kodo数组对象的selector等配置,然后直接返回这个新的Kodo对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">parents : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = Kodo(),</span><br><span class=\"line\"></span><br><span class=\"line\">        i = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> ( (<span class=\"keyword\">this</span>[<span class=\"number\">0</span>] = <span class=\"keyword\">this</span>[<span class=\"number\">0</span>][ <span class=\"string\">'parentNode'</span> ]) &amp;&amp; <span class=\"keyword\">this</span>[<span class=\"number\">0</span>].nodeType !== <span class=\"number\">9</span> ) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( <span class=\"keyword\">this</span>[<span class=\"number\">0</span>].nodeType === <span class=\"number\">1</span> ) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        a[i] = <span class=\"keyword\">this</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        i++;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    a.length = i;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同理,在jQuery的parents方法中,返回的依旧是jQuery对象.我们依旧用上面的办法,构造一个新对象并且返回就好了!</p>\n<p>中间一层while循环,依次过滤出我们需要的dom元素,然后把他们都赋值到我们新var的对象里,最后别忘了设置一下新对象的length属性,返回我们的新对象即可!</p>\n<p>看了上面几个方法是不是觉得!其实很多时候我们完全可以自己新创建一个对象,然后配置好它直接返回这个新对象.比如find方法我们也可以用这样的办法:)</p>"},{"title":"可想实现一个自己的简单jQuery库？(二)","date":"2015-11-19T12:25:12.000Z","_content":"\n## Lesson-1 初步体验\n\n这个版本呢,先来加四个很简单的方法感受感受下!\n\n\n\n首先3个class不用说了\n\n```javascript\n\nhasClass : function(cls) {\n\n    var reg = new RegExp('(\\\\s|^)' + cls + '(\\\\s|$)');\n\n    for (var i = 0; i < this.length; i++) {\n\n        if (this[i].className.match(reg)) return true;\n\n            return false;\n\n    }\n\n    return this;\n\n},\n\n```\n\n<!-- more -->\n\n```javascript\naddClass : function(cls) {\n\n    var reg = new RegExp('(\\\\s|^)' + cls + '(\\\\s|$)');\n\n    for (var i = 0; i < this.length; i++) {\n\n        if(!this[i].className.match(reg))\n\n            this[i].className += ' ' + cls;\n\n    }\n\n    return this;\n\n},\n```\n\n\n\n```javascript\n\nremoveClass : function(cls) {\n\n    var reg = new RegExp('(\\\\s|^)' + cls + '(\\\\s|$)');\n\n    for (var i = 0; i < this.length; i++) {\n\n        if (this[i].className.match(reg))\n\n            this[i].className = this[i].className.replace(' ' + cls,'');\n\n    }\n\n    return this;\n\n}\n\n```\n\n<!-- more -->\n\n然后新增一个\n\n```javascript\n\ncss : function(attr,val) { // 链式测试\n\n    console.log(this.length);\n\n    for(var i = 0;i < this.length; i++) {\n\n        if(arguments.length == 1) {\n\n            return getComputedStyle(this[i],null)[attr];\n\n        }\n\n        this[i].style[attr] = val;\n\n    }\n\n    return this;\n\n}\n\n```\n\n\n\n这些其实都很简单,我们都要记住,我们封装的DOM对象是一个数组,所以一定都需要用循环来进行各种个样的处理\n\n\n\n然后css这我是用 `arguments` 的个数来进行判断是取值还是设值\n\n\n\n最后千万别忘了每个方法的最后都要 `return this` 以便链式调用\n\n\n\n大家可以自行拿这几个方法 log出来看看是否是与jQuery的一样就知道是否成功了\n","source":"_posts/jquery02.md","raw":"title: 可想实现一个自己的简单jQuery库？(二)\ndate: 2015-11-19 20:25:12\ntags:\n---\n\n## Lesson-1 初步体验\n\n这个版本呢,先来加四个很简单的方法感受感受下!\n\n\n\n首先3个class不用说了\n\n```javascript\n\nhasClass : function(cls) {\n\n    var reg = new RegExp('(\\\\s|^)' + cls + '(\\\\s|$)');\n\n    for (var i = 0; i < this.length; i++) {\n\n        if (this[i].className.match(reg)) return true;\n\n            return false;\n\n    }\n\n    return this;\n\n},\n\n```\n\n<!-- more -->\n\n```javascript\naddClass : function(cls) {\n\n    var reg = new RegExp('(\\\\s|^)' + cls + '(\\\\s|$)');\n\n    for (var i = 0; i < this.length; i++) {\n\n        if(!this[i].className.match(reg))\n\n            this[i].className += ' ' + cls;\n\n    }\n\n    return this;\n\n},\n```\n\n\n\n```javascript\n\nremoveClass : function(cls) {\n\n    var reg = new RegExp('(\\\\s|^)' + cls + '(\\\\s|$)');\n\n    for (var i = 0; i < this.length; i++) {\n\n        if (this[i].className.match(reg))\n\n            this[i].className = this[i].className.replace(' ' + cls,'');\n\n    }\n\n    return this;\n\n}\n\n```\n\n<!-- more -->\n\n然后新增一个\n\n```javascript\n\ncss : function(attr,val) { // 链式测试\n\n    console.log(this.length);\n\n    for(var i = 0;i < this.length; i++) {\n\n        if(arguments.length == 1) {\n\n            return getComputedStyle(this[i],null)[attr];\n\n        }\n\n        this[i].style[attr] = val;\n\n    }\n\n    return this;\n\n}\n\n```\n\n\n\n这些其实都很简单,我们都要记住,我们封装的DOM对象是一个数组,所以一定都需要用循环来进行各种个样的处理\n\n\n\n然后css这我是用 `arguments` 的个数来进行判断是取值还是设值\n\n\n\n最后千万别忘了每个方法的最后都要 `return this` 以便链式调用\n\n\n\n大家可以自行拿这几个方法 log出来看看是否是与jQuery的一样就知道是否成功了\n","slug":"jquery02","published":1,"updated":"2016-03-02T14:18:07.218Z","_id":"cijgvit64000gzp8gm86a1pa4","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Lesson-1-初步体验\"><a href=\"#Lesson-1-初步体验\" class=\"headerlink\" title=\"Lesson-1 初步体验\"></a>Lesson-1 初步体验</h2><p>这个版本呢,先来加四个很简单的方法感受感受下!</p>\n<p>首先3个class不用说了</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">hasClass : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cls</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'(\\\\s|^)'</span> + cls + <span class=\"string\">'(\\\\s|$)'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.length; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>[i].className.match(reg)) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">addClass : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cls</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'(\\\\s|^)'</span> + cls + <span class=\"string\">'(\\\\s|$)'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.length; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!<span class=\"keyword\">this</span>[i].className.match(reg))</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">this</span>[i].className += <span class=\"string\">' '</span> + cls;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">removeClass : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cls</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'(\\\\s|^)'</span> + cls + <span class=\"string\">'(\\\\s|$)'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.length; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>[i].className.match(reg))</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">this</span>[i].className = <span class=\"keyword\">this</span>[i].className.replace(<span class=\"string\">' '</span> + cls,<span class=\"string\">''</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<!-- more -->\n<p>然后新增一个</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">css : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">attr,val</span>) </span>&#123; <span class=\"comment\">// 链式测试</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.length);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"keyword\">this</span>.length; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">arguments</span>.length == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> getComputedStyle(<span class=\"keyword\">this</span>[i],<span class=\"literal\">null</span>)[attr];</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">this</span>[i].style[attr] = val;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这些其实都很简单,我们都要记住,我们封装的DOM对象是一个数组,所以一定都需要用循环来进行各种个样的处理</p>\n<p>然后css这我是用 <code>arguments</code> 的个数来进行判断是取值还是设值</p>\n<p>最后千万别忘了每个方法的最后都要 <code>return this</code> 以便链式调用</p>\n<p>大家可以自行拿这几个方法 log出来看看是否是与jQuery的一样就知道是否成功了</p>\n","excerpt":"<h2 id=\"Lesson-1-初步体验\"><a href=\"#Lesson-1-初步体验\" class=\"headerlink\" title=\"Lesson-1 初步体验\"></a>Lesson-1 初步体验</h2><p>这个版本呢,先来加四个很简单的方法感受感受下!</p>\n<p>首先3个class不用说了</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">hasClass : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cls</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'(\\\\s|^)'</span> + cls + <span class=\"string\">'(\\\\s|$)'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.length; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>[i].className.match(reg)) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">addClass : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cls</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'(\\\\s|^)'</span> + cls + <span class=\"string\">'(\\\\s|$)'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.length; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!<span class=\"keyword\">this</span>[i].className.match(reg))</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">this</span>[i].className += <span class=\"string\">' '</span> + cls;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">removeClass : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cls</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'(\\\\s|^)'</span> + cls + <span class=\"string\">'(\\\\s|$)'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.length; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>[i].className.match(reg))</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">this</span>[i].className = <span class=\"keyword\">this</span>[i].className.replace(<span class=\"string\">' '</span> + cls,<span class=\"string\">''</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<!-- more -->\n<p>然后新增一个</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">css : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">attr,val</span>) </span>&#123; <span class=\"comment\">// 链式测试</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.length);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"keyword\">this</span>.length; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">arguments</span>.length == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> getComputedStyle(<span class=\"keyword\">this</span>[i],<span class=\"literal\">null</span>)[attr];</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">this</span>[i].style[attr] = val;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这些其实都很简单,我们都要记住,我们封装的DOM对象是一个数组,所以一定都需要用循环来进行各种个样的处理</p>\n<p>然后css这我是用 <code>arguments</code> 的个数来进行判断是取值还是设值</p>\n<p>最后千万别忘了每个方法的最后都要 <code>return this</code> 以便链式调用</p>\n<p>大家可以自行拿这几个方法 log出来看看是否是与jQuery的一样就知道是否成功了</p>"},{"title":"可想实现一个自己的简单jQuery库？(一)","date":"2015-11-18T12:26:48.000Z","_content":"\n## 前言\n\n1. 虽然说市面上有许多讲解jQuery源码或者是也有类似如何搭建一个属于自己的javascript库的文章。\n\n2. 但毕竟更多数人的水平并没有达到单纯看源码解析就能读懂jQuery\n\n3. 如果你既不能通过书籍视频和他人文章的源码解析明白jQuery，也想自己实现一个jQuery的。\n\n4. 本系列就是以一些不同的方法手段，简单的代码，实现了一套与jQuery一样的API\n\n<!-- more -->\n\n## Lesson-0\n\n首先第一个版本,我们要先了解搭建一个库或者是一个给别人使用的小插件应该用一种什么样的格式.\n\n\n\n首先我们需要创建一个闭包\n\n```javascript\n\n(function()){\n\n    //code..\n\n}();\n\n```\n\n然后将我们所需要的代码和逻辑都写在里面避免全局变量的泛滥.\n\n\n\n接着我们来看看我们第一版里的代码.\n\n```javascript\n\n(function(window,document) {\n\n    var w = window,\n\n        doc = document;\n\n    var Kodo = function(selector) {\n\n        return new Kodo.prototype.init(selector);\n\n    }\n\n    Kodo.prototype = {\n\n        constructor : Kodo,\n\n        length : 0,\n\n        splice: [].splice,\n\n        selector : '',\n\n        init : function(selector) {//dom选择的一些判断\n\n\n\n        }\n\n    }\n\n    Kodo.prototype.init.prototype = Kodo.prototype;\n\n\n\n    Kodo.ajax = function() { //直接挂载方法  可k.ajax调用\n\n        console.log(this);\n\n    }\n\n\n\n    window.f = Kodo;\n\n})(window,document);\n\n```\n\n\n\n我创建了一个闭包,传入了window,document并且在内部将他们缓存起来.\n\n\n\n接着\n\n```javascript\n\nvar kodo = function(selector) {\n\n    return new Kodo.prototype.init(selector);\n\n}\n\n```\n\n\n\n如果有看过jQuery源码的童鞋对这个真是在了解不过了.每次用kodo调用的时候,将直接 返回一个kodo的实例.达到无new调用的效果\n\n```javascript\n\nKodo.prototype = {\n\n    constructor : Kodo,\n\n    length : 0,\n\n    splice: [].splice,\n\n    selector : '',\n\n    init : function(selector) {//dom选择的一些判断\n\n\n\n    }\n\n}\n\nKodo.prototype.init.prototype = Kodo.prototype;\n\n```\n\n\n\n接着重点就在于如何去构造Kodo的prototype的原型了.在这上面的属性也就相当于是jQuery的实例方法和属性.所以每次$()后都能链式调用.\n\n\n\n由于我们是return new Kodo.prototype.init,那自然,我们需要手动的把init的prototype指向Kodo的prototype\n\n\n\n同时我们在原型上具有splice属性后,我们的对象就会变为了一个类数组对象,神奇吧!\n\n```javascript\n\nKodo.ajax = function() { //直接挂载方法  可f.ajax调用\n\n    console.log(this);\n\n}\n\n```\n\n\n\n由于javascript中一切皆对象,所以我们能在我们的Kodo上直接用.XXX来赋予新的属性和方法,这样的方法也被称之为静态方法.\n\n```javascript\n\nwindow.f = Kodo;\n\n```\n\n\n\n最后我们在window上对外暴露一个接口,我们就可以愉快的用 f.ajax 或者是 f(\"#id\")即可调用.","source":"_posts/jquery01.md","raw":"title: 可想实现一个自己的简单jQuery库？(一)\ndate: 2015-11-18 20:26:48\ntags:\n---\n\n## 前言\n\n1. 虽然说市面上有许多讲解jQuery源码或者是也有类似如何搭建一个属于自己的javascript库的文章。\n\n2. 但毕竟更多数人的水平并没有达到单纯看源码解析就能读懂jQuery\n\n3. 如果你既不能通过书籍视频和他人文章的源码解析明白jQuery，也想自己实现一个jQuery的。\n\n4. 本系列就是以一些不同的方法手段，简单的代码，实现了一套与jQuery一样的API\n\n<!-- more -->\n\n## Lesson-0\n\n首先第一个版本,我们要先了解搭建一个库或者是一个给别人使用的小插件应该用一种什么样的格式.\n\n\n\n首先我们需要创建一个闭包\n\n```javascript\n\n(function()){\n\n    //code..\n\n}();\n\n```\n\n然后将我们所需要的代码和逻辑都写在里面避免全局变量的泛滥.\n\n\n\n接着我们来看看我们第一版里的代码.\n\n```javascript\n\n(function(window,document) {\n\n    var w = window,\n\n        doc = document;\n\n    var Kodo = function(selector) {\n\n        return new Kodo.prototype.init(selector);\n\n    }\n\n    Kodo.prototype = {\n\n        constructor : Kodo,\n\n        length : 0,\n\n        splice: [].splice,\n\n        selector : '',\n\n        init : function(selector) {//dom选择的一些判断\n\n\n\n        }\n\n    }\n\n    Kodo.prototype.init.prototype = Kodo.prototype;\n\n\n\n    Kodo.ajax = function() { //直接挂载方法  可k.ajax调用\n\n        console.log(this);\n\n    }\n\n\n\n    window.f = Kodo;\n\n})(window,document);\n\n```\n\n\n\n我创建了一个闭包,传入了window,document并且在内部将他们缓存起来.\n\n\n\n接着\n\n```javascript\n\nvar kodo = function(selector) {\n\n    return new Kodo.prototype.init(selector);\n\n}\n\n```\n\n\n\n如果有看过jQuery源码的童鞋对这个真是在了解不过了.每次用kodo调用的时候,将直接 返回一个kodo的实例.达到无new调用的效果\n\n```javascript\n\nKodo.prototype = {\n\n    constructor : Kodo,\n\n    length : 0,\n\n    splice: [].splice,\n\n    selector : '',\n\n    init : function(selector) {//dom选择的一些判断\n\n\n\n    }\n\n}\n\nKodo.prototype.init.prototype = Kodo.prototype;\n\n```\n\n\n\n接着重点就在于如何去构造Kodo的prototype的原型了.在这上面的属性也就相当于是jQuery的实例方法和属性.所以每次$()后都能链式调用.\n\n\n\n由于我们是return new Kodo.prototype.init,那自然,我们需要手动的把init的prototype指向Kodo的prototype\n\n\n\n同时我们在原型上具有splice属性后,我们的对象就会变为了一个类数组对象,神奇吧!\n\n```javascript\n\nKodo.ajax = function() { //直接挂载方法  可f.ajax调用\n\n    console.log(this);\n\n}\n\n```\n\n\n\n由于javascript中一切皆对象,所以我们能在我们的Kodo上直接用.XXX来赋予新的属性和方法,这样的方法也被称之为静态方法.\n\n```javascript\n\nwindow.f = Kodo;\n\n```\n\n\n\n最后我们在window上对外暴露一个接口,我们就可以愉快的用 f.ajax 或者是 f(\"#id\")即可调用.","slug":"jquery01","published":1,"updated":"2016-03-02T14:18:07.218Z","_id":"cijgvit66000hzp8gh8ycnk2b","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><ol>\n<li><p>虽然说市面上有许多讲解jQuery源码或者是也有类似如何搭建一个属于自己的javascript库的文章。</p>\n</li>\n<li><p>但毕竟更多数人的水平并没有达到单纯看源码解析就能读懂jQuery</p>\n</li>\n<li><p>如果你既不能通过书籍视频和他人文章的源码解析明白jQuery，也想自己实现一个jQuery的。</p>\n</li>\n<li><p>本系列就是以一些不同的方法手段，简单的代码，实现了一套与jQuery一样的API</p>\n</li>\n</ol>\n<a id=\"more\"></a>\n<h2 id=\"Lesson-0\"><a href=\"#Lesson-0\" class=\"headerlink\" title=\"Lesson-0\"></a>Lesson-0</h2><p>首先第一个版本,我们要先了解搭建一个库或者是一个给别人使用的小插件应该用一种什么样的格式.</p>\n<p>首先我们需要创建一个闭包</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>))</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//code..</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;();</span><br></pre></td></tr></table></figure>\n<p>然后将我们所需要的代码和逻辑都写在里面避免全局变量的泛滥.</p>\n<p>接着我们来看看我们第一版里的代码.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">window,document</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> w = <span class=\"built_in\">window</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">        doc = <span class=\"built_in\">document</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> Kodo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Kodo.prototype.init(selector);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Kodo.prototype = &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">constructor</span> : Kodo,</span><br><span class=\"line\"></span><br><span class=\"line\">        length : 0,</span><br><span class=\"line\"></span><br><span class=\"line\">        splice: [].splice,</span><br><span class=\"line\"></span><br><span class=\"line\">        selector : '',</span><br><span class=\"line\"></span><br><span class=\"line\">        init : function(selector) &#123;<span class=\"comment\">//dom选择的一些判断</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Kodo.prototype.init.prototype = Kodo.prototype;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    Kodo.ajax = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">//直接挂载方法  可k.ajax调用</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">window</span>.f = Kodo;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)(<span class=\"built_in\">window</span>,<span class=\"built_in\">document</span>);</span><br></pre></td></tr></table></figure>\n<p>我创建了一个闭包,传入了window,document并且在内部将他们缓存起来.</p>\n<p>接着</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> kodo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Kodo.prototype.init(selector);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果有看过jQuery源码的童鞋对这个真是在了解不过了.每次用kodo调用的时候,将直接 返回一个kodo的实例.达到无new调用的效果</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Kodo.prototype = &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span> : Kodo,</span><br><span class=\"line\"></span><br><span class=\"line\">    length : 0,</span><br><span class=\"line\"></span><br><span class=\"line\">    splice: [].splice,</span><br><span class=\"line\"></span><br><span class=\"line\">    selector : '',</span><br><span class=\"line\"></span><br><span class=\"line\">    init : function(selector) &#123;<span class=\"comment\">//dom选择的一些判断</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Kodo.prototype.init.prototype = Kodo.prototype;</span><br></pre></td></tr></table></figure>\n<p>接着重点就在于如何去构造Kodo的prototype的原型了.在这上面的属性也就相当于是jQuery的实例方法和属性.所以每次$()后都能链式调用.</p>\n<p>由于我们是return new Kodo.prototype.init,那自然,我们需要手动的把init的prototype指向Kodo的prototype</p>\n<p>同时我们在原型上具有splice属性后,我们的对象就会变为了一个类数组对象,神奇吧!</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Kodo.ajax = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">//直接挂载方法  可f.ajax调用</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>由于javascript中一切皆对象,所以我们能在我们的Kodo上直接用.XXX来赋予新的属性和方法,这样的方法也被称之为静态方法.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.f = Kodo;</span><br></pre></td></tr></table></figure>\n<p>最后我们在window上对外暴露一个接口,我们就可以愉快的用 f.ajax 或者是 f(“#id”)即可调用.</p>\n","excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><ol>\n<li><p>虽然说市面上有许多讲解jQuery源码或者是也有类似如何搭建一个属于自己的javascript库的文章。</p>\n</li>\n<li><p>但毕竟更多数人的水平并没有达到单纯看源码解析就能读懂jQuery</p>\n</li>\n<li><p>如果你既不能通过书籍视频和他人文章的源码解析明白jQuery，也想自己实现一个jQuery的。</p>\n</li>\n<li><p>本系列就是以一些不同的方法手段，简单的代码，实现了一套与jQuery一样的API</p>\n</li>\n</ol>","more":"<h2 id=\"Lesson-0\"><a href=\"#Lesson-0\" class=\"headerlink\" title=\"Lesson-0\"></a>Lesson-0</h2><p>首先第一个版本,我们要先了解搭建一个库或者是一个给别人使用的小插件应该用一种什么样的格式.</p>\n<p>首先我们需要创建一个闭包</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>))</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//code..</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;();</span><br></pre></td></tr></table></figure>\n<p>然后将我们所需要的代码和逻辑都写在里面避免全局变量的泛滥.</p>\n<p>接着我们来看看我们第一版里的代码.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">window,document</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> w = <span class=\"built_in\">window</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">        doc = <span class=\"built_in\">document</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> Kodo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Kodo.prototype.init(selector);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Kodo.prototype = &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">constructor</span> : Kodo,</span><br><span class=\"line\"></span><br><span class=\"line\">        length : 0,</span><br><span class=\"line\"></span><br><span class=\"line\">        splice: [].splice,</span><br><span class=\"line\"></span><br><span class=\"line\">        selector : '',</span><br><span class=\"line\"></span><br><span class=\"line\">        init : function(selector) &#123;<span class=\"comment\">//dom选择的一些判断</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Kodo.prototype.init.prototype = Kodo.prototype;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    Kodo.ajax = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">//直接挂载方法  可k.ajax调用</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">window</span>.f = Kodo;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)(<span class=\"built_in\">window</span>,<span class=\"built_in\">document</span>);</span><br></pre></td></tr></table></figure>\n<p>我创建了一个闭包,传入了window,document并且在内部将他们缓存起来.</p>\n<p>接着</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> kodo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Kodo.prototype.init(selector);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果有看过jQuery源码的童鞋对这个真是在了解不过了.每次用kodo调用的时候,将直接 返回一个kodo的实例.达到无new调用的效果</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Kodo.prototype = &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span> : Kodo,</span><br><span class=\"line\"></span><br><span class=\"line\">    length : 0,</span><br><span class=\"line\"></span><br><span class=\"line\">    splice: [].splice,</span><br><span class=\"line\"></span><br><span class=\"line\">    selector : '',</span><br><span class=\"line\"></span><br><span class=\"line\">    init : function(selector) &#123;<span class=\"comment\">//dom选择的一些判断</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Kodo.prototype.init.prototype = Kodo.prototype;</span><br></pre></td></tr></table></figure>\n<p>接着重点就在于如何去构造Kodo的prototype的原型了.在这上面的属性也就相当于是jQuery的实例方法和属性.所以每次$()后都能链式调用.</p>\n<p>由于我们是return new Kodo.prototype.init,那自然,我们需要手动的把init的prototype指向Kodo的prototype</p>\n<p>同时我们在原型上具有splice属性后,我们的对象就会变为了一个类数组对象,神奇吧!</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Kodo.ajax = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">//直接挂载方法  可f.ajax调用</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>由于javascript中一切皆对象,所以我们能在我们的Kodo上直接用.XXX来赋予新的属性和方法,这样的方法也被称之为静态方法.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.f = Kodo;</span><br></pre></td></tr></table></figure>\n<p>最后我们在window上对外暴露一个接口,我们就可以愉快的用 f.ajax 或者是 f(“#id”)即可调用.</p>"},{"title":"Hello World","date":"2014-10-17T12:55:32.000Z","_content":"Welcome to [Hexo](http://hexo.io/)! This is your very first post. Check [documentation](http://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](http://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n\n<!-- more -->\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](http://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](http://hexo.io/docs/deployment.html)\n\n<a class=\"jsbin-embed\" href=\"http://jsbin.com/rehufa/1/embed?js,output\">JS Bin on jsbin.com</a><script src=\"http://static.jsbin.com/js/embed.min.js?3.35.2\"></script>\n","source":"_posts/hello-world.md","raw":"title: Hello World\ndate: 2014-10-17 20:55:32\ntags: hello\n---\nWelcome to [Hexo](http://hexo.io/)! This is your very first post. Check [documentation](http://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](http://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n\n<!-- more -->\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](http://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](http://hexo.io/docs/deployment.html)\n\n<a class=\"jsbin-embed\" href=\"http://jsbin.com/rehufa/1/embed?js,output\">JS Bin on jsbin.com</a><script src=\"http://static.jsbin.com/js/embed.min.js?3.35.2\"></script>\n","slug":"hello-world","published":1,"updated":"2016-03-02T14:18:07.218Z","_id":"cijgvit69000izp8g7dl1zjr0","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Welcome to <a href=\"http://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"http://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"http://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<a id=\"more\"></a>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n<p><a class=\"jsbin-embed\" href=\"http://jsbin.com/rehufa/1/embed?js,output\" target=\"_blank\" rel=\"external\">JS Bin on jsbin.com</a><script src=\"http://static.jsbin.com/js/embed.min.js?3.35.2\"></script></p>\n","excerpt":"<p>Welcome to <a href=\"http://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"http://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"http://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/writing.html\">Writing</a></p>","more":"<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/deployment.html\">Deployment</a></p>\n<p><a class=\"jsbin-embed\" href=\"http://jsbin.com/rehufa/1/embed?js,output\">JS Bin on jsbin.com</a><script src=\"http://static.jsbin.com/js/embed.min.js?3.35.2\"></script></p>"},{"title":"前端工程化知识要点回顾&思考","date":"2015-11-16T12:24:27.000Z","_content":"\n## 编程技术及生态发展的三个阶段\n\n* 最初的时候人们忙着补全各种API，代表着他们拥有的东西还很匮乏，需要在语言跟基础设施上继续完善\n\n* 然后就开始各种模式，标志他们做的东西逐渐变大变复杂，需要更好的组织了\n\n* 然后就是各类分层MVC，MVP，MVVM之类，可视化开发，自动化测试，团队协同系统等等，说明重视生产效率了，也就是所谓工程化\n\n\n\n## 前端工程是软件工程的一个子类别\n\n软件工程是一门研究用工程化方法构建和维护有效的、实用的和高质量的软件的学科。\n\n<!-- more --> \n\n## 前端是一种GUI软件\n\n> 从本质上讲，所有Web应用都是一种运行在网页浏览器中的软件，这些软件的图形用户界面（Graphical User Interface，简称GUI）即为前端。\n\n\n\n前端又不同于传统的客户端软件／后端，因为前端应用具备“免安装”、“增量安装”等特性。也“得益”于这些特性，前端应用会遭遇客户端应用不可能碰到的资源管理问题，这也是前端最容易引起工程问题的点。\n\n\n\n## 一个符合工程化要求的软件系统(前端)需要包含的要素\n\n1. 开发规范\n\n2. 模块化开发\n\n3. 组件化开发\n\n4. 组件仓库\n\n5. 性能优化\n\n6. 项目部署\n\n7. 开发流程\n\n8. 开发工具\n\n\n\n1-3是技术业务相关的开发需求，4是技术沉淀及共享需求，5-8是工程优化需求\n\n> 大部分时候我们谈的“工程化”其实只是“工具化”。\n\n\n\n每一个单独的点或许都比较容易实现，但是把这8条串联起来则是一个很大的挑战，而且这8个点相互之间又互有联系\n\n* 模块化开发涉及到性能优化，对构建工具有一定的配套实现要求，同时也会影响开发规范的制定\n\n* 组件化开发应该基于模块化框架来加载其他依赖的组件，如果组件化框架自带模块管理功能，那么就可能导致工程的性能优化实现困难（我们可以直接使用ES6的module语法及loader）\n\n* 组件库应该与组件化开发配套，组件仓库中的组件应该按照相同的标准实现\n\n* 开发规范工具必须容易实现，如果部署上有特殊要求，工具是否能很容易的做出调整而不是修改规范\n\n* 工具是否能提供接入公司已有流程的接口，是否能与公司的ci工具相互融合\n\n\n\n## 为什么都说前端目前正遭遇前所未有的工程问题\n\n1. 前端在第1、2阶段耗费了十多年的时间，然后近几年才井喷式的爆发\n\n2. 由于整个生态的发展缓慢、门槛低、构建应用成本低，前端开发长时间停留在刀耕火种、茹毛饮血的阶段\n\n3. 以前大部分前端工作都是切页面加特效，还不能算得上一个真正意义上的webapp，自然很少有公司能遭遇到工程化问题\n\n4. 前端不同于 客户端／后端 的特性(比如增量安装)，导致遭遇的工程会很特殊，很难直接从别的领域套用已有的解决方案\n\n5. 我们自己完全意识不到那是问题\n\n\n\n## 工程化到底要解决哪些问题\n\n1. 合理的开发流程及开发规范，包括代码规范、模块化组件化规范(分治)等（提高生产力）\n\n2. 一套自动化代码质量检测方案（提高系统可靠性）\n\n3. 一套自动化及高度适应性的项目 发布／部署 方案（提高系统的伸缩性及灵活性）\n\n4. 极致的性能优化，包括减少冗余的接口请求及资源请求、提高缓存命中率等，简言之就是站点的打开及运行速度（更好的用户体验）\n\n\n\n举三个案例：\n\n\n\n1. 最基本的资源合并，我们应该采取哪种策略？全部打包成一个还是分开打包？如何最高效的利用缓存？如何在降低请求数的同时提高缓存利用率？移动终端又应该采取哪种策略？\n\n2. 发布的时候我们到底是应该先部署页面还是静态资源？如何实现平滑升级？如果我还想玩个灰度发布呢？\n\n3. 如果采用模块化按需加载的方式开发，每次发布资源文件都会有不同的md5值，如何在不影响开发体验的前提下确保能引用到正确的模块？\n\n\n\n## 相关工具\n\n1. 构建工具 gulp \n\ntask-based的方式使得gulp无法(难以)处理资源嵌套的递归场景。如 a.js -> b.scss -> md5(d.img) -> md5(b.scss) -> md5(a.js)\n\n2. 基于 资源表＋资源管理框架 策略的 [fis](https://github.com/fex-team/fis) \n\n其实已经能处理大部分场景了，但是侵入式代码实在是无法接受。因为它是一个框架。\n\n3. 静态分析工具 webpack\n\nwebpack依赖其可配置的loader使其拥有强大的打包能力，但是依然无法实现动态按需加载的需求。类似：\n\n```javascript\n\nif(browser){\n\n    require('browser.js');\n\n} else {\n\n    require('node.js');\n\n}\n\n```\n\n\n\n## 出路\n\n> *ES6 Module ＋ ES6 Module Loader ＋ HTTP2.0 ＋ Others*\n\n\n\nES6 Module提供了一个原生的模块化语法，ES6 Module Loader则能提供一个原生的模块加载器。对于前端工程而言，资源管理是最核心的问题，而资源管理中加载又是重点更是难点。\n\n\n\n可是ES6 Module Loader从ES6草案中移除了现在由WHATWG组织还在维护制定标准，pending状态。。 现在有一个基于这个草案实现的api polyfill [Module Loader](https://github.com/ModuleLoader/es6-module-loader)。可是你不是规范我这种教条主义者是不会用的\n\n\n\n## 总结\n\n前端工程化相关问题是随之前端的发展越来越受到重视的问题，一套好的工程化解决方案能在提高开发效率(包括代码编写的舒适度及多人协作)的同时确保整个系统的伸缩性(各种不同的部署环境)及健壮性(安全)，同时在性能上又能有一个很优异的表现(主要上各种缓存策略加载策略等)，而且这套方案又应该是对工程师无感知(或感知很小)趋于自动化的一套方案。总知要达到这个目的前端工程化还有很长一段路要走。\n\n\n\n## 拓展阅读\n\n1. 国内工程化第一人系列文章 [https://github.com/fouber/blog/issues](https://github.com/fouber/blog/issues)\n\n2. [大公司是如何部署前端代码的](https://github.com/fouber/blog/issues/6)\n\n3. 相关工具\n\n  * 百度：[fis](https://github.com/fex-team/fis) （资源表＋资源管理框架 策略）\n\n  * UC：[scrat](https://github.com/scrat-team/scrat)\n\n  * 腾讯：[mtjs](http://mtjs.github.io/) （可以实现字节增量发布）","source":"_posts/front-end1.md","raw":"title: 前端工程化知识要点回顾&思考\ndate: 2015-11-16 20:24:27\ntags:\n---\n\n## 编程技术及生态发展的三个阶段\n\n* 最初的时候人们忙着补全各种API，代表着他们拥有的东西还很匮乏，需要在语言跟基础设施上继续完善\n\n* 然后就开始各种模式，标志他们做的东西逐渐变大变复杂，需要更好的组织了\n\n* 然后就是各类分层MVC，MVP，MVVM之类，可视化开发，自动化测试，团队协同系统等等，说明重视生产效率了，也就是所谓工程化\n\n\n\n## 前端工程是软件工程的一个子类别\n\n软件工程是一门研究用工程化方法构建和维护有效的、实用的和高质量的软件的学科。\n\n<!-- more --> \n\n## 前端是一种GUI软件\n\n> 从本质上讲，所有Web应用都是一种运行在网页浏览器中的软件，这些软件的图形用户界面（Graphical User Interface，简称GUI）即为前端。\n\n\n\n前端又不同于传统的客户端软件／后端，因为前端应用具备“免安装”、“增量安装”等特性。也“得益”于这些特性，前端应用会遭遇客户端应用不可能碰到的资源管理问题，这也是前端最容易引起工程问题的点。\n\n\n\n## 一个符合工程化要求的软件系统(前端)需要包含的要素\n\n1. 开发规范\n\n2. 模块化开发\n\n3. 组件化开发\n\n4. 组件仓库\n\n5. 性能优化\n\n6. 项目部署\n\n7. 开发流程\n\n8. 开发工具\n\n\n\n1-3是技术业务相关的开发需求，4是技术沉淀及共享需求，5-8是工程优化需求\n\n> 大部分时候我们谈的“工程化”其实只是“工具化”。\n\n\n\n每一个单独的点或许都比较容易实现，但是把这8条串联起来则是一个很大的挑战，而且这8个点相互之间又互有联系\n\n* 模块化开发涉及到性能优化，对构建工具有一定的配套实现要求，同时也会影响开发规范的制定\n\n* 组件化开发应该基于模块化框架来加载其他依赖的组件，如果组件化框架自带模块管理功能，那么就可能导致工程的性能优化实现困难（我们可以直接使用ES6的module语法及loader）\n\n* 组件库应该与组件化开发配套，组件仓库中的组件应该按照相同的标准实现\n\n* 开发规范工具必须容易实现，如果部署上有特殊要求，工具是否能很容易的做出调整而不是修改规范\n\n* 工具是否能提供接入公司已有流程的接口，是否能与公司的ci工具相互融合\n\n\n\n## 为什么都说前端目前正遭遇前所未有的工程问题\n\n1. 前端在第1、2阶段耗费了十多年的时间，然后近几年才井喷式的爆发\n\n2. 由于整个生态的发展缓慢、门槛低、构建应用成本低，前端开发长时间停留在刀耕火种、茹毛饮血的阶段\n\n3. 以前大部分前端工作都是切页面加特效，还不能算得上一个真正意义上的webapp，自然很少有公司能遭遇到工程化问题\n\n4. 前端不同于 客户端／后端 的特性(比如增量安装)，导致遭遇的工程会很特殊，很难直接从别的领域套用已有的解决方案\n\n5. 我们自己完全意识不到那是问题\n\n\n\n## 工程化到底要解决哪些问题\n\n1. 合理的开发流程及开发规范，包括代码规范、模块化组件化规范(分治)等（提高生产力）\n\n2. 一套自动化代码质量检测方案（提高系统可靠性）\n\n3. 一套自动化及高度适应性的项目 发布／部署 方案（提高系统的伸缩性及灵活性）\n\n4. 极致的性能优化，包括减少冗余的接口请求及资源请求、提高缓存命中率等，简言之就是站点的打开及运行速度（更好的用户体验）\n\n\n\n举三个案例：\n\n\n\n1. 最基本的资源合并，我们应该采取哪种策略？全部打包成一个还是分开打包？如何最高效的利用缓存？如何在降低请求数的同时提高缓存利用率？移动终端又应该采取哪种策略？\n\n2. 发布的时候我们到底是应该先部署页面还是静态资源？如何实现平滑升级？如果我还想玩个灰度发布呢？\n\n3. 如果采用模块化按需加载的方式开发，每次发布资源文件都会有不同的md5值，如何在不影响开发体验的前提下确保能引用到正确的模块？\n\n\n\n## 相关工具\n\n1. 构建工具 gulp \n\ntask-based的方式使得gulp无法(难以)处理资源嵌套的递归场景。如 a.js -> b.scss -> md5(d.img) -> md5(b.scss) -> md5(a.js)\n\n2. 基于 资源表＋资源管理框架 策略的 [fis](https://github.com/fex-team/fis) \n\n其实已经能处理大部分场景了，但是侵入式代码实在是无法接受。因为它是一个框架。\n\n3. 静态分析工具 webpack\n\nwebpack依赖其可配置的loader使其拥有强大的打包能力，但是依然无法实现动态按需加载的需求。类似：\n\n```javascript\n\nif(browser){\n\n    require('browser.js');\n\n} else {\n\n    require('node.js');\n\n}\n\n```\n\n\n\n## 出路\n\n> *ES6 Module ＋ ES6 Module Loader ＋ HTTP2.0 ＋ Others*\n\n\n\nES6 Module提供了一个原生的模块化语法，ES6 Module Loader则能提供一个原生的模块加载器。对于前端工程而言，资源管理是最核心的问题，而资源管理中加载又是重点更是难点。\n\n\n\n可是ES6 Module Loader从ES6草案中移除了现在由WHATWG组织还在维护制定标准，pending状态。。 现在有一个基于这个草案实现的api polyfill [Module Loader](https://github.com/ModuleLoader/es6-module-loader)。可是你不是规范我这种教条主义者是不会用的\n\n\n\n## 总结\n\n前端工程化相关问题是随之前端的发展越来越受到重视的问题，一套好的工程化解决方案能在提高开发效率(包括代码编写的舒适度及多人协作)的同时确保整个系统的伸缩性(各种不同的部署环境)及健壮性(安全)，同时在性能上又能有一个很优异的表现(主要上各种缓存策略加载策略等)，而且这套方案又应该是对工程师无感知(或感知很小)趋于自动化的一套方案。总知要达到这个目的前端工程化还有很长一段路要走。\n\n\n\n## 拓展阅读\n\n1. 国内工程化第一人系列文章 [https://github.com/fouber/blog/issues](https://github.com/fouber/blog/issues)\n\n2. [大公司是如何部署前端代码的](https://github.com/fouber/blog/issues/6)\n\n3. 相关工具\n\n  * 百度：[fis](https://github.com/fex-team/fis) （资源表＋资源管理框架 策略）\n\n  * UC：[scrat](https://github.com/scrat-team/scrat)\n\n  * 腾讯：[mtjs](http://mtjs.github.io/) （可以实现字节增量发布）","slug":"front-end1","published":1,"updated":"2016-03-02T14:18:07.218Z","_id":"cijgvit6h000lzp8gjwyucqw4","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"编程技术及生态发展的三个阶段\"><a href=\"#编程技术及生态发展的三个阶段\" class=\"headerlink\" title=\"编程技术及生态发展的三个阶段\"></a>编程技术及生态发展的三个阶段</h2><ul>\n<li><p>最初的时候人们忙着补全各种API，代表着他们拥有的东西还很匮乏，需要在语言跟基础设施上继续完善</p>\n</li>\n<li><p>然后就开始各种模式，标志他们做的东西逐渐变大变复杂，需要更好的组织了</p>\n</li>\n<li><p>然后就是各类分层MVC，MVP，MVVM之类，可视化开发，自动化测试，团队协同系统等等，说明重视生产效率了，也就是所谓工程化</p>\n</li>\n</ul>\n<h2 id=\"前端工程是软件工程的一个子类别\"><a href=\"#前端工程是软件工程的一个子类别\" class=\"headerlink\" title=\"前端工程是软件工程的一个子类别\"></a>前端工程是软件工程的一个子类别</h2><p>软件工程是一门研究用工程化方法构建和维护有效的、实用的和高质量的软件的学科。</p>\n<a id=\"more\"></a> \n<h2 id=\"前端是一种GUI软件\"><a href=\"#前端是一种GUI软件\" class=\"headerlink\" title=\"前端是一种GUI软件\"></a>前端是一种GUI软件</h2><blockquote>\n<p>从本质上讲，所有Web应用都是一种运行在网页浏览器中的软件，这些软件的图形用户界面（Graphical User Interface，简称GUI）即为前端。</p>\n</blockquote>\n<p>前端又不同于传统的客户端软件／后端，因为前端应用具备“免安装”、“增量安装”等特性。也“得益”于这些特性，前端应用会遭遇客户端应用不可能碰到的资源管理问题，这也是前端最容易引起工程问题的点。</p>\n<h2 id=\"一个符合工程化要求的软件系统-前端-需要包含的要素\"><a href=\"#一个符合工程化要求的软件系统-前端-需要包含的要素\" class=\"headerlink\" title=\"一个符合工程化要求的软件系统(前端)需要包含的要素\"></a>一个符合工程化要求的软件系统(前端)需要包含的要素</h2><ol>\n<li><p>开发规范</p>\n</li>\n<li><p>模块化开发</p>\n</li>\n<li><p>组件化开发</p>\n</li>\n<li><p>组件仓库</p>\n</li>\n<li><p>性能优化</p>\n</li>\n<li><p>项目部署</p>\n</li>\n<li><p>开发流程</p>\n</li>\n<li><p>开发工具</p>\n</li>\n</ol>\n<p>1-3是技术业务相关的开发需求，4是技术沉淀及共享需求，5-8是工程优化需求</p>\n<blockquote>\n<p>大部分时候我们谈的“工程化”其实只是“工具化”。</p>\n</blockquote>\n<p>每一个单独的点或许都比较容易实现，但是把这8条串联起来则是一个很大的挑战，而且这8个点相互之间又互有联系</p>\n<ul>\n<li><p>模块化开发涉及到性能优化，对构建工具有一定的配套实现要求，同时也会影响开发规范的制定</p>\n</li>\n<li><p>组件化开发应该基于模块化框架来加载其他依赖的组件，如果组件化框架自带模块管理功能，那么就可能导致工程的性能优化实现困难（我们可以直接使用ES6的module语法及loader）</p>\n</li>\n<li><p>组件库应该与组件化开发配套，组件仓库中的组件应该按照相同的标准实现</p>\n</li>\n<li><p>开发规范工具必须容易实现，如果部署上有特殊要求，工具是否能很容易的做出调整而不是修改规范</p>\n</li>\n<li><p>工具是否能提供接入公司已有流程的接口，是否能与公司的ci工具相互融合</p>\n</li>\n</ul>\n<h2 id=\"为什么都说前端目前正遭遇前所未有的工程问题\"><a href=\"#为什么都说前端目前正遭遇前所未有的工程问题\" class=\"headerlink\" title=\"为什么都说前端目前正遭遇前所未有的工程问题\"></a>为什么都说前端目前正遭遇前所未有的工程问题</h2><ol>\n<li><p>前端在第1、2阶段耗费了十多年的时间，然后近几年才井喷式的爆发</p>\n</li>\n<li><p>由于整个生态的发展缓慢、门槛低、构建应用成本低，前端开发长时间停留在刀耕火种、茹毛饮血的阶段</p>\n</li>\n<li><p>以前大部分前端工作都是切页面加特效，还不能算得上一个真正意义上的webapp，自然很少有公司能遭遇到工程化问题</p>\n</li>\n<li><p>前端不同于 客户端／后端 的特性(比如增量安装)，导致遭遇的工程会很特殊，很难直接从别的领域套用已有的解决方案</p>\n</li>\n<li><p>我们自己完全意识不到那是问题</p>\n</li>\n</ol>\n<h2 id=\"工程化到底要解决哪些问题\"><a href=\"#工程化到底要解决哪些问题\" class=\"headerlink\" title=\"工程化到底要解决哪些问题\"></a>工程化到底要解决哪些问题</h2><ol>\n<li><p>合理的开发流程及开发规范，包括代码规范、模块化组件化规范(分治)等（提高生产力）</p>\n</li>\n<li><p>一套自动化代码质量检测方案（提高系统可靠性）</p>\n</li>\n<li><p>一套自动化及高度适应性的项目 发布／部署 方案（提高系统的伸缩性及灵活性）</p>\n</li>\n<li><p>极致的性能优化，包括减少冗余的接口请求及资源请求、提高缓存命中率等，简言之就是站点的打开及运行速度（更好的用户体验）</p>\n</li>\n</ol>\n<p>举三个案例：</p>\n<ol>\n<li><p>最基本的资源合并，我们应该采取哪种策略？全部打包成一个还是分开打包？如何最高效的利用缓存？如何在降低请求数的同时提高缓存利用率？移动终端又应该采取哪种策略？</p>\n</li>\n<li><p>发布的时候我们到底是应该先部署页面还是静态资源？如何实现平滑升级？如果我还想玩个灰度发布呢？</p>\n</li>\n<li><p>如果采用模块化按需加载的方式开发，每次发布资源文件都会有不同的md5值，如何在不影响开发体验的前提下确保能引用到正确的模块？</p>\n</li>\n</ol>\n<h2 id=\"相关工具\"><a href=\"#相关工具\" class=\"headerlink\" title=\"相关工具\"></a>相关工具</h2><ol>\n<li>构建工具 gulp </li>\n</ol>\n<p>task-based的方式使得gulp无法(难以)处理资源嵌套的递归场景。如 a.js -&gt; b.scss -&gt; md5(d.img) -&gt; md5(b.scss) -&gt; md5(a.js)</p>\n<ol>\n<li>基于 资源表＋资源管理框架 策略的 <a href=\"https://github.com/fex-team/fis\" target=\"_blank\" rel=\"external\">fis</a> </li>\n</ol>\n<p>其实已经能处理大部分场景了，但是侵入式代码实在是无法接受。因为它是一个框架。</p>\n<ol>\n<li>静态分析工具 webpack</li>\n</ol>\n<p>webpack依赖其可配置的loader使其拥有强大的打包能力，但是依然无法实现动态按需加载的需求。类似：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(browser)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">require</span>(<span class=\"string\">'browser.js'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">require</span>(<span class=\"string\">'node.js'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"出路\"><a href=\"#出路\" class=\"headerlink\" title=\"出路\"></a>出路</h2><blockquote>\n<p><em>ES6 Module ＋ ES6 Module Loader ＋ HTTP2.0 ＋ Others</em></p>\n</blockquote>\n<p>ES6 Module提供了一个原生的模块化语法，ES6 Module Loader则能提供一个原生的模块加载器。对于前端工程而言，资源管理是最核心的问题，而资源管理中加载又是重点更是难点。</p>\n<p>可是ES6 Module Loader从ES6草案中移除了现在由WHATWG组织还在维护制定标准，pending状态。。 现在有一个基于这个草案实现的api polyfill <a href=\"https://github.com/ModuleLoader/es6-module-loader\" target=\"_blank\" rel=\"external\">Module Loader</a>。可是你不是规范我这种教条主义者是不会用的</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>前端工程化相关问题是随之前端的发展越来越受到重视的问题，一套好的工程化解决方案能在提高开发效率(包括代码编写的舒适度及多人协作)的同时确保整个系统的伸缩性(各种不同的部署环境)及健壮性(安全)，同时在性能上又能有一个很优异的表现(主要上各种缓存策略加载策略等)，而且这套方案又应该是对工程师无感知(或感知很小)趋于自动化的一套方案。总知要达到这个目的前端工程化还有很长一段路要走。</p>\n<h2 id=\"拓展阅读\"><a href=\"#拓展阅读\" class=\"headerlink\" title=\"拓展阅读\"></a>拓展阅读</h2><ol>\n<li><p>国内工程化第一人系列文章 <a href=\"https://github.com/fouber/blog/issues\" target=\"_blank\" rel=\"external\">https://github.com/fouber/blog/issues</a></p>\n</li>\n<li><p><a href=\"https://github.com/fouber/blog/issues/6\" target=\"_blank\" rel=\"external\">大公司是如何部署前端代码的</a></p>\n</li>\n<li><p>相关工具</p>\n<ul>\n<li><p>百度：<a href=\"https://github.com/fex-team/fis\" target=\"_blank\" rel=\"external\">fis</a> （资源表＋资源管理框架 策略）</p>\n</li>\n<li><p>UC：<a href=\"https://github.com/scrat-team/scrat\" target=\"_blank\" rel=\"external\">scrat</a></p>\n</li>\n<li><p>腾讯：<a href=\"http://mtjs.github.io/\" target=\"_blank\" rel=\"external\">mtjs</a> （可以实现字节增量发布）</p>\n</li>\n</ul>\n</li>\n</ol>\n","excerpt":"<h2 id=\"编程技术及生态发展的三个阶段\"><a href=\"#编程技术及生态发展的三个阶段\" class=\"headerlink\" title=\"编程技术及生态发展的三个阶段\"></a>编程技术及生态发展的三个阶段</h2><ul>\n<li><p>最初的时候人们忙着补全各种API，代表着他们拥有的东西还很匮乏，需要在语言跟基础设施上继续完善</p>\n</li>\n<li><p>然后就开始各种模式，标志他们做的东西逐渐变大变复杂，需要更好的组织了</p>\n</li>\n<li><p>然后就是各类分层MVC，MVP，MVVM之类，可视化开发，自动化测试，团队协同系统等等，说明重视生产效率了，也就是所谓工程化</p>\n</li>\n</ul>\n<h2 id=\"前端工程是软件工程的一个子类别\"><a href=\"#前端工程是软件工程的一个子类别\" class=\"headerlink\" title=\"前端工程是软件工程的一个子类别\"></a>前端工程是软件工程的一个子类别</h2><p>软件工程是一门研究用工程化方法构建和维护有效的、实用的和高质量的软件的学科。</p>","more":"<h2 id=\"前端是一种GUI软件\"><a href=\"#前端是一种GUI软件\" class=\"headerlink\" title=\"前端是一种GUI软件\"></a>前端是一种GUI软件</h2><blockquote>\n<p>从本质上讲，所有Web应用都是一种运行在网页浏览器中的软件，这些软件的图形用户界面（Graphical User Interface，简称GUI）即为前端。</p>\n</blockquote>\n<p>前端又不同于传统的客户端软件／后端，因为前端应用具备“免安装”、“增量安装”等特性。也“得益”于这些特性，前端应用会遭遇客户端应用不可能碰到的资源管理问题，这也是前端最容易引起工程问题的点。</p>\n<h2 id=\"一个符合工程化要求的软件系统-前端-需要包含的要素\"><a href=\"#一个符合工程化要求的软件系统-前端-需要包含的要素\" class=\"headerlink\" title=\"一个符合工程化要求的软件系统(前端)需要包含的要素\"></a>一个符合工程化要求的软件系统(前端)需要包含的要素</h2><ol>\n<li><p>开发规范</p>\n</li>\n<li><p>模块化开发</p>\n</li>\n<li><p>组件化开发</p>\n</li>\n<li><p>组件仓库</p>\n</li>\n<li><p>性能优化</p>\n</li>\n<li><p>项目部署</p>\n</li>\n<li><p>开发流程</p>\n</li>\n<li><p>开发工具</p>\n</li>\n</ol>\n<p>1-3是技术业务相关的开发需求，4是技术沉淀及共享需求，5-8是工程优化需求</p>\n<blockquote>\n<p>大部分时候我们谈的“工程化”其实只是“工具化”。</p>\n</blockquote>\n<p>每一个单独的点或许都比较容易实现，但是把这8条串联起来则是一个很大的挑战，而且这8个点相互之间又互有联系</p>\n<ul>\n<li><p>模块化开发涉及到性能优化，对构建工具有一定的配套实现要求，同时也会影响开发规范的制定</p>\n</li>\n<li><p>组件化开发应该基于模块化框架来加载其他依赖的组件，如果组件化框架自带模块管理功能，那么就可能导致工程的性能优化实现困难（我们可以直接使用ES6的module语法及loader）</p>\n</li>\n<li><p>组件库应该与组件化开发配套，组件仓库中的组件应该按照相同的标准实现</p>\n</li>\n<li><p>开发规范工具必须容易实现，如果部署上有特殊要求，工具是否能很容易的做出调整而不是修改规范</p>\n</li>\n<li><p>工具是否能提供接入公司已有流程的接口，是否能与公司的ci工具相互融合</p>\n</li>\n</ul>\n<h2 id=\"为什么都说前端目前正遭遇前所未有的工程问题\"><a href=\"#为什么都说前端目前正遭遇前所未有的工程问题\" class=\"headerlink\" title=\"为什么都说前端目前正遭遇前所未有的工程问题\"></a>为什么都说前端目前正遭遇前所未有的工程问题</h2><ol>\n<li><p>前端在第1、2阶段耗费了十多年的时间，然后近几年才井喷式的爆发</p>\n</li>\n<li><p>由于整个生态的发展缓慢、门槛低、构建应用成本低，前端开发长时间停留在刀耕火种、茹毛饮血的阶段</p>\n</li>\n<li><p>以前大部分前端工作都是切页面加特效，还不能算得上一个真正意义上的webapp，自然很少有公司能遭遇到工程化问题</p>\n</li>\n<li><p>前端不同于 客户端／后端 的特性(比如增量安装)，导致遭遇的工程会很特殊，很难直接从别的领域套用已有的解决方案</p>\n</li>\n<li><p>我们自己完全意识不到那是问题</p>\n</li>\n</ol>\n<h2 id=\"工程化到底要解决哪些问题\"><a href=\"#工程化到底要解决哪些问题\" class=\"headerlink\" title=\"工程化到底要解决哪些问题\"></a>工程化到底要解决哪些问题</h2><ol>\n<li><p>合理的开发流程及开发规范，包括代码规范、模块化组件化规范(分治)等（提高生产力）</p>\n</li>\n<li><p>一套自动化代码质量检测方案（提高系统可靠性）</p>\n</li>\n<li><p>一套自动化及高度适应性的项目 发布／部署 方案（提高系统的伸缩性及灵活性）</p>\n</li>\n<li><p>极致的性能优化，包括减少冗余的接口请求及资源请求、提高缓存命中率等，简言之就是站点的打开及运行速度（更好的用户体验）</p>\n</li>\n</ol>\n<p>举三个案例：</p>\n<ol>\n<li><p>最基本的资源合并，我们应该采取哪种策略？全部打包成一个还是分开打包？如何最高效的利用缓存？如何在降低请求数的同时提高缓存利用率？移动终端又应该采取哪种策略？</p>\n</li>\n<li><p>发布的时候我们到底是应该先部署页面还是静态资源？如何实现平滑升级？如果我还想玩个灰度发布呢？</p>\n</li>\n<li><p>如果采用模块化按需加载的方式开发，每次发布资源文件都会有不同的md5值，如何在不影响开发体验的前提下确保能引用到正确的模块？</p>\n</li>\n</ol>\n<h2 id=\"相关工具\"><a href=\"#相关工具\" class=\"headerlink\" title=\"相关工具\"></a>相关工具</h2><ol>\n<li>构建工具 gulp </li>\n</ol>\n<p>task-based的方式使得gulp无法(难以)处理资源嵌套的递归场景。如 a.js -&gt; b.scss -&gt; md5(d.img) -&gt; md5(b.scss) -&gt; md5(a.js)</p>\n<ol>\n<li>基于 资源表＋资源管理框架 策略的 <a href=\"https://github.com/fex-team/fis\">fis</a> </li>\n</ol>\n<p>其实已经能处理大部分场景了，但是侵入式代码实在是无法接受。因为它是一个框架。</p>\n<ol>\n<li>静态分析工具 webpack</li>\n</ol>\n<p>webpack依赖其可配置的loader使其拥有强大的打包能力，但是依然无法实现动态按需加载的需求。类似：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(browser)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">require</span>(<span class=\"string\">'browser.js'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">require</span>(<span class=\"string\">'node.js'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"出路\"><a href=\"#出路\" class=\"headerlink\" title=\"出路\"></a>出路</h2><blockquote>\n<p><em>ES6 Module ＋ ES6 Module Loader ＋ HTTP2.0 ＋ Others</em></p>\n</blockquote>\n<p>ES6 Module提供了一个原生的模块化语法，ES6 Module Loader则能提供一个原生的模块加载器。对于前端工程而言，资源管理是最核心的问题，而资源管理中加载又是重点更是难点。</p>\n<p>可是ES6 Module Loader从ES6草案中移除了现在由WHATWG组织还在维护制定标准，pending状态。。 现在有一个基于这个草案实现的api polyfill <a href=\"https://github.com/ModuleLoader/es6-module-loader\">Module Loader</a>。可是你不是规范我这种教条主义者是不会用的</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>前端工程化相关问题是随之前端的发展越来越受到重视的问题，一套好的工程化解决方案能在提高开发效率(包括代码编写的舒适度及多人协作)的同时确保整个系统的伸缩性(各种不同的部署环境)及健壮性(安全)，同时在性能上又能有一个很优异的表现(主要上各种缓存策略加载策略等)，而且这套方案又应该是对工程师无感知(或感知很小)趋于自动化的一套方案。总知要达到这个目的前端工程化还有很长一段路要走。</p>\n<h2 id=\"拓展阅读\"><a href=\"#拓展阅读\" class=\"headerlink\" title=\"拓展阅读\"></a>拓展阅读</h2><ol>\n<li><p>国内工程化第一人系列文章 <a href=\"https://github.com/fouber/blog/issues\">https://github.com/fouber/blog/issues</a></p>\n</li>\n<li><p><a href=\"https://github.com/fouber/blog/issues/6\">大公司是如何部署前端代码的</a></p>\n</li>\n<li><p>相关工具</p>\n<ul>\n<li><p>百度：<a href=\"https://github.com/fex-team/fis\">fis</a> （资源表＋资源管理框架 策略）</p>\n</li>\n<li><p>UC：<a href=\"https://github.com/scrat-team/scrat\">scrat</a></p>\n</li>\n<li><p>腾讯：<a href=\"http://mtjs.github.io/\">mtjs</a> （可以实现字节增量发布）</p>\n</li>\n</ul>\n</li>\n</ol>"},{"title":"基础知识篇","date":"2016-04-20T13:45:08.000Z","_content":"\n在我们第一次开始写程序的时候，都是以 Hello World 开始的。或者：\n\n```c\nprintf(\"hello,world\");\n```\n\n又或许：\n\n```javascript\nalert('hello,world');\n```\n\n<!-- more --> \n\n过去的十几年里，试过用二十几种不同的语言，每个都是以 hello,world 作为开头。在一些特定的软件，如 Nginx，则是 **It Works**。\n\n这是一个很长的故事，这个程序最早出现于1972年，由贝尔实验室成员布莱恩·柯林汉撰写的内部技术文件《A Tutorial Introduction to the Language B》之中。不久，同作者于1974年所撰写的《Programming in C: A Tutorial》，也延用这个范例；而以本文件扩编改写的《C语言程序设计》也保留了这个范例程式。工作时，我们也会使用类似于 hello,world 的 boilerplate 来完成基本的项目创建。\n\n同时需要注意的一点是，在每个大的项目开始之前我们应该去找寻好开发环境。搭建环境是一件非常重要的事，它决定了你能不能更好地工作。毕竟环境是生产率的一部分。高效的程序员和低效程序员间的十倍差距，至少有三倍是因为环境差异。\n\n因此在这一章里，我们将讲述几件事情：\n\n1. 使用怎样的操作系统\n2. 如何去选择工具\n3. 如何搭建相应操作系统上的环境\n4. 如何去学习一门语言\n","source":"_posts/1.0.md","raw":"title: 基础知识篇\ndate: 2016-4-20 21:45:08\ntags:\n---\n\n在我们第一次开始写程序的时候，都是以 Hello World 开始的。或者：\n\n```c\nprintf(\"hello,world\");\n```\n\n又或许：\n\n```javascript\nalert('hello,world');\n```\n\n<!-- more --> \n\n过去的十几年里，试过用二十几种不同的语言，每个都是以 hello,world 作为开头。在一些特定的软件，如 Nginx，则是 **It Works**。\n\n这是一个很长的故事，这个程序最早出现于1972年，由贝尔实验室成员布莱恩·柯林汉撰写的内部技术文件《A Tutorial Introduction to the Language B》之中。不久，同作者于1974年所撰写的《Programming in C: A Tutorial》，也延用这个范例；而以本文件扩编改写的《C语言程序设计》也保留了这个范例程式。工作时，我们也会使用类似于 hello,world 的 boilerplate 来完成基本的项目创建。\n\n同时需要注意的一点是，在每个大的项目开始之前我们应该去找寻好开发环境。搭建环境是一件非常重要的事，它决定了你能不能更好地工作。毕竟环境是生产率的一部分。高效的程序员和低效程序员间的十倍差距，至少有三倍是因为环境差异。\n\n因此在这一章里，我们将讲述几件事情：\n\n1. 使用怎样的操作系统\n2. 如何去选择工具\n3. 如何搭建相应操作系统上的环境\n4. 如何去学习一门语言\n","slug":"1.0","published":1,"updated":"2016-04-21T14:25:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuf7mpcg0000tsify70et6sd","content":"<p>在我们第一次开始写程序的时候，都是以 Hello World 开始的。或者：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"hello,world\"</span>);</span><br></pre></td></tr></table></figure>\n<p>又或许：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(<span class=\"string\">'hello,world'</span>);</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a> \n<p>过去的十几年里，试过用二十几种不同的语言，每个都是以 hello,world 作为开头。在一些特定的软件，如 Nginx，则是 <strong>It Works</strong>。</p>\n<p>这是一个很长的故事，这个程序最早出现于1972年，由贝尔实验室成员布莱恩·柯林汉撰写的内部技术文件《A Tutorial Introduction to the Language B》之中。不久，同作者于1974年所撰写的《Programming in C: A Tutorial》，也延用这个范例；而以本文件扩编改写的《C语言程序设计》也保留了这个范例程式。工作时，我们也会使用类似于 hello,world 的 boilerplate 来完成基本的项目创建。</p>\n<p>同时需要注意的一点是，在每个大的项目开始之前我们应该去找寻好开发环境。搭建环境是一件非常重要的事，它决定了你能不能更好地工作。毕竟环境是生产率的一部分。高效的程序员和低效程序员间的十倍差距，至少有三倍是因为环境差异。</p>\n<p>因此在这一章里，我们将讲述几件事情：</p>\n<ol>\n<li>使用怎样的操作系统</li>\n<li>如何去选择工具</li>\n<li>如何搭建相应操作系统上的环境</li>\n<li>如何去学习一门语言</li>\n</ol>\n","excerpt":"<p>在我们第一次开始写程序的时候，都是以 Hello World 开始的。或者：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"hello,world\"</span>);</span><br></pre></td></tr></table></figure>\n<p>又或许：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(<span class=\"string\">'hello,world'</span>);</span><br></pre></td></tr></table></figure>","more":"<p>过去的十几年里，试过用二十几种不同的语言，每个都是以 hello,world 作为开头。在一些特定的软件，如 Nginx，则是 <strong>It Works</strong>。</p>\n<p>这是一个很长的故事，这个程序最早出现于1972年，由贝尔实验室成员布莱恩·柯林汉撰写的内部技术文件《A Tutorial Introduction to the Language B》之中。不久，同作者于1974年所撰写的《Programming in C: A Tutorial》，也延用这个范例；而以本文件扩编改写的《C语言程序设计》也保留了这个范例程式。工作时，我们也会使用类似于 hello,world 的 boilerplate 来完成基本的项目创建。</p>\n<p>同时需要注意的一点是，在每个大的项目开始之前我们应该去找寻好开发环境。搭建环境是一件非常重要的事，它决定了你能不能更好地工作。毕竟环境是生产率的一部分。高效的程序员和低效程序员间的十倍差距，至少有三倍是因为环境差异。</p>\n<p>因此在这一章里，我们将讲述几件事情：</p>\n<ol>\n<li>使用怎样的操作系统</li>\n<li>如何去选择工具</li>\n<li>如何搭建相应操作系统上的环境</li>\n<li>如何去学习一门语言</li>\n</ol>"},{"title":"提高效率的工具","date":"2016-04-21T13:45:08.000Z","_content":"\n在提交效率的 N 种方法里：有一个很重要的方法是使用快捷键。熟练掌握快捷键可以让我们随着自己的感觉编写程序——有时候如果我们手感不好，是不是就说明今天不适合写代码！笑~~\n\n由于我们可能使用不同的操作系统来完成不同的工具。下面就先说说一些通用的、不限操作的工具：\n\n### 快速启动软件\n\n在我还不和道有这样的工具的时候，我都是把图标放在下面的任务栏里：\n\n![Windows任务栏](http://growth.phodal.com/assets/article/chapter1/windows-launch.png)\n\n<!-- more --> \n\n直到有一天，我知道有这样的工具。这里不得不提到一本书《卓有成效的程序员》，在书中提到了很多提高效率的工具。使用快捷键是其中的一个，而还有一个是使用快速启动软件。于是，我在 Windows 上使用了 Launcy:\n\n![Launchy](http://growth.phodal.com/assets/article/chapter1/launchy.png)\n\n通过这个软件，我们可以在电脑上通过输入软件名，然后运行相关的软件。我们不再需要点击某个菜单，再从菜单里选中某个软件打开。\n\n### IDE\n\n尽管在上一篇中，我们说过 IDE 和编辑器没有什么好争论的。但是如果是从头开始搭建环境的话，IDE 是最好的——编辑器还需要安装相应的插件。所以，这也就是为什么面试的时候会用编辑器的原因。\n\nIDE 的全称是集成开发环境，顾名思义即它集成了你需要用到的一些工具。而如果是编辑器的话，你需要自己去找寻合适的工具来做这件事。不过，这也意味着使用编辑器会有更多的自由度。如果你没有足够的时间去打造自己的开发环境就使用 IDE 吧。\n\n一般来说，他们都应该有下面的一些要素：\n\n - **shortcut（快捷键）**\n - **Code HighLight（代码高亮）**\n - **Auto Complete（自动补全）**\n - **Syntax Check（语法检查）**\n\n而如果是编辑器的话，就需要自己去找寻这些相应的插件。\n\nIDE 一般是针对特定语言才产生的，并且优化更好。而，编辑器则需要自己去搭配。这也意味着如果你需要在多个语言上工作时，并且喜欢折腾，你可以考虑使用编辑器。\n\n### DEBUG 工具\n\n不得不提及的是在有些 IDE 自带了 Debug 工具，这点可能使得使用 IDE 更有优势。在简单的项目是，我们可能不需要这样的 Debug 工具。因为我们对我们的代码库比较熟悉，一个简单的问题一眼就知道是哪里的问题。而对于那些复杂的项目来说，可能就没有那么简单了。特别是当你来到一个新的大中型项目，一个简单的逻辑在实现上可能要经过一系列的函数才能处理完。\n\n这时候我们就需要 Debug 工具——对于前端开发来说，我们可能使用 Chrome 的 Dev Tools。但是对于后端来说，我们就需要使用别的工具。如下图所示的是 Intellij Idea 的 Debug 界面：\n\n![Intellij Idea Debug](http://growth.phodal.com/assets/article/chapter1/idea-debug.png)\n\n在 Debug 的过程中，我们可以根据代码的执行流程一步步向下执行。这也意味着，当出现 Bug 的时候我们可以更容易找到 Bug。这就是为什么他叫 Debug 工具的原因了。\n\n### 终端或命令提示符\n\n在开始写代码的时候，使用 GUI 可能是难以戒掉的一个习惯。但是当你习惯了使用终端之后，或者说使用终端的工具，你会发现这是另外一片天空。对于 GUI 应用上同样的菜单来说，在终端上也会有同样的工具——只是你觉得记住更多的命令。而且不同的工具对于同一实现可能会不同的规范，而 GUI 应用则会有一致的风格。不过，总的来说使用终端是一个很有益的习惯——从速度、便捷性。忘了提到一点，当你使用 Linux 服务器的时候，你不得不使用终端。\n\n![Linux 终端截图](http://growth.phodal.com/assets/article/chapter1/linux-server-console.jpg)\n\n使用终端的优点在于我们可以摆脱鼠标的操作——这可以让我们更容易集中精力于完成任务。而这也是两种不同的选择，便捷还是更快。虽是如此，但是这也意味着学习 Linux 会越来越轻松。\n\n![Linux 与 Windows 的学习曲线](http://growth.phodal.com/assets/article/chapter1/linux-learn-line.png)\n\n虽然这是以 Linux 和 Windows 作了两个不同的对比，但是两个系统在终端工具上的差距是很大的。Linux 自身的哲学鼓励使用命令行来完成任务，这也意味着在 Linux 上会有更多的工具可以在命令行下使用。虽然 Windows 上也可以——如使用 CygWin 来完成，但是这看上去并不是那么让人满意！\n\n### 包管理\n\n虽然包管理不仅仅存在于操作系统中，还存在着语言的包管理工具。在操作系统中安装软件，最方便的东西莫过于包管理了。引自 OpenSUSE 官网的说明及图片:\n\n![包管理](http://growth.phodal.com/assets/article/chapter1/pm.png)\n\nLinux 发行版无非就是一堆软件包 (package) 形式的应用程序加上整体地管理这些应用程序的工具。通常这些 Linux 发行版，包括 OpenSUSE，都是由成千上万不同的软件包构成的。\n\n - 软件包: 软件包不止是一个文件，内含构成软件的所有文件，包括程序本身、共享库、开发包以及使用说明等。\n\n - 元数据 (metadata) 包含于软件包之中，包含软件正常运行所需要的一些信息。软件包安装之后，其元数据就存储于本地的软件包数据库之中，以用于软件包检索。\n\n - 依赖关系 (dependencies) 是软件包管理的一个重要方面。实际上每个软件包都会涉及到其他的软件包，软件包里程序的运行需要有一个可执行的环境（要求有其他的程序、库等），软件包依赖关系正是用来描述这种关系的。\n\n我们经常会使用各式各样的包管理工具，来加速我们地日常使用。而不是 Google 某个软件，然后下载，接着安装。\n","source":"_posts/1.1.0-tool.md","raw":"title: 提高效率的工具\ndate: 2016-4-21 21:45:08\ntags:\n---\n\n在提交效率的 N 种方法里：有一个很重要的方法是使用快捷键。熟练掌握快捷键可以让我们随着自己的感觉编写程序——有时候如果我们手感不好，是不是就说明今天不适合写代码！笑~~\n\n由于我们可能使用不同的操作系统来完成不同的工具。下面就先说说一些通用的、不限操作的工具：\n\n### 快速启动软件\n\n在我还不和道有这样的工具的时候，我都是把图标放在下面的任务栏里：\n\n![Windows任务栏](http://growth.phodal.com/assets/article/chapter1/windows-launch.png)\n\n<!-- more --> \n\n直到有一天，我知道有这样的工具。这里不得不提到一本书《卓有成效的程序员》，在书中提到了很多提高效率的工具。使用快捷键是其中的一个，而还有一个是使用快速启动软件。于是，我在 Windows 上使用了 Launcy:\n\n![Launchy](http://growth.phodal.com/assets/article/chapter1/launchy.png)\n\n通过这个软件，我们可以在电脑上通过输入软件名，然后运行相关的软件。我们不再需要点击某个菜单，再从菜单里选中某个软件打开。\n\n### IDE\n\n尽管在上一篇中，我们说过 IDE 和编辑器没有什么好争论的。但是如果是从头开始搭建环境的话，IDE 是最好的——编辑器还需要安装相应的插件。所以，这也就是为什么面试的时候会用编辑器的原因。\n\nIDE 的全称是集成开发环境，顾名思义即它集成了你需要用到的一些工具。而如果是编辑器的话，你需要自己去找寻合适的工具来做这件事。不过，这也意味着使用编辑器会有更多的自由度。如果你没有足够的时间去打造自己的开发环境就使用 IDE 吧。\n\n一般来说，他们都应该有下面的一些要素：\n\n - **shortcut（快捷键）**\n - **Code HighLight（代码高亮）**\n - **Auto Complete（自动补全）**\n - **Syntax Check（语法检查）**\n\n而如果是编辑器的话，就需要自己去找寻这些相应的插件。\n\nIDE 一般是针对特定语言才产生的，并且优化更好。而，编辑器则需要自己去搭配。这也意味着如果你需要在多个语言上工作时，并且喜欢折腾，你可以考虑使用编辑器。\n\n### DEBUG 工具\n\n不得不提及的是在有些 IDE 自带了 Debug 工具，这点可能使得使用 IDE 更有优势。在简单的项目是，我们可能不需要这样的 Debug 工具。因为我们对我们的代码库比较熟悉，一个简单的问题一眼就知道是哪里的问题。而对于那些复杂的项目来说，可能就没有那么简单了。特别是当你来到一个新的大中型项目，一个简单的逻辑在实现上可能要经过一系列的函数才能处理完。\n\n这时候我们就需要 Debug 工具——对于前端开发来说，我们可能使用 Chrome 的 Dev Tools。但是对于后端来说，我们就需要使用别的工具。如下图所示的是 Intellij Idea 的 Debug 界面：\n\n![Intellij Idea Debug](http://growth.phodal.com/assets/article/chapter1/idea-debug.png)\n\n在 Debug 的过程中，我们可以根据代码的执行流程一步步向下执行。这也意味着，当出现 Bug 的时候我们可以更容易找到 Bug。这就是为什么他叫 Debug 工具的原因了。\n\n### 终端或命令提示符\n\n在开始写代码的时候，使用 GUI 可能是难以戒掉的一个习惯。但是当你习惯了使用终端之后，或者说使用终端的工具，你会发现这是另外一片天空。对于 GUI 应用上同样的菜单来说，在终端上也会有同样的工具——只是你觉得记住更多的命令。而且不同的工具对于同一实现可能会不同的规范，而 GUI 应用则会有一致的风格。不过，总的来说使用终端是一个很有益的习惯——从速度、便捷性。忘了提到一点，当你使用 Linux 服务器的时候，你不得不使用终端。\n\n![Linux 终端截图](http://growth.phodal.com/assets/article/chapter1/linux-server-console.jpg)\n\n使用终端的优点在于我们可以摆脱鼠标的操作——这可以让我们更容易集中精力于完成任务。而这也是两种不同的选择，便捷还是更快。虽是如此，但是这也意味着学习 Linux 会越来越轻松。\n\n![Linux 与 Windows 的学习曲线](http://growth.phodal.com/assets/article/chapter1/linux-learn-line.png)\n\n虽然这是以 Linux 和 Windows 作了两个不同的对比，但是两个系统在终端工具上的差距是很大的。Linux 自身的哲学鼓励使用命令行来完成任务，这也意味着在 Linux 上会有更多的工具可以在命令行下使用。虽然 Windows 上也可以——如使用 CygWin 来完成，但是这看上去并不是那么让人满意！\n\n### 包管理\n\n虽然包管理不仅仅存在于操作系统中，还存在着语言的包管理工具。在操作系统中安装软件，最方便的东西莫过于包管理了。引自 OpenSUSE 官网的说明及图片:\n\n![包管理](http://growth.phodal.com/assets/article/chapter1/pm.png)\n\nLinux 发行版无非就是一堆软件包 (package) 形式的应用程序加上整体地管理这些应用程序的工具。通常这些 Linux 发行版，包括 OpenSUSE，都是由成千上万不同的软件包构成的。\n\n - 软件包: 软件包不止是一个文件，内含构成软件的所有文件，包括程序本身、共享库、开发包以及使用说明等。\n\n - 元数据 (metadata) 包含于软件包之中，包含软件正常运行所需要的一些信息。软件包安装之后，其元数据就存储于本地的软件包数据库之中，以用于软件包检索。\n\n - 依赖关系 (dependencies) 是软件包管理的一个重要方面。实际上每个软件包都会涉及到其他的软件包，软件包里程序的运行需要有一个可执行的环境（要求有其他的程序、库等），软件包依赖关系正是用来描述这种关系的。\n\n我们经常会使用各式各样的包管理工具，来加速我们地日常使用。而不是 Google 某个软件，然后下载，接着安装。\n","slug":"1.1.0-tool","published":1,"updated":"2016-04-21T14:01:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuf7mpcy0001tsiftn1cnl8k","content":"<p>在提交效率的 N 种方法里：有一个很重要的方法是使用快捷键。熟练掌握快捷键可以让我们随着自己的感觉编写程序——有时候如果我们手感不好，是不是就说明今天不适合写代码！笑~~</p>\n<p>由于我们可能使用不同的操作系统来完成不同的工具。下面就先说说一些通用的、不限操作的工具：</p>\n<h3 id=\"快速启动软件\"><a href=\"#快速启动软件\" class=\"headerlink\" title=\"快速启动软件\"></a>快速启动软件</h3><p>在我还不和道有这样的工具的时候，我都是把图标放在下面的任务栏里：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter1/windows-launch.png\" alt=\"Windows任务栏\"></p>\n<a id=\"more\"></a> \n<p>直到有一天，我知道有这样的工具。这里不得不提到一本书《卓有成效的程序员》，在书中提到了很多提高效率的工具。使用快捷键是其中的一个，而还有一个是使用快速启动软件。于是，我在 Windows 上使用了 Launcy:</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter1/launchy.png\" alt=\"Launchy\"></p>\n<p>通过这个软件，我们可以在电脑上通过输入软件名，然后运行相关的软件。我们不再需要点击某个菜单，再从菜单里选中某个软件打开。</p>\n<h3 id=\"IDE\"><a href=\"#IDE\" class=\"headerlink\" title=\"IDE\"></a>IDE</h3><p>尽管在上一篇中，我们说过 IDE 和编辑器没有什么好争论的。但是如果是从头开始搭建环境的话，IDE 是最好的——编辑器还需要安装相应的插件。所以，这也就是为什么面试的时候会用编辑器的原因。</p>\n<p>IDE 的全称是集成开发环境，顾名思义即它集成了你需要用到的一些工具。而如果是编辑器的话，你需要自己去找寻合适的工具来做这件事。不过，这也意味着使用编辑器会有更多的自由度。如果你没有足够的时间去打造自己的开发环境就使用 IDE 吧。</p>\n<p>一般来说，他们都应该有下面的一些要素：</p>\n<ul>\n<li><strong>shortcut（快捷键）</strong></li>\n<li><strong>Code HighLight（代码高亮）</strong></li>\n<li><strong>Auto Complete（自动补全）</strong></li>\n<li><strong>Syntax Check（语法检查）</strong></li>\n</ul>\n<p>而如果是编辑器的话，就需要自己去找寻这些相应的插件。</p>\n<p>IDE 一般是针对特定语言才产生的，并且优化更好。而，编辑器则需要自己去搭配。这也意味着如果你需要在多个语言上工作时，并且喜欢折腾，你可以考虑使用编辑器。</p>\n<h3 id=\"DEBUG-工具\"><a href=\"#DEBUG-工具\" class=\"headerlink\" title=\"DEBUG 工具\"></a>DEBUG 工具</h3><p>不得不提及的是在有些 IDE 自带了 Debug 工具，这点可能使得使用 IDE 更有优势。在简单的项目是，我们可能不需要这样的 Debug 工具。因为我们对我们的代码库比较熟悉，一个简单的问题一眼就知道是哪里的问题。而对于那些复杂的项目来说，可能就没有那么简单了。特别是当你来到一个新的大中型项目，一个简单的逻辑在实现上可能要经过一系列的函数才能处理完。</p>\n<p>这时候我们就需要 Debug 工具——对于前端开发来说，我们可能使用 Chrome 的 Dev Tools。但是对于后端来说，我们就需要使用别的工具。如下图所示的是 Intellij Idea 的 Debug 界面：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter1/idea-debug.png\" alt=\"Intellij Idea Debug\"></p>\n<p>在 Debug 的过程中，我们可以根据代码的执行流程一步步向下执行。这也意味着，当出现 Bug 的时候我们可以更容易找到 Bug。这就是为什么他叫 Debug 工具的原因了。</p>\n<h3 id=\"终端或命令提示符\"><a href=\"#终端或命令提示符\" class=\"headerlink\" title=\"终端或命令提示符\"></a>终端或命令提示符</h3><p>在开始写代码的时候，使用 GUI 可能是难以戒掉的一个习惯。但是当你习惯了使用终端之后，或者说使用终端的工具，你会发现这是另外一片天空。对于 GUI 应用上同样的菜单来说，在终端上也会有同样的工具——只是你觉得记住更多的命令。而且不同的工具对于同一实现可能会不同的规范，而 GUI 应用则会有一致的风格。不过，总的来说使用终端是一个很有益的习惯——从速度、便捷性。忘了提到一点，当你使用 Linux 服务器的时候，你不得不使用终端。</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter1/linux-server-console.jpg\" alt=\"Linux 终端截图\"></p>\n<p>使用终端的优点在于我们可以摆脱鼠标的操作——这可以让我们更容易集中精力于完成任务。而这也是两种不同的选择，便捷还是更快。虽是如此，但是这也意味着学习 Linux 会越来越轻松。</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter1/linux-learn-line.png\" alt=\"Linux 与 Windows 的学习曲线\"></p>\n<p>虽然这是以 Linux 和 Windows 作了两个不同的对比，但是两个系统在终端工具上的差距是很大的。Linux 自身的哲学鼓励使用命令行来完成任务，这也意味着在 Linux 上会有更多的工具可以在命令行下使用。虽然 Windows 上也可以——如使用 CygWin 来完成，但是这看上去并不是那么让人满意！</p>\n<h3 id=\"包管理\"><a href=\"#包管理\" class=\"headerlink\" title=\"包管理\"></a>包管理</h3><p>虽然包管理不仅仅存在于操作系统中，还存在着语言的包管理工具。在操作系统中安装软件，最方便的东西莫过于包管理了。引自 OpenSUSE 官网的说明及图片:</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter1/pm.png\" alt=\"包管理\"></p>\n<p>Linux 发行版无非就是一堆软件包 (package) 形式的应用程序加上整体地管理这些应用程序的工具。通常这些 Linux 发行版，包括 OpenSUSE，都是由成千上万不同的软件包构成的。</p>\n<ul>\n<li><p>软件包: 软件包不止是一个文件，内含构成软件的所有文件，包括程序本身、共享库、开发包以及使用说明等。</p>\n</li>\n<li><p>元数据 (metadata) 包含于软件包之中，包含软件正常运行所需要的一些信息。软件包安装之后，其元数据就存储于本地的软件包数据库之中，以用于软件包检索。</p>\n</li>\n<li><p>依赖关系 (dependencies) 是软件包管理的一个重要方面。实际上每个软件包都会涉及到其他的软件包，软件包里程序的运行需要有一个可执行的环境（要求有其他的程序、库等），软件包依赖关系正是用来描述这种关系的。</p>\n</li>\n</ul>\n<p>我们经常会使用各式各样的包管理工具，来加速我们地日常使用。而不是 Google 某个软件，然后下载，接着安装。</p>\n","excerpt":"<p>在提交效率的 N 种方法里：有一个很重要的方法是使用快捷键。熟练掌握快捷键可以让我们随着自己的感觉编写程序——有时候如果我们手感不好，是不是就说明今天不适合写代码！笑~~</p>\n<p>由于我们可能使用不同的操作系统来完成不同的工具。下面就先说说一些通用的、不限操作的工具：</p>\n<h3 id=\"快速启动软件\"><a href=\"#快速启动软件\" class=\"headerlink\" title=\"快速启动软件\"></a>快速启动软件</h3><p>在我还不和道有这样的工具的时候，我都是把图标放在下面的任务栏里：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter1/windows-launch.png\" alt=\"Windows任务栏\"></p>","more":"<p>直到有一天，我知道有这样的工具。这里不得不提到一本书《卓有成效的程序员》，在书中提到了很多提高效率的工具。使用快捷键是其中的一个，而还有一个是使用快速启动软件。于是，我在 Windows 上使用了 Launcy:</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter1/launchy.png\" alt=\"Launchy\"></p>\n<p>通过这个软件，我们可以在电脑上通过输入软件名，然后运行相关的软件。我们不再需要点击某个菜单，再从菜单里选中某个软件打开。</p>\n<h3 id=\"IDE\"><a href=\"#IDE\" class=\"headerlink\" title=\"IDE\"></a>IDE</h3><p>尽管在上一篇中，我们说过 IDE 和编辑器没有什么好争论的。但是如果是从头开始搭建环境的话，IDE 是最好的——编辑器还需要安装相应的插件。所以，这也就是为什么面试的时候会用编辑器的原因。</p>\n<p>IDE 的全称是集成开发环境，顾名思义即它集成了你需要用到的一些工具。而如果是编辑器的话，你需要自己去找寻合适的工具来做这件事。不过，这也意味着使用编辑器会有更多的自由度。如果你没有足够的时间去打造自己的开发环境就使用 IDE 吧。</p>\n<p>一般来说，他们都应该有下面的一些要素：</p>\n<ul>\n<li><strong>shortcut（快捷键）</strong></li>\n<li><strong>Code HighLight（代码高亮）</strong></li>\n<li><strong>Auto Complete（自动补全）</strong></li>\n<li><strong>Syntax Check（语法检查）</strong></li>\n</ul>\n<p>而如果是编辑器的话，就需要自己去找寻这些相应的插件。</p>\n<p>IDE 一般是针对特定语言才产生的，并且优化更好。而，编辑器则需要自己去搭配。这也意味着如果你需要在多个语言上工作时，并且喜欢折腾，你可以考虑使用编辑器。</p>\n<h3 id=\"DEBUG-工具\"><a href=\"#DEBUG-工具\" class=\"headerlink\" title=\"DEBUG 工具\"></a>DEBUG 工具</h3><p>不得不提及的是在有些 IDE 自带了 Debug 工具，这点可能使得使用 IDE 更有优势。在简单的项目是，我们可能不需要这样的 Debug 工具。因为我们对我们的代码库比较熟悉，一个简单的问题一眼就知道是哪里的问题。而对于那些复杂的项目来说，可能就没有那么简单了。特别是当你来到一个新的大中型项目，一个简单的逻辑在实现上可能要经过一系列的函数才能处理完。</p>\n<p>这时候我们就需要 Debug 工具——对于前端开发来说，我们可能使用 Chrome 的 Dev Tools。但是对于后端来说，我们就需要使用别的工具。如下图所示的是 Intellij Idea 的 Debug 界面：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter1/idea-debug.png\" alt=\"Intellij Idea Debug\"></p>\n<p>在 Debug 的过程中，我们可以根据代码的执行流程一步步向下执行。这也意味着，当出现 Bug 的时候我们可以更容易找到 Bug。这就是为什么他叫 Debug 工具的原因了。</p>\n<h3 id=\"终端或命令提示符\"><a href=\"#终端或命令提示符\" class=\"headerlink\" title=\"终端或命令提示符\"></a>终端或命令提示符</h3><p>在开始写代码的时候，使用 GUI 可能是难以戒掉的一个习惯。但是当你习惯了使用终端之后，或者说使用终端的工具，你会发现这是另外一片天空。对于 GUI 应用上同样的菜单来说，在终端上也会有同样的工具——只是你觉得记住更多的命令。而且不同的工具对于同一实现可能会不同的规范，而 GUI 应用则会有一致的风格。不过，总的来说使用终端是一个很有益的习惯——从速度、便捷性。忘了提到一点，当你使用 Linux 服务器的时候，你不得不使用终端。</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter1/linux-server-console.jpg\" alt=\"Linux 终端截图\"></p>\n<p>使用终端的优点在于我们可以摆脱鼠标的操作——这可以让我们更容易集中精力于完成任务。而这也是两种不同的选择，便捷还是更快。虽是如此，但是这也意味着学习 Linux 会越来越轻松。</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter1/linux-learn-line.png\" alt=\"Linux 与 Windows 的学习曲线\"></p>\n<p>虽然这是以 Linux 和 Windows 作了两个不同的对比，但是两个系统在终端工具上的差距是很大的。Linux 自身的哲学鼓励使用命令行来完成任务，这也意味着在 Linux 上会有更多的工具可以在命令行下使用。虽然 Windows 上也可以——如使用 CygWin 来完成，但是这看上去并不是那么让人满意！</p>\n<h3 id=\"包管理\"><a href=\"#包管理\" class=\"headerlink\" title=\"包管理\"></a>包管理</h3><p>虽然包管理不仅仅存在于操作系统中，还存在着语言的包管理工具。在操作系统中安装软件，最方便的东西莫过于包管理了。引自 OpenSUSE 官网的说明及图片:</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter1/pm.png\" alt=\"包管理\"></p>\n<p>Linux 发行版无非就是一堆软件包 (package) 形式的应用程序加上整体地管理这些应用程序的工具。通常这些 Linux 发行版，包括 OpenSUSE，都是由成千上万不同的软件包构成的。</p>\n<ul>\n<li><p>软件包: 软件包不止是一个文件，内含构成软件的所有文件，包括程序本身、共享库、开发包以及使用说明等。</p>\n</li>\n<li><p>元数据 (metadata) 包含于软件包之中，包含软件正常运行所需要的一些信息。软件包安装之后，其元数据就存储于本地的软件包数据库之中，以用于软件包检索。</p>\n</li>\n<li><p>依赖关系 (dependencies) 是软件包管理的一个重要方面。实际上每个软件包都会涉及到其他的软件包，软件包里程序的运行需要有一个可执行的环境（要求有其他的程序、库等），软件包依赖关系正是用来描述这种关系的。</p>\n</li>\n</ul>\n<p>我们经常会使用各式各样的包管理工具，来加速我们地日常使用。而不是 Google 某个软件，然后下载，接着安装。</p>"},{"title":"工具只是辅助","date":"2016-04-20T14:45:08.000Z","_content":"\n一个好的工具确实有助于编程，但是他只会给我们带来的是帮助。我们写出来的代码还是和我们的水平保持着一致的。\n\n什么是好的工具，这个说法就有很多了，但是有时候我们往往沉迷于事物的表面。有些时候 Vim 会比 Visual Studio 强大，当你只需要修改的是一个配置文件的时候，简单且足够快捷——在我们还未用 VS 打开的时候，我们已经用 Vim 做完这个活了。\n\n> “好的装备确实能带来一些帮助，但事实是，你的演奏水平是由你自己的手指决定的。” -- 《REWORK》\n\n### WebStorm 还是 Sublime?\n\n作为一个 IDE 有时候忽略的因素会过多，一开始的代码由类似于 Sublime text 之类的编辑器开始会比较合适。于是我们又开始陷入 IDE 及 Editor 之战了，无聊的时候讨论一下这些东西是有点益处的。相互了解一下各自的优点，也是不错的，偶尔可以换个环境试试。\n\n刚开始学习的时候，我们只需要普通的工具，或者我们习惯了的工具去开始我们的工作。我们要的是把主要精力放在学习的东西上，而不是工具。刚开始学习一种新的语言的时候，我们不需要去讨论哪个是最好的开发工具，如 Java，有时候可能是 Eclipse，有时候可能是 Vim，如果我们为的只是去写一个 hello,world。在 Eclipse 上浪费太多的时间是不可取的，因为他用起来的效率可不比你在键盘上敲打来得快，当你移动你的手指去动你的鼠标的时候，我想你可以用那短短的时间完成编译，运行了。\n\n<!-- more --> \n\n#### 工具是为了效率\n\n寻找工具的目的和寻找捷径是一样的，我们需要更快更有效率地完成我们的工作，换句话说，我们为了获取更多的时间用于其他的事情。而这个工具的用途是要看具体的事物的，如果我们去写一个小说、博客的时候，word 或者 web editor 会比 tex studio 来得快，不是么。我们用 TEX 来排版的时候会比我们用 WORD 排版的时候来得更快，所以这个工具是相对而论的。有时候用一个顺手的工具会好很多，但是不一定会是事半功倍的。我们应该将我们的目标专注于我们的内容，而不是我们的工具上。\n\n我们用 Windows 自带的画图就可以完成裁剪的时候，我们就没必要运行起 GIMP 或者 Photoshop 去完成这个简单的任务。效率在某些时候的重要性，会比你选择的工具有用得多，学习的开始就是要去了解那些大众推崇的东西。\n\n#### 了解、熟悉你的工具\n\nWindows 的功能很强大，只是大部分人用的是只是小小一部分。而不是一小部分，即使我们天天用着，我们也没有学习到什么新的东西。和这个就如同我们的工具一样，我们天天用着他们，如果我们只用 Word 来写写东西，那么我们可以用 Abiword 来替换他。但是明显不太可能，因为强大的工具对于我们来说有些更大的吸引力。\n\n如果你负担得起你手上的工具的话，那么就尽可能去了解他能干什么。即使他是一些无关仅要的功能，比如 Emacs 的煮咖啡。有一本手册是最好不过的，手册在手边可以即时查阅，不过出于环保的情况下，就不是这样子的。手册没有办法即时同你的软件一样更新，电子版的更新会比你手上用的那个手册更新得更快。\n\nLinux 下面的命令有一大堆，只是我们常用的只有一小部分——20%的命令能够完成80%的工作。如同 CISC 和 RISC 一样，我们所常用的指令会让我们忘却那些不常用的指令。而那些是最实用的，如同我们日常工作中使用的 Linux 一样，记忆过多的不实用的东西，不比把他们记在笔记上实在。我们只需要了解有那些功能，如何去用他。\n\n### 语言也是一种工具\n\n越来越多的框架和语言出现、更新得越来越快。特别是这样一个高速发展的产业，每天都在涌现新的名词。如同我们选择语言一样，选择合适的有时候会比选得顺手的来得重要。然而，这个可以不断地被推翻。\n\n当我们熟悉用 Python、Ruby、PHP 等去构建一个网站的时候，JavaScript 用来做网站后台，这怎么可能——于是 Node.js 火了。选择工具本身是一件很有趣的事，因为有着越来越多的可能性。\n\n过去 PHP 是主流的开发，不过现在也是，PHP 为 WEB 而生。有一天 Ruby on Rails 出现了，一切就变了，变得高效，变得更 Powerful。MVC 一直很不错，不是么？于是越来越多的框架出现了，如 Django，Laravel 等等。不同的语言有着不同的框架，JavaScript 上也有着合适的框架，如 AngularJS。不同语言的使用者们用着他们合适的工具，因为学习新的东西，对于多数的人来说就是一种新的挑战。在学面向对象语言的时候，人们很容易把程序写成过程式的。\n\n没有合适的工具，要么创造一个，要么选择一个合适的。\n\n#### 小结\n\n学习 Django 的时候习惯了有一个后台，于是开始使用 Laravel 的时候，寻找 Administartor。需要编译的时候习惯用 IDE，不需要的时候用 Editor，只是因为有效率，嵌入式的时候 IDE 会有效率一点。\n\n以前不知道 WebStorm 的时候，习惯用 DW 来格式化 HTML，Aptana 来格式化 JavaScript。\n\n以前，习惯用 WordPress 来写博客，因为可以有移动客户端，使用电脑时就不喜欢打开浏览器去写。\n\n等等\n\n等\n","source":"_posts/1.1.0-setup.md","raw":"title: 工具只是辅助\ndate: 2016-4-20 22:45:08\ntags:\n---\n\n一个好的工具确实有助于编程，但是他只会给我们带来的是帮助。我们写出来的代码还是和我们的水平保持着一致的。\n\n什么是好的工具，这个说法就有很多了，但是有时候我们往往沉迷于事物的表面。有些时候 Vim 会比 Visual Studio 强大，当你只需要修改的是一个配置文件的时候，简单且足够快捷——在我们还未用 VS 打开的时候，我们已经用 Vim 做完这个活了。\n\n> “好的装备确实能带来一些帮助，但事实是，你的演奏水平是由你自己的手指决定的。” -- 《REWORK》\n\n### WebStorm 还是 Sublime?\n\n作为一个 IDE 有时候忽略的因素会过多，一开始的代码由类似于 Sublime text 之类的编辑器开始会比较合适。于是我们又开始陷入 IDE 及 Editor 之战了，无聊的时候讨论一下这些东西是有点益处的。相互了解一下各自的优点，也是不错的，偶尔可以换个环境试试。\n\n刚开始学习的时候，我们只需要普通的工具，或者我们习惯了的工具去开始我们的工作。我们要的是把主要精力放在学习的东西上，而不是工具。刚开始学习一种新的语言的时候，我们不需要去讨论哪个是最好的开发工具，如 Java，有时候可能是 Eclipse，有时候可能是 Vim，如果我们为的只是去写一个 hello,world。在 Eclipse 上浪费太多的时间是不可取的，因为他用起来的效率可不比你在键盘上敲打来得快，当你移动你的手指去动你的鼠标的时候，我想你可以用那短短的时间完成编译，运行了。\n\n<!-- more --> \n\n#### 工具是为了效率\n\n寻找工具的目的和寻找捷径是一样的，我们需要更快更有效率地完成我们的工作，换句话说，我们为了获取更多的时间用于其他的事情。而这个工具的用途是要看具体的事物的，如果我们去写一个小说、博客的时候，word 或者 web editor 会比 tex studio 来得快，不是么。我们用 TEX 来排版的时候会比我们用 WORD 排版的时候来得更快，所以这个工具是相对而论的。有时候用一个顺手的工具会好很多，但是不一定会是事半功倍的。我们应该将我们的目标专注于我们的内容，而不是我们的工具上。\n\n我们用 Windows 自带的画图就可以完成裁剪的时候，我们就没必要运行起 GIMP 或者 Photoshop 去完成这个简单的任务。效率在某些时候的重要性，会比你选择的工具有用得多，学习的开始就是要去了解那些大众推崇的东西。\n\n#### 了解、熟悉你的工具\n\nWindows 的功能很强大，只是大部分人用的是只是小小一部分。而不是一小部分，即使我们天天用着，我们也没有学习到什么新的东西。和这个就如同我们的工具一样，我们天天用着他们，如果我们只用 Word 来写写东西，那么我们可以用 Abiword 来替换他。但是明显不太可能，因为强大的工具对于我们来说有些更大的吸引力。\n\n如果你负担得起你手上的工具的话，那么就尽可能去了解他能干什么。即使他是一些无关仅要的功能，比如 Emacs 的煮咖啡。有一本手册是最好不过的，手册在手边可以即时查阅，不过出于环保的情况下，就不是这样子的。手册没有办法即时同你的软件一样更新，电子版的更新会比你手上用的那个手册更新得更快。\n\nLinux 下面的命令有一大堆，只是我们常用的只有一小部分——20%的命令能够完成80%的工作。如同 CISC 和 RISC 一样，我们所常用的指令会让我们忘却那些不常用的指令。而那些是最实用的，如同我们日常工作中使用的 Linux 一样，记忆过多的不实用的东西，不比把他们记在笔记上实在。我们只需要了解有那些功能，如何去用他。\n\n### 语言也是一种工具\n\n越来越多的框架和语言出现、更新得越来越快。特别是这样一个高速发展的产业，每天都在涌现新的名词。如同我们选择语言一样，选择合适的有时候会比选得顺手的来得重要。然而，这个可以不断地被推翻。\n\n当我们熟悉用 Python、Ruby、PHP 等去构建一个网站的时候，JavaScript 用来做网站后台，这怎么可能——于是 Node.js 火了。选择工具本身是一件很有趣的事，因为有着越来越多的可能性。\n\n过去 PHP 是主流的开发，不过现在也是，PHP 为 WEB 而生。有一天 Ruby on Rails 出现了，一切就变了，变得高效，变得更 Powerful。MVC 一直很不错，不是么？于是越来越多的框架出现了，如 Django，Laravel 等等。不同的语言有着不同的框架，JavaScript 上也有着合适的框架，如 AngularJS。不同语言的使用者们用着他们合适的工具，因为学习新的东西，对于多数的人来说就是一种新的挑战。在学面向对象语言的时候，人们很容易把程序写成过程式的。\n\n没有合适的工具，要么创造一个，要么选择一个合适的。\n\n#### 小结\n\n学习 Django 的时候习惯了有一个后台，于是开始使用 Laravel 的时候，寻找 Administartor。需要编译的时候习惯用 IDE，不需要的时候用 Editor，只是因为有效率，嵌入式的时候 IDE 会有效率一点。\n\n以前不知道 WebStorm 的时候，习惯用 DW 来格式化 HTML，Aptana 来格式化 JavaScript。\n\n以前，习惯用 WordPress 来写博客，因为可以有移动客户端，使用电脑时就不喜欢打开浏览器去写。\n\n等等\n\n等\n","slug":"1.1.0-setup","published":1,"updated":"2016-04-21T14:26:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuf7mpd40002tsift1c6t64a","content":"<p>一个好的工具确实有助于编程，但是他只会给我们带来的是帮助。我们写出来的代码还是和我们的水平保持着一致的。</p>\n<p>什么是好的工具，这个说法就有很多了，但是有时候我们往往沉迷于事物的表面。有些时候 Vim 会比 Visual Studio 强大，当你只需要修改的是一个配置文件的时候，简单且足够快捷——在我们还未用 VS 打开的时候，我们已经用 Vim 做完这个活了。</p>\n<blockquote>\n<p>“好的装备确实能带来一些帮助，但事实是，你的演奏水平是由你自己的手指决定的。” – 《REWORK》</p>\n</blockquote>\n<h3 id=\"WebStorm-还是-Sublime\"><a href=\"#WebStorm-还是-Sublime\" class=\"headerlink\" title=\"WebStorm 还是 Sublime?\"></a>WebStorm 还是 Sublime?</h3><p>作为一个 IDE 有时候忽略的因素会过多，一开始的代码由类似于 Sublime text 之类的编辑器开始会比较合适。于是我们又开始陷入 IDE 及 Editor 之战了，无聊的时候讨论一下这些东西是有点益处的。相互了解一下各自的优点，也是不错的，偶尔可以换个环境试试。</p>\n<p>刚开始学习的时候，我们只需要普通的工具，或者我们习惯了的工具去开始我们的工作。我们要的是把主要精力放在学习的东西上，而不是工具。刚开始学习一种新的语言的时候，我们不需要去讨论哪个是最好的开发工具，如 Java，有时候可能是 Eclipse，有时候可能是 Vim，如果我们为的只是去写一个 hello,world。在 Eclipse 上浪费太多的时间是不可取的，因为他用起来的效率可不比你在键盘上敲打来得快，当你移动你的手指去动你的鼠标的时候，我想你可以用那短短的时间完成编译，运行了。</p>\n<a id=\"more\"></a> \n<h4 id=\"工具是为了效率\"><a href=\"#工具是为了效率\" class=\"headerlink\" title=\"工具是为了效率\"></a>工具是为了效率</h4><p>寻找工具的目的和寻找捷径是一样的，我们需要更快更有效率地完成我们的工作，换句话说，我们为了获取更多的时间用于其他的事情。而这个工具的用途是要看具体的事物的，如果我们去写一个小说、博客的时候，word 或者 web editor 会比 tex studio 来得快，不是么。我们用 TEX 来排版的时候会比我们用 WORD 排版的时候来得更快，所以这个工具是相对而论的。有时候用一个顺手的工具会好很多，但是不一定会是事半功倍的。我们应该将我们的目标专注于我们的内容，而不是我们的工具上。</p>\n<p>我们用 Windows 自带的画图就可以完成裁剪的时候，我们就没必要运行起 GIMP 或者 Photoshop 去完成这个简单的任务。效率在某些时候的重要性，会比你选择的工具有用得多，学习的开始就是要去了解那些大众推崇的东西。</p>\n<h4 id=\"了解、熟悉你的工具\"><a href=\"#了解、熟悉你的工具\" class=\"headerlink\" title=\"了解、熟悉你的工具\"></a>了解、熟悉你的工具</h4><p>Windows 的功能很强大，只是大部分人用的是只是小小一部分。而不是一小部分，即使我们天天用着，我们也没有学习到什么新的东西。和这个就如同我们的工具一样，我们天天用着他们，如果我们只用 Word 来写写东西，那么我们可以用 Abiword 来替换他。但是明显不太可能，因为强大的工具对于我们来说有些更大的吸引力。</p>\n<p>如果你负担得起你手上的工具的话，那么就尽可能去了解他能干什么。即使他是一些无关仅要的功能，比如 Emacs 的煮咖啡。有一本手册是最好不过的，手册在手边可以即时查阅，不过出于环保的情况下，就不是这样子的。手册没有办法即时同你的软件一样更新，电子版的更新会比你手上用的那个手册更新得更快。</p>\n<p>Linux 下面的命令有一大堆，只是我们常用的只有一小部分——20%的命令能够完成80%的工作。如同 CISC 和 RISC 一样，我们所常用的指令会让我们忘却那些不常用的指令。而那些是最实用的，如同我们日常工作中使用的 Linux 一样，记忆过多的不实用的东西，不比把他们记在笔记上实在。我们只需要了解有那些功能，如何去用他。</p>\n<h3 id=\"语言也是一种工具\"><a href=\"#语言也是一种工具\" class=\"headerlink\" title=\"语言也是一种工具\"></a>语言也是一种工具</h3><p>越来越多的框架和语言出现、更新得越来越快。特别是这样一个高速发展的产业，每天都在涌现新的名词。如同我们选择语言一样，选择合适的有时候会比选得顺手的来得重要。然而，这个可以不断地被推翻。</p>\n<p>当我们熟悉用 Python、Ruby、PHP 等去构建一个网站的时候，JavaScript 用来做网站后台，这怎么可能——于是 Node.js 火了。选择工具本身是一件很有趣的事，因为有着越来越多的可能性。</p>\n<p>过去 PHP 是主流的开发，不过现在也是，PHP 为 WEB 而生。有一天 Ruby on Rails 出现了，一切就变了，变得高效，变得更 Powerful。MVC 一直很不错，不是么？于是越来越多的框架出现了，如 Django，Laravel 等等。不同的语言有着不同的框架，JavaScript 上也有着合适的框架，如 AngularJS。不同语言的使用者们用着他们合适的工具，因为学习新的东西，对于多数的人来说就是一种新的挑战。在学面向对象语言的时候，人们很容易把程序写成过程式的。</p>\n<p>没有合适的工具，要么创造一个，要么选择一个合适的。</p>\n<h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4><p>学习 Django 的时候习惯了有一个后台，于是开始使用 Laravel 的时候，寻找 Administartor。需要编译的时候习惯用 IDE，不需要的时候用 Editor，只是因为有效率，嵌入式的时候 IDE 会有效率一点。</p>\n<p>以前不知道 WebStorm 的时候，习惯用 DW 来格式化 HTML，Aptana 来格式化 JavaScript。</p>\n<p>以前，习惯用 WordPress 来写博客，因为可以有移动客户端，使用电脑时就不喜欢打开浏览器去写。</p>\n<p>等等</p>\n<p>等</p>\n","excerpt":"<p>一个好的工具确实有助于编程，但是他只会给我们带来的是帮助。我们写出来的代码还是和我们的水平保持着一致的。</p>\n<p>什么是好的工具，这个说法就有很多了，但是有时候我们往往沉迷于事物的表面。有些时候 Vim 会比 Visual Studio 强大，当你只需要修改的是一个配置文件的时候，简单且足够快捷——在我们还未用 VS 打开的时候，我们已经用 Vim 做完这个活了。</p>\n<blockquote>\n<p>“好的装备确实能带来一些帮助，但事实是，你的演奏水平是由你自己的手指决定的。” – 《REWORK》</p>\n</blockquote>\n<h3 id=\"WebStorm-还是-Sublime\"><a href=\"#WebStorm-还是-Sublime\" class=\"headerlink\" title=\"WebStorm 还是 Sublime?\"></a>WebStorm 还是 Sublime?</h3><p>作为一个 IDE 有时候忽略的因素会过多，一开始的代码由类似于 Sublime text 之类的编辑器开始会比较合适。于是我们又开始陷入 IDE 及 Editor 之战了，无聊的时候讨论一下这些东西是有点益处的。相互了解一下各自的优点，也是不错的，偶尔可以换个环境试试。</p>\n<p>刚开始学习的时候，我们只需要普通的工具，或者我们习惯了的工具去开始我们的工作。我们要的是把主要精力放在学习的东西上，而不是工具。刚开始学习一种新的语言的时候，我们不需要去讨论哪个是最好的开发工具，如 Java，有时候可能是 Eclipse，有时候可能是 Vim，如果我们为的只是去写一个 hello,world。在 Eclipse 上浪费太多的时间是不可取的，因为他用起来的效率可不比你在键盘上敲打来得快，当你移动你的手指去动你的鼠标的时候，我想你可以用那短短的时间完成编译，运行了。</p>","more":"<h4 id=\"工具是为了效率\"><a href=\"#工具是为了效率\" class=\"headerlink\" title=\"工具是为了效率\"></a>工具是为了效率</h4><p>寻找工具的目的和寻找捷径是一样的，我们需要更快更有效率地完成我们的工作，换句话说，我们为了获取更多的时间用于其他的事情。而这个工具的用途是要看具体的事物的，如果我们去写一个小说、博客的时候，word 或者 web editor 会比 tex studio 来得快，不是么。我们用 TEX 来排版的时候会比我们用 WORD 排版的时候来得更快，所以这个工具是相对而论的。有时候用一个顺手的工具会好很多，但是不一定会是事半功倍的。我们应该将我们的目标专注于我们的内容，而不是我们的工具上。</p>\n<p>我们用 Windows 自带的画图就可以完成裁剪的时候，我们就没必要运行起 GIMP 或者 Photoshop 去完成这个简单的任务。效率在某些时候的重要性，会比你选择的工具有用得多，学习的开始就是要去了解那些大众推崇的东西。</p>\n<h4 id=\"了解、熟悉你的工具\"><a href=\"#了解、熟悉你的工具\" class=\"headerlink\" title=\"了解、熟悉你的工具\"></a>了解、熟悉你的工具</h4><p>Windows 的功能很强大，只是大部分人用的是只是小小一部分。而不是一小部分，即使我们天天用着，我们也没有学习到什么新的东西。和这个就如同我们的工具一样，我们天天用着他们，如果我们只用 Word 来写写东西，那么我们可以用 Abiword 来替换他。但是明显不太可能，因为强大的工具对于我们来说有些更大的吸引力。</p>\n<p>如果你负担得起你手上的工具的话，那么就尽可能去了解他能干什么。即使他是一些无关仅要的功能，比如 Emacs 的煮咖啡。有一本手册是最好不过的，手册在手边可以即时查阅，不过出于环保的情况下，就不是这样子的。手册没有办法即时同你的软件一样更新，电子版的更新会比你手上用的那个手册更新得更快。</p>\n<p>Linux 下面的命令有一大堆，只是我们常用的只有一小部分——20%的命令能够完成80%的工作。如同 CISC 和 RISC 一样，我们所常用的指令会让我们忘却那些不常用的指令。而那些是最实用的，如同我们日常工作中使用的 Linux 一样，记忆过多的不实用的东西，不比把他们记在笔记上实在。我们只需要了解有那些功能，如何去用他。</p>\n<h3 id=\"语言也是一种工具\"><a href=\"#语言也是一种工具\" class=\"headerlink\" title=\"语言也是一种工具\"></a>语言也是一种工具</h3><p>越来越多的框架和语言出现、更新得越来越快。特别是这样一个高速发展的产业，每天都在涌现新的名词。如同我们选择语言一样，选择合适的有时候会比选得顺手的来得重要。然而，这个可以不断地被推翻。</p>\n<p>当我们熟悉用 Python、Ruby、PHP 等去构建一个网站的时候，JavaScript 用来做网站后台，这怎么可能——于是 Node.js 火了。选择工具本身是一件很有趣的事，因为有着越来越多的可能性。</p>\n<p>过去 PHP 是主流的开发，不过现在也是，PHP 为 WEB 而生。有一天 Ruby on Rails 出现了，一切就变了，变得高效，变得更 Powerful。MVC 一直很不错，不是么？于是越来越多的框架出现了，如 Django，Laravel 等等。不同的语言有着不同的框架，JavaScript 上也有着合适的框架，如 AngularJS。不同语言的使用者们用着他们合适的工具，因为学习新的东西，对于多数的人来说就是一种新的挑战。在学面向对象语言的时候，人们很容易把程序写成过程式的。</p>\n<p>没有合适的工具，要么创造一个，要么选择一个合适的。</p>\n<h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4><p>学习 Django 的时候习惯了有一个后台，于是开始使用 Laravel 的时候，寻找 Administartor。需要编译的时候习惯用 IDE，不需要的时候用 Editor，只是因为有效率，嵌入式的时候 IDE 会有效率一点。</p>\n<p>以前不知道 WebStorm 的时候，习惯用 DW 来格式化 HTML，Aptana 来格式化 JavaScript。</p>\n<p>以前，习惯用 WordPress 来写博客，因为可以有移动客户端，使用电脑时就不喜欢打开浏览器去写。</p>\n<p>等等</p>\n<p>等</p>"},{"title":"环境搭建 - OS X","date":"2016-04-22T13:45:08.000Z","_content":"\n由于我近期工具在 Mac OS X 上，所以先以 Mac OS X 为例。\n\n### OS X\n\n**[Homebrew](http://brew.sh/)**\n\n> 包管理工具，官方称之为 The missing package manager for OS X。\n\n**[Homebrew Cask](https://caskroom.github.io/)**\n\n> brew-cask 允许你使用命令行安装 OS X 应用。\n\n**[iTerm2](https://www.iterm2.com/)**\n\n> iTerm2 是最常用的终端应用，是 Terminal 应用的替代品。\n\n<!-- more --> \n\n**[Zsh](http://www.zsh.org/)**\n\nZsh 是一款功能强大终端（shell）软件，既可以作为一个交互式终端，也可以作为一个脚本解释器。它在兼容 Bash 的同时 (默认不兼容，除非设置成 emulate sh) 还有提供了很多改进，例如：\n\n - 更高效\n - 更好的自动补全\n - 更好的文件名展开（通配符展开）\n - 更好的数组处理\n - 可定制性高\n\n**[Oh My Zsh](http://ohmyz.sh/)**\n\n> Oh My Zsh 同时提供一套插件和工具，可以简化命令行操作。\n\n**[Sublime Text 2](https://www.sublimetext.com/)**\n\n> 强大的文件编辑器。   \n\n**[MacDown](http://macdown.uranusjr.com/)**\n\n> MacDown 是 Markdown 编辑器。\n\n**[CheatSheet](https://www.mediaatelier.com/CheatSheet/)**\n\n> CheatSheet 能够显示当前程序的快捷键列表，默认的快捷键是长按⌘。\n\n**[SourceTree](https://www.sourcetreeapp.com/)**\n\n> SourceTree 是 Atlassian 公司出品的一款优秀的 Git 图形化客户端。\n\n**[Alfred](https://www.alfredapp.com/)**\n\n> Mac 用户不用鼠标键盘的必备神器，配合大量 Workflows，习惯之后可以大大减少操作时间。\n\n上手简单，调教成本在后期自定义 Workflows，不过有大量雷锋使用者提供的现成扩展，访问这里挑选喜欢的，并可以极其简单地根据自己的需要修改。\n\n**[Vimium](https://vimium.github.io/)**\n\n> Vimium 是一个 Google Chrome 扩展，让你可以纯键盘操作 Chrome。\n\n相关参考：\n\n - [Mac web developer apps](https://gist.github.com/erikreagan/3259442)\n - [强迫症的 Mac 设置指南](https://github.com/macdao/ocds-guide-to-setting-up-mac)\n","source":"_posts/1.1.1-env-osx.md","raw":"title: 环境搭建 - OS X\ndate: 2016-4-22 21:45:08\ntags:\n---\n\n由于我近期工具在 Mac OS X 上，所以先以 Mac OS X 为例。\n\n### OS X\n\n**[Homebrew](http://brew.sh/)**\n\n> 包管理工具，官方称之为 The missing package manager for OS X。\n\n**[Homebrew Cask](https://caskroom.github.io/)**\n\n> brew-cask 允许你使用命令行安装 OS X 应用。\n\n**[iTerm2](https://www.iterm2.com/)**\n\n> iTerm2 是最常用的终端应用，是 Terminal 应用的替代品。\n\n<!-- more --> \n\n**[Zsh](http://www.zsh.org/)**\n\nZsh 是一款功能强大终端（shell）软件，既可以作为一个交互式终端，也可以作为一个脚本解释器。它在兼容 Bash 的同时 (默认不兼容，除非设置成 emulate sh) 还有提供了很多改进，例如：\n\n - 更高效\n - 更好的自动补全\n - 更好的文件名展开（通配符展开）\n - 更好的数组处理\n - 可定制性高\n\n**[Oh My Zsh](http://ohmyz.sh/)**\n\n> Oh My Zsh 同时提供一套插件和工具，可以简化命令行操作。\n\n**[Sublime Text 2](https://www.sublimetext.com/)**\n\n> 强大的文件编辑器。   \n\n**[MacDown](http://macdown.uranusjr.com/)**\n\n> MacDown 是 Markdown 编辑器。\n\n**[CheatSheet](https://www.mediaatelier.com/CheatSheet/)**\n\n> CheatSheet 能够显示当前程序的快捷键列表，默认的快捷键是长按⌘。\n\n**[SourceTree](https://www.sourcetreeapp.com/)**\n\n> SourceTree 是 Atlassian 公司出品的一款优秀的 Git 图形化客户端。\n\n**[Alfred](https://www.alfredapp.com/)**\n\n> Mac 用户不用鼠标键盘的必备神器，配合大量 Workflows，习惯之后可以大大减少操作时间。\n\n上手简单，调教成本在后期自定义 Workflows，不过有大量雷锋使用者提供的现成扩展，访问这里挑选喜欢的，并可以极其简单地根据自己的需要修改。\n\n**[Vimium](https://vimium.github.io/)**\n\n> Vimium 是一个 Google Chrome 扩展，让你可以纯键盘操作 Chrome。\n\n相关参考：\n\n - [Mac web developer apps](https://gist.github.com/erikreagan/3259442)\n - [强迫症的 Mac 设置指南](https://github.com/macdao/ocds-guide-to-setting-up-mac)\n","slug":"1.1.1-env-osx","published":1,"updated":"2016-04-22T02:39:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuf7mpd70003tsiffh8nfv2f","content":"<p>由于我近期工具在 Mac OS X 上，所以先以 Mac OS X 为例。</p>\n<h3 id=\"OS-X\"><a href=\"#OS-X\" class=\"headerlink\" title=\"OS X\"></a>OS X</h3><p><strong><a href=\"http://brew.sh/\" target=\"_blank\" rel=\"external\">Homebrew</a></strong></p>\n<blockquote>\n<p>包管理工具，官方称之为 The missing package manager for OS X。</p>\n</blockquote>\n<p><strong><a href=\"https://caskroom.github.io/\" target=\"_blank\" rel=\"external\">Homebrew Cask</a></strong></p>\n<blockquote>\n<p>brew-cask 允许你使用命令行安装 OS X 应用。</p>\n</blockquote>\n<p><strong><a href=\"https://www.iterm2.com/\" target=\"_blank\" rel=\"external\">iTerm2</a></strong></p>\n<blockquote>\n<p>iTerm2 是最常用的终端应用，是 Terminal 应用的替代品。</p>\n</blockquote>\n<a id=\"more\"></a> \n<p><strong><a href=\"http://www.zsh.org/\" target=\"_blank\" rel=\"external\">Zsh</a></strong></p>\n<p>Zsh 是一款功能强大终端（shell）软件，既可以作为一个交互式终端，也可以作为一个脚本解释器。它在兼容 Bash 的同时 (默认不兼容，除非设置成 emulate sh) 还有提供了很多改进，例如：</p>\n<ul>\n<li>更高效</li>\n<li>更好的自动补全</li>\n<li>更好的文件名展开（通配符展开）</li>\n<li>更好的数组处理</li>\n<li>可定制性高</li>\n</ul>\n<p><strong><a href=\"http://ohmyz.sh/\" target=\"_blank\" rel=\"external\">Oh My Zsh</a></strong></p>\n<blockquote>\n<p>Oh My Zsh 同时提供一套插件和工具，可以简化命令行操作。</p>\n</blockquote>\n<p><strong><a href=\"https://www.sublimetext.com/\" target=\"_blank\" rel=\"external\">Sublime Text 2</a></strong></p>\n<blockquote>\n<p>强大的文件编辑器。   </p>\n</blockquote>\n<p><strong><a href=\"http://macdown.uranusjr.com/\" target=\"_blank\" rel=\"external\">MacDown</a></strong></p>\n<blockquote>\n<p>MacDown 是 Markdown 编辑器。</p>\n</blockquote>\n<p><strong><a href=\"https://www.mediaatelier.com/CheatSheet/\" target=\"_blank\" rel=\"external\">CheatSheet</a></strong></p>\n<blockquote>\n<p>CheatSheet 能够显示当前程序的快捷键列表，默认的快捷键是长按⌘。</p>\n</blockquote>\n<p><strong><a href=\"https://www.sourcetreeapp.com/\" target=\"_blank\" rel=\"external\">SourceTree</a></strong></p>\n<blockquote>\n<p>SourceTree 是 Atlassian 公司出品的一款优秀的 Git 图形化客户端。</p>\n</blockquote>\n<p><strong><a href=\"https://www.alfredapp.com/\" target=\"_blank\" rel=\"external\">Alfred</a></strong></p>\n<blockquote>\n<p>Mac 用户不用鼠标键盘的必备神器，配合大量 Workflows，习惯之后可以大大减少操作时间。</p>\n</blockquote>\n<p>上手简单，调教成本在后期自定义 Workflows，不过有大量雷锋使用者提供的现成扩展，访问这里挑选喜欢的，并可以极其简单地根据自己的需要修改。</p>\n<p><strong><a href=\"https://vimium.github.io/\" target=\"_blank\" rel=\"external\">Vimium</a></strong></p>\n<blockquote>\n<p>Vimium 是一个 Google Chrome 扩展，让你可以纯键盘操作 Chrome。</p>\n</blockquote>\n<p>相关参考：</p>\n<ul>\n<li><a href=\"https://gist.github.com/erikreagan/3259442\" target=\"_blank\" rel=\"external\">Mac web developer apps</a></li>\n<li><a href=\"https://github.com/macdao/ocds-guide-to-setting-up-mac\" target=\"_blank\" rel=\"external\">强迫症的 Mac 设置指南</a></li>\n</ul>\n","excerpt":"<p>由于我近期工具在 Mac OS X 上，所以先以 Mac OS X 为例。</p>\n<h3 id=\"OS-X\"><a href=\"#OS-X\" class=\"headerlink\" title=\"OS X\"></a>OS X</h3><p><strong><a href=\"http://brew.sh/\">Homebrew</a></strong></p>\n<blockquote>\n<p>包管理工具，官方称之为 The missing package manager for OS X。</p>\n</blockquote>\n<p><strong><a href=\"https://caskroom.github.io/\">Homebrew Cask</a></strong></p>\n<blockquote>\n<p>brew-cask 允许你使用命令行安装 OS X 应用。</p>\n</blockquote>\n<p><strong><a href=\"https://www.iterm2.com/\">iTerm2</a></strong></p>\n<blockquote>\n<p>iTerm2 是最常用的终端应用，是 Terminal 应用的替代品。</p>\n</blockquote>","more":"<p><strong><a href=\"http://www.zsh.org/\">Zsh</a></strong></p>\n<p>Zsh 是一款功能强大终端（shell）软件，既可以作为一个交互式终端，也可以作为一个脚本解释器。它在兼容 Bash 的同时 (默认不兼容，除非设置成 emulate sh) 还有提供了很多改进，例如：</p>\n<ul>\n<li>更高效</li>\n<li>更好的自动补全</li>\n<li>更好的文件名展开（通配符展开）</li>\n<li>更好的数组处理</li>\n<li>可定制性高</li>\n</ul>\n<p><strong><a href=\"http://ohmyz.sh/\">Oh My Zsh</a></strong></p>\n<blockquote>\n<p>Oh My Zsh 同时提供一套插件和工具，可以简化命令行操作。</p>\n</blockquote>\n<p><strong><a href=\"https://www.sublimetext.com/\">Sublime Text 2</a></strong></p>\n<blockquote>\n<p>强大的文件编辑器。   </p>\n</blockquote>\n<p><strong><a href=\"http://macdown.uranusjr.com/\">MacDown</a></strong></p>\n<blockquote>\n<p>MacDown 是 Markdown 编辑器。</p>\n</blockquote>\n<p><strong><a href=\"https://www.mediaatelier.com/CheatSheet/\">CheatSheet</a></strong></p>\n<blockquote>\n<p>CheatSheet 能够显示当前程序的快捷键列表，默认的快捷键是长按⌘。</p>\n</blockquote>\n<p><strong><a href=\"https://www.sourcetreeapp.com/\">SourceTree</a></strong></p>\n<blockquote>\n<p>SourceTree 是 Atlassian 公司出品的一款优秀的 Git 图形化客户端。</p>\n</blockquote>\n<p><strong><a href=\"https://www.alfredapp.com/\">Alfred</a></strong></p>\n<blockquote>\n<p>Mac 用户不用鼠标键盘的必备神器，配合大量 Workflows，习惯之后可以大大减少操作时间。</p>\n</blockquote>\n<p>上手简单，调教成本在后期自定义 Workflows，不过有大量雷锋使用者提供的现成扩展，访问这里挑选喜欢的，并可以极其简单地根据自己的需要修改。</p>\n<p><strong><a href=\"https://vimium.github.io/\">Vimium</a></strong></p>\n<blockquote>\n<p>Vimium 是一个 Google Chrome 扩展，让你可以纯键盘操作 Chrome。</p>\n</blockquote>\n<p>相关参考：</p>\n<ul>\n<li><a href=\"https://gist.github.com/erikreagan/3259442\">Mac web developer apps</a></li>\n<li><a href=\"https://github.com/macdao/ocds-guide-to-setting-up-mac\">强迫症的 Mac 设置指南</a></li>\n</ul>"},{"title":"环境搭建 - Linux","date":"2016-04-22T15:45:08.000Z","_content":"\n### GNU/Linux\n\n\n**[Zsh](http://www.zsh.org/)**\n\nZsh 是一款功能强大终端（shell）软件，既可以作为一个交互式终端，也可以作为一个脚本解释器。它在兼容 Bash 的同时 (默认不兼容，除非设置成 emulate sh) 还有提供了很多改进，例如：\n\n - 更高效\n - 更好的自动补全\n - 更好的文件名展开（通配符展开）\n - 更好的数组处理\n - 可定制性高\n\n<!-- more --> \n\n**[Oh My Zsh](http://ohmyz.sh/)**\n\n> Oh My Zsh 同时提供一套插件和工具，可以简化命令行操作。\n\n**[ReText](https://github.com/retext-project/retext)**\n\n> ReText 是一个使用 Markdown 语法和 reStructuredText (reST) 结构的文本编辑器，编辑的内容支持导出到 PDF、ODT 和 HTML 以及纯文本，支持即时预览、网页生成以及 HTML 语法高亮、全屏模式，可导出文件到 Google Docs 等。\n\n**[Launchy](http://www.launchy.net/)**\n\n> Launchy 是一款免费开源的协助您摒弃 Windows “运行”的 Dock 式替代工具，既方便又实用，自带多款皮肤，作为美化工具也未尝不可。\n","source":"_posts/1.1.3-env-linux.md","raw":"title: 环境搭建 - Linux\ndate: 2016-4-22 23:45:08\ntags:\n---\n\n### GNU/Linux\n\n\n**[Zsh](http://www.zsh.org/)**\n\nZsh 是一款功能强大终端（shell）软件，既可以作为一个交互式终端，也可以作为一个脚本解释器。它在兼容 Bash 的同时 (默认不兼容，除非设置成 emulate sh) 还有提供了很多改进，例如：\n\n - 更高效\n - 更好的自动补全\n - 更好的文件名展开（通配符展开）\n - 更好的数组处理\n - 可定制性高\n\n<!-- more --> \n\n**[Oh My Zsh](http://ohmyz.sh/)**\n\n> Oh My Zsh 同时提供一套插件和工具，可以简化命令行操作。\n\n**[ReText](https://github.com/retext-project/retext)**\n\n> ReText 是一个使用 Markdown 语法和 reStructuredText (reST) 结构的文本编辑器，编辑的内容支持导出到 PDF、ODT 和 HTML 以及纯文本，支持即时预览、网页生成以及 HTML 语法高亮、全屏模式，可导出文件到 Google Docs 等。\n\n**[Launchy](http://www.launchy.net/)**\n\n> Launchy 是一款免费开源的协助您摒弃 Windows “运行”的 Dock 式替代工具，既方便又实用，自带多款皮肤，作为美化工具也未尝不可。\n","slug":"1.1.3-env-linux","published":1,"updated":"2016-04-22T02:40:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuf7mpda0004tsifn44mg8c4","content":"<h3 id=\"GNU-Linux\"><a href=\"#GNU-Linux\" class=\"headerlink\" title=\"GNU/Linux\"></a>GNU/Linux</h3><p><strong><a href=\"http://www.zsh.org/\" target=\"_blank\" rel=\"external\">Zsh</a></strong></p>\n<p>Zsh 是一款功能强大终端（shell）软件，既可以作为一个交互式终端，也可以作为一个脚本解释器。它在兼容 Bash 的同时 (默认不兼容，除非设置成 emulate sh) 还有提供了很多改进，例如：</p>\n<ul>\n<li>更高效</li>\n<li>更好的自动补全</li>\n<li>更好的文件名展开（通配符展开）</li>\n<li>更好的数组处理</li>\n<li>可定制性高</li>\n</ul>\n<a id=\"more\"></a> \n<p><strong><a href=\"http://ohmyz.sh/\" target=\"_blank\" rel=\"external\">Oh My Zsh</a></strong></p>\n<blockquote>\n<p>Oh My Zsh 同时提供一套插件和工具，可以简化命令行操作。</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/retext-project/retext\" target=\"_blank\" rel=\"external\">ReText</a></strong></p>\n<blockquote>\n<p>ReText 是一个使用 Markdown 语法和 reStructuredText (reST) 结构的文本编辑器，编辑的内容支持导出到 PDF、ODT 和 HTML 以及纯文本，支持即时预览、网页生成以及 HTML 语法高亮、全屏模式，可导出文件到 Google Docs 等。</p>\n</blockquote>\n<p><strong><a href=\"http://www.launchy.net/\" target=\"_blank\" rel=\"external\">Launchy</a></strong></p>\n<blockquote>\n<p>Launchy 是一款免费开源的协助您摒弃 Windows “运行”的 Dock 式替代工具，既方便又实用，自带多款皮肤，作为美化工具也未尝不可。</p>\n</blockquote>\n","excerpt":"<h3 id=\"GNU-Linux\"><a href=\"#GNU-Linux\" class=\"headerlink\" title=\"GNU/Linux\"></a>GNU/Linux</h3><p><strong><a href=\"http://www.zsh.org/\">Zsh</a></strong></p>\n<p>Zsh 是一款功能强大终端（shell）软件，既可以作为一个交互式终端，也可以作为一个脚本解释器。它在兼容 Bash 的同时 (默认不兼容，除非设置成 emulate sh) 还有提供了很多改进，例如：</p>\n<ul>\n<li>更高效</li>\n<li>更好的自动补全</li>\n<li>更好的文件名展开（通配符展开）</li>\n<li>更好的数组处理</li>\n<li>可定制性高</li>\n</ul>","more":"<p><strong><a href=\"http://ohmyz.sh/\">Oh My Zsh</a></strong></p>\n<blockquote>\n<p>Oh My Zsh 同时提供一套插件和工具，可以简化命令行操作。</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/retext-project/retext\">ReText</a></strong></p>\n<blockquote>\n<p>ReText 是一个使用 Markdown 语法和 reStructuredText (reST) 结构的文本编辑器，编辑的内容支持导出到 PDF、ODT 和 HTML 以及纯文本，支持即时预览、网页生成以及 HTML 语法高亮、全屏模式，可导出文件到 Google Docs 等。</p>\n</blockquote>\n<p><strong><a href=\"http://www.launchy.net/\">Launchy</a></strong></p>\n<blockquote>\n<p>Launchy 是一款免费开源的协助您摒弃 Windows “运行”的 Dock 式替代工具，既方便又实用，自带多款皮肤，作为美化工具也未尝不可。</p>\n</blockquote>"},{"title":"环境搭建 - Windows","date":"2016-04-22T14:45:08.000Z","_content":"\n### Windows\n\n**[Chocolatey](https://chocolatey.org/)**\n\n> Chocolatey 是一个软件包管理工具，类似于 Ubuntu 下面的 apt-get,不过是运行在 Windows 环境下面。\n\n**[Wox](http://www.getwox.com/)**\n\n> Wox 是一个高效的快速启动器工具，通过快捷键呼出，然后输入关键字来搜索程序进行快速启动，或者搜索本地硬盘的文件，打开百度、Google 进行搜索，甚至是通过一些插件的功能实现单词翻译、关闭屏幕、查询剪贴板历史、查询编程文档、查询天气等更多功能。它最大的特点是可以支持中文拼音的模糊匹配。\n\n**[PowerShell](https://msdn.microsoft.com/en-us/powershell/mt173057.aspx)**\n\n> Windows PowerShell 是微软公司为 Windows 环境所开发的壳程序（shell）及脚本语言技术，采用的是命令行界面。这项全新的技术提供了丰富的控制与自动化的系统管理能力。\n\n<!-- more --> \n\n**[cmder](http://cmder.net/)**\n\n> cmder 把 conemu，msysgit 和 clink 打包在一起，让你无需配置就能使用一个真正干净的 Linux 终端！她甚至还附带了漂亮的 monokai 配色主题。\n\n**[Total Commander](http://www.ghisler.com/)**\n\n> Total Commander 是一款应用于 Windows 平台的文件管理器 ，它包含两个并排的窗口，这种设计可以让用户方便地对不同位置的“文件或文件夹”进行操作，例如复制、移动、删除、比较等，相对 Windows 资源管理器而言方便很多，极大地提高了文件操作的效率，被广大软件爱好者亲切地简称为：TC 。\n","source":"_posts/1.1.2-env-windows.md","raw":"title: 环境搭建 - Windows\ndate: 2016-4-22 22:45:08\ntags:\n---\n\n### Windows\n\n**[Chocolatey](https://chocolatey.org/)**\n\n> Chocolatey 是一个软件包管理工具，类似于 Ubuntu 下面的 apt-get,不过是运行在 Windows 环境下面。\n\n**[Wox](http://www.getwox.com/)**\n\n> Wox 是一个高效的快速启动器工具，通过快捷键呼出，然后输入关键字来搜索程序进行快速启动，或者搜索本地硬盘的文件，打开百度、Google 进行搜索，甚至是通过一些插件的功能实现单词翻译、关闭屏幕、查询剪贴板历史、查询编程文档、查询天气等更多功能。它最大的特点是可以支持中文拼音的模糊匹配。\n\n**[PowerShell](https://msdn.microsoft.com/en-us/powershell/mt173057.aspx)**\n\n> Windows PowerShell 是微软公司为 Windows 环境所开发的壳程序（shell）及脚本语言技术，采用的是命令行界面。这项全新的技术提供了丰富的控制与自动化的系统管理能力。\n\n<!-- more --> \n\n**[cmder](http://cmder.net/)**\n\n> cmder 把 conemu，msysgit 和 clink 打包在一起，让你无需配置就能使用一个真正干净的 Linux 终端！她甚至还附带了漂亮的 monokai 配色主题。\n\n**[Total Commander](http://www.ghisler.com/)**\n\n> Total Commander 是一款应用于 Windows 平台的文件管理器 ，它包含两个并排的窗口，这种设计可以让用户方便地对不同位置的“文件或文件夹”进行操作，例如复制、移动、删除、比较等，相对 Windows 资源管理器而言方便很多，极大地提高了文件操作的效率，被广大软件爱好者亲切地简称为：TC 。\n","slug":"1.1.2-env-windows","published":1,"updated":"2016-04-22T02:39:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuf7mpde0005tsifawz8886u","content":"<h3 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h3><p><strong><a href=\"https://chocolatey.org/\" target=\"_blank\" rel=\"external\">Chocolatey</a></strong></p>\n<blockquote>\n<p>Chocolatey 是一个软件包管理工具，类似于 Ubuntu 下面的 apt-get,不过是运行在 Windows 环境下面。</p>\n</blockquote>\n<p><strong><a href=\"http://www.getwox.com/\" target=\"_blank\" rel=\"external\">Wox</a></strong></p>\n<blockquote>\n<p>Wox 是一个高效的快速启动器工具，通过快捷键呼出，然后输入关键字来搜索程序进行快速启动，或者搜索本地硬盘的文件，打开百度、Google 进行搜索，甚至是通过一些插件的功能实现单词翻译、关闭屏幕、查询剪贴板历史、查询编程文档、查询天气等更多功能。它最大的特点是可以支持中文拼音的模糊匹配。</p>\n</blockquote>\n<p><strong><a href=\"https://msdn.microsoft.com/en-us/powershell/mt173057.aspx\" target=\"_blank\" rel=\"external\">PowerShell</a></strong></p>\n<blockquote>\n<p>Windows PowerShell 是微软公司为 Windows 环境所开发的壳程序（shell）及脚本语言技术，采用的是命令行界面。这项全新的技术提供了丰富的控制与自动化的系统管理能力。</p>\n</blockquote>\n<a id=\"more\"></a> \n<p><strong><a href=\"http://cmder.net/\" target=\"_blank\" rel=\"external\">cmder</a></strong></p>\n<blockquote>\n<p>cmder 把 conemu，msysgit 和 clink 打包在一起，让你无需配置就能使用一个真正干净的 Linux 终端！她甚至还附带了漂亮的 monokai 配色主题。</p>\n</blockquote>\n<p><strong><a href=\"http://www.ghisler.com/\" target=\"_blank\" rel=\"external\">Total Commander</a></strong></p>\n<blockquote>\n<p>Total Commander 是一款应用于 Windows 平台的文件管理器 ，它包含两个并排的窗口，这种设计可以让用户方便地对不同位置的“文件或文件夹”进行操作，例如复制、移动、删除、比较等，相对 Windows 资源管理器而言方便很多，极大地提高了文件操作的效率，被广大软件爱好者亲切地简称为：TC 。</p>\n</blockquote>\n","excerpt":"<h3 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h3><p><strong><a href=\"https://chocolatey.org/\">Chocolatey</a></strong></p>\n<blockquote>\n<p>Chocolatey 是一个软件包管理工具，类似于 Ubuntu 下面的 apt-get,不过是运行在 Windows 环境下面。</p>\n</blockquote>\n<p><strong><a href=\"http://www.getwox.com/\">Wox</a></strong></p>\n<blockquote>\n<p>Wox 是一个高效的快速启动器工具，通过快捷键呼出，然后输入关键字来搜索程序进行快速启动，或者搜索本地硬盘的文件，打开百度、Google 进行搜索，甚至是通过一些插件的功能实现单词翻译、关闭屏幕、查询剪贴板历史、查询编程文档、查询天气等更多功能。它最大的特点是可以支持中文拼音的模糊匹配。</p>\n</blockquote>\n<p><strong><a href=\"https://msdn.microsoft.com/en-us/powershell/mt173057.aspx\">PowerShell</a></strong></p>\n<blockquote>\n<p>Windows PowerShell 是微软公司为 Windows 环境所开发的壳程序（shell）及脚本语言技术，采用的是命令行界面。这项全新的技术提供了丰富的控制与自动化的系统管理能力。</p>\n</blockquote>","more":"<p><strong><a href=\"http://cmder.net/\">cmder</a></strong></p>\n<blockquote>\n<p>cmder 把 conemu，msysgit 和 clink 打包在一起，让你无需配置就能使用一个真正干净的 Linux 终端！她甚至还附带了漂亮的 monokai 配色主题。</p>\n</blockquote>\n<p><strong><a href=\"http://www.ghisler.com/\">Total Commander</a></strong></p>\n<blockquote>\n<p>Total Commander 是一款应用于 Windows 平台的文件管理器 ，它包含两个并排的窗口，这种设计可以让用户方便地对不同位置的“文件或文件夹”进行操作，例如复制、移动、删除、比较等，相对 Windows 资源管理器而言方便很多，极大地提高了文件操作的效率，被广大软件爱好者亲切地简称为：TC 。</p>\n</blockquote>"},{"title":"学好一门语言的艺术","date":"2016-04-23T13:45:08.000Z","_content":"\n环境搭建完毕！现在，就让我们来看看如何学好一门语言！\n\n学好一门语言的艺术\n---\n\n### 一次语言学习体验\n\n在我们开始学习一门语言或者技术的时候，我们可能会从一门 \"hello,world\" 开始。\n\n好了，现在我是 Scala 语言的初学者，接着我用搜索引擎去搜索『Scala』来看看『Scala』是什么鬼：\n\n<!-- more --> \n\n>  Scala 是一门类 Java 的编程语言，它结合了面向对象编程和函数式编程。\n\n接着又开始看『Scala 'hello,world'』，然后找到了这样的一个示例：\n\n```\nobject HelloWorld {\n  def main(args: Array[String]): Unit = {\n    println(\"Hello, world!\")\n  }\n}\n```\n\nGET 到了5%的知识。\n\n看上去这门语言相比于 Java 语言来说还行。然后我找到了一本名为『Scala 指南』的电子书，有这样的一本目录：\n\n - 表达式和值\n - 函数是一等公民\n - 借贷模式\n - 按名称传递参数\n - 定义类\n - 鸭子类型\n - 柯里化\n - 范型\n - Traits\n - ...\n\n看上去还行， 又 GET 到了5%的知识点。接着，依照上面的代码和搭建指南在自己的电脑上安装了 Scala 的环境：\n\n```bash\nbrew install scala\n```\n\nWindows 用户可以用:\n\n```\nchoco install scala\n```\n\n然后开始写一个又一个的 Demo，感觉自己 GET 到了很多特别的知识点。\n\n到了第二天忘了！\n\n![Bro Wrong](http://growth.phodal.com/assets/article/chapter1/wrong.jpg)\n\n接着，你又重新把昨天的知识过了一遍，还是没有多大的作用。突然间，你听到别人在讨论什么是**这个世界上最好的语言**——你开始加入讨论了。\n\n于是，你说出了 Scala 这门语言可以：\n\n - 支持高阶函数。lambda，闭包...\n - 支持偏函数。 match..\n - mixin，依赖注入..\n - 等等\n\n虽然隔壁的 Python 小哥赢得了这次辩论，然而你发现你又回想起了 Scala 的很多特性。\n\n![最流行的语言](http://growth.phodal.com/assets/article/chapter1/popular.jpg)\n\n你发现隔壁的 Python 小哥之所以赢得了这场辩论是因为他把 Python 语言用到了各个地方——机器学习、人工智能、硬件、Web开发、移动应用等。而你还没有用 Scala 写过一个真正的应用。\n\n让我想想我能做什么？我有一个博客。对，我有一个博客，可以用 Scala 把我的博客重写一遍：\n\n1. 先找一 Scala 的 Web 框架，Play 看上去很不错，就这个了。这是一个 MVC 框架，原来用的 Express 也是一个 MVC 框架。Router 写这里，Controller 类似这个，就是这样的。\n2. 既然已经有 PyJS，也会有 Scala-js，前端就用这个了。\n\n好了，博客重写了一遍了。\n\n感觉还挺不错的，我决定向隔壁的 Java 小弟推销这门语言，以解救他于火海之中。\n\n『让我想想我有什么杀手锏？』\n\n『这里的知识好像还缺了一点，这个是什么？』\n\n好了，你已经 GET 到了90%了。如下图所示：\n\n![Learn](http://growth.phodal.com/assets/article/chapter1/learn.jpg)\n\n希望你能从这张图上 GET 到很多点。\n\n### 输出是最好的输入\n\n上面那张图『学习金字塔』就是在说明——输出是最好的输入。\n\n如果你不试着去写点博客、整理资料、准备分享，那么你可能并没有意识到你缺少了多少东西。虽然你已经有了很多的实践，然并卵。\n\n因为你一直在完成功能、完成工作，你总会有意、无意地漏掉一些知识，而你也没有意识到这些知识的重要性。\n\n![Output is Input](http://growth.phodal.com/assets/article/chapter1/output-input.png)\n\n从我有限的（500+）博客写作经验里，我发现多数时候我需要更多地参考资料才能更好也向人们展示这个过程。为了输出我们需要更多的输入，进而加速这个过程。\n\n而如果是写书的时候则是一个更高水平的学习，你需要发现别人在他们的书中欠缺的一些知识点。并且你还要展示一些在别的书中没有，而这本书会展现这个点的知识，这意味着你需要挖掘得更深。\n\n所以，如果下次有人问你如何学一门新语言、技术，那么答案就是写一本书。\n\n### 如何应用一门新的技术\n\n对于多数人来说，写书不是一件容易的事，而应用新的技术则是一件迫在眉睫的事。\n\n通常来说，技术出自于对现有的技术的改进。这就意味着，在掌握现有技术的情况下，我们只需要做一些小小的改动就更可以实现技术升级。\n\n而学习一门新的技术的最好实践就是用这门技术对现有的系统行重写。\n\n第一个系统(v1)： ``Spring MVC`` + ``Bootstrap`` + ``jQuery``\n\n那么在那个合适的年代里， 我们需要单页面应用，就使用了Backbone。然后，我们就可以用 Mustache + HTML 来替换掉 JSP。\n\n第二个系统(v2)： ``Spring MVC`` +  ``Backbone`` + ``Mustache``\n\n在这时我们已经实现了前后端分离了，这时候系统实现上变成了这样。\n\n第二个系统(v2.2)： ``RESTful  Services`` +  ``Backbone`` + ``Mustache``\n\n或者\n\n第二个系统(v2.2)： ``RESTful Services`` +  ``AngularJS 1.x``\n\nSpring 只是一个 RESTful 服务，我们还需要一些问题，比如 DOM 的渲染速度太慢了。\n\n第三个系统(v3)： ``RESTful  Services`` + ``React``\n\n系统就是这样一步步演进过来的。\n\n尽管在最后系统的架构已经不是当初的架构，而系统本身的业务逻辑变化并没有发生太大的变化。\n\n特别是对于如博客这一类的系统来说，他的一些技术实现已经趋于稳定，而且是你经常使用的东西。所以，下次试试用新的技术的时候，可以先从对你的博客的重写开始。\n\n\n","source":"_posts/1.2-learn-language.md","raw":"title: 学好一门语言的艺术\ndate: 2016-4-23 21:45:08\ntags:\n---\n\n环境搭建完毕！现在，就让我们来看看如何学好一门语言！\n\n学好一门语言的艺术\n---\n\n### 一次语言学习体验\n\n在我们开始学习一门语言或者技术的时候，我们可能会从一门 \"hello,world\" 开始。\n\n好了，现在我是 Scala 语言的初学者，接着我用搜索引擎去搜索『Scala』来看看『Scala』是什么鬼：\n\n<!-- more --> \n\n>  Scala 是一门类 Java 的编程语言，它结合了面向对象编程和函数式编程。\n\n接着又开始看『Scala 'hello,world'』，然后找到了这样的一个示例：\n\n```\nobject HelloWorld {\n  def main(args: Array[String]): Unit = {\n    println(\"Hello, world!\")\n  }\n}\n```\n\nGET 到了5%的知识。\n\n看上去这门语言相比于 Java 语言来说还行。然后我找到了一本名为『Scala 指南』的电子书，有这样的一本目录：\n\n - 表达式和值\n - 函数是一等公民\n - 借贷模式\n - 按名称传递参数\n - 定义类\n - 鸭子类型\n - 柯里化\n - 范型\n - Traits\n - ...\n\n看上去还行， 又 GET 到了5%的知识点。接着，依照上面的代码和搭建指南在自己的电脑上安装了 Scala 的环境：\n\n```bash\nbrew install scala\n```\n\nWindows 用户可以用:\n\n```\nchoco install scala\n```\n\n然后开始写一个又一个的 Demo，感觉自己 GET 到了很多特别的知识点。\n\n到了第二天忘了！\n\n![Bro Wrong](http://growth.phodal.com/assets/article/chapter1/wrong.jpg)\n\n接着，你又重新把昨天的知识过了一遍，还是没有多大的作用。突然间，你听到别人在讨论什么是**这个世界上最好的语言**——你开始加入讨论了。\n\n于是，你说出了 Scala 这门语言可以：\n\n - 支持高阶函数。lambda，闭包...\n - 支持偏函数。 match..\n - mixin，依赖注入..\n - 等等\n\n虽然隔壁的 Python 小哥赢得了这次辩论，然而你发现你又回想起了 Scala 的很多特性。\n\n![最流行的语言](http://growth.phodal.com/assets/article/chapter1/popular.jpg)\n\n你发现隔壁的 Python 小哥之所以赢得了这场辩论是因为他把 Python 语言用到了各个地方——机器学习、人工智能、硬件、Web开发、移动应用等。而你还没有用 Scala 写过一个真正的应用。\n\n让我想想我能做什么？我有一个博客。对，我有一个博客，可以用 Scala 把我的博客重写一遍：\n\n1. 先找一 Scala 的 Web 框架，Play 看上去很不错，就这个了。这是一个 MVC 框架，原来用的 Express 也是一个 MVC 框架。Router 写这里，Controller 类似这个，就是这样的。\n2. 既然已经有 PyJS，也会有 Scala-js，前端就用这个了。\n\n好了，博客重写了一遍了。\n\n感觉还挺不错的，我决定向隔壁的 Java 小弟推销这门语言，以解救他于火海之中。\n\n『让我想想我有什么杀手锏？』\n\n『这里的知识好像还缺了一点，这个是什么？』\n\n好了，你已经 GET 到了90%了。如下图所示：\n\n![Learn](http://growth.phodal.com/assets/article/chapter1/learn.jpg)\n\n希望你能从这张图上 GET 到很多点。\n\n### 输出是最好的输入\n\n上面那张图『学习金字塔』就是在说明——输出是最好的输入。\n\n如果你不试着去写点博客、整理资料、准备分享，那么你可能并没有意识到你缺少了多少东西。虽然你已经有了很多的实践，然并卵。\n\n因为你一直在完成功能、完成工作，你总会有意、无意地漏掉一些知识，而你也没有意识到这些知识的重要性。\n\n![Output is Input](http://growth.phodal.com/assets/article/chapter1/output-input.png)\n\n从我有限的（500+）博客写作经验里，我发现多数时候我需要更多地参考资料才能更好也向人们展示这个过程。为了输出我们需要更多的输入，进而加速这个过程。\n\n而如果是写书的时候则是一个更高水平的学习，你需要发现别人在他们的书中欠缺的一些知识点。并且你还要展示一些在别的书中没有，而这本书会展现这个点的知识，这意味着你需要挖掘得更深。\n\n所以，如果下次有人问你如何学一门新语言、技术，那么答案就是写一本书。\n\n### 如何应用一门新的技术\n\n对于多数人来说，写书不是一件容易的事，而应用新的技术则是一件迫在眉睫的事。\n\n通常来说，技术出自于对现有的技术的改进。这就意味着，在掌握现有技术的情况下，我们只需要做一些小小的改动就更可以实现技术升级。\n\n而学习一门新的技术的最好实践就是用这门技术对现有的系统行重写。\n\n第一个系统(v1)： ``Spring MVC`` + ``Bootstrap`` + ``jQuery``\n\n那么在那个合适的年代里， 我们需要单页面应用，就使用了Backbone。然后，我们就可以用 Mustache + HTML 来替换掉 JSP。\n\n第二个系统(v2)： ``Spring MVC`` +  ``Backbone`` + ``Mustache``\n\n在这时我们已经实现了前后端分离了，这时候系统实现上变成了这样。\n\n第二个系统(v2.2)： ``RESTful  Services`` +  ``Backbone`` + ``Mustache``\n\n或者\n\n第二个系统(v2.2)： ``RESTful Services`` +  ``AngularJS 1.x``\n\nSpring 只是一个 RESTful 服务，我们还需要一些问题，比如 DOM 的渲染速度太慢了。\n\n第三个系统(v3)： ``RESTful  Services`` + ``React``\n\n系统就是这样一步步演进过来的。\n\n尽管在最后系统的架构已经不是当初的架构，而系统本身的业务逻辑变化并没有发生太大的变化。\n\n特别是对于如博客这一类的系统来说，他的一些技术实现已经趋于稳定，而且是你经常使用的东西。所以，下次试试用新的技术的时候，可以先从对你的博客的重写开始。\n\n\n","slug":"1.2-learn-language","published":1,"updated":"2016-04-23T06:48:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuf7mpdl0006tsifhtuoi2cn","content":"<p>环境搭建完毕！现在，就让我们来看看如何学好一门语言！</p>\n<h2 id=\"学好一门语言的艺术\"><a href=\"#学好一门语言的艺术\" class=\"headerlink\" title=\"学好一门语言的艺术\"></a>学好一门语言的艺术</h2><h3 id=\"一次语言学习体验\"><a href=\"#一次语言学习体验\" class=\"headerlink\" title=\"一次语言学习体验\"></a>一次语言学习体验</h3><p>在我们开始学习一门语言或者技术的时候，我们可能会从一门 “hello,world” 开始。</p>\n<p>好了，现在我是 Scala 语言的初学者，接着我用搜索引擎去搜索『Scala』来看看『Scala』是什么鬼：</p>\n<a id=\"more\"></a> \n<blockquote>\n<p> Scala 是一门类 Java 的编程语言，它结合了面向对象编程和函数式编程。</p>\n</blockquote>\n<p>接着又开始看『Scala ‘hello,world’』，然后找到了这样的一个示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">object HelloWorld &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">(args: Array[String])</span>:</span> Unit = &#123;</span><br><span class=\"line\">    println(<span class=\"string\">\"Hello, world!\"</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>GET 到了5%的知识。</p>\n<p>看上去这门语言相比于 Java 语言来说还行。然后我找到了一本名为『Scala 指南』的电子书，有这样的一本目录：</p>\n<ul>\n<li>表达式和值</li>\n<li>函数是一等公民</li>\n<li>借贷模式</li>\n<li>按名称传递参数</li>\n<li>定义类</li>\n<li>鸭子类型</li>\n<li>柯里化</li>\n<li>范型</li>\n<li>Traits</li>\n<li>…</li>\n</ul>\n<p>看上去还行， 又 GET 到了5%的知识点。接着，依照上面的代码和搭建指南在自己的电脑上安装了 Scala 的环境：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install scala</span><br></pre></td></tr></table></figure>\n<p>Windows 用户可以用:</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">choco <span class=\"keyword\">install</span> scala</span><br></pre></td></tr></table></figure>\n<p>然后开始写一个又一个的 Demo，感觉自己 GET 到了很多特别的知识点。</p>\n<p>到了第二天忘了！</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter1/wrong.jpg\" alt=\"Bro Wrong\"></p>\n<p>接着，你又重新把昨天的知识过了一遍，还是没有多大的作用。突然间，你听到别人在讨论什么是<strong>这个世界上最好的语言</strong>——你开始加入讨论了。</p>\n<p>于是，你说出了 Scala 这门语言可以：</p>\n<ul>\n<li>支持高阶函数。lambda，闭包…</li>\n<li>支持偏函数。 match..</li>\n<li>mixin，依赖注入..</li>\n<li>等等</li>\n</ul>\n<p>虽然隔壁的 Python 小哥赢得了这次辩论，然而你发现你又回想起了 Scala 的很多特性。</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter1/popular.jpg\" alt=\"最流行的语言\"></p>\n<p>你发现隔壁的 Python 小哥之所以赢得了这场辩论是因为他把 Python 语言用到了各个地方——机器学习、人工智能、硬件、Web开发、移动应用等。而你还没有用 Scala 写过一个真正的应用。</p>\n<p>让我想想我能做什么？我有一个博客。对，我有一个博客，可以用 Scala 把我的博客重写一遍：</p>\n<ol>\n<li>先找一 Scala 的 Web 框架，Play 看上去很不错，就这个了。这是一个 MVC 框架，原来用的 Express 也是一个 MVC 框架。Router 写这里，Controller 类似这个，就是这样的。</li>\n<li>既然已经有 PyJS，也会有 Scala-js，前端就用这个了。</li>\n</ol>\n<p>好了，博客重写了一遍了。</p>\n<p>感觉还挺不错的，我决定向隔壁的 Java 小弟推销这门语言，以解救他于火海之中。</p>\n<p>『让我想想我有什么杀手锏？』</p>\n<p>『这里的知识好像还缺了一点，这个是什么？』</p>\n<p>好了，你已经 GET 到了90%了。如下图所示：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter1/learn.jpg\" alt=\"Learn\"></p>\n<p>希望你能从这张图上 GET 到很多点。</p>\n<h3 id=\"输出是最好的输入\"><a href=\"#输出是最好的输入\" class=\"headerlink\" title=\"输出是最好的输入\"></a>输出是最好的输入</h3><p>上面那张图『学习金字塔』就是在说明——输出是最好的输入。</p>\n<p>如果你不试着去写点博客、整理资料、准备分享，那么你可能并没有意识到你缺少了多少东西。虽然你已经有了很多的实践，然并卵。</p>\n<p>因为你一直在完成功能、完成工作，你总会有意、无意地漏掉一些知识，而你也没有意识到这些知识的重要性。</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter1/output-input.png\" alt=\"Output is Input\"></p>\n<p>从我有限的（500+）博客写作经验里，我发现多数时候我需要更多地参考资料才能更好也向人们展示这个过程。为了输出我们需要更多的输入，进而加速这个过程。</p>\n<p>而如果是写书的时候则是一个更高水平的学习，你需要发现别人在他们的书中欠缺的一些知识点。并且你还要展示一些在别的书中没有，而这本书会展现这个点的知识，这意味着你需要挖掘得更深。</p>\n<p>所以，如果下次有人问你如何学一门新语言、技术，那么答案就是写一本书。</p>\n<h3 id=\"如何应用一门新的技术\"><a href=\"#如何应用一门新的技术\" class=\"headerlink\" title=\"如何应用一门新的技术\"></a>如何应用一门新的技术</h3><p>对于多数人来说，写书不是一件容易的事，而应用新的技术则是一件迫在眉睫的事。</p>\n<p>通常来说，技术出自于对现有的技术的改进。这就意味着，在掌握现有技术的情况下，我们只需要做一些小小的改动就更可以实现技术升级。</p>\n<p>而学习一门新的技术的最好实践就是用这门技术对现有的系统行重写。</p>\n<p>第一个系统(v1)： <code>Spring MVC</code> + <code>Bootstrap</code> + <code>jQuery</code></p>\n<p>那么在那个合适的年代里， 我们需要单页面应用，就使用了Backbone。然后，我们就可以用 Mustache + HTML 来替换掉 JSP。</p>\n<p>第二个系统(v2)： <code>Spring MVC</code> +  <code>Backbone</code> + <code>Mustache</code></p>\n<p>在这时我们已经实现了前后端分离了，这时候系统实现上变成了这样。</p>\n<p>第二个系统(v2.2)： <code>RESTful  Services</code> +  <code>Backbone</code> + <code>Mustache</code></p>\n<p>或者</p>\n<p>第二个系统(v2.2)： <code>RESTful Services</code> +  <code>AngularJS 1.x</code></p>\n<p>Spring 只是一个 RESTful 服务，我们还需要一些问题，比如 DOM 的渲染速度太慢了。</p>\n<p>第三个系统(v3)： <code>RESTful  Services</code> + <code>React</code></p>\n<p>系统就是这样一步步演进过来的。</p>\n<p>尽管在最后系统的架构已经不是当初的架构，而系统本身的业务逻辑变化并没有发生太大的变化。</p>\n<p>特别是对于如博客这一类的系统来说，他的一些技术实现已经趋于稳定，而且是你经常使用的东西。所以，下次试试用新的技术的时候，可以先从对你的博客的重写开始。</p>\n","excerpt":"<p>环境搭建完毕！现在，就让我们来看看如何学好一门语言！</p>\n<h2 id=\"学好一门语言的艺术\"><a href=\"#学好一门语言的艺术\" class=\"headerlink\" title=\"学好一门语言的艺术\"></a>学好一门语言的艺术</h2><h3 id=\"一次语言学习体验\"><a href=\"#一次语言学习体验\" class=\"headerlink\" title=\"一次语言学习体验\"></a>一次语言学习体验</h3><p>在我们开始学习一门语言或者技术的时候，我们可能会从一门 “hello,world” 开始。</p>\n<p>好了，现在我是 Scala 语言的初学者，接着我用搜索引擎去搜索『Scala』来看看『Scala』是什么鬼：</p>","more":"<blockquote>\n<p> Scala 是一门类 Java 的编程语言，它结合了面向对象编程和函数式编程。</p>\n</blockquote>\n<p>接着又开始看『Scala ‘hello,world’』，然后找到了这样的一个示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">object HelloWorld &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">(args: Array[String])</span>:</span> Unit = &#123;</span><br><span class=\"line\">    println(<span class=\"string\">\"Hello, world!\"</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>GET 到了5%的知识。</p>\n<p>看上去这门语言相比于 Java 语言来说还行。然后我找到了一本名为『Scala 指南』的电子书，有这样的一本目录：</p>\n<ul>\n<li>表达式和值</li>\n<li>函数是一等公民</li>\n<li>借贷模式</li>\n<li>按名称传递参数</li>\n<li>定义类</li>\n<li>鸭子类型</li>\n<li>柯里化</li>\n<li>范型</li>\n<li>Traits</li>\n<li>…</li>\n</ul>\n<p>看上去还行， 又 GET 到了5%的知识点。接着，依照上面的代码和搭建指南在自己的电脑上安装了 Scala 的环境：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install scala</span><br></pre></td></tr></table></figure>\n<p>Windows 用户可以用:</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">choco <span class=\"keyword\">install</span> scala</span><br></pre></td></tr></table></figure>\n<p>然后开始写一个又一个的 Demo，感觉自己 GET 到了很多特别的知识点。</p>\n<p>到了第二天忘了！</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter1/wrong.jpg\" alt=\"Bro Wrong\"></p>\n<p>接着，你又重新把昨天的知识过了一遍，还是没有多大的作用。突然间，你听到别人在讨论什么是<strong>这个世界上最好的语言</strong>——你开始加入讨论了。</p>\n<p>于是，你说出了 Scala 这门语言可以：</p>\n<ul>\n<li>支持高阶函数。lambda，闭包…</li>\n<li>支持偏函数。 match..</li>\n<li>mixin，依赖注入..</li>\n<li>等等</li>\n</ul>\n<p>虽然隔壁的 Python 小哥赢得了这次辩论，然而你发现你又回想起了 Scala 的很多特性。</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter1/popular.jpg\" alt=\"最流行的语言\"></p>\n<p>你发现隔壁的 Python 小哥之所以赢得了这场辩论是因为他把 Python 语言用到了各个地方——机器学习、人工智能、硬件、Web开发、移动应用等。而你还没有用 Scala 写过一个真正的应用。</p>\n<p>让我想想我能做什么？我有一个博客。对，我有一个博客，可以用 Scala 把我的博客重写一遍：</p>\n<ol>\n<li>先找一 Scala 的 Web 框架，Play 看上去很不错，就这个了。这是一个 MVC 框架，原来用的 Express 也是一个 MVC 框架。Router 写这里，Controller 类似这个，就是这样的。</li>\n<li>既然已经有 PyJS，也会有 Scala-js，前端就用这个了。</li>\n</ol>\n<p>好了，博客重写了一遍了。</p>\n<p>感觉还挺不错的，我决定向隔壁的 Java 小弟推销这门语言，以解救他于火海之中。</p>\n<p>『让我想想我有什么杀手锏？』</p>\n<p>『这里的知识好像还缺了一点，这个是什么？』</p>\n<p>好了，你已经 GET 到了90%了。如下图所示：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter1/learn.jpg\" alt=\"Learn\"></p>\n<p>希望你能从这张图上 GET 到很多点。</p>\n<h3 id=\"输出是最好的输入\"><a href=\"#输出是最好的输入\" class=\"headerlink\" title=\"输出是最好的输入\"></a>输出是最好的输入</h3><p>上面那张图『学习金字塔』就是在说明——输出是最好的输入。</p>\n<p>如果你不试着去写点博客、整理资料、准备分享，那么你可能并没有意识到你缺少了多少东西。虽然你已经有了很多的实践，然并卵。</p>\n<p>因为你一直在完成功能、完成工作，你总会有意、无意地漏掉一些知识，而你也没有意识到这些知识的重要性。</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter1/output-input.png\" alt=\"Output is Input\"></p>\n<p>从我有限的（500+）博客写作经验里，我发现多数时候我需要更多地参考资料才能更好也向人们展示这个过程。为了输出我们需要更多的输入，进而加速这个过程。</p>\n<p>而如果是写书的时候则是一个更高水平的学习，你需要发现别人在他们的书中欠缺的一些知识点。并且你还要展示一些在别的书中没有，而这本书会展现这个点的知识，这意味着你需要挖掘得更深。</p>\n<p>所以，如果下次有人问你如何学一门新语言、技术，那么答案就是写一本书。</p>\n<h3 id=\"如何应用一门新的技术\"><a href=\"#如何应用一门新的技术\" class=\"headerlink\" title=\"如何应用一门新的技术\"></a>如何应用一门新的技术</h3><p>对于多数人来说，写书不是一件容易的事，而应用新的技术则是一件迫在眉睫的事。</p>\n<p>通常来说，技术出自于对现有的技术的改进。这就意味着，在掌握现有技术的情况下，我们只需要做一些小小的改动就更可以实现技术升级。</p>\n<p>而学习一门新的技术的最好实践就是用这门技术对现有的系统行重写。</p>\n<p>第一个系统(v1)： <code>Spring MVC</code> + <code>Bootstrap</code> + <code>jQuery</code></p>\n<p>那么在那个合适的年代里， 我们需要单页面应用，就使用了Backbone。然后，我们就可以用 Mustache + HTML 来替换掉 JSP。</p>\n<p>第二个系统(v2)： <code>Spring MVC</code> +  <code>Backbone</code> + <code>Mustache</code></p>\n<p>在这时我们已经实现了前后端分离了，这时候系统实现上变成了这样。</p>\n<p>第二个系统(v2.2)： <code>RESTful  Services</code> +  <code>Backbone</code> + <code>Mustache</code></p>\n<p>或者</p>\n<p>第二个系统(v2.2)： <code>RESTful Services</code> +  <code>AngularJS 1.x</code></p>\n<p>Spring 只是一个 RESTful 服务，我们还需要一些问题，比如 DOM 的渲染速度太慢了。</p>\n<p>第三个系统(v3)： <code>RESTful  Services</code> + <code>React</code></p>\n<p>系统就是这样一步步演进过来的。</p>\n<p>尽管在最后系统的架构已经不是当初的架构，而系统本身的业务逻辑变化并没有发生太大的变化。</p>\n<p>特别是对于如博客这一类的系统来说，他的一些技术实现已经趋于稳定，而且是你经常使用的东西。所以，下次试试用新的技术的时候，可以先从对你的博客的重写开始。</p>"},{"title":"HTML","date":"2016-04-23T15:45:08.000Z","_content":"\n让我们先从身边的语言下手，也就是现在无处不在的 HTML+Javascript+CSS。\n\n之所以从 HTML 开始，是因为我们不需要配置一个复杂的开发环境，也许你还不知道开发环境是什么东西，不过这也没关系，毕竟这些知识需要慢慢的接触才能有所了解，尤其是对于普通的业余爱好者来说，当然，对于专业选手言自然不是问题。HTML 是 Web 的核心语言，也算是比较基础的语言。\n\n### hello,world\n\nhello,world 是一个传统，所以在这里也遵循这个有趣的传统，我们所要做的事情其实很简单，虽然也有一点点 hack 的感觉。——让我们先来新建一个文件并命名为\"helloworld.html\"。\n\n(PS:大部分人应该都是在 Windows 环境下工作的，所以你需要新建一个文本，然后重命名，或者你需要一个编辑器，在这里我们推荐用 **Sublime Text** 。破解不破解，注册不注册都不会对你的使用有太多的影响。)\n\n<!-- more --> \n\n1. 新建文件\n\n2. 输入 <pre><code class=\"html\">hello,world</code></pre>\n\n3. 保存为->\"helloworld.html\"，\n\n4. 双击打开这个文件。 正常情况下都应该是用你的默认浏览器打开。只要是一个正常工作的现代浏览器，都应该可以看到上面显示的是\"Hello,world\"。\n\n这才是最短的 hello,world 程序，但是呢？在 Ruby 中会是这样子的\n\n``` bash\n2.0.0-p353 :001 > p \"hello,world\"\n\"hello,world\"\n\t=> \"hello,world\"\n2.0.0-p353 :002 >\n```\n\n等等，如果你了解过 HTML 的话，会觉得这一点都不符合语法规则，但是他工作了，没有什么比安装完 Nginx 后看到 It works! 更让人激动了。\n\n遗憾的是，它可能无法在所有的浏览器上工作，所以我们需要去调试其中的 bug。\n\n#### 调试 hello,world\n\n我们会发现我们的代码在浏览器中变成了下面的代码，如果你和我一样用的是 Chrome，那么你可以右键浏览器中的空白区域，点击审查元素，就会看到下面的代码。\n\n``` html\n<html>\n\t<head></head>\n\t<body>hello,world</body>\n</html>\n```\n\n这个才是真正能在大部分浏览器上工作的代码，所以复制它到编辑器里吧。\n\n#### 说说 hello,world\n\n我很不喜欢其中的<\\*></*>，但是我也没有找到别的方法来代替它们，所以这是一个设计得当的语言。甚至大部分人都说这算不上是一门真正的语言，不过 HTML 的原义是\n\n> 超文本标记语言\n\n所以我们可以发现其中的关键词是标记——markup，也就是说 HTML 是一个 markup，head 是一个 markup，body 也是一个 markup。\n\n然而，我们真正工作的代码是在 body 里面，至于为什么是在这里面，这个问题就太复杂了。打个比方来说：\n\n1. 我们所使用的汉语是人类用智慧创造的，我们所正在学的这门语言同样也是人类创造的。\n\n2. 我们在自己的语言里遵循着 **桌子是桌子，凳子是凳子** 的原则，很少有人会问为什么。\n\n\n### 中文？\n\n所以我们也可以把计算机语言与现实世界里用于交流沟通的语言划上一个等号。而我们所要学习的语言，并不是我们最熟悉的汉语语言，所以我们便觉得这些很复杂，但是如果我们试着用汉语替换掉上面的代码的话\n```HTML\n<语言>\n\t<头><结束头>\n\t<身体>你好，世界<结束身体>\n<结束语言>\n```    \n这看上去很奇怪，只是因为是直译过去的原因，也许你会觉得这样会好理解一点，但是输入上可就一点儿也不方便，因为这键盘本身就不适合我们去输入汉字，同时也意味着可能你输入的会有问题。\n\n让我们把上面的代码代替掉原来的代码然后保存，打开浏览器会看到下面的结果\n```HTML\n<语言> <头><结束头> <身体>你好，世界<结束身体> <结束语言>\n```\n\n更不幸的结果可能是\n\n```HTML\n<璇█> <澶�><缁撴潫澶�> <韬綋>浣犲ソ锛屼笘鐣�<缁撴潫韬綋> <缁撴潫璇█>\n```\n\n这是一个编码问题，对中文支持不友好。\n\n我们把上面的代码改为和标记语言一样的结构\n\n```HTML\n<语言>\n\t<头></头>\n\t<身体>你好，世界</身体>\n<结束语言>\n```\n\n于是我们看到的结果便是\n\n```HTML\n<语言> <头> <身体>你好，世界\n```\n\n被 Chrome 浏览器解析成什么样了？\n\n``` html\n<html><head></head><body><语言>\n\t\t<头><!--头-->\n\t\t<身体>你好，世界<!--身体-->\n\t<!--语言-->\n</body></html>\t\t\n```\n\n以\n    <!--开头，-->\n\n结尾的是注释，写给人看的代码，不是给机器看的，所以机器不会去理解这些代码。\n\n但是当我们把代码改成\n\n```HTML\n<whatwewanttosay>你好世界</whatwewanttosay>\n```\n\n浏览器上面显示的内容就变成了\n\n```HTML\n你好世界\n```\n\n或许你会觉得很神奇，但是这一点儿也不神奇，虽然我们的中文语法也遵循着标记语言的标准，但是我们的浏览器不支持中文标记。\n\n结论:\n\n1. 浏览器对中文支持不友好。\n2. 浏览器对英文支持友好。\n\n刚开始的时候不要对中文编程有太多的想法，这是很不现实的:\n\n1. 现有的系统都是基于英语语言环境构建的，对中文支持不是很友好。\n2. 中文输入的速度在某种程度上来说没有英语快。\n\n我们离开话题已经很远了，但是这里说的都是针对于那些不满于英语的人来说的，只有当我们可以从头构建一个中文系统的时候才是可行的，而这些就要将 CPU、软件、硬件都包含在内，甚至我们还需要考虑重新设计 CPU 的结构，在某种程度上来说会有些不现实。或许，需要一代又一代人的努力。忘记那些吧，师夷之长技以制夷。\n\n### 其他 HTML 标记\n\n添加一个标题，\n\n```HTML\n<html>\n\t<head>\n\t\t<title>标题</title>\n\t</head>\n\t<body>hello,world</body>\n</html>\n```\n\n我们便可以在浏览器的最上方看到“标题”二字，就像我们常用的淘宝网，也包含了上面的东西，只是还包括了更多的东西，所以你也可以看懂那些我们可以看到的淘宝的标题。\n\n``` html\n<html>\n<head>\n\t<title>标题</title>\n</head>\n<body>\nhello,world\n<h1>大标题</h1>\n<h2>次标题</h2>\n<h3>...</h3>\n<ul>\n\t<li>列表1</li>\n\t<li>列表2</li>\n</ul>\n</body>\n</html>\n```\n\n更多的东西可以在一些书籍上看到，这边所要说的只是一次简单的语言入门，其他的东西都和这些类似。\n\n### 小结\n\n#### 美妙之处\n\n我们简单地上手了一门不算是语言的语言，浏览器简化了这其中的大部分过程，虽然没有 C 和其他语言来得有专业感，但是我们试着去开始写代码了。我们可能在未来的某一篇中可能会看到类似的语言，诸如 Python，我们所要做的就是\n\n```bash\n$ python file.py\n=>hello,world\n```\n\n然后在终端上返回结果。只是因为在我看来学会 HTML 是有意义的，简单的上手，然后再慢慢地深入，如果一开始我们就去理解指针，开始去理解类。我们甚至还知道程序是怎么编译运行的时候，在这个过程中又发生了什么。虽然现在我们也没能理解这其中发生了什么，但是至少展示了\n\n1. 中文编程语言在当前意义不大，不现实，效率不高兼容性差\n2. 语言的语法是固定的。（ps:虽然我们也可以进行扩充，我们将会在后来支持上述的中文标记。）\n3. 已经开始写代码，而不是还在配置开发环境。\n4. 随身的工具才是最好的，最常用的 code 也才是实在的。\n\n\n#### 更多\n\n我们还没有试着去解决“某商店里的糖一颗5块钱，小明买了3颗糖，小明一共花了多少钱”的问题。也就是说我们学会的是一个还不能解决实际问题的语言，于是我们还需要学点东西，比如 JavaScript, CSS。我们可以将 JavaScript 理解为解决问题的语言，HTML 则是前端显示，CSS 是配置文件，这样的话，我们会在那之后学会成为一个近乎专业的程序员。我们刚刚学习了一下怎么在前端显示那些代码的行为，于是我们还需要 JavaScript。\n","source":"_posts/1.4.0-html.md","raw":"title: HTML\ndate: 2016-4-23 23:45:08\ntags:\n---\n\n让我们先从身边的语言下手，也就是现在无处不在的 HTML+Javascript+CSS。\n\n之所以从 HTML 开始，是因为我们不需要配置一个复杂的开发环境，也许你还不知道开发环境是什么东西，不过这也没关系，毕竟这些知识需要慢慢的接触才能有所了解，尤其是对于普通的业余爱好者来说，当然，对于专业选手言自然不是问题。HTML 是 Web 的核心语言，也算是比较基础的语言。\n\n### hello,world\n\nhello,world 是一个传统，所以在这里也遵循这个有趣的传统，我们所要做的事情其实很简单，虽然也有一点点 hack 的感觉。——让我们先来新建一个文件并命名为\"helloworld.html\"。\n\n(PS:大部分人应该都是在 Windows 环境下工作的，所以你需要新建一个文本，然后重命名，或者你需要一个编辑器，在这里我们推荐用 **Sublime Text** 。破解不破解，注册不注册都不会对你的使用有太多的影响。)\n\n<!-- more --> \n\n1. 新建文件\n\n2. 输入 <pre><code class=\"html\">hello,world</code></pre>\n\n3. 保存为->\"helloworld.html\"，\n\n4. 双击打开这个文件。 正常情况下都应该是用你的默认浏览器打开。只要是一个正常工作的现代浏览器，都应该可以看到上面显示的是\"Hello,world\"。\n\n这才是最短的 hello,world 程序，但是呢？在 Ruby 中会是这样子的\n\n``` bash\n2.0.0-p353 :001 > p \"hello,world\"\n\"hello,world\"\n\t=> \"hello,world\"\n2.0.0-p353 :002 >\n```\n\n等等，如果你了解过 HTML 的话，会觉得这一点都不符合语法规则，但是他工作了，没有什么比安装完 Nginx 后看到 It works! 更让人激动了。\n\n遗憾的是，它可能无法在所有的浏览器上工作，所以我们需要去调试其中的 bug。\n\n#### 调试 hello,world\n\n我们会发现我们的代码在浏览器中变成了下面的代码，如果你和我一样用的是 Chrome，那么你可以右键浏览器中的空白区域，点击审查元素，就会看到下面的代码。\n\n``` html\n<html>\n\t<head></head>\n\t<body>hello,world</body>\n</html>\n```\n\n这个才是真正能在大部分浏览器上工作的代码，所以复制它到编辑器里吧。\n\n#### 说说 hello,world\n\n我很不喜欢其中的<\\*></*>，但是我也没有找到别的方法来代替它们，所以这是一个设计得当的语言。甚至大部分人都说这算不上是一门真正的语言，不过 HTML 的原义是\n\n> 超文本标记语言\n\n所以我们可以发现其中的关键词是标记——markup，也就是说 HTML 是一个 markup，head 是一个 markup，body 也是一个 markup。\n\n然而，我们真正工作的代码是在 body 里面，至于为什么是在这里面，这个问题就太复杂了。打个比方来说：\n\n1. 我们所使用的汉语是人类用智慧创造的，我们所正在学的这门语言同样也是人类创造的。\n\n2. 我们在自己的语言里遵循着 **桌子是桌子，凳子是凳子** 的原则，很少有人会问为什么。\n\n\n### 中文？\n\n所以我们也可以把计算机语言与现实世界里用于交流沟通的语言划上一个等号。而我们所要学习的语言，并不是我们最熟悉的汉语语言，所以我们便觉得这些很复杂，但是如果我们试着用汉语替换掉上面的代码的话\n```HTML\n<语言>\n\t<头><结束头>\n\t<身体>你好，世界<结束身体>\n<结束语言>\n```    \n这看上去很奇怪，只是因为是直译过去的原因，也许你会觉得这样会好理解一点，但是输入上可就一点儿也不方便，因为这键盘本身就不适合我们去输入汉字，同时也意味着可能你输入的会有问题。\n\n让我们把上面的代码代替掉原来的代码然后保存，打开浏览器会看到下面的结果\n```HTML\n<语言> <头><结束头> <身体>你好，世界<结束身体> <结束语言>\n```\n\n更不幸的结果可能是\n\n```HTML\n<璇█> <澶�><缁撴潫澶�> <韬綋>浣犲ソ锛屼笘鐣�<缁撴潫韬綋> <缁撴潫璇█>\n```\n\n这是一个编码问题，对中文支持不友好。\n\n我们把上面的代码改为和标记语言一样的结构\n\n```HTML\n<语言>\n\t<头></头>\n\t<身体>你好，世界</身体>\n<结束语言>\n```\n\n于是我们看到的结果便是\n\n```HTML\n<语言> <头> <身体>你好，世界\n```\n\n被 Chrome 浏览器解析成什么样了？\n\n``` html\n<html><head></head><body><语言>\n\t\t<头><!--头-->\n\t\t<身体>你好，世界<!--身体-->\n\t<!--语言-->\n</body></html>\t\t\n```\n\n以\n    <!--开头，-->\n\n结尾的是注释，写给人看的代码，不是给机器看的，所以机器不会去理解这些代码。\n\n但是当我们把代码改成\n\n```HTML\n<whatwewanttosay>你好世界</whatwewanttosay>\n```\n\n浏览器上面显示的内容就变成了\n\n```HTML\n你好世界\n```\n\n或许你会觉得很神奇，但是这一点儿也不神奇，虽然我们的中文语法也遵循着标记语言的标准，但是我们的浏览器不支持中文标记。\n\n结论:\n\n1. 浏览器对中文支持不友好。\n2. 浏览器对英文支持友好。\n\n刚开始的时候不要对中文编程有太多的想法，这是很不现实的:\n\n1. 现有的系统都是基于英语语言环境构建的，对中文支持不是很友好。\n2. 中文输入的速度在某种程度上来说没有英语快。\n\n我们离开话题已经很远了，但是这里说的都是针对于那些不满于英语的人来说的，只有当我们可以从头构建一个中文系统的时候才是可行的，而这些就要将 CPU、软件、硬件都包含在内，甚至我们还需要考虑重新设计 CPU 的结构，在某种程度上来说会有些不现实。或许，需要一代又一代人的努力。忘记那些吧，师夷之长技以制夷。\n\n### 其他 HTML 标记\n\n添加一个标题，\n\n```HTML\n<html>\n\t<head>\n\t\t<title>标题</title>\n\t</head>\n\t<body>hello,world</body>\n</html>\n```\n\n我们便可以在浏览器的最上方看到“标题”二字，就像我们常用的淘宝网，也包含了上面的东西，只是还包括了更多的东西，所以你也可以看懂那些我们可以看到的淘宝的标题。\n\n``` html\n<html>\n<head>\n\t<title>标题</title>\n</head>\n<body>\nhello,world\n<h1>大标题</h1>\n<h2>次标题</h2>\n<h3>...</h3>\n<ul>\n\t<li>列表1</li>\n\t<li>列表2</li>\n</ul>\n</body>\n</html>\n```\n\n更多的东西可以在一些书籍上看到，这边所要说的只是一次简单的语言入门，其他的东西都和这些类似。\n\n### 小结\n\n#### 美妙之处\n\n我们简单地上手了一门不算是语言的语言，浏览器简化了这其中的大部分过程，虽然没有 C 和其他语言来得有专业感，但是我们试着去开始写代码了。我们可能在未来的某一篇中可能会看到类似的语言，诸如 Python，我们所要做的就是\n\n```bash\n$ python file.py\n=>hello,world\n```\n\n然后在终端上返回结果。只是因为在我看来学会 HTML 是有意义的，简单的上手，然后再慢慢地深入，如果一开始我们就去理解指针，开始去理解类。我们甚至还知道程序是怎么编译运行的时候，在这个过程中又发生了什么。虽然现在我们也没能理解这其中发生了什么，但是至少展示了\n\n1. 中文编程语言在当前意义不大，不现实，效率不高兼容性差\n2. 语言的语法是固定的。（ps:虽然我们也可以进行扩充，我们将会在后来支持上述的中文标记。）\n3. 已经开始写代码，而不是还在配置开发环境。\n4. 随身的工具才是最好的，最常用的 code 也才是实在的。\n\n\n#### 更多\n\n我们还没有试着去解决“某商店里的糖一颗5块钱，小明买了3颗糖，小明一共花了多少钱”的问题。也就是说我们学会的是一个还不能解决实际问题的语言，于是我们还需要学点东西，比如 JavaScript, CSS。我们可以将 JavaScript 理解为解决问题的语言，HTML 则是前端显示，CSS 是配置文件，这样的话，我们会在那之后学会成为一个近乎专业的程序员。我们刚刚学习了一下怎么在前端显示那些代码的行为，于是我们还需要 JavaScript。\n","slug":"1.4.0-html","published":1,"updated":"2016-04-23T06:52:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuf7mpdr0007tsifllipverz","content":"<p>让我们先从身边的语言下手，也就是现在无处不在的 HTML+Javascript+CSS。</p>\n<p>之所以从 HTML 开始，是因为我们不需要配置一个复杂的开发环境，也许你还不知道开发环境是什么东西，不过这也没关系，毕竟这些知识需要慢慢的接触才能有所了解，尤其是对于普通的业余爱好者来说，当然，对于专业选手言自然不是问题。HTML 是 Web 的核心语言，也算是比较基础的语言。</p>\n<h3 id=\"hello-world\"><a href=\"#hello-world\" class=\"headerlink\" title=\"hello,world\"></a>hello,world</h3><p>hello,world 是一个传统，所以在这里也遵循这个有趣的传统，我们所要做的事情其实很简单，虽然也有一点点 hack 的感觉。——让我们先来新建一个文件并命名为”helloworld.html”。</p>\n<p>(PS:大部分人应该都是在 Windows 环境下工作的，所以你需要新建一个文本，然后重命名，或者你需要一个编辑器，在这里我们推荐用 <strong>Sublime Text</strong> 。破解不破解，注册不注册都不会对你的使用有太多的影响。)</p>\n<a id=\"more\"></a> \n<ol>\n<li><p>新建文件</p>\n</li>\n<li><p>输入 <pre><code class=\"html\">hello,world</code></pre></p>\n</li>\n<li><p>保存为-&gt;”helloworld.html”，</p>\n</li>\n<li><p>双击打开这个文件。 正常情况下都应该是用你的默认浏览器打开。只要是一个正常工作的现代浏览器，都应该可以看到上面显示的是”Hello,world”。</p>\n</li>\n</ol>\n<p>这才是最短的 hello,world 程序，但是呢？在 Ruby 中会是这样子的</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2.0.0-p353 :001 &gt; p <span class=\"string\">\"hello,world\"</span></span><br><span class=\"line\"><span class=\"string\">\"hello,world\"</span></span><br><span class=\"line\">\t=&gt; <span class=\"string\">\"hello,world\"</span></span><br><span class=\"line\">2.0.0-p353 :002 &gt;</span><br></pre></td></tr></table></figure>\n<p>等等，如果你了解过 HTML 的话，会觉得这一点都不符合语法规则，但是他工作了，没有什么比安装完 Nginx 后看到 It works! 更让人激动了。</p>\n<p>遗憾的是，它可能无法在所有的浏览器上工作，所以我们需要去调试其中的 bug。</p>\n<h4 id=\"调试-hello-world\"><a href=\"#调试-hello-world\" class=\"headerlink\" title=\"调试 hello,world\"></a>调试 hello,world</h4><p>我们会发现我们的代码在浏览器中变成了下面的代码，如果你和我一样用的是 Chrome，那么你可以右键浏览器中的空白区域，点击审查元素，就会看到下面的代码。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span>hello,world<span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这个才是真正能在大部分浏览器上工作的代码，所以复制它到编辑器里吧。</p>\n<h4 id=\"说说-hello-world\"><a href=\"#说说-hello-world\" class=\"headerlink\" title=\"说说 hello,world\"></a>说说 hello,world</h4><p>我很不喜欢其中的&lt;*&gt;&lt;/*&gt;，但是我也没有找到别的方法来代替它们，所以这是一个设计得当的语言。甚至大部分人都说这算不上是一门真正的语言，不过 HTML 的原义是</p>\n<blockquote>\n<p>超文本标记语言</p>\n</blockquote>\n<p>所以我们可以发现其中的关键词是标记——markup，也就是说 HTML 是一个 markup，head 是一个 markup，body 也是一个 markup。</p>\n<p>然而，我们真正工作的代码是在 body 里面，至于为什么是在这里面，这个问题就太复杂了。打个比方来说：</p>\n<ol>\n<li><p>我们所使用的汉语是人类用智慧创造的，我们所正在学的这门语言同样也是人类创造的。</p>\n</li>\n<li><p>我们在自己的语言里遵循着 <strong>桌子是桌子，凳子是凳子</strong> 的原则，很少有人会问为什么。</p>\n</li>\n</ol>\n<h3 id=\"中文？\"><a href=\"#中文？\" class=\"headerlink\" title=\"中文？\"></a>中文？</h3><p>所以我们也可以把计算机语言与现实世界里用于交流沟通的语言划上一个等号。而我们所要学习的语言，并不是我们最熟悉的汉语语言，所以我们便觉得这些很复杂，但是如果我们试着用汉语替换掉上面的代码的话<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">语言</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">头</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">结束头</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">身体</span>&gt;</span>你好，世界<span class=\"tag\">&lt;<span class=\"name\">结束身体</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">结束语言</span>&gt;</span></span><br><span class=\"line\">```    </span><br><span class=\"line\">这看上去很奇怪，只是因为是直译过去的原因，也许你会觉得这样会好理解一点，但是输入上可就一点儿也不方便，因为这键盘本身就不适合我们去输入汉字，同时也意味着可能你输入的会有问题。</span><br><span class=\"line\"></span><br><span class=\"line\">让我们把上面的代码代替掉原来的代码然后保存，打开浏览器会看到下面的结果</span><br><span class=\"line\">```HTML</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">语言</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">头</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">结束头</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">身体</span>&gt;</span>你好，世界<span class=\"tag\">&lt;<span class=\"name\">结束身体</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">结束语言</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>更不幸的结果可能是</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">璇█</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">澶�</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">缁撴潫澶�</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">韬綋</span>&gt;</span>浣犲ソ锛屼笘鐣�<span class=\"tag\">&lt;<span class=\"name\">缁撴潫韬綋</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">缁撴潫璇█</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这是一个编码问题，对中文支持不友好。</p>\n<p>我们把上面的代码改为和标记语言一样的结构</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">语言</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">头</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">头</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">身体</span>&gt;</span>你好，世界<span class=\"tag\">&lt;/<span class=\"name\">身体</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">结束语言</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>于是我们看到的结果便是</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">语言</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">头</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">身体</span>&gt;</span>你好，世界</span><br></pre></td></tr></table></figure>\n<p>被 Chrome 浏览器解析成什么样了？</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">语言</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">头</span>&gt;</span><span class=\"comment\">&lt;!--头--&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">身体</span>&gt;</span>你好，世界<span class=\"comment\">&lt;!--身体--&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!--语言--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>以<br>    <!--开头，--></p>\n<p>结尾的是注释，写给人看的代码，不是给机器看的，所以机器不会去理解这些代码。</p>\n<p>但是当我们把代码改成</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">whatwewanttosay</span>&gt;</span>你好世界<span class=\"tag\">&lt;/<span class=\"name\">whatwewanttosay</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>浏览器上面显示的内容就变成了</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">你好世界</span><br></pre></td></tr></table></figure>\n<p>或许你会觉得很神奇，但是这一点儿也不神奇，虽然我们的中文语法也遵循着标记语言的标准，但是我们的浏览器不支持中文标记。</p>\n<p>结论:</p>\n<ol>\n<li>浏览器对中文支持不友好。</li>\n<li>浏览器对英文支持友好。</li>\n</ol>\n<p>刚开始的时候不要对中文编程有太多的想法，这是很不现实的:</p>\n<ol>\n<li>现有的系统都是基于英语语言环境构建的，对中文支持不是很友好。</li>\n<li>中文输入的速度在某种程度上来说没有英语快。</li>\n</ol>\n<p>我们离开话题已经很远了，但是这里说的都是针对于那些不满于英语的人来说的，只有当我们可以从头构建一个中文系统的时候才是可行的，而这些就要将 CPU、软件、硬件都包含在内，甚至我们还需要考虑重新设计 CPU 的结构，在某种程度上来说会有些不现实。或许，需要一代又一代人的努力。忘记那些吧，师夷之长技以制夷。</p>\n<h3 id=\"其他-HTML-标记\"><a href=\"#其他-HTML-标记\" class=\"headerlink\" title=\"其他 HTML 标记\"></a>其他 HTML 标记</h3><p>添加一个标题，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>标题<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span>hello,world<span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>我们便可以在浏览器的最上方看到“标题”二字，就像我们常用的淘宝网，也包含了上面的东西，只是还包括了更多的东西，所以你也可以看懂那些我们可以看到的淘宝的标题。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>标题<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">hello,world</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>大标题<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>次标题<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>列表1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>列表2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>更多的东西可以在一些书籍上看到，这边所要说的只是一次简单的语言入门，其他的东西都和这些类似。</p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><h4 id=\"美妙之处\"><a href=\"#美妙之处\" class=\"headerlink\" title=\"美妙之处\"></a>美妙之处</h4><p>我们简单地上手了一门不算是语言的语言，浏览器简化了这其中的大部分过程，虽然没有 C 和其他语言来得有专业感，但是我们试着去开始写代码了。我们可能在未来的某一篇中可能会看到类似的语言，诸如 Python，我们所要做的就是</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python file.py</span><br><span class=\"line\">=&gt;hello,world</span><br></pre></td></tr></table></figure>\n<p>然后在终端上返回结果。只是因为在我看来学会 HTML 是有意义的，简单的上手，然后再慢慢地深入，如果一开始我们就去理解指针，开始去理解类。我们甚至还知道程序是怎么编译运行的时候，在这个过程中又发生了什么。虽然现在我们也没能理解这其中发生了什么，但是至少展示了</p>\n<ol>\n<li>中文编程语言在当前意义不大，不现实，效率不高兼容性差</li>\n<li>语言的语法是固定的。（ps:虽然我们也可以进行扩充，我们将会在后来支持上述的中文标记。）</li>\n<li>已经开始写代码，而不是还在配置开发环境。</li>\n<li>随身的工具才是最好的，最常用的 code 也才是实在的。</li>\n</ol>\n<h4 id=\"更多\"><a href=\"#更多\" class=\"headerlink\" title=\"更多\"></a>更多</h4><p>我们还没有试着去解决“某商店里的糖一颗5块钱，小明买了3颗糖，小明一共花了多少钱”的问题。也就是说我们学会的是一个还不能解决实际问题的语言，于是我们还需要学点东西，比如 JavaScript, CSS。我们可以将 JavaScript 理解为解决问题的语言，HTML 则是前端显示，CSS 是配置文件，这样的话，我们会在那之后学会成为一个近乎专业的程序员。我们刚刚学习了一下怎么在前端显示那些代码的行为，于是我们还需要 JavaScript。</p>\n","excerpt":"<p>让我们先从身边的语言下手，也就是现在无处不在的 HTML+Javascript+CSS。</p>\n<p>之所以从 HTML 开始，是因为我们不需要配置一个复杂的开发环境，也许你还不知道开发环境是什么东西，不过这也没关系，毕竟这些知识需要慢慢的接触才能有所了解，尤其是对于普通的业余爱好者来说，当然，对于专业选手言自然不是问题。HTML 是 Web 的核心语言，也算是比较基础的语言。</p>\n<h3 id=\"hello-world\"><a href=\"#hello-world\" class=\"headerlink\" title=\"hello,world\"></a>hello,world</h3><p>hello,world 是一个传统，所以在这里也遵循这个有趣的传统，我们所要做的事情其实很简单，虽然也有一点点 hack 的感觉。——让我们先来新建一个文件并命名为”helloworld.html”。</p>\n<p>(PS:大部分人应该都是在 Windows 环境下工作的，所以你需要新建一个文本，然后重命名，或者你需要一个编辑器，在这里我们推荐用 <strong>Sublime Text</strong> 。破解不破解，注册不注册都不会对你的使用有太多的影响。)</p>","more":"<ol>\n<li><p>新建文件</p>\n</li>\n<li><p>输入 <pre><code class=\"html\">hello,world</code></pre></p>\n</li>\n<li><p>保存为-&gt;”helloworld.html”，</p>\n</li>\n<li><p>双击打开这个文件。 正常情况下都应该是用你的默认浏览器打开。只要是一个正常工作的现代浏览器，都应该可以看到上面显示的是”Hello,world”。</p>\n</li>\n</ol>\n<p>这才是最短的 hello,world 程序，但是呢？在 Ruby 中会是这样子的</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2.0.0-p353 :001 &gt; p <span class=\"string\">\"hello,world\"</span></span><br><span class=\"line\"><span class=\"string\">\"hello,world\"</span></span><br><span class=\"line\">\t=&gt; <span class=\"string\">\"hello,world\"</span></span><br><span class=\"line\">2.0.0-p353 :002 &gt;</span><br></pre></td></tr></table></figure>\n<p>等等，如果你了解过 HTML 的话，会觉得这一点都不符合语法规则，但是他工作了，没有什么比安装完 Nginx 后看到 It works! 更让人激动了。</p>\n<p>遗憾的是，它可能无法在所有的浏览器上工作，所以我们需要去调试其中的 bug。</p>\n<h4 id=\"调试-hello-world\"><a href=\"#调试-hello-world\" class=\"headerlink\" title=\"调试 hello,world\"></a>调试 hello,world</h4><p>我们会发现我们的代码在浏览器中变成了下面的代码，如果你和我一样用的是 Chrome，那么你可以右键浏览器中的空白区域，点击审查元素，就会看到下面的代码。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span>hello,world<span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这个才是真正能在大部分浏览器上工作的代码，所以复制它到编辑器里吧。</p>\n<h4 id=\"说说-hello-world\"><a href=\"#说说-hello-world\" class=\"headerlink\" title=\"说说 hello,world\"></a>说说 hello,world</h4><p>我很不喜欢其中的&lt;*&gt;&lt;/*&gt;，但是我也没有找到别的方法来代替它们，所以这是一个设计得当的语言。甚至大部分人都说这算不上是一门真正的语言，不过 HTML 的原义是</p>\n<blockquote>\n<p>超文本标记语言</p>\n</blockquote>\n<p>所以我们可以发现其中的关键词是标记——markup，也就是说 HTML 是一个 markup，head 是一个 markup，body 也是一个 markup。</p>\n<p>然而，我们真正工作的代码是在 body 里面，至于为什么是在这里面，这个问题就太复杂了。打个比方来说：</p>\n<ol>\n<li><p>我们所使用的汉语是人类用智慧创造的，我们所正在学的这门语言同样也是人类创造的。</p>\n</li>\n<li><p>我们在自己的语言里遵循着 <strong>桌子是桌子，凳子是凳子</strong> 的原则，很少有人会问为什么。</p>\n</li>\n</ol>\n<h3 id=\"中文？\"><a href=\"#中文？\" class=\"headerlink\" title=\"中文？\"></a>中文？</h3><p>所以我们也可以把计算机语言与现实世界里用于交流沟通的语言划上一个等号。而我们所要学习的语言，并不是我们最熟悉的汉语语言，所以我们便觉得这些很复杂，但是如果我们试着用汉语替换掉上面的代码的话<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">语言</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">头</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">结束头</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">身体</span>&gt;</span>你好，世界<span class=\"tag\">&lt;<span class=\"name\">结束身体</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">结束语言</span>&gt;</span></span><br><span class=\"line\">```    </span><br><span class=\"line\">这看上去很奇怪，只是因为是直译过去的原因，也许你会觉得这样会好理解一点，但是输入上可就一点儿也不方便，因为这键盘本身就不适合我们去输入汉字，同时也意味着可能你输入的会有问题。</span><br><span class=\"line\"></span><br><span class=\"line\">让我们把上面的代码代替掉原来的代码然后保存，打开浏览器会看到下面的结果</span><br><span class=\"line\">```HTML</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">语言</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">头</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">结束头</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">身体</span>&gt;</span>你好，世界<span class=\"tag\">&lt;<span class=\"name\">结束身体</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">结束语言</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>更不幸的结果可能是</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">璇█</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">澶�</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">缁撴潫澶�</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">韬綋</span>&gt;</span>浣犲ソ锛屼笘鐣�<span class=\"tag\">&lt;<span class=\"name\">缁撴潫韬綋</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">缁撴潫璇█</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这是一个编码问题，对中文支持不友好。</p>\n<p>我们把上面的代码改为和标记语言一样的结构</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">语言</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">头</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">头</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">身体</span>&gt;</span>你好，世界<span class=\"tag\">&lt;/<span class=\"name\">身体</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">结束语言</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>于是我们看到的结果便是</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">语言</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">头</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">身体</span>&gt;</span>你好，世界</span><br></pre></td></tr></table></figure>\n<p>被 Chrome 浏览器解析成什么样了？</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">语言</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">头</span>&gt;</span><span class=\"comment\">&lt;!--头--&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">身体</span>&gt;</span>你好，世界<span class=\"comment\">&lt;!--身体--&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!--语言--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>以<br>    <!--开头，--></p>\n<p>结尾的是注释，写给人看的代码，不是给机器看的，所以机器不会去理解这些代码。</p>\n<p>但是当我们把代码改成</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">whatwewanttosay</span>&gt;</span>你好世界<span class=\"tag\">&lt;/<span class=\"name\">whatwewanttosay</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>浏览器上面显示的内容就变成了</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">你好世界</span><br></pre></td></tr></table></figure>\n<p>或许你会觉得很神奇，但是这一点儿也不神奇，虽然我们的中文语法也遵循着标记语言的标准，但是我们的浏览器不支持中文标记。</p>\n<p>结论:</p>\n<ol>\n<li>浏览器对中文支持不友好。</li>\n<li>浏览器对英文支持友好。</li>\n</ol>\n<p>刚开始的时候不要对中文编程有太多的想法，这是很不现实的:</p>\n<ol>\n<li>现有的系统都是基于英语语言环境构建的，对中文支持不是很友好。</li>\n<li>中文输入的速度在某种程度上来说没有英语快。</li>\n</ol>\n<p>我们离开话题已经很远了，但是这里说的都是针对于那些不满于英语的人来说的，只有当我们可以从头构建一个中文系统的时候才是可行的，而这些就要将 CPU、软件、硬件都包含在内，甚至我们还需要考虑重新设计 CPU 的结构，在某种程度上来说会有些不现实。或许，需要一代又一代人的努力。忘记那些吧，师夷之长技以制夷。</p>\n<h3 id=\"其他-HTML-标记\"><a href=\"#其他-HTML-标记\" class=\"headerlink\" title=\"其他 HTML 标记\"></a>其他 HTML 标记</h3><p>添加一个标题，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>标题<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span>hello,world<span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>我们便可以在浏览器的最上方看到“标题”二字，就像我们常用的淘宝网，也包含了上面的东西，只是还包括了更多的东西，所以你也可以看懂那些我们可以看到的淘宝的标题。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>标题<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">hello,world</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>大标题<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>次标题<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>列表1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>列表2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>更多的东西可以在一些书籍上看到，这边所要说的只是一次简单的语言入门，其他的东西都和这些类似。</p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><h4 id=\"美妙之处\"><a href=\"#美妙之处\" class=\"headerlink\" title=\"美妙之处\"></a>美妙之处</h4><p>我们简单地上手了一门不算是语言的语言，浏览器简化了这其中的大部分过程，虽然没有 C 和其他语言来得有专业感，但是我们试着去开始写代码了。我们可能在未来的某一篇中可能会看到类似的语言，诸如 Python，我们所要做的就是</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python file.py</span><br><span class=\"line\">=&gt;hello,world</span><br></pre></td></tr></table></figure>\n<p>然后在终端上返回结果。只是因为在我看来学会 HTML 是有意义的，简单的上手，然后再慢慢地深入，如果一开始我们就去理解指针，开始去理解类。我们甚至还知道程序是怎么编译运行的时候，在这个过程中又发生了什么。虽然现在我们也没能理解这其中发生了什么，但是至少展示了</p>\n<ol>\n<li>中文编程语言在当前意义不大，不现实，效率不高兼容性差</li>\n<li>语言的语法是固定的。（ps:虽然我们也可以进行扩充，我们将会在后来支持上述的中文标记。）</li>\n<li>已经开始写代码，而不是还在配置开发环境。</li>\n<li>随身的工具才是最好的，最常用的 code 也才是实在的。</li>\n</ol>\n<h4 id=\"更多\"><a href=\"#更多\" class=\"headerlink\" title=\"更多\"></a>更多</h4><p>我们还没有试着去解决“某商店里的糖一颗5块钱，小明买了3颗糖，小明一共花了多少钱”的问题。也就是说我们学会的是一个还不能解决实际问题的语言，于是我们还需要学点东西，比如 JavaScript, CSS。我们可以将 JavaScript 理解为解决问题的语言，HTML 则是前端显示，CSS 是配置文件，这样的话，我们会在那之后学会成为一个近乎专业的程序员。我们刚刚学习了一下怎么在前端显示那些代码的行为，于是我们还需要 JavaScript。</p>"},{"title":"Web 编程基础","date":"2016-04-23T14:45:08.000Z","_content":"\n### 从浏览器到服务器\n\n如果你的操作系统带有 cURL 这个软件(在 GNU/Linux、Mac OS 都自带这个工具，Windows 用户可以从[http://curl.haxx.se/download.html](http://curl.haxx.se/download.html)下载到)，那么我们可以直接用下面的命令来看这看这个过程(-v 参数可以显示一次 http 通信的整个过程)：\n\n```\ncurl -v https://www.phodal.com\n```\n<!-- more --> \n\n我们就会看到下面的响应过程:\n\n```bash\n* Rebuilt URL to: https://www.phodal.com/\n*   Trying 54.69.23.11...\n* Connected to www.phodal.com (54.69.23.11) port 443 (#0)\n* TLS 1.2 connection using TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\n* Server certificate: www.phodal.com\n* Server certificate: COMODO RSA Domain Validation Secure Server CA\n* Server certificate: COMODO RSA Certification Authority\n* Server certificate: AddTrust External CA Root\n> GET / HTTP/1.1\n> Host: www.phodal.com\n> User-Agent: curl/7.43.0\n> Accept: */*\n>\n< HTTP/1.1 403 Forbidden\n< Server: phodal/0.19.4\n< Date: Tue, 13 Oct 2015 05:32:13 GMT\n< Content-Type: text/html; charset=utf-8\n< Content-Length: 170\n< Connection: keep-alive\n<\n<html>\n<head><title>403 Forbidden</title></head>\n<body bgcolor=\"white\">\n<center><h1>403 Forbidden</h1></center>\n<hr><center>phodal/0.19.4</center>\n</body>\n</html>\n* Connection #0 to host www.phodal.com left intact\n```\n\n我们尝试用 cURL 去访问我的网站，会根据访问的域名找出其 IP，通常这个映射关系是来源于 ISP 缓存 DNS（英语：Domain Name System）服务器[^DNSServer]。\n\n以“\\*”开始的前8行是一些连接相关的信息，称为**响应首部**。我们向域名 [https://www.phodal.com/](https://www.phodal.com/)发出了请求，接着 DNS服务器告诉了我们网站服务器的 IP，即54.69.23.11。出于安全考虑，在这里我们的示例，我们是以 HTTPS 协议为例，所以在这里连接的端口是 443。因为使用的是 HTTPS 协议，所以在这里会试图去获取服务器证书，接着获取到了域名相关的证书信息。\n\n随后以“>”开始的内容，便是向Web服务器发送请求。Host 即是我们要访问的主机的域名，GET / 则代表着我们要访问的是根目录，如果我们要访问 [https://www.phodal.com/about/](https://www.phodal.com/about/)页面在这里，便是 GET 资源文件 /about。紧随其后的是 HTTP 的版本号（HTTP/1.1）。User-Agent 通常指向的是使用者行为的软件，通常会加上硬件平台、系统软件、应用软件和用户个人偏好等等的一些信息。Accept 则指的是告知服务器发送何种媒体类型。\n\n这个过程，大致如下图所示：\n\n![DNS 到服务器的过程](http://growth.phodal.com/assets/article/chapter1/server-dns-forward.jpg)\n\n在图中，我们会发现解析 DNS 的时候，我们需要先本地 DNS 服务器查询。如果没有的话，再向根域名服务器查询——这个域名由哪个服务器来解析。直至最后拿到真正的服务器IP才能获取页面。\n\n当我们拿到相应的 HTML、JS、CSS 后，我们就开始渲染这个页面了。\n\n#### HTTP 协议\n\n说到这里，我们不得不说说 HTTP 协议——超文本传输协议。它也是一个基于文本的传输协议，这就是为什么你在上面看到的都是文本的传输过程。\n\n### 从 HTML 到页面显示\n\n而浏览器接收到文本的时候，就要开始着手将 HTML 变成屏幕。下图是 Chrome 渲染页面的一个时间线：\n\n![Chrome 渲染的 Timeline](http://growth.phodal.com/assets/article/chapter1/chrome-timeline.jpg)\n\n及其整个渲染过程如下图所示：\n\n![Render HTML](http://growth.phodal.com/assets/article/chapter1/render-html.png)\n\n（PS: 需要注意的是这里用的是 WebKit 内核的渲染过程，即 Chrome 和 Safari 等浏览器所使用的内核。）\n\n从上面的两图可以看出来第一步都 Parser HTML，而 Paser HTML 实质上就是将其将解析为 DOM Tree。与此同时，CSS 解析器会解析 CSS 会产生 CSS 规则树。\n\n随后会根据生成的 DOM 树和 CSS 规则树来构建 Render Tree，接着生成 Render Tree的布局，最后就是绘制出 Render Tree。\n\n\n详细的内容还得参见相关的书籍~~。\n\n相关内容：\n\n - 《[How browsers work](http://taligarsiel.com/Projects/howbrowserswork1.htm)》\n","source":"_posts/1.3-web-basic.md","raw":"title: Web 编程基础\ndate: 2016-4-23 22:45:08\ntags:\n---\n\n### 从浏览器到服务器\n\n如果你的操作系统带有 cURL 这个软件(在 GNU/Linux、Mac OS 都自带这个工具，Windows 用户可以从[http://curl.haxx.se/download.html](http://curl.haxx.se/download.html)下载到)，那么我们可以直接用下面的命令来看这看这个过程(-v 参数可以显示一次 http 通信的整个过程)：\n\n```\ncurl -v https://www.phodal.com\n```\n<!-- more --> \n\n我们就会看到下面的响应过程:\n\n```bash\n* Rebuilt URL to: https://www.phodal.com/\n*   Trying 54.69.23.11...\n* Connected to www.phodal.com (54.69.23.11) port 443 (#0)\n* TLS 1.2 connection using TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\n* Server certificate: www.phodal.com\n* Server certificate: COMODO RSA Domain Validation Secure Server CA\n* Server certificate: COMODO RSA Certification Authority\n* Server certificate: AddTrust External CA Root\n> GET / HTTP/1.1\n> Host: www.phodal.com\n> User-Agent: curl/7.43.0\n> Accept: */*\n>\n< HTTP/1.1 403 Forbidden\n< Server: phodal/0.19.4\n< Date: Tue, 13 Oct 2015 05:32:13 GMT\n< Content-Type: text/html; charset=utf-8\n< Content-Length: 170\n< Connection: keep-alive\n<\n<html>\n<head><title>403 Forbidden</title></head>\n<body bgcolor=\"white\">\n<center><h1>403 Forbidden</h1></center>\n<hr><center>phodal/0.19.4</center>\n</body>\n</html>\n* Connection #0 to host www.phodal.com left intact\n```\n\n我们尝试用 cURL 去访问我的网站，会根据访问的域名找出其 IP，通常这个映射关系是来源于 ISP 缓存 DNS（英语：Domain Name System）服务器[^DNSServer]。\n\n以“\\*”开始的前8行是一些连接相关的信息，称为**响应首部**。我们向域名 [https://www.phodal.com/](https://www.phodal.com/)发出了请求，接着 DNS服务器告诉了我们网站服务器的 IP，即54.69.23.11。出于安全考虑，在这里我们的示例，我们是以 HTTPS 协议为例，所以在这里连接的端口是 443。因为使用的是 HTTPS 协议，所以在这里会试图去获取服务器证书，接着获取到了域名相关的证书信息。\n\n随后以“>”开始的内容，便是向Web服务器发送请求。Host 即是我们要访问的主机的域名，GET / 则代表着我们要访问的是根目录，如果我们要访问 [https://www.phodal.com/about/](https://www.phodal.com/about/)页面在这里，便是 GET 资源文件 /about。紧随其后的是 HTTP 的版本号（HTTP/1.1）。User-Agent 通常指向的是使用者行为的软件，通常会加上硬件平台、系统软件、应用软件和用户个人偏好等等的一些信息。Accept 则指的是告知服务器发送何种媒体类型。\n\n这个过程，大致如下图所示：\n\n![DNS 到服务器的过程](http://growth.phodal.com/assets/article/chapter1/server-dns-forward.jpg)\n\n在图中，我们会发现解析 DNS 的时候，我们需要先本地 DNS 服务器查询。如果没有的话，再向根域名服务器查询——这个域名由哪个服务器来解析。直至最后拿到真正的服务器IP才能获取页面。\n\n当我们拿到相应的 HTML、JS、CSS 后，我们就开始渲染这个页面了。\n\n#### HTTP 协议\n\n说到这里，我们不得不说说 HTTP 协议——超文本传输协议。它也是一个基于文本的传输协议，这就是为什么你在上面看到的都是文本的传输过程。\n\n### 从 HTML 到页面显示\n\n而浏览器接收到文本的时候，就要开始着手将 HTML 变成屏幕。下图是 Chrome 渲染页面的一个时间线：\n\n![Chrome 渲染的 Timeline](http://growth.phodal.com/assets/article/chapter1/chrome-timeline.jpg)\n\n及其整个渲染过程如下图所示：\n\n![Render HTML](http://growth.phodal.com/assets/article/chapter1/render-html.png)\n\n（PS: 需要注意的是这里用的是 WebKit 内核的渲染过程，即 Chrome 和 Safari 等浏览器所使用的内核。）\n\n从上面的两图可以看出来第一步都 Parser HTML，而 Paser HTML 实质上就是将其将解析为 DOM Tree。与此同时，CSS 解析器会解析 CSS 会产生 CSS 规则树。\n\n随后会根据生成的 DOM 树和 CSS 规则树来构建 Render Tree，接着生成 Render Tree的布局，最后就是绘制出 Render Tree。\n\n\n详细的内容还得参见相关的书籍~~。\n\n相关内容：\n\n - 《[How browsers work](http://taligarsiel.com/Projects/howbrowserswork1.htm)》\n","slug":"1.3-web-basic","published":1,"updated":"2016-04-23T06:50:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuf7mpdv0008tsifkk6ztwkg","content":"<h3 id=\"从浏览器到服务器\"><a href=\"#从浏览器到服务器\" class=\"headerlink\" title=\"从浏览器到服务器\"></a>从浏览器到服务器</h3><p>如果你的操作系统带有 cURL 这个软件(在 GNU/Linux、Mac OS 都自带这个工具，Windows 用户可以从<a href=\"http://curl.haxx.se/download.html\" target=\"_blank\" rel=\"external\">http://curl.haxx.se/download.html</a>下载到)，那么我们可以直接用下面的命令来看这看这个过程(-v 参数可以显示一次 http 通信的整个过程)：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -v <span class=\"string\">https:</span><span class=\"comment\">//www.phodal.com</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a> \n<p>我们就会看到下面的响应过程:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* Rebuilt URL to: https://www.phodal.com/</span><br><span class=\"line\">*   Trying 54.69.23.11...</span><br><span class=\"line\">* Connected to www.phodal.com (54.69.23.11) port 443 (<span class=\"comment\">#0)</span></span><br><span class=\"line\">* TLS 1.2 connection using TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384</span><br><span class=\"line\">* Server certificate: www.phodal.com</span><br><span class=\"line\">* Server certificate: COMODO RSA Domain Validation Secure Server CA</span><br><span class=\"line\">* Server certificate: COMODO RSA Certification Authority</span><br><span class=\"line\">* Server certificate: AddTrust External CA Root</span><br><span class=\"line\">&gt; GET / HTTP/1.1</span><br><span class=\"line\">&gt; Host: www.phodal.com</span><br><span class=\"line\">&gt; User-Agent: curl/7.43.0</span><br><span class=\"line\">&gt; Accept: */*</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&lt; HTTP/1.1 403 Forbidden</span><br><span class=\"line\">&lt; Server: phodal/0.19.4</span><br><span class=\"line\">&lt; Date: Tue, 13 Oct 2015 05:32:13 GMT</span><br><span class=\"line\">&lt; Content-Type: text/html; charset=utf-8</span><br><span class=\"line\">&lt; Content-Length: 170</span><br><span class=\"line\">&lt; Connection: keep-alive</span><br><span class=\"line\">&lt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;&lt;title&gt;403 Forbidden&lt;/title&gt;&lt;/head&gt;</span><br><span class=\"line\">&lt;body bgcolor=<span class=\"string\">\"white\"</span>&gt;</span><br><span class=\"line\">&lt;center&gt;&lt;h1&gt;403 Forbidden&lt;/h1&gt;&lt;/center&gt;</span><br><span class=\"line\">&lt;hr&gt;&lt;center&gt;phodal/0.19.4&lt;/center&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\">* Connection <span class=\"comment\">#0 to host www.phodal.com left intact</span></span><br></pre></td></tr></table></figure>\n<p>我们尝试用 cURL 去访问我的网站，会根据访问的域名找出其 IP，通常这个映射关系是来源于 ISP 缓存 DNS（英语：Domain Name System）服务器[^DNSServer]。</p>\n<p>以“*”开始的前8行是一些连接相关的信息，称为<strong>响应首部</strong>。我们向域名 <a href=\"https://www.phodal.com/\" target=\"_blank\" rel=\"external\">https://www.phodal.com/</a>发出了请求，接着 DNS服务器告诉了我们网站服务器的 IP，即54.69.23.11。出于安全考虑，在这里我们的示例，我们是以 HTTPS 协议为例，所以在这里连接的端口是 443。因为使用的是 HTTPS 协议，所以在这里会试图去获取服务器证书，接着获取到了域名相关的证书信息。</p>\n<p>随后以“&gt;”开始的内容，便是向Web服务器发送请求。Host 即是我们要访问的主机的域名，GET / 则代表着我们要访问的是根目录，如果我们要访问 <a href=\"https://www.phodal.com/about/\" target=\"_blank\" rel=\"external\">https://www.phodal.com/about/</a>页面在这里，便是 GET 资源文件 /about。紧随其后的是 HTTP 的版本号（HTTP/1.1）。User-Agent 通常指向的是使用者行为的软件，通常会加上硬件平台、系统软件、应用软件和用户个人偏好等等的一些信息。Accept 则指的是告知服务器发送何种媒体类型。</p>\n<p>这个过程，大致如下图所示：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter1/server-dns-forward.jpg\" alt=\"DNS 到服务器的过程\"></p>\n<p>在图中，我们会发现解析 DNS 的时候，我们需要先本地 DNS 服务器查询。如果没有的话，再向根域名服务器查询——这个域名由哪个服务器来解析。直至最后拿到真正的服务器IP才能获取页面。</p>\n<p>当我们拿到相应的 HTML、JS、CSS 后，我们就开始渲染这个页面了。</p>\n<h4 id=\"HTTP-协议\"><a href=\"#HTTP-协议\" class=\"headerlink\" title=\"HTTP 协议\"></a>HTTP 协议</h4><p>说到这里，我们不得不说说 HTTP 协议——超文本传输协议。它也是一个基于文本的传输协议，这就是为什么你在上面看到的都是文本的传输过程。</p>\n<h3 id=\"从-HTML-到页面显示\"><a href=\"#从-HTML-到页面显示\" class=\"headerlink\" title=\"从 HTML 到页面显示\"></a>从 HTML 到页面显示</h3><p>而浏览器接收到文本的时候，就要开始着手将 HTML 变成屏幕。下图是 Chrome 渲染页面的一个时间线：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter1/chrome-timeline.jpg\" alt=\"Chrome 渲染的 Timeline\"></p>\n<p>及其整个渲染过程如下图所示：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter1/render-html.png\" alt=\"Render HTML\"></p>\n<p>（PS: 需要注意的是这里用的是 WebKit 内核的渲染过程，即 Chrome 和 Safari 等浏览器所使用的内核。）</p>\n<p>从上面的两图可以看出来第一步都 Parser HTML，而 Paser HTML 实质上就是将其将解析为 DOM Tree。与此同时，CSS 解析器会解析 CSS 会产生 CSS 规则树。</p>\n<p>随后会根据生成的 DOM 树和 CSS 规则树来构建 Render Tree，接着生成 Render Tree的布局，最后就是绘制出 Render Tree。</p>\n<p>详细的内容还得参见相关的书籍~~。</p>\n<p>相关内容：</p>\n<ul>\n<li>《<a href=\"http://taligarsiel.com/Projects/howbrowserswork1.htm\" target=\"_blank\" rel=\"external\">How browsers work</a>》</li>\n</ul>\n","excerpt":"<h3 id=\"从浏览器到服务器\"><a href=\"#从浏览器到服务器\" class=\"headerlink\" title=\"从浏览器到服务器\"></a>从浏览器到服务器</h3><p>如果你的操作系统带有 cURL 这个软件(在 GNU/Linux、Mac OS 都自带这个工具，Windows 用户可以从<a href=\"http://curl.haxx.se/download.html\">http://curl.haxx.se/download.html</a>下载到)，那么我们可以直接用下面的命令来看这看这个过程(-v 参数可以显示一次 http 通信的整个过程)：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -v <span class=\"string\">https:</span><span class=\"comment\">//www.phodal.com</span></span><br></pre></td></tr></table></figure>","more":"<p>我们就会看到下面的响应过程:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* Rebuilt URL to: https://www.phodal.com/</span><br><span class=\"line\">*   Trying 54.69.23.11...</span><br><span class=\"line\">* Connected to www.phodal.com (54.69.23.11) port 443 (<span class=\"comment\">#0)</span></span><br><span class=\"line\">* TLS 1.2 connection using TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384</span><br><span class=\"line\">* Server certificate: www.phodal.com</span><br><span class=\"line\">* Server certificate: COMODO RSA Domain Validation Secure Server CA</span><br><span class=\"line\">* Server certificate: COMODO RSA Certification Authority</span><br><span class=\"line\">* Server certificate: AddTrust External CA Root</span><br><span class=\"line\">&gt; GET / HTTP/1.1</span><br><span class=\"line\">&gt; Host: www.phodal.com</span><br><span class=\"line\">&gt; User-Agent: curl/7.43.0</span><br><span class=\"line\">&gt; Accept: */*</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&lt; HTTP/1.1 403 Forbidden</span><br><span class=\"line\">&lt; Server: phodal/0.19.4</span><br><span class=\"line\">&lt; Date: Tue, 13 Oct 2015 05:32:13 GMT</span><br><span class=\"line\">&lt; Content-Type: text/html; charset=utf-8</span><br><span class=\"line\">&lt; Content-Length: 170</span><br><span class=\"line\">&lt; Connection: keep-alive</span><br><span class=\"line\">&lt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;&lt;title&gt;403 Forbidden&lt;/title&gt;&lt;/head&gt;</span><br><span class=\"line\">&lt;body bgcolor=<span class=\"string\">\"white\"</span>&gt;</span><br><span class=\"line\">&lt;center&gt;&lt;h1&gt;403 Forbidden&lt;/h1&gt;&lt;/center&gt;</span><br><span class=\"line\">&lt;hr&gt;&lt;center&gt;phodal/0.19.4&lt;/center&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\">* Connection <span class=\"comment\">#0 to host www.phodal.com left intact</span></span><br></pre></td></tr></table></figure>\n<p>我们尝试用 cURL 去访问我的网站，会根据访问的域名找出其 IP，通常这个映射关系是来源于 ISP 缓存 DNS（英语：Domain Name System）服务器[^DNSServer]。</p>\n<p>以“*”开始的前8行是一些连接相关的信息，称为<strong>响应首部</strong>。我们向域名 <a href=\"https://www.phodal.com/\">https://www.phodal.com/</a>发出了请求，接着 DNS服务器告诉了我们网站服务器的 IP，即54.69.23.11。出于安全考虑，在这里我们的示例，我们是以 HTTPS 协议为例，所以在这里连接的端口是 443。因为使用的是 HTTPS 协议，所以在这里会试图去获取服务器证书，接着获取到了域名相关的证书信息。</p>\n<p>随后以“&gt;”开始的内容，便是向Web服务器发送请求。Host 即是我们要访问的主机的域名，GET / 则代表着我们要访问的是根目录，如果我们要访问 <a href=\"https://www.phodal.com/about/\">https://www.phodal.com/about/</a>页面在这里，便是 GET 资源文件 /about。紧随其后的是 HTTP 的版本号（HTTP/1.1）。User-Agent 通常指向的是使用者行为的软件，通常会加上硬件平台、系统软件、应用软件和用户个人偏好等等的一些信息。Accept 则指的是告知服务器发送何种媒体类型。</p>\n<p>这个过程，大致如下图所示：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter1/server-dns-forward.jpg\" alt=\"DNS 到服务器的过程\"></p>\n<p>在图中，我们会发现解析 DNS 的时候，我们需要先本地 DNS 服务器查询。如果没有的话，再向根域名服务器查询——这个域名由哪个服务器来解析。直至最后拿到真正的服务器IP才能获取页面。</p>\n<p>当我们拿到相应的 HTML、JS、CSS 后，我们就开始渲染这个页面了。</p>\n<h4 id=\"HTTP-协议\"><a href=\"#HTTP-协议\" class=\"headerlink\" title=\"HTTP 协议\"></a>HTTP 协议</h4><p>说到这里，我们不得不说说 HTTP 协议——超文本传输协议。它也是一个基于文本的传输协议，这就是为什么你在上面看到的都是文本的传输过程。</p>\n<h3 id=\"从-HTML-到页面显示\"><a href=\"#从-HTML-到页面显示\" class=\"headerlink\" title=\"从 HTML 到页面显示\"></a>从 HTML 到页面显示</h3><p>而浏览器接收到文本的时候，就要开始着手将 HTML 变成屏幕。下图是 Chrome 渲染页面的一个时间线：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter1/chrome-timeline.jpg\" alt=\"Chrome 渲染的 Timeline\"></p>\n<p>及其整个渲染过程如下图所示：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter1/render-html.png\" alt=\"Render HTML\"></p>\n<p>（PS: 需要注意的是这里用的是 WebKit 内核的渲染过程，即 Chrome 和 Safari 等浏览器所使用的内核。）</p>\n<p>从上面的两图可以看出来第一步都 Parser HTML，而 Paser HTML 实质上就是将其将解析为 DOM Tree。与此同时，CSS 解析器会解析 CSS 会产生 CSS 规则树。</p>\n<p>随后会根据生成的 DOM 树和 CSS 规则树来构建 Render Tree，接着生成 Render Tree的布局，最后就是绘制出 Render Tree。</p>\n<p>详细的内容还得参见相关的书籍~~。</p>\n<p>相关内容：</p>\n<ul>\n<li>《<a href=\"http://taligarsiel.com/Projects/howbrowserswork1.htm\">How browsers work</a>》</li>\n</ul>"},{"title":"CSS","date":"2016-04-24T13:45:08.000Z","_content":"\n如果说 HTML 是建筑的框架，CSS 就是房子的装修。那么 JavaScript 呢，我听到的最有趣的说法是小三——还是先让我们回到代码上来吧。\n\n下面就是我们之前说到的代码，CSS 将 Red 三个字母变成了红色。\n\n```HTML\n<!DOCTYPE html>\n<html>\n<head>\n</head>\n<body>\n\t<p id=\"para\" style=\"color:red\">Red</p>\n</body>\n\t<script type=\"text/javascript\" src=\"app.js\"></script>\n</html>\n```\n\n<!-- more --> \n\n只是，\n\n``` javascript\nvar para=document.getElementById(\"para\");\npara.style.color=\"blue\";\n```\n\n将字体变成了蓝色，CSS+HTML 让页面有序的工作着，但是 JavaScript 却打乱了这些秩序，有着唯恐世界不乱的精彩，也难怪被冠以小三之名了——或许终于可以理解，为什么以前人们对于 JavaScript 没有好感了——不过这里要讲的是正室，也就是 CSS，这时还没有 JavaScript。\n\n![Red Fonts](http://growth.phodal.com/assets/article/chapter1/redfonts.png)\n\n### 简介\n\n这不是一篇专业讲述 CSS 的书籍，所以我不会去说 CSS 是怎么来的，有些东西我们既然可以很容易从其他地方知道，也就不需要花太多时间去重复。诸如重构等这些的目的之一也在于去除重复的代码，不过有些重复是不可少的，也是有必要的，而通常这些东西可能是由其他地方复制过来的。\n\n到目前为止我们没有依赖于任何特殊的硬件或者是软件，对于我们来说我们最基本的需求就是一台电脑，或者可以是你的平板电脑，当然也可以是你的智能手机，因为他们都有个浏览器，而这些都是能用的，对于我们的 CSS 来说也不会有例外的。\n\nCSS(Cascading Style Sheets)，到今天我也没有记得他的全称，CSS 还有一个中文名字是层叠式样式表，事实上翻译成什么可能并不是我们关心的内容，我们需要关心的是他能做些什么。作为三剑客之一，它的主要目的在于可以让我们方便灵活地去控制 Web 页面的外观表现。我们可以用它做出像淘宝一样复杂的界面，也可以像我们的书本一样简单，不过如果要和我们书本一样简单的话，可能不需要用到 CSS。HTML 一开始就是依照报纸的格式而设计的，我们还可以继续用上面说到的编辑器，又或者是其他的。如果你喜欢 DreamWeaver 那也不错，不过一开始使用 IDE 可无助于我们写出良好的代码。\n\n忘说了，CSS 也是有版本的，和 Windows，Linux 内核等等一样，但是更新可能没有那么频繁，HTML 也是有版本的，JS 也是有版本的，复杂的东西不是当前考虑的内容。\n\n#### 代码结构\n\n对于我们的上面的 Red 示例来说，如果没有一个好的结构，那么以后可能就是这样子。\n\n```HTML\n<!DOCTYPE html>\n<html>\n<head>\n</head>\n<body>\n\t<p style=\"font-size: 22px;color:#f00;text-align: center;padding-left: 20px;\">如果没有一个好的结构</p>\n\t<p style=\"\tfont-size:44px;color:#3ed;text-indent: 2em;padding-left: 2em;\">那么以后可能就是这样子。。。。</p>\n</body>\n</html>\n```\n\n虽然我们看到的还是一样的:\n\n![No Style](http://growth.phodal.com/assets/article/chapter1/nostyle.png)\n\n于是我们就按各种书上的建议重新写了上面的代码\n\n```HTML\n<!DOCTYPE html>\n<html>\n<head>\n\t<title>CSS example</title>\n\t<style type=\"text/css\">\n\t\t.para{\n\t\t\tfont-size: 22px;\n\t\t\tcolor:#f00;\n\t\t\ttext-align: center;\n\t\t\tpadding-left: 20px;\n\t\t}\n\t\t.para2{\n\t\t\tfont-size:44px;\n\t\t\tcolor:#3ed;\n\t\t\ttext-indent: 2em;\n\t\t\tpadding-left: 2em;\n\t\t}\n\t</style>\n</head>\n<body>\n\t<p class=\"para\">如果没有一个好的结构</p>\n\t<p class=\"para2\">那么以后可能就是这样子。。。。</p>\n</body>\n</html>\n```\n\n总算比上面好看也好理解多了，这只是临时的用法，当文件太大的时候，正式一点的写法应该如下所示:\n\n```HTML\n<!DOCTYPE html>\n<html>\n<head>\n\t<title>CSS example</title>\n\t<style type=\"text/css\" href=\"style.css\"></style>\n</head>\n<body>\n\t<p class=\"para\">如果没有一个好的结构</p>\n\t<p class=\"para2\">那么以后可能就是这样子。。。。</p>\n</body>\n</html>\n```\n\n我们需要\n\n```HTML\t\t\n<!DOCTYPE html>\n<html>\n<head>\n\t<title>CSS example</title>\n\t<link href=\"./style.css\" rel=\"stylesheet\" type=\"text/css\" />\n</head>\n<body>\n\t<p class=\"para\">如果没有一个好的结构</p>\n\t<p class=\"para2\">那么以后可能就是这样子。。。。</p>\n</body>\n</html>\n```\n\n然后我们有一个像 app.js 一样的 style.css 放在同目录下，而他的内容便是\n\n```CSS\n.para{\n\tfont-size: 22px;\n\tcolor:#f00;\n\ttext-align: center;\n\tpadding-left: 20px;\n}\n.para2{\n\tfont-size:44px;\n\tcolor:#3ed;\n\ttext-indent: 2em;\n\tpadding-left: 2em;\n}\n```\t\t\t\n\n这代码和 JS 的代码有如此多的相似\n\n```javascript\nvar para={\n\tfont_size:'22px',\n\tcolor:'#f00',\n\ttext_align:'center',\n\tpadding_left:'20px',\n}\n```\n\n而22px、20px以及#f00都是数值，因此：\n\n```javascript\nvar para={\n\tfont_size:22px,\n\tcolor:#f00,\n\ttext_align:center,\n\tpadding_left:20px,\n}\n```\n\n目测差距已经尽可能的小了，至于这些话题会在以后讨论到，如果要让我们的编译器更正确的工作，那么我们就需要非常多这样的符号，除非你乐意去理解:\n\n```lisp\n(dotimes (i 4) (print i))\n```\n\n总的来说我们减少了符号的使用，但是用 lisp 便带入了更多的括号，不过这是一种简洁的表达方式，也许我们可以在其他语言中看到。\n\n```\n\\d{2}/[A-Z][a-z][a-z]/\\d{4}\n```\n\n上面的代码，是为了从一堆数据中找出“某日/某月/某年”。如果一开始不理解那是正则表达式，就会觉得那个很复杂。\n\n这门语言可能是为设计师而设计的，但是设计师大部分还是不懂编程的，不过相对来说这门语言还是比其他语言简单易懂一些。\n\n### 样式与目标\n\n如下所示，就是我们的样式\n\n```css\n.para{\n\tfont-size: 22px;\n\tcolor:#f00;\n\ttext-align: center;\n\tpadding-left: 20px;\n}\n```\n\n我们的目标就是\n\n> 如果没有一个好的结构\n\n所以样式和目标在这里牵手了，问题是他们是如何在一起的呢？下面就是 CSS 与 HTML 沟通的重点所在了:\n\n### 选择器\n\n我们用到的选择器叫做类选择器，也就是 class，或者说应该称之为 class 选择器更合适。与类选择器最常一起出现的是 ID 选择器，不过这个适用于比较高级的场合，诸如用 JS 控制 DOM 的时候就需要用到 ID 选择器。而基本的选择器就是如下面的例子:\n\n\tp.para{\n\t\tcolor:#f0f;\n\t}\n\n将代码添加到 style.css 的最下面会发现“如果没有一个好的结构”变成了粉红色，当然我们还会有这样的写法\n\n\tp>.para{\n\t\tcolor:#f0f;\n\t}\n\n为了产生上面的特殊的样式，虽然不好看，但是我们终于理解什么叫层叠样式了，下面的代码的重要度比上面高，也因此有更高的优先规则。\n\n而通常我们可以通过一个\n\n    p{\n    \ttext-align:left;\n    }\n\n这样的元素选择器来给予所有的 p 元素一个左对齐。\n\n还有复杂一点的复合型选择器，下面的是 HTML 文件\n\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t\t<title>CSS example</title>\n\t\t<link href=\"./style.css\" rel=\"stylesheet\" type=\"text/css\" />\n\t</head>\n\t<body>\n\t\t<p class=\"para\">如果没有一个好的结构</p>\n\t\t<div id=\"content\">\n\t\t\t<p class=\"para2\">那么以后可能就是这样子。。。。</p>\n\t\t</div>\n\t</body>\n\t</html>\n\n还有 CSS 文件\n\n\n\t.para{\n\t\tfont-size: 22px;\n\t\tcolor:#f00;\n\t\ttext-align: center;\n\t\tpadding-left: 20px;\n\t}\n\t.para2{\n\t\tfont-size:44px;\n\t\tcolor:#3ed;\n\t\ttext-indent: 2em;\n\t\tpadding-left: 2em;\n\t}\n\n\tp.para{\n\t\tcolor:#f0f;\n\t}\n\tdiv#content p {\n\t\tfont-size:22px;\n\t}\n\n### 更有趣的 CSS\n\n一个包含了 para2 以及 para_bg 的例子\n\n\t\t<div id=\"content\">\n\t\t\t<p class=\"para2 para_bg\">那么以后可能就是这样子。。。。</p>\n\t\t</div>\n\n我们只是添加了一个黑色的背景\n\n\t.para_bg{\n\t\tbackground-color:#000;\n\t}\n\n重新改变后的网页变得比原来有趣了很多，所谓的继承与合并就是上面的例子。\n\n我们还可以用 CSS3 做出更多有趣的效果，而这些并不在我们的讨论范围里面，因为我们讨论的是 be a geek。\n\n或许我们写的代码都是那么的简单，从 HTML 到 JavaScript，还有现在的 CSS，只是总有一些核心的东西，而不是去考虑那些基础语法，基础的东西我们可以在实践的过程中一一发现。但是我们可能发现不了，或者在平时的使用中考虑不到一些有趣的用法或者说特殊的用法，这时候可以通过观察一些精致设计的代码中学习到。复杂的东西可以变得很简单，简单的东西也可以变得很复杂。\n","source":"_posts/1.4.1-css.md","raw":"title: CSS\ndate: 2016-4-24 21:45:08\ntags:\n---\n\n如果说 HTML 是建筑的框架，CSS 就是房子的装修。那么 JavaScript 呢，我听到的最有趣的说法是小三——还是先让我们回到代码上来吧。\n\n下面就是我们之前说到的代码，CSS 将 Red 三个字母变成了红色。\n\n```HTML\n<!DOCTYPE html>\n<html>\n<head>\n</head>\n<body>\n\t<p id=\"para\" style=\"color:red\">Red</p>\n</body>\n\t<script type=\"text/javascript\" src=\"app.js\"></script>\n</html>\n```\n\n<!-- more --> \n\n只是，\n\n``` javascript\nvar para=document.getElementById(\"para\");\npara.style.color=\"blue\";\n```\n\n将字体变成了蓝色，CSS+HTML 让页面有序的工作着，但是 JavaScript 却打乱了这些秩序，有着唯恐世界不乱的精彩，也难怪被冠以小三之名了——或许终于可以理解，为什么以前人们对于 JavaScript 没有好感了——不过这里要讲的是正室，也就是 CSS，这时还没有 JavaScript。\n\n![Red Fonts](http://growth.phodal.com/assets/article/chapter1/redfonts.png)\n\n### 简介\n\n这不是一篇专业讲述 CSS 的书籍，所以我不会去说 CSS 是怎么来的，有些东西我们既然可以很容易从其他地方知道，也就不需要花太多时间去重复。诸如重构等这些的目的之一也在于去除重复的代码，不过有些重复是不可少的，也是有必要的，而通常这些东西可能是由其他地方复制过来的。\n\n到目前为止我们没有依赖于任何特殊的硬件或者是软件，对于我们来说我们最基本的需求就是一台电脑，或者可以是你的平板电脑，当然也可以是你的智能手机，因为他们都有个浏览器，而这些都是能用的，对于我们的 CSS 来说也不会有例外的。\n\nCSS(Cascading Style Sheets)，到今天我也没有记得他的全称，CSS 还有一个中文名字是层叠式样式表，事实上翻译成什么可能并不是我们关心的内容，我们需要关心的是他能做些什么。作为三剑客之一，它的主要目的在于可以让我们方便灵活地去控制 Web 页面的外观表现。我们可以用它做出像淘宝一样复杂的界面，也可以像我们的书本一样简单，不过如果要和我们书本一样简单的话，可能不需要用到 CSS。HTML 一开始就是依照报纸的格式而设计的，我们还可以继续用上面说到的编辑器，又或者是其他的。如果你喜欢 DreamWeaver 那也不错，不过一开始使用 IDE 可无助于我们写出良好的代码。\n\n忘说了，CSS 也是有版本的，和 Windows，Linux 内核等等一样，但是更新可能没有那么频繁，HTML 也是有版本的，JS 也是有版本的，复杂的东西不是当前考虑的内容。\n\n#### 代码结构\n\n对于我们的上面的 Red 示例来说，如果没有一个好的结构，那么以后可能就是这样子。\n\n```HTML\n<!DOCTYPE html>\n<html>\n<head>\n</head>\n<body>\n\t<p style=\"font-size: 22px;color:#f00;text-align: center;padding-left: 20px;\">如果没有一个好的结构</p>\n\t<p style=\"\tfont-size:44px;color:#3ed;text-indent: 2em;padding-left: 2em;\">那么以后可能就是这样子。。。。</p>\n</body>\n</html>\n```\n\n虽然我们看到的还是一样的:\n\n![No Style](http://growth.phodal.com/assets/article/chapter1/nostyle.png)\n\n于是我们就按各种书上的建议重新写了上面的代码\n\n```HTML\n<!DOCTYPE html>\n<html>\n<head>\n\t<title>CSS example</title>\n\t<style type=\"text/css\">\n\t\t.para{\n\t\t\tfont-size: 22px;\n\t\t\tcolor:#f00;\n\t\t\ttext-align: center;\n\t\t\tpadding-left: 20px;\n\t\t}\n\t\t.para2{\n\t\t\tfont-size:44px;\n\t\t\tcolor:#3ed;\n\t\t\ttext-indent: 2em;\n\t\t\tpadding-left: 2em;\n\t\t}\n\t</style>\n</head>\n<body>\n\t<p class=\"para\">如果没有一个好的结构</p>\n\t<p class=\"para2\">那么以后可能就是这样子。。。。</p>\n</body>\n</html>\n```\n\n总算比上面好看也好理解多了，这只是临时的用法，当文件太大的时候，正式一点的写法应该如下所示:\n\n```HTML\n<!DOCTYPE html>\n<html>\n<head>\n\t<title>CSS example</title>\n\t<style type=\"text/css\" href=\"style.css\"></style>\n</head>\n<body>\n\t<p class=\"para\">如果没有一个好的结构</p>\n\t<p class=\"para2\">那么以后可能就是这样子。。。。</p>\n</body>\n</html>\n```\n\n我们需要\n\n```HTML\t\t\n<!DOCTYPE html>\n<html>\n<head>\n\t<title>CSS example</title>\n\t<link href=\"./style.css\" rel=\"stylesheet\" type=\"text/css\" />\n</head>\n<body>\n\t<p class=\"para\">如果没有一个好的结构</p>\n\t<p class=\"para2\">那么以后可能就是这样子。。。。</p>\n</body>\n</html>\n```\n\n然后我们有一个像 app.js 一样的 style.css 放在同目录下，而他的内容便是\n\n```CSS\n.para{\n\tfont-size: 22px;\n\tcolor:#f00;\n\ttext-align: center;\n\tpadding-left: 20px;\n}\n.para2{\n\tfont-size:44px;\n\tcolor:#3ed;\n\ttext-indent: 2em;\n\tpadding-left: 2em;\n}\n```\t\t\t\n\n这代码和 JS 的代码有如此多的相似\n\n```javascript\nvar para={\n\tfont_size:'22px',\n\tcolor:'#f00',\n\ttext_align:'center',\n\tpadding_left:'20px',\n}\n```\n\n而22px、20px以及#f00都是数值，因此：\n\n```javascript\nvar para={\n\tfont_size:22px,\n\tcolor:#f00,\n\ttext_align:center,\n\tpadding_left:20px,\n}\n```\n\n目测差距已经尽可能的小了，至于这些话题会在以后讨论到，如果要让我们的编译器更正确的工作，那么我们就需要非常多这样的符号，除非你乐意去理解:\n\n```lisp\n(dotimes (i 4) (print i))\n```\n\n总的来说我们减少了符号的使用，但是用 lisp 便带入了更多的括号，不过这是一种简洁的表达方式，也许我们可以在其他语言中看到。\n\n```\n\\d{2}/[A-Z][a-z][a-z]/\\d{4}\n```\n\n上面的代码，是为了从一堆数据中找出“某日/某月/某年”。如果一开始不理解那是正则表达式，就会觉得那个很复杂。\n\n这门语言可能是为设计师而设计的，但是设计师大部分还是不懂编程的，不过相对来说这门语言还是比其他语言简单易懂一些。\n\n### 样式与目标\n\n如下所示，就是我们的样式\n\n```css\n.para{\n\tfont-size: 22px;\n\tcolor:#f00;\n\ttext-align: center;\n\tpadding-left: 20px;\n}\n```\n\n我们的目标就是\n\n> 如果没有一个好的结构\n\n所以样式和目标在这里牵手了，问题是他们是如何在一起的呢？下面就是 CSS 与 HTML 沟通的重点所在了:\n\n### 选择器\n\n我们用到的选择器叫做类选择器，也就是 class，或者说应该称之为 class 选择器更合适。与类选择器最常一起出现的是 ID 选择器，不过这个适用于比较高级的场合，诸如用 JS 控制 DOM 的时候就需要用到 ID 选择器。而基本的选择器就是如下面的例子:\n\n\tp.para{\n\t\tcolor:#f0f;\n\t}\n\n将代码添加到 style.css 的最下面会发现“如果没有一个好的结构”变成了粉红色，当然我们还会有这样的写法\n\n\tp>.para{\n\t\tcolor:#f0f;\n\t}\n\n为了产生上面的特殊的样式，虽然不好看，但是我们终于理解什么叫层叠样式了，下面的代码的重要度比上面高，也因此有更高的优先规则。\n\n而通常我们可以通过一个\n\n    p{\n    \ttext-align:left;\n    }\n\n这样的元素选择器来给予所有的 p 元素一个左对齐。\n\n还有复杂一点的复合型选择器，下面的是 HTML 文件\n\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t\t<title>CSS example</title>\n\t\t<link href=\"./style.css\" rel=\"stylesheet\" type=\"text/css\" />\n\t</head>\n\t<body>\n\t\t<p class=\"para\">如果没有一个好的结构</p>\n\t\t<div id=\"content\">\n\t\t\t<p class=\"para2\">那么以后可能就是这样子。。。。</p>\n\t\t</div>\n\t</body>\n\t</html>\n\n还有 CSS 文件\n\n\n\t.para{\n\t\tfont-size: 22px;\n\t\tcolor:#f00;\n\t\ttext-align: center;\n\t\tpadding-left: 20px;\n\t}\n\t.para2{\n\t\tfont-size:44px;\n\t\tcolor:#3ed;\n\t\ttext-indent: 2em;\n\t\tpadding-left: 2em;\n\t}\n\n\tp.para{\n\t\tcolor:#f0f;\n\t}\n\tdiv#content p {\n\t\tfont-size:22px;\n\t}\n\n### 更有趣的 CSS\n\n一个包含了 para2 以及 para_bg 的例子\n\n\t\t<div id=\"content\">\n\t\t\t<p class=\"para2 para_bg\">那么以后可能就是这样子。。。。</p>\n\t\t</div>\n\n我们只是添加了一个黑色的背景\n\n\t.para_bg{\n\t\tbackground-color:#000;\n\t}\n\n重新改变后的网页变得比原来有趣了很多，所谓的继承与合并就是上面的例子。\n\n我们还可以用 CSS3 做出更多有趣的效果，而这些并不在我们的讨论范围里面，因为我们讨论的是 be a geek。\n\n或许我们写的代码都是那么的简单，从 HTML 到 JavaScript，还有现在的 CSS，只是总有一些核心的东西，而不是去考虑那些基础语法，基础的东西我们可以在实践的过程中一一发现。但是我们可能发现不了，或者在平时的使用中考虑不到一些有趣的用法或者说特殊的用法，这时候可以通过观察一些精致设计的代码中学习到。复杂的东西可以变得很简单，简单的东西也可以变得很复杂。\n","slug":"1.4.1-css","published":1,"updated":"2016-04-24T11:21:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuf7mpe00009tsif711hc56z","content":"<p>如果说 HTML 是建筑的框架，CSS 就是房子的装修。那么 JavaScript 呢，我听到的最有趣的说法是小三——还是先让我们回到代码上来吧。</p>\n<p>下面就是我们之前说到的代码，CSS 将 Red 三个字母变成了红色。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">\"para\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"color:red\"</span>&gt;</span>Red<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"app.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a> \n<p>只是，</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> para=<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"para\"</span>);</span><br><span class=\"line\">para.style.color=<span class=\"string\">\"blue\"</span>;</span><br></pre></td></tr></table></figure>\n<p>将字体变成了蓝色，CSS+HTML 让页面有序的工作着，但是 JavaScript 却打乱了这些秩序，有着唯恐世界不乱的精彩，也难怪被冠以小三之名了——或许终于可以理解，为什么以前人们对于 JavaScript 没有好感了——不过这里要讲的是正室，也就是 CSS，这时还没有 JavaScript。</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter1/redfonts.png\" alt=\"Red Fonts\"></p>\n<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>这不是一篇专业讲述 CSS 的书籍，所以我不会去说 CSS 是怎么来的，有些东西我们既然可以很容易从其他地方知道，也就不需要花太多时间去重复。诸如重构等这些的目的之一也在于去除重复的代码，不过有些重复是不可少的，也是有必要的，而通常这些东西可能是由其他地方复制过来的。</p>\n<p>到目前为止我们没有依赖于任何特殊的硬件或者是软件，对于我们来说我们最基本的需求就是一台电脑，或者可以是你的平板电脑，当然也可以是你的智能手机，因为他们都有个浏览器，而这些都是能用的，对于我们的 CSS 来说也不会有例外的。</p>\n<p>CSS(Cascading Style Sheets)，到今天我也没有记得他的全称，CSS 还有一个中文名字是层叠式样式表，事实上翻译成什么可能并不是我们关心的内容，我们需要关心的是他能做些什么。作为三剑客之一，它的主要目的在于可以让我们方便灵活地去控制 Web 页面的外观表现。我们可以用它做出像淘宝一样复杂的界面，也可以像我们的书本一样简单，不过如果要和我们书本一样简单的话，可能不需要用到 CSS。HTML 一开始就是依照报纸的格式而设计的，我们还可以继续用上面说到的编辑器，又或者是其他的。如果你喜欢 DreamWeaver 那也不错，不过一开始使用 IDE 可无助于我们写出良好的代码。</p>\n<p>忘说了，CSS 也是有版本的，和 Windows，Linux 内核等等一样，但是更新可能没有那么频繁，HTML 也是有版本的，JS 也是有版本的，复杂的东西不是当前考虑的内容。</p>\n<h4 id=\"代码结构\"><a href=\"#代码结构\" class=\"headerlink\" title=\"代码结构\"></a>代码结构</h4><p>对于我们的上面的 Red 示例来说，如果没有一个好的结构，那么以后可能就是这样子。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">style</span>=<span class=\"string\">\"font-size: 22px;color:#f00;text-align: center;padding-left: 20px;\"</span>&gt;</span>如果没有一个好的结构<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">style</span>=<span class=\"string\">\"\tfont-size:44px;color:#3ed;text-indent: 2em;padding-left: 2em;\"</span>&gt;</span>那么以后可能就是这样子。。。。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>虽然我们看到的还是一样的:</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter1/nostyle.png\" alt=\"No Style\"></p>\n<p>于是我们就按各种书上的建议重新写了上面的代码</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>CSS example<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"css\"></span><br><span class=\"line\">\t\t<span class=\"selector-class\">.para</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">font-size</span>: <span class=\"number\">22px</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">color</span>:<span class=\"number\">#f00</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">padding-left</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"selector-class\">.para2</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">font-size</span>:<span class=\"number\">44px</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">color</span>:<span class=\"number\">#3ed</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">text-indent</span>: <span class=\"number\">2em</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">padding-left</span>: <span class=\"number\">2em</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"para\"</span>&gt;</span>如果没有一个好的结构<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"para2\"</span>&gt;</span>那么以后可能就是这样子。。。。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>总算比上面好看也好理解多了，这只是临时的用法，当文件太大的时候，正式一点的写法应该如下所示:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>CSS example<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"style.css\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"para\"</span>&gt;</span>如果没有一个好的结构<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"para2\"</span>&gt;</span>那么以后可能就是这样子。。。。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>我们需要</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>CSS example<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"./style.css\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"para\"</span>&gt;</span>如果没有一个好的结构<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"para2\"</span>&gt;</span>那么以后可能就是这样子。。。。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>然后我们有一个像 app.js 一样的 style.css 放在同目录下，而他的内容便是</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.para&#123;</span><br><span class=\"line\">\tfont-size: 22px;</span><br><span class=\"line\">\tcolor:#f00;</span><br><span class=\"line\">\ttext-align: center;</span><br><span class=\"line\">\tpadding-left: 20px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.para2&#123;</span><br><span class=\"line\">\tfont-size:44px;</span><br><span class=\"line\">\tcolor:#3ed;</span><br><span class=\"line\">\ttext-indent: 2em;</span><br><span class=\"line\">\tpadding-left: 2em;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">```\t\t\t</span><br><span class=\"line\"></span><br><span class=\"line\">这代码和 JS 的代码有如此多的相似</span><br><span class=\"line\"></span><br><span class=\"line\">```javascript</span><br><span class=\"line\">var para=&#123;</span><br><span class=\"line\">\tfont_size:'22px',</span><br><span class=\"line\">\tcolor:'#f00',</span><br><span class=\"line\">\ttext_align:'center',</span><br><span class=\"line\">\tpadding_left:'20px',</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>而22px、20px以及#f00都是数值，因此：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var para=&#123;</span><br><span class=\"line\">\tfont_size:22px,</span><br><span class=\"line\">\tcolor:#f00,</span><br><span class=\"line\">\ttext_align:center,</span><br><span class=\"line\">\tpadding_left:20px,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>目测差距已经尽可能的小了，至于这些话题会在以后讨论到，如果要让我们的编译器更正确的工作，那么我们就需要非常多这样的符号，除非你乐意去理解:</p>\n<figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"name\">dotimes</span> (<span class=\"name\">i</span> <span class=\"number\">4</span>) (<span class=\"name\">print</span> i))</span><br></pre></td></tr></table></figure>\n<p>总的来说我们减少了符号的使用，但是用 lisp 便带入了更多的括号，不过这是一种简洁的表达方式，也许我们可以在其他语言中看到。</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\d&#123;2&#125;/[<span class=\"string\">A-Z</span>][<span class=\"symbol\">a-z</span>][<span class=\"string\">a-z</span>]/\\d&#123;4&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的代码，是为了从一堆数据中找出“某日/某月/某年”。如果一开始不理解那是正则表达式，就会觉得那个很复杂。</p>\n<p>这门语言可能是为设计师而设计的，但是设计师大部分还是不懂编程的，不过相对来说这门语言还是比其他语言简单易懂一些。</p>\n<h3 id=\"样式与目标\"><a href=\"#样式与目标\" class=\"headerlink\" title=\"样式与目标\"></a>样式与目标</h3><p>如下所示，就是我们的样式</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.para</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">font-size</span>: <span class=\"number\">22px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">color</span>:<span class=\"number\">#f00</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">\t<span class=\"attribute\">padding-left</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们的目标就是</p>\n<blockquote>\n<p>如果没有一个好的结构</p>\n</blockquote>\n<p>所以样式和目标在这里牵手了，问题是他们是如何在一起的呢？下面就是 CSS 与 HTML 沟通的重点所在了:</p>\n<h3 id=\"选择器\"><a href=\"#选择器\" class=\"headerlink\" title=\"选择器\"></a>选择器</h3><p>我们用到的选择器叫做类选择器，也就是 class，或者说应该称之为 class 选择器更合适。与类选择器最常一起出现的是 ID 选择器，不过这个适用于比较高级的场合，诸如用 JS 控制 DOM 的时候就需要用到 ID 选择器。而基本的选择器就是如下面的例子:</p>\n<pre><code>p.para{\n    color:#f0f;\n}\n</code></pre><p>将代码添加到 style.css 的最下面会发现“如果没有一个好的结构”变成了粉红色，当然我们还会有这样的写法</p>\n<pre><code>p&gt;.para{\n    color:#f0f;\n}\n</code></pre><p>为了产生上面的特殊的样式，虽然不好看，但是我们终于理解什么叫层叠样式了，下面的代码的重要度比上面高，也因此有更高的优先规则。</p>\n<p>而通常我们可以通过一个</p>\n<pre><code>p{\n    text-align:left;\n}\n</code></pre><p>这样的元素选择器来给予所有的 p 元素一个左对齐。</p>\n<p>还有复杂一点的复合型选择器，下面的是 HTML 文件</p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;CSS example&lt;/title&gt;\n    &lt;link href=&quot;./style.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;p class=&quot;para&quot;&gt;如果没有一个好的结构&lt;/p&gt;\n    &lt;div id=&quot;content&quot;&gt;\n        &lt;p class=&quot;para2&quot;&gt;那么以后可能就是这样子。。。。&lt;/p&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>还有 CSS 文件</p>\n<pre><code>.para{\n    font-size: 22px;\n    color:#f00;\n    text-align: center;\n    padding-left: 20px;\n}\n.para2{\n    font-size:44px;\n    color:#3ed;\n    text-indent: 2em;\n    padding-left: 2em;\n}\n\np.para{\n    color:#f0f;\n}\ndiv#content p {\n    font-size:22px;\n}\n</code></pre><h3 id=\"更有趣的-CSS\"><a href=\"#更有趣的-CSS\" class=\"headerlink\" title=\"更有趣的 CSS\"></a>更有趣的 CSS</h3><p>一个包含了 para2 以及 para_bg 的例子</p>\n<pre><code>&lt;div id=&quot;content&quot;&gt;\n    &lt;p class=&quot;para2 para_bg&quot;&gt;那么以后可能就是这样子。。。。&lt;/p&gt;\n&lt;/div&gt;\n</code></pre><p>我们只是添加了一个黑色的背景</p>\n<pre><code>.para_bg{\n    background-color:#000;\n}\n</code></pre><p>重新改变后的网页变得比原来有趣了很多，所谓的继承与合并就是上面的例子。</p>\n<p>我们还可以用 CSS3 做出更多有趣的效果，而这些并不在我们的讨论范围里面，因为我们讨论的是 be a geek。</p>\n<p>或许我们写的代码都是那么的简单，从 HTML 到 JavaScript，还有现在的 CSS，只是总有一些核心的东西，而不是去考虑那些基础语法，基础的东西我们可以在实践的过程中一一发现。但是我们可能发现不了，或者在平时的使用中考虑不到一些有趣的用法或者说特殊的用法，这时候可以通过观察一些精致设计的代码中学习到。复杂的东西可以变得很简单，简单的东西也可以变得很复杂。</p>\n","excerpt":"<p>如果说 HTML 是建筑的框架，CSS 就是房子的装修。那么 JavaScript 呢，我听到的最有趣的说法是小三——还是先让我们回到代码上来吧。</p>\n<p>下面就是我们之前说到的代码，CSS 将 Red 三个字母变成了红色。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">\"para\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"color:red\"</span>&gt;</span>Red<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"app.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>","more":"<p>只是，</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> para=<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"para\"</span>);</span><br><span class=\"line\">para.style.color=<span class=\"string\">\"blue\"</span>;</span><br></pre></td></tr></table></figure>\n<p>将字体变成了蓝色，CSS+HTML 让页面有序的工作着，但是 JavaScript 却打乱了这些秩序，有着唯恐世界不乱的精彩，也难怪被冠以小三之名了——或许终于可以理解，为什么以前人们对于 JavaScript 没有好感了——不过这里要讲的是正室，也就是 CSS，这时还没有 JavaScript。</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter1/redfonts.png\" alt=\"Red Fonts\"></p>\n<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>这不是一篇专业讲述 CSS 的书籍，所以我不会去说 CSS 是怎么来的，有些东西我们既然可以很容易从其他地方知道，也就不需要花太多时间去重复。诸如重构等这些的目的之一也在于去除重复的代码，不过有些重复是不可少的，也是有必要的，而通常这些东西可能是由其他地方复制过来的。</p>\n<p>到目前为止我们没有依赖于任何特殊的硬件或者是软件，对于我们来说我们最基本的需求就是一台电脑，或者可以是你的平板电脑，当然也可以是你的智能手机，因为他们都有个浏览器，而这些都是能用的，对于我们的 CSS 来说也不会有例外的。</p>\n<p>CSS(Cascading Style Sheets)，到今天我也没有记得他的全称，CSS 还有一个中文名字是层叠式样式表，事实上翻译成什么可能并不是我们关心的内容，我们需要关心的是他能做些什么。作为三剑客之一，它的主要目的在于可以让我们方便灵活地去控制 Web 页面的外观表现。我们可以用它做出像淘宝一样复杂的界面，也可以像我们的书本一样简单，不过如果要和我们书本一样简单的话，可能不需要用到 CSS。HTML 一开始就是依照报纸的格式而设计的，我们还可以继续用上面说到的编辑器，又或者是其他的。如果你喜欢 DreamWeaver 那也不错，不过一开始使用 IDE 可无助于我们写出良好的代码。</p>\n<p>忘说了，CSS 也是有版本的，和 Windows，Linux 内核等等一样，但是更新可能没有那么频繁，HTML 也是有版本的，JS 也是有版本的，复杂的东西不是当前考虑的内容。</p>\n<h4 id=\"代码结构\"><a href=\"#代码结构\" class=\"headerlink\" title=\"代码结构\"></a>代码结构</h4><p>对于我们的上面的 Red 示例来说，如果没有一个好的结构，那么以后可能就是这样子。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">style</span>=<span class=\"string\">\"font-size: 22px;color:#f00;text-align: center;padding-left: 20px;\"</span>&gt;</span>如果没有一个好的结构<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">style</span>=<span class=\"string\">\"\tfont-size:44px;color:#3ed;text-indent: 2em;padding-left: 2em;\"</span>&gt;</span>那么以后可能就是这样子。。。。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>虽然我们看到的还是一样的:</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter1/nostyle.png\" alt=\"No Style\"></p>\n<p>于是我们就按各种书上的建议重新写了上面的代码</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>CSS example<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"css\"></span><br><span class=\"line\">\t\t<span class=\"selector-class\">.para</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">font-size</span>: <span class=\"number\">22px</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">color</span>:<span class=\"number\">#f00</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">padding-left</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"selector-class\">.para2</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">font-size</span>:<span class=\"number\">44px</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">color</span>:<span class=\"number\">#3ed</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">text-indent</span>: <span class=\"number\">2em</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">padding-left</span>: <span class=\"number\">2em</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"para\"</span>&gt;</span>如果没有一个好的结构<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"para2\"</span>&gt;</span>那么以后可能就是这样子。。。。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>总算比上面好看也好理解多了，这只是临时的用法，当文件太大的时候，正式一点的写法应该如下所示:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>CSS example<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"style.css\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"para\"</span>&gt;</span>如果没有一个好的结构<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"para2\"</span>&gt;</span>那么以后可能就是这样子。。。。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>我们需要</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>CSS example<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"./style.css\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"para\"</span>&gt;</span>如果没有一个好的结构<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"para2\"</span>&gt;</span>那么以后可能就是这样子。。。。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>然后我们有一个像 app.js 一样的 style.css 放在同目录下，而他的内容便是</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.para&#123;</span><br><span class=\"line\">\tfont-size: 22px;</span><br><span class=\"line\">\tcolor:#f00;</span><br><span class=\"line\">\ttext-align: center;</span><br><span class=\"line\">\tpadding-left: 20px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.para2&#123;</span><br><span class=\"line\">\tfont-size:44px;</span><br><span class=\"line\">\tcolor:#3ed;</span><br><span class=\"line\">\ttext-indent: 2em;</span><br><span class=\"line\">\tpadding-left: 2em;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">```\t\t\t</span><br><span class=\"line\"></span><br><span class=\"line\">这代码和 JS 的代码有如此多的相似</span><br><span class=\"line\"></span><br><span class=\"line\">```javascript</span><br><span class=\"line\">var para=&#123;</span><br><span class=\"line\">\tfont_size:'22px',</span><br><span class=\"line\">\tcolor:'#f00',</span><br><span class=\"line\">\ttext_align:'center',</span><br><span class=\"line\">\tpadding_left:'20px',</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>而22px、20px以及#f00都是数值，因此：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var para=&#123;</span><br><span class=\"line\">\tfont_size:22px,</span><br><span class=\"line\">\tcolor:#f00,</span><br><span class=\"line\">\ttext_align:center,</span><br><span class=\"line\">\tpadding_left:20px,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>目测差距已经尽可能的小了，至于这些话题会在以后讨论到，如果要让我们的编译器更正确的工作，那么我们就需要非常多这样的符号，除非你乐意去理解:</p>\n<figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"name\">dotimes</span> (<span class=\"name\">i</span> <span class=\"number\">4</span>) (<span class=\"name\">print</span> i))</span><br></pre></td></tr></table></figure>\n<p>总的来说我们减少了符号的使用，但是用 lisp 便带入了更多的括号，不过这是一种简洁的表达方式，也许我们可以在其他语言中看到。</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\d&#123;2&#125;/[<span class=\"string\">A-Z</span>][<span class=\"symbol\">a-z</span>][<span class=\"string\">a-z</span>]/\\d&#123;4&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的代码，是为了从一堆数据中找出“某日/某月/某年”。如果一开始不理解那是正则表达式，就会觉得那个很复杂。</p>\n<p>这门语言可能是为设计师而设计的，但是设计师大部分还是不懂编程的，不过相对来说这门语言还是比其他语言简单易懂一些。</p>\n<h3 id=\"样式与目标\"><a href=\"#样式与目标\" class=\"headerlink\" title=\"样式与目标\"></a>样式与目标</h3><p>如下所示，就是我们的样式</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.para</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">font-size</span>: <span class=\"number\">22px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">color</span>:<span class=\"number\">#f00</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">\t<span class=\"attribute\">padding-left</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们的目标就是</p>\n<blockquote>\n<p>如果没有一个好的结构</p>\n</blockquote>\n<p>所以样式和目标在这里牵手了，问题是他们是如何在一起的呢？下面就是 CSS 与 HTML 沟通的重点所在了:</p>\n<h3 id=\"选择器\"><a href=\"#选择器\" class=\"headerlink\" title=\"选择器\"></a>选择器</h3><p>我们用到的选择器叫做类选择器，也就是 class，或者说应该称之为 class 选择器更合适。与类选择器最常一起出现的是 ID 选择器，不过这个适用于比较高级的场合，诸如用 JS 控制 DOM 的时候就需要用到 ID 选择器。而基本的选择器就是如下面的例子:</p>\n<pre><code>p.para{\n    color:#f0f;\n}\n</code></pre><p>将代码添加到 style.css 的最下面会发现“如果没有一个好的结构”变成了粉红色，当然我们还会有这样的写法</p>\n<pre><code>p&gt;.para{\n    color:#f0f;\n}\n</code></pre><p>为了产生上面的特殊的样式，虽然不好看，但是我们终于理解什么叫层叠样式了，下面的代码的重要度比上面高，也因此有更高的优先规则。</p>\n<p>而通常我们可以通过一个</p>\n<pre><code>p{\n    text-align:left;\n}\n</code></pre><p>这样的元素选择器来给予所有的 p 元素一个左对齐。</p>\n<p>还有复杂一点的复合型选择器，下面的是 HTML 文件</p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;CSS example&lt;/title&gt;\n    &lt;link href=&quot;./style.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;p class=&quot;para&quot;&gt;如果没有一个好的结构&lt;/p&gt;\n    &lt;div id=&quot;content&quot;&gt;\n        &lt;p class=&quot;para2&quot;&gt;那么以后可能就是这样子。。。。&lt;/p&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>还有 CSS 文件</p>\n<pre><code>.para{\n    font-size: 22px;\n    color:#f00;\n    text-align: center;\n    padding-left: 20px;\n}\n.para2{\n    font-size:44px;\n    color:#3ed;\n    text-indent: 2em;\n    padding-left: 2em;\n}\n\np.para{\n    color:#f0f;\n}\ndiv#content p {\n    font-size:22px;\n}\n</code></pre><h3 id=\"更有趣的-CSS\"><a href=\"#更有趣的-CSS\" class=\"headerlink\" title=\"更有趣的 CSS\"></a>更有趣的 CSS</h3><p>一个包含了 para2 以及 para_bg 的例子</p>\n<pre><code>&lt;div id=&quot;content&quot;&gt;\n    &lt;p class=&quot;para2 para_bg&quot;&gt;那么以后可能就是这样子。。。。&lt;/p&gt;\n&lt;/div&gt;\n</code></pre><p>我们只是添加了一个黑色的背景</p>\n<pre><code>.para_bg{\n    background-color:#000;\n}\n</code></pre><p>重新改变后的网页变得比原来有趣了很多，所谓的继承与合并就是上面的例子。</p>\n<p>我们还可以用 CSS3 做出更多有趣的效果，而这些并不在我们的讨论范围里面，因为我们讨论的是 be a geek。</p>\n<p>或许我们写的代码都是那么的简单，从 HTML 到 JavaScript，还有现在的 CSS，只是总有一些核心的东西，而不是去考虑那些基础语法，基础的东西我们可以在实践的过程中一一发现。但是我们可能发现不了，或者在平时的使用中考虑不到一些有趣的用法或者说特殊的用法，这时候可以通过观察一些精致设计的代码中学习到。复杂的东西可以变得很简单，简单的东西也可以变得很复杂。</p>"},{"title":"前端与后台","date":"2016-04-24T15:45:08.000Z","_content":"\n> 前端 Front-end 和后端 Back-end 是描述进程开始和结束的通用词汇。前端作用于采集输入信息，后端进行处理。\n\n这种说法给人一种很模糊的感觉，但是他说得又很对，它负责视觉展示。在 MVC 结构或者 MVP 中，负责视觉显示的部分只有 View 层，而今天大多数所谓的 View 层已经超越了 View 层。前端是一个很神奇的概念，但是而今的前端已经发生了很大的变化。你引入了 Backbone、Angluar，你的架构变成了 MVP、MVVM。尽管发生了一些架构上的变化，但是项目的开发并没有因此而发生变化。这其中涉及到了一些职责的问题，如果某一个层级中有太多的职责，那么它是不是加重了一些人的负担？\n\n后台在过去的岁月里起着很重要的作用，当然在未来也是。就最几年的解耦趋势来看，它在变得更小，变成一系列的服务。并向前台提供很多 RESTful API，看上去有点像提供一些辅助性的工作。\n\n<!-- more --> \n\n因此在这一章里，我们将讲述详细介绍：\n\n1. 后台语言与选型\n2. 前端框架与选型\n3. 前端一致化，后台服务化的趋势\n4. 前后端通讯","source":"_posts/2.0.0-back-front.md","raw":"title: 前端与后台\ndate: 2016-4-24 23:45:08\ntags:\n---\n\n> 前端 Front-end 和后端 Back-end 是描述进程开始和结束的通用词汇。前端作用于采集输入信息，后端进行处理。\n\n这种说法给人一种很模糊的感觉，但是他说得又很对，它负责视觉展示。在 MVC 结构或者 MVP 中，负责视觉显示的部分只有 View 层，而今天大多数所谓的 View 层已经超越了 View 层。前端是一个很神奇的概念，但是而今的前端已经发生了很大的变化。你引入了 Backbone、Angluar，你的架构变成了 MVP、MVVM。尽管发生了一些架构上的变化，但是项目的开发并没有因此而发生变化。这其中涉及到了一些职责的问题，如果某一个层级中有太多的职责，那么它是不是加重了一些人的负担？\n\n后台在过去的岁月里起着很重要的作用，当然在未来也是。就最几年的解耦趋势来看，它在变得更小，变成一系列的服务。并向前台提供很多 RESTful API，看上去有点像提供一些辅助性的工作。\n\n<!-- more --> \n\n因此在这一章里，我们将讲述详细介绍：\n\n1. 后台语言与选型\n2. 前端框架与选型\n3. 前端一致化，后台服务化的趋势\n4. 前后端通讯","slug":"2.0.0-back-front","published":1,"updated":"2016-04-24T11:24:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuf7mpe2000atsif1iybd4zw","content":"<blockquote>\n<p>前端 Front-end 和后端 Back-end 是描述进程开始和结束的通用词汇。前端作用于采集输入信息，后端进行处理。</p>\n</blockquote>\n<p>这种说法给人一种很模糊的感觉，但是他说得又很对，它负责视觉展示。在 MVC 结构或者 MVP 中，负责视觉显示的部分只有 View 层，而今天大多数所谓的 View 层已经超越了 View 层。前端是一个很神奇的概念，但是而今的前端已经发生了很大的变化。你引入了 Backbone、Angluar，你的架构变成了 MVP、MVVM。尽管发生了一些架构上的变化，但是项目的开发并没有因此而发生变化。这其中涉及到了一些职责的问题，如果某一个层级中有太多的职责，那么它是不是加重了一些人的负担？</p>\n<p>后台在过去的岁月里起着很重要的作用，当然在未来也是。就最几年的解耦趋势来看，它在变得更小，变成一系列的服务。并向前台提供很多 RESTful API，看上去有点像提供一些辅助性的工作。</p>\n<a id=\"more\"></a> \n<p>因此在这一章里，我们将讲述详细介绍：</p>\n<ol>\n<li>后台语言与选型</li>\n<li>前端框架与选型</li>\n<li>前端一致化，后台服务化的趋势</li>\n<li>前后端通讯</li>\n</ol>\n","excerpt":"<blockquote>\n<p>前端 Front-end 和后端 Back-end 是描述进程开始和结束的通用词汇。前端作用于采集输入信息，后端进行处理。</p>\n</blockquote>\n<p>这种说法给人一种很模糊的感觉，但是他说得又很对，它负责视觉展示。在 MVC 结构或者 MVP 中，负责视觉显示的部分只有 View 层，而今天大多数所谓的 View 层已经超越了 View 层。前端是一个很神奇的概念，但是而今的前端已经发生了很大的变化。你引入了 Backbone、Angluar，你的架构变成了 MVP、MVVM。尽管发生了一些架构上的变化，但是项目的开发并没有因此而发生变化。这其中涉及到了一些职责的问题，如果某一个层级中有太多的职责，那么它是不是加重了一些人的负担？</p>\n<p>后台在过去的岁月里起着很重要的作用，当然在未来也是。就最几年的解耦趋势来看，它在变得更小，变成一系列的服务。并向前台提供很多 RESTful API，看上去有点像提供一些辅助性的工作。</p>","more":"<p>因此在这一章里，我们将讲述详细介绍：</p>\n<ol>\n<li>后台语言与选型</li>\n<li>前端框架与选型</li>\n<li>前端一致化，后台服务化的趋势</li>\n<li>前后端通讯</li>\n</ol>"},{"title":"JS","date":"2016-04-24T14:45:08.000Z","_content":"\nJavaScript 现在已经无处不在了，也许你正打开的某个网站，他便可能是 node.js+json+javascript+mustache.js 完成的，虽然你还没理解上面那些是什么，也正是因为你不理解才需要去学习更多的东西。但是你只要知道 JavaScript 已经无处不在了，它可能就在你手机上的某个 app 里，就在你浏览的网页里，就运行在你 IDE 中的某个进程里。\n\n### hello,world\n\n这里我们还需要有一个 helloworld.html，JavaScript 是专为网页交互而设计的脚本语言，所以我们一点点来开始这部分的旅途，先写一个符合标准的 helloworld.html\n\n``` html\n<!DOCTYPE html>\n<html>\n\t<head></head>\n\t<body></body>\n</html>\n```\n\n<!-- more --> \n\n然后开始融入我们的 JavaScript，向 HTML 中插入JavaScript 的方法，就需要用到 HTML 中的 `<script>` 标签，我们先用页面嵌入的方法来写 helloworld。\n\n``` html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<script>\n\t\t\tdocument.write('hello,world');\n\t\t</script>\n\t</head>\n\t<body></body>\n</html>\n```\n\n按照标准的写法，我们还需要声明这个脚本的类型\n\n``` html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<script type=\"text/javascript\">\n\t\t\tdocument.write('hello,world');\n\t\t</script>\n\t</head>\n\t<body></body>\n</html>\n```\n\n没有显示 hello,world ?试试下面的代码\n\n``` html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<script type=\"text/javascript\">\n\t\t\tdocument.write('hello,world');\n\t\t</script>\n\t</head>\n\t<body>\n\t\t<noscript>\n\t\t\tdisable Javascript\n\t\t</noscript>\n\t</body>\n</html>\n```\n\n### JavaScriptFul\n\n我们需要让我们的代码看上去更像是 js，同时是以 js 结尾。就像 C 语言的源码是以 C 结尾的，我们也同样需要让我们的代码看上去更正式一点。于是我们需要在 helloworld.html 的同一文件夹下创建一个 app.js 文件，在里面写着\n\n``` javascript\ndocument.write('hello,world');\n```\n\n同时我们的 helloworld.html 还需要告诉我们的浏览器 js 代码在哪里\n\n``` html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<script type=\"text/javascript\" src=\"app.js\"></script>\n\t</head>\n\t<body>\n\t\t<noscript>\n\t\t\tdisable Javascript\n\t\t</noscript>\n\t</body>\n</html>\n```\n\n#### 从数学出发\n\n让我们回到第一章讲述的小明的问题，**从实际问题下手编程，更容易学会编程**。小学时代的数学题最喜欢这样子了——某商店里的糖一个5块钱，小明买了3个糖，小明一共花了多少钱。在编程方面，也许我们还算是小学生。最直接的方法就是直接计算 3x5=?\n\n``` javascript\ndocument.write(3*5);\n```\n\ndocument.write 实际也我们可以理解为输出，也就是往页面里写入 3*5 的结果，在有双引号的情况下会输出字符串。我们便会在浏览器上看到15，这便是一个好的开始，也是一个糟糕的开始。\n\n#### 设计和编程\n\n对于实际问题，如果我们只是止于所要得到的结果，很多年之后，我们就成为了 code monkey。对这个问题进行再一次设计，所谓的设计有些时候会把简单的问题复杂化，有些时候会使以后的扩展更加简单。这一天因为这家商店的糖价格太高了，于是店长将价格降为了4块钱。\n\n``` javascript\ndocument.write(3*4);\n```\n\n于是我们又得到了我们的结果，但是下次我们看到这些代码的时候没有分清楚哪个是糖的数量，哪个是价格，于是我们重新设计了程序\n\n``` javascript\ntang=4;\nnum=3;\ndocument.write(tang*num);\n```\n\n这才能叫得上是程序设计，或许你注意到了\";\"这个符号的存在，我想说的是这是另外一个标准，我们不得不去遵守，也不得不去 fuck。\n\n#### 函数\n\n记得刚开始学三角函数的时候，我们会写\n\n    sin 30=0.5\n\n而我们的函数也是类似于此，换句话说，因为很多搞计算机的先驱都学好了数学，都把数学世界的规律带到了计算机世界，所以我们的函数也是类似于此，让我们从一个简单的开始。\n\n``` javascript\nfunction hello(){\n\treturn document.write(\"hello,world\");\n}\nhello();\n```\n\n当我第一次看到函数的时候，有些小激动终于出现了。我们写了一个叫 hello 的函数，它返回了往页面中写入 hello,world 的方法，然后我们调用了 hello 这个函数，于是页面上有了 hello,world。\n\n``` javascript\nfunction sin(degree){\n\treturn document.write(Math.sin(degree));\n}\nsin(30);\n```\n\n在这里 degree 就称之为变量。\n于是输出了 -0.9880316240928602，而不是 0.5，因为这里用的是弧度制，而不是角度制。\n\n    sin(30)\n\n的输出结果有点类似于sin 30。写括号的目的在于，括号是为了方便解析，这个在不同的语言中可能是不一样的，比如在 Ruby 中我们可以直接用类似于数学中的表达:\n\n``` ruby\n2.0.0-p353 :004 > Math.sin 30\n=> -0.9880316240928618\n2.0.0-p353 :005 >\n```\n\n我们可以在函数中传入多个变量，于是我们再回到小明的问题，就会这样去编写代码。\n\n``` javascript\nfunction calc(tang,num){\n\tresult=tang*num;\n\tdocument.write(result);\n}\ncalc(3,4);\n```\n\n但是从某种程度上来说，我们的 calc 做了计算的事又做了输出的事，总的来说设计上有些不好。\n\n#### 重新设计\n\n我们将输出的工作移到函数的外面，\n\n``` javascript\nfunction calc(tang,num){\n\treturn tang*num;\n}\ndocument.write(calc(3,4));\n```\n\n接着我们用一种更有意思的方法来写这个问题的解决方案\n\n``` javascript\nfunction calc(tang,num){\n\treturn tang*num;\n}\nfunction printResult(tang,num){\n\tdocument.write(calc(tang,num));\n}\nprintResult(3, 4)\n```\n\n看上去更专业了一点点，如果我们只需要计算的时候我们只需要调用 calc，如果我们需要输出的时候我们就调用 printResult 的方法。\n\n#### object 和函数\n\n我们还没有说清楚之前我们遇到过的 document.write 以及 Math.sin 的语法为什么看上去很奇怪，所以让我们看看他们到底是什么，修改 app.js 为以下内容\n\n``` javascript\ndocument.write(typeof document);\ndocument.write(typeof Math);\n```\n\ntypeof document 会返回 document 的数据类型，就会发现输出的结果是\n\n``` javascript\nobject object\n```\n\n所以我们需要去弄清楚什么是 object。对象的定义是\n\n> 无序属性的集合，其属性可以包含基本值、对象或者函数。\n\n创建一个 object，然后观察这便是我们接下来要做的\n\n``` javascript\nstore={};\nstore.tang=4;\nstore.num=3;\ndocument.write(store.tang*store.num);\n```\n\n我们就有了和 document.write 一样的用法，这也是对象的美妙之处，只是这里的对象只是包含着基本值，因为\n\n    typeof story.tang=\"number\"\n\n一个包含对象的对象应该是这样子的。\n\n``` javascript\nstore={};\nstore.tang=4;\nstore.num=3;\ndocument.writeln(store.tang*store.num);\n\nvar wall=new Object();\nwall.store=store;\ndocument.write(typeof wall.store);\n```\n\n而我们用到的 document.write 和上面用到的 document.writeln 都是属于这个无序属性集合中的函数。\n\n下面代码说的就是这个无序属性集合中的函数。\n\n``` javascript\nvar IO=new Object();\nfunction print(result){\n\tdocument.write(result);\n};\nIO.print=print;\nIO.print(\"a obejct with function\");\nIO.print(typeof IO.print);\n```\n\n我们定义了一个叫 IO 的对象，声明对象可以用\n\n    var store={};\n\n又或者是    \n\n    var store=new Object{};\n\n两者是等价的，但是用后者的可读性会更好一点，我们定义了一个叫print的函数，他的作用也就是 document.write，IO 中的print 函数是等价于 print() 函数，这也就是对象和函数之间的一些区别，对象可以包含函数，对象是无序属性的集合，其属性可以包含基本值、对象或者函数。\n\n复杂一点的对象应该是下面这样的一种情况。\n\n``` javascript\nvar Person={name:\"phodal\",weight:50,height:166};\nfunction dream(){\n\tfuture;\n};\nPerson.future=dream;\ndocument.write(typeof Person);\ndocument.write(Person.future);\n```\n\n而这些会在我们未来的实际编程过程中用得更多。\n\n### 面向对象\n\n开始之前先让我们简化上面的代码，\n\n``` javascript\nPerson.future=function dream(){\n\tfuture;\n}\n```\n\n看上去比上面的简单多了，不过我们还可以简化为下面的代码。。。\n\n``` javascript\nvar Person=function(){\n\tthis.name=\"phodal\";\n\tthis.weight=50;\n\tthis.height=166;\n\tthis.future=function dream(){\n\t\treturn \"future\";\n\t};\n};\nvar person=new Person();\ndocument.write(person.name+\"<br>\");\ndocument.write(typeof person+\"<br>\");\ndocument.write(typeof person.future+\"<br>\");\ndocument.write(person.future()+\"<br>\");\n```\n\n只是在这个时候 Person 是一个函数，但是我们声明的 person 却变成了一个对象 **一个Javascript函数也是一个对象，并且，所有的对象从技术上讲也只不过是函数。** 这里的\"\\<br\\>\"是 HTML 中的元素，称之为 DOM，在这里起的是换行的作用，我们会在稍后介绍它，这里我们先关心下 this。this 关键字表示函数的所有者或作用域，也就是这里的 Person。\n\n上面的方法显得有点不可取，换句话说和一开始的\n\n    document.write(3*4);\n\n一样，不具有灵活性，因此在我们完成功能之后，我们需要对其进行优化，这就是程序设计的真谛——解决完实际问题后，我们需要开始真正的设计，而不是解决问题时的编程。\n\n``` javascript\nvar Person=function(name,weight,height){\n\tthis.name=name;\n\tthis.weight=weight;\n\tthis.height=height;\n\tthis.future=function(){\n\t\treturn \"future\";\n\t};\n};\nvar phodal=new Person(\"phodal\",50,166);\ndocument.write(phodal.name+\"<br>\");\ndocument.write(phodal.weight+\"<br>\");\ndocument.write(phodal.height+\"<br>\");\ndocument.write(phodal.future()+\"<br>\");\n```\n\n于是，产生了这样一个可重用的 JavaScript 对象, this 关键字确立了属性的所有者。\n\n### 其他\n\nJavaScript 还有一个很强大的特性，也就是原型继承，不过这里我们先不考虑这些部分，用尽量少的代码及关键字来实际我们所要表达的核心功能，这才是这里的核心，其他的东西我们可以从其他书本上学到。\n\n所谓的继承，\n\n``` javascript\nvar Chinese=function(){\n\tthis.country=\"China\";\n}\n\nvar Person=function(name,weight,height){\n\tthis.name=name;\n\tthis.weight=weight;\n\tthis.height=height;\n\tthis.futrue=function(){\n\t\treturn \"future\";\n\t}\n}\nChinese.prototype=new Person();\n\nvar phodal=new Chinese(\"phodal\",50,166);\ndocument.write(phodal.country);\n```\n\n完整的 JavaScript 应该由下列三个部分组成:\n\n - 核心(ECMAScript)——核心语言功能\n - 文档对象模型(DOM)——访问和操作网页内容的方法和接口\n - 浏览器对象模型(BOM)——与浏览器交互的方法和接口\n\n我们在上面讲的都是 ECMAScript，也就是语法相关的，但是 JS 真正强大的，或者说我们最需要的可能就是对 DOM 的操作，这也就是为什么 jQuery 等库可以流行的原因之一，而核心语言功能才是真正在哪里都适用的，至于 BOM，真正用到的机会很少，因为没有完善的统一的标准。\n\n一个简单的 DOM 示例,\n\n``` html\n<!DOCTYPE html>\n<html>\n<head>\n</head>\n<body>\n\t<noscript>\n\t\tdisable Javascript\n\t</noscript>\n\t<p id=\"para\" style=\"color:red\">Red</p>\n</body>\n\t<script type=\"text/javascript\" src=\"app.js\"></script>\n</html>\n```\n\n我们需要修改一下 helloworld.html 添加\n\n```HTML\n<p id=\"para\" style=\"color:red\">Red</p>\n```\n\n同时还需要将 script 标签移到 body 下面，如果没有意外的话我们会看到页面上用红色的字体显示 Red，修改 app.js。\n\n``` javascript\nvar para=document.getElementById(\"para\");\npara.style.color=\"blue\";\n```\n\n接着，字体就变成了蓝色，有了 DOM 我们就可以对页面进行操作，可以说我们看到的绝大部分的页面效果都是通过 DOM 操作实现的。\n\n#### 美妙之处\n\n这里说到的 JavaScript 仅仅只是其中的一小小部分，忽略掉的东西很多，只关心的是如何去设计一个实用的 app，作为一门编程语言，他还有其他强大的内制函数，要学好需要一本有价值的参考书。这里提到的只是其中的不到20%的东西，其他的80%或者更多会在你解决问题的时候出现。\n\n - 我们可以创建一个对象或者函数，它可以包含基本值、对象或者函数。\n - 我们可以用 JavaScript 修改页面的属性，虽然只是简单的示例。\n - 我们还可以去解决实际的编程问题。\n","source":"_posts/1.4.2-js.md","raw":"title: JS\ndate: 2016-4-24 22:45:08\ntags:\n---\n\nJavaScript 现在已经无处不在了，也许你正打开的某个网站，他便可能是 node.js+json+javascript+mustache.js 完成的，虽然你还没理解上面那些是什么，也正是因为你不理解才需要去学习更多的东西。但是你只要知道 JavaScript 已经无处不在了，它可能就在你手机上的某个 app 里，就在你浏览的网页里，就运行在你 IDE 中的某个进程里。\n\n### hello,world\n\n这里我们还需要有一个 helloworld.html，JavaScript 是专为网页交互而设计的脚本语言，所以我们一点点来开始这部分的旅途，先写一个符合标准的 helloworld.html\n\n``` html\n<!DOCTYPE html>\n<html>\n\t<head></head>\n\t<body></body>\n</html>\n```\n\n<!-- more --> \n\n然后开始融入我们的 JavaScript，向 HTML 中插入JavaScript 的方法，就需要用到 HTML 中的 `<script>` 标签，我们先用页面嵌入的方法来写 helloworld。\n\n``` html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<script>\n\t\t\tdocument.write('hello,world');\n\t\t</script>\n\t</head>\n\t<body></body>\n</html>\n```\n\n按照标准的写法，我们还需要声明这个脚本的类型\n\n``` html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<script type=\"text/javascript\">\n\t\t\tdocument.write('hello,world');\n\t\t</script>\n\t</head>\n\t<body></body>\n</html>\n```\n\n没有显示 hello,world ?试试下面的代码\n\n``` html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<script type=\"text/javascript\">\n\t\t\tdocument.write('hello,world');\n\t\t</script>\n\t</head>\n\t<body>\n\t\t<noscript>\n\t\t\tdisable Javascript\n\t\t</noscript>\n\t</body>\n</html>\n```\n\n### JavaScriptFul\n\n我们需要让我们的代码看上去更像是 js，同时是以 js 结尾。就像 C 语言的源码是以 C 结尾的，我们也同样需要让我们的代码看上去更正式一点。于是我们需要在 helloworld.html 的同一文件夹下创建一个 app.js 文件，在里面写着\n\n``` javascript\ndocument.write('hello,world');\n```\n\n同时我们的 helloworld.html 还需要告诉我们的浏览器 js 代码在哪里\n\n``` html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<script type=\"text/javascript\" src=\"app.js\"></script>\n\t</head>\n\t<body>\n\t\t<noscript>\n\t\t\tdisable Javascript\n\t\t</noscript>\n\t</body>\n</html>\n```\n\n#### 从数学出发\n\n让我们回到第一章讲述的小明的问题，**从实际问题下手编程，更容易学会编程**。小学时代的数学题最喜欢这样子了——某商店里的糖一个5块钱，小明买了3个糖，小明一共花了多少钱。在编程方面，也许我们还算是小学生。最直接的方法就是直接计算 3x5=?\n\n``` javascript\ndocument.write(3*5);\n```\n\ndocument.write 实际也我们可以理解为输出，也就是往页面里写入 3*5 的结果，在有双引号的情况下会输出字符串。我们便会在浏览器上看到15，这便是一个好的开始，也是一个糟糕的开始。\n\n#### 设计和编程\n\n对于实际问题，如果我们只是止于所要得到的结果，很多年之后，我们就成为了 code monkey。对这个问题进行再一次设计，所谓的设计有些时候会把简单的问题复杂化，有些时候会使以后的扩展更加简单。这一天因为这家商店的糖价格太高了，于是店长将价格降为了4块钱。\n\n``` javascript\ndocument.write(3*4);\n```\n\n于是我们又得到了我们的结果，但是下次我们看到这些代码的时候没有分清楚哪个是糖的数量，哪个是价格，于是我们重新设计了程序\n\n``` javascript\ntang=4;\nnum=3;\ndocument.write(tang*num);\n```\n\n这才能叫得上是程序设计，或许你注意到了\";\"这个符号的存在，我想说的是这是另外一个标准，我们不得不去遵守，也不得不去 fuck。\n\n#### 函数\n\n记得刚开始学三角函数的时候，我们会写\n\n    sin 30=0.5\n\n而我们的函数也是类似于此，换句话说，因为很多搞计算机的先驱都学好了数学，都把数学世界的规律带到了计算机世界，所以我们的函数也是类似于此，让我们从一个简单的开始。\n\n``` javascript\nfunction hello(){\n\treturn document.write(\"hello,world\");\n}\nhello();\n```\n\n当我第一次看到函数的时候，有些小激动终于出现了。我们写了一个叫 hello 的函数，它返回了往页面中写入 hello,world 的方法，然后我们调用了 hello 这个函数，于是页面上有了 hello,world。\n\n``` javascript\nfunction sin(degree){\n\treturn document.write(Math.sin(degree));\n}\nsin(30);\n```\n\n在这里 degree 就称之为变量。\n于是输出了 -0.9880316240928602，而不是 0.5，因为这里用的是弧度制，而不是角度制。\n\n    sin(30)\n\n的输出结果有点类似于sin 30。写括号的目的在于，括号是为了方便解析，这个在不同的语言中可能是不一样的，比如在 Ruby 中我们可以直接用类似于数学中的表达:\n\n``` ruby\n2.0.0-p353 :004 > Math.sin 30\n=> -0.9880316240928618\n2.0.0-p353 :005 >\n```\n\n我们可以在函数中传入多个变量，于是我们再回到小明的问题，就会这样去编写代码。\n\n``` javascript\nfunction calc(tang,num){\n\tresult=tang*num;\n\tdocument.write(result);\n}\ncalc(3,4);\n```\n\n但是从某种程度上来说，我们的 calc 做了计算的事又做了输出的事，总的来说设计上有些不好。\n\n#### 重新设计\n\n我们将输出的工作移到函数的外面，\n\n``` javascript\nfunction calc(tang,num){\n\treturn tang*num;\n}\ndocument.write(calc(3,4));\n```\n\n接着我们用一种更有意思的方法来写这个问题的解决方案\n\n``` javascript\nfunction calc(tang,num){\n\treturn tang*num;\n}\nfunction printResult(tang,num){\n\tdocument.write(calc(tang,num));\n}\nprintResult(3, 4)\n```\n\n看上去更专业了一点点，如果我们只需要计算的时候我们只需要调用 calc，如果我们需要输出的时候我们就调用 printResult 的方法。\n\n#### object 和函数\n\n我们还没有说清楚之前我们遇到过的 document.write 以及 Math.sin 的语法为什么看上去很奇怪，所以让我们看看他们到底是什么，修改 app.js 为以下内容\n\n``` javascript\ndocument.write(typeof document);\ndocument.write(typeof Math);\n```\n\ntypeof document 会返回 document 的数据类型，就会发现输出的结果是\n\n``` javascript\nobject object\n```\n\n所以我们需要去弄清楚什么是 object。对象的定义是\n\n> 无序属性的集合，其属性可以包含基本值、对象或者函数。\n\n创建一个 object，然后观察这便是我们接下来要做的\n\n``` javascript\nstore={};\nstore.tang=4;\nstore.num=3;\ndocument.write(store.tang*store.num);\n```\n\n我们就有了和 document.write 一样的用法，这也是对象的美妙之处，只是这里的对象只是包含着基本值，因为\n\n    typeof story.tang=\"number\"\n\n一个包含对象的对象应该是这样子的。\n\n``` javascript\nstore={};\nstore.tang=4;\nstore.num=3;\ndocument.writeln(store.tang*store.num);\n\nvar wall=new Object();\nwall.store=store;\ndocument.write(typeof wall.store);\n```\n\n而我们用到的 document.write 和上面用到的 document.writeln 都是属于这个无序属性集合中的函数。\n\n下面代码说的就是这个无序属性集合中的函数。\n\n``` javascript\nvar IO=new Object();\nfunction print(result){\n\tdocument.write(result);\n};\nIO.print=print;\nIO.print(\"a obejct with function\");\nIO.print(typeof IO.print);\n```\n\n我们定义了一个叫 IO 的对象，声明对象可以用\n\n    var store={};\n\n又或者是    \n\n    var store=new Object{};\n\n两者是等价的，但是用后者的可读性会更好一点，我们定义了一个叫print的函数，他的作用也就是 document.write，IO 中的print 函数是等价于 print() 函数，这也就是对象和函数之间的一些区别，对象可以包含函数，对象是无序属性的集合，其属性可以包含基本值、对象或者函数。\n\n复杂一点的对象应该是下面这样的一种情况。\n\n``` javascript\nvar Person={name:\"phodal\",weight:50,height:166};\nfunction dream(){\n\tfuture;\n};\nPerson.future=dream;\ndocument.write(typeof Person);\ndocument.write(Person.future);\n```\n\n而这些会在我们未来的实际编程过程中用得更多。\n\n### 面向对象\n\n开始之前先让我们简化上面的代码，\n\n``` javascript\nPerson.future=function dream(){\n\tfuture;\n}\n```\n\n看上去比上面的简单多了，不过我们还可以简化为下面的代码。。。\n\n``` javascript\nvar Person=function(){\n\tthis.name=\"phodal\";\n\tthis.weight=50;\n\tthis.height=166;\n\tthis.future=function dream(){\n\t\treturn \"future\";\n\t};\n};\nvar person=new Person();\ndocument.write(person.name+\"<br>\");\ndocument.write(typeof person+\"<br>\");\ndocument.write(typeof person.future+\"<br>\");\ndocument.write(person.future()+\"<br>\");\n```\n\n只是在这个时候 Person 是一个函数，但是我们声明的 person 却变成了一个对象 **一个Javascript函数也是一个对象，并且，所有的对象从技术上讲也只不过是函数。** 这里的\"\\<br\\>\"是 HTML 中的元素，称之为 DOM，在这里起的是换行的作用，我们会在稍后介绍它，这里我们先关心下 this。this 关键字表示函数的所有者或作用域，也就是这里的 Person。\n\n上面的方法显得有点不可取，换句话说和一开始的\n\n    document.write(3*4);\n\n一样，不具有灵活性，因此在我们完成功能之后，我们需要对其进行优化，这就是程序设计的真谛——解决完实际问题后，我们需要开始真正的设计，而不是解决问题时的编程。\n\n``` javascript\nvar Person=function(name,weight,height){\n\tthis.name=name;\n\tthis.weight=weight;\n\tthis.height=height;\n\tthis.future=function(){\n\t\treturn \"future\";\n\t};\n};\nvar phodal=new Person(\"phodal\",50,166);\ndocument.write(phodal.name+\"<br>\");\ndocument.write(phodal.weight+\"<br>\");\ndocument.write(phodal.height+\"<br>\");\ndocument.write(phodal.future()+\"<br>\");\n```\n\n于是，产生了这样一个可重用的 JavaScript 对象, this 关键字确立了属性的所有者。\n\n### 其他\n\nJavaScript 还有一个很强大的特性，也就是原型继承，不过这里我们先不考虑这些部分，用尽量少的代码及关键字来实际我们所要表达的核心功能，这才是这里的核心，其他的东西我们可以从其他书本上学到。\n\n所谓的继承，\n\n``` javascript\nvar Chinese=function(){\n\tthis.country=\"China\";\n}\n\nvar Person=function(name,weight,height){\n\tthis.name=name;\n\tthis.weight=weight;\n\tthis.height=height;\n\tthis.futrue=function(){\n\t\treturn \"future\";\n\t}\n}\nChinese.prototype=new Person();\n\nvar phodal=new Chinese(\"phodal\",50,166);\ndocument.write(phodal.country);\n```\n\n完整的 JavaScript 应该由下列三个部分组成:\n\n - 核心(ECMAScript)——核心语言功能\n - 文档对象模型(DOM)——访问和操作网页内容的方法和接口\n - 浏览器对象模型(BOM)——与浏览器交互的方法和接口\n\n我们在上面讲的都是 ECMAScript，也就是语法相关的，但是 JS 真正强大的，或者说我们最需要的可能就是对 DOM 的操作，这也就是为什么 jQuery 等库可以流行的原因之一，而核心语言功能才是真正在哪里都适用的，至于 BOM，真正用到的机会很少，因为没有完善的统一的标准。\n\n一个简单的 DOM 示例,\n\n``` html\n<!DOCTYPE html>\n<html>\n<head>\n</head>\n<body>\n\t<noscript>\n\t\tdisable Javascript\n\t</noscript>\n\t<p id=\"para\" style=\"color:red\">Red</p>\n</body>\n\t<script type=\"text/javascript\" src=\"app.js\"></script>\n</html>\n```\n\n我们需要修改一下 helloworld.html 添加\n\n```HTML\n<p id=\"para\" style=\"color:red\">Red</p>\n```\n\n同时还需要将 script 标签移到 body 下面，如果没有意外的话我们会看到页面上用红色的字体显示 Red，修改 app.js。\n\n``` javascript\nvar para=document.getElementById(\"para\");\npara.style.color=\"blue\";\n```\n\n接着，字体就变成了蓝色，有了 DOM 我们就可以对页面进行操作，可以说我们看到的绝大部分的页面效果都是通过 DOM 操作实现的。\n\n#### 美妙之处\n\n这里说到的 JavaScript 仅仅只是其中的一小小部分，忽略掉的东西很多，只关心的是如何去设计一个实用的 app，作为一门编程语言，他还有其他强大的内制函数，要学好需要一本有价值的参考书。这里提到的只是其中的不到20%的东西，其他的80%或者更多会在你解决问题的时候出现。\n\n - 我们可以创建一个对象或者函数，它可以包含基本值、对象或者函数。\n - 我们可以用 JavaScript 修改页面的属性，虽然只是简单的示例。\n - 我们还可以去解决实际的编程问题。\n","slug":"1.4.2-js","published":1,"updated":"2016-04-24T11:36:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuf7mpe5000btsif8h11hlui","content":"<p>JavaScript 现在已经无处不在了，也许你正打开的某个网站，他便可能是 node.js+json+javascript+mustache.js 完成的，虽然你还没理解上面那些是什么，也正是因为你不理解才需要去学习更多的东西。但是你只要知道 JavaScript 已经无处不在了，它可能就在你手机上的某个 app 里，就在你浏览的网页里，就运行在你 IDE 中的某个进程里。</p>\n<h3 id=\"hello-world\"><a href=\"#hello-world\" class=\"headerlink\" title=\"hello,world\"></a>hello,world</h3><p>这里我们还需要有一个 helloworld.html，JavaScript 是专为网页交互而设计的脚本语言，所以我们一点点来开始这部分的旅途，先写一个符合标准的 helloworld.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a> \n<p>然后开始融入我们的 JavaScript，向 HTML 中插入JavaScript 的方法，就需要用到 HTML 中的 <code>&lt;script&gt;</code> 标签，我们先用页面嵌入的方法来写 helloworld。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"line\">\t\t\t<span class=\"built_in\">document</span>.write(<span class=\"string\">'hello,world'</span>);</span><br><span class=\"line\">\t\t</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>按照标准的写法，我们还需要声明这个脚本的类型</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"line\">\t\t\t<span class=\"built_in\">document</span>.write(<span class=\"string\">'hello,world'</span>);</span><br><span class=\"line\">\t\t</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>没有显示 hello,world ?试试下面的代码</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"line\">\t\t\t<span class=\"built_in\">document</span>.write(<span class=\"string\">'hello,world'</span>);</span><br><span class=\"line\">\t\t</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">noscript</span>&gt;</span></span><br><span class=\"line\">\t\t\tdisable Javascript</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">noscript</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"JavaScriptFul\"><a href=\"#JavaScriptFul\" class=\"headerlink\" title=\"JavaScriptFul\"></a>JavaScriptFul</h3><p>我们需要让我们的代码看上去更像是 js，同时是以 js 结尾。就像 C 语言的源码是以 C 结尾的，我们也同样需要让我们的代码看上去更正式一点。于是我们需要在 helloworld.html 的同一文件夹下创建一个 app.js 文件，在里面写着</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"string\">'hello,world'</span>);</span><br></pre></td></tr></table></figure>\n<p>同时我们的 helloworld.html 还需要告诉我们的浏览器 js 代码在哪里</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"app.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">noscript</span>&gt;</span></span><br><span class=\"line\">\t\t\tdisable Javascript</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">noscript</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"从数学出发\"><a href=\"#从数学出发\" class=\"headerlink\" title=\"从数学出发\"></a>从数学出发</h4><p>让我们回到第一章讲述的小明的问题，<strong>从实际问题下手编程，更容易学会编程</strong>。小学时代的数学题最喜欢这样子了——某商店里的糖一个5块钱，小明买了3个糖，小明一共花了多少钱。在编程方面，也许我们还算是小学生。最直接的方法就是直接计算 3x5=?</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"number\">3</span>*<span class=\"number\">5</span>);</span><br></pre></td></tr></table></figure>\n<p>document.write 实际也我们可以理解为输出，也就是往页面里写入 3*5 的结果，在有双引号的情况下会输出字符串。我们便会在浏览器上看到15，这便是一个好的开始，也是一个糟糕的开始。</p>\n<h4 id=\"设计和编程\"><a href=\"#设计和编程\" class=\"headerlink\" title=\"设计和编程\"></a>设计和编程</h4><p>对于实际问题，如果我们只是止于所要得到的结果，很多年之后，我们就成为了 code monkey。对这个问题进行再一次设计，所谓的设计有些时候会把简单的问题复杂化，有些时候会使以后的扩展更加简单。这一天因为这家商店的糖价格太高了，于是店长将价格降为了4块钱。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"number\">3</span>*<span class=\"number\">4</span>);</span><br></pre></td></tr></table></figure>\n<p>于是我们又得到了我们的结果，但是下次我们看到这些代码的时候没有分清楚哪个是糖的数量，哪个是价格，于是我们重新设计了程序</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tang=<span class=\"number\">4</span>;</span><br><span class=\"line\">num=<span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(tang*num);</span><br></pre></td></tr></table></figure>\n<p>这才能叫得上是程序设计，或许你注意到了”;”这个符号的存在，我想说的是这是另外一个标准，我们不得不去遵守，也不得不去 fuck。</p>\n<h4 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h4><p>记得刚开始学三角函数的时候，我们会写</p>\n<pre><code>sin 30=0.5\n</code></pre><p>而我们的函数也是类似于此，换句话说，因为很多搞计算机的先驱都学好了数学，都把数学世界的规律带到了计算机世界，所以我们的函数也是类似于此，让我们从一个简单的开始。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">document</span>.write(<span class=\"string\">\"hello,world\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">hello();</span><br></pre></td></tr></table></figure>\n<p>当我第一次看到函数的时候，有些小激动终于出现了。我们写了一个叫 hello 的函数，它返回了往页面中写入 hello,world 的方法，然后我们调用了 hello 这个函数，于是页面上有了 hello,world。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sin</span>(<span class=\"params\">degree</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">document</span>.write(<span class=\"built_in\">Math</span>.sin(degree));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sin(<span class=\"number\">30</span>);</span><br></pre></td></tr></table></figure>\n<p>在这里 degree 就称之为变量。<br>于是输出了 -0.9880316240928602，而不是 0.5，因为这里用的是弧度制，而不是角度制。</p>\n<pre><code>sin(30)\n</code></pre><p>的输出结果有点类似于sin 30。写括号的目的在于，括号是为了方便解析，这个在不同的语言中可能是不一样的，比如在 Ruby 中我们可以直接用类似于数学中的表达:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">2.0.0-p353 :004 &gt;</span> Math.sin <span class=\"number\">30</span></span><br><span class=\"line\">=&gt; -<span class=\"number\">0</span>.<span class=\"number\">9880316240928618</span></span><br><span class=\"line\"><span class=\"meta\">2.0.0-p353 :005 &gt;</span></span><br></pre></td></tr></table></figure>\n<p>我们可以在函数中传入多个变量，于是我们再回到小明的问题，就会这样去编写代码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">calc</span>(<span class=\"params\">tang,num</span>)</span>&#123;</span><br><span class=\"line\">\tresult=tang*num;</span><br><span class=\"line\">\t<span class=\"built_in\">document</span>.write(result);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">calc(<span class=\"number\">3</span>,<span class=\"number\">4</span>);</span><br></pre></td></tr></table></figure>\n<p>但是从某种程度上来说，我们的 calc 做了计算的事又做了输出的事，总的来说设计上有些不好。</p>\n<h4 id=\"重新设计\"><a href=\"#重新设计\" class=\"headerlink\" title=\"重新设计\"></a>重新设计</h4><p>我们将输出的工作移到函数的外面，</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">calc</span>(<span class=\"params\">tang,num</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> tang*num;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(calc(<span class=\"number\">3</span>,<span class=\"number\">4</span>));</span><br></pre></td></tr></table></figure>\n<p>接着我们用一种更有意思的方法来写这个问题的解决方案</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">calc</span>(<span class=\"params\">tang,num</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> tang*num;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printResult</span>(<span class=\"params\">tang,num</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">document</span>.write(calc(tang,num));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">printResult(<span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br></pre></td></tr></table></figure>\n<p>看上去更专业了一点点，如果我们只需要计算的时候我们只需要调用 calc，如果我们需要输出的时候我们就调用 printResult 的方法。</p>\n<h4 id=\"object-和函数\"><a href=\"#object-和函数\" class=\"headerlink\" title=\"object 和函数\"></a>object 和函数</h4><p>我们还没有说清楚之前我们遇到过的 document.write 以及 Math.sin 的语法为什么看上去很奇怪，所以让我们看看他们到底是什么，修改 app.js 为以下内容</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"keyword\">typeof</span> <span class=\"built_in\">document</span>);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"keyword\">typeof</span> <span class=\"built_in\">Math</span>);</span><br></pre></td></tr></table></figure>\n<p>typeof document 会返回 document 的数据类型，就会发现输出的结果是</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">object object</span><br></pre></td></tr></table></figure>\n<p>所以我们需要去弄清楚什么是 object。对象的定义是</p>\n<blockquote>\n<p>无序属性的集合，其属性可以包含基本值、对象或者函数。</p>\n</blockquote>\n<p>创建一个 object，然后观察这便是我们接下来要做的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">store=&#123;&#125;;</span><br><span class=\"line\">store.tang=<span class=\"number\">4</span>;</span><br><span class=\"line\">store.num=<span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(store.tang*store.num);</span><br></pre></td></tr></table></figure>\n<p>我们就有了和 document.write 一样的用法，这也是对象的美妙之处，只是这里的对象只是包含着基本值，因为</p>\n<pre><code>typeof story.tang=&quot;number&quot;\n</code></pre><p>一个包含对象的对象应该是这样子的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">store=&#123;&#125;;</span><br><span class=\"line\">store.tang=<span class=\"number\">4</span>;</span><br><span class=\"line\">store.num=<span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.writeln(store.tang*store.num);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> wall=<span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">wall.store=store;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"keyword\">typeof</span> wall.store);</span><br></pre></td></tr></table></figure>\n<p>而我们用到的 document.write 和上面用到的 document.writeln 都是属于这个无序属性集合中的函数。</p>\n<p>下面代码说的就是这个无序属性集合中的函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> IO=<span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">print</span>(<span class=\"params\">result</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">document</span>.write(result);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">IO.print=print;</span><br><span class=\"line\">IO.print(<span class=\"string\">\"a obejct with function\"</span>);</span><br><span class=\"line\">IO.print(<span class=\"keyword\">typeof</span> IO.print);</span><br></pre></td></tr></table></figure>\n<p>我们定义了一个叫 IO 的对象，声明对象可以用</p>\n<pre><code>var store={};\n</code></pre><p>又或者是    </p>\n<pre><code>var store=new Object{};\n</code></pre><p>两者是等价的，但是用后者的可读性会更好一点，我们定义了一个叫print的函数，他的作用也就是 document.write，IO 中的print 函数是等价于 print() 函数，这也就是对象和函数之间的一些区别，对象可以包含函数，对象是无序属性的集合，其属性可以包含基本值、对象或者函数。</p>\n<p>复杂一点的对象应该是下面这样的一种情况。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Person=&#123;name:<span class=\"string\">\"phodal\"</span>,weight:<span class=\"number\">50</span>,height:<span class=\"number\">166</span>&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dream</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\tfuture;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Person.future=dream;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"keyword\">typeof</span> Person);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(Person.future);</span><br></pre></td></tr></table></figure>\n<p>而这些会在我们未来的实际编程过程中用得更多。</p>\n<h3 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h3><p>开始之前先让我们简化上面的代码，</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person.future=<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dream</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\tfuture;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看上去比上面的简单多了，不过我们还可以简化为下面的代码。。。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Person=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name=<span class=\"string\">\"phodal\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.weight=<span class=\"number\">50</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.height=<span class=\"number\">166</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.future=<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dream</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"future\"</span>;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person=<span class=\"keyword\">new</span> Person();</span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(person.name+<span class=\"string\">\"&lt;br&gt;\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"keyword\">typeof</span> person+<span class=\"string\">\"&lt;br&gt;\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"keyword\">typeof</span> person.future+<span class=\"string\">\"&lt;br&gt;\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(person.future()+<span class=\"string\">\"&lt;br&gt;\"</span>);</span><br></pre></td></tr></table></figure>\n<p>只是在这个时候 Person 是一个函数，但是我们声明的 person 却变成了一个对象 <strong>一个Javascript函数也是一个对象，并且，所有的对象从技术上讲也只不过是函数。</strong> 这里的”\\<br\\>“是 HTML 中的元素，称之为 DOM，在这里起的是换行的作用，我们会在稍后介绍它，这里我们先关心下 this。this 关键字表示函数的所有者或作用域，也就是这里的 Person。</br\\></p>\n<p>上面的方法显得有点不可取，换句话说和一开始的</p>\n<pre><code>document.write(3*4);\n</code></pre><p>一样，不具有灵活性，因此在我们完成功能之后，我们需要对其进行优化，这就是程序设计的真谛——解决完实际问题后，我们需要开始真正的设计，而不是解决问题时的编程。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Person=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name,weight,height</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name=name;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.weight=weight;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.height=height;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.future=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"future\"</span>;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> phodal=<span class=\"keyword\">new</span> Person(<span class=\"string\">\"phodal\"</span>,<span class=\"number\">50</span>,<span class=\"number\">166</span>);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(phodal.name+<span class=\"string\">\"&lt;br&gt;\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(phodal.weight+<span class=\"string\">\"&lt;br&gt;\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(phodal.height+<span class=\"string\">\"&lt;br&gt;\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(phodal.future()+<span class=\"string\">\"&lt;br&gt;\"</span>);</span><br></pre></td></tr></table></figure>\n<p>于是，产生了这样一个可重用的 JavaScript 对象, this 关键字确立了属性的所有者。</p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>JavaScript 还有一个很强大的特性，也就是原型继承，不过这里我们先不考虑这些部分，用尽量少的代码及关键字来实际我们所要表达的核心功能，这才是这里的核心，其他的东西我们可以从其他书本上学到。</p>\n<p>所谓的继承，</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Chinese=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.country=<span class=\"string\">\"China\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> Person=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name,weight,height</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name=name;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.weight=weight;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.height=height;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.futrue=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"future\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Chinese.prototype=<span class=\"keyword\">new</span> Person();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> phodal=<span class=\"keyword\">new</span> Chinese(<span class=\"string\">\"phodal\"</span>,<span class=\"number\">50</span>,<span class=\"number\">166</span>);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(phodal.country);</span><br></pre></td></tr></table></figure>\n<p>完整的 JavaScript 应该由下列三个部分组成:</p>\n<ul>\n<li>核心(ECMAScript)——核心语言功能</li>\n<li>文档对象模型(DOM)——访问和操作网页内容的方法和接口</li>\n<li>浏览器对象模型(BOM)——与浏览器交互的方法和接口</li>\n</ul>\n<p>我们在上面讲的都是 ECMAScript，也就是语法相关的，但是 JS 真正强大的，或者说我们最需要的可能就是对 DOM 的操作，这也就是为什么 jQuery 等库可以流行的原因之一，而核心语言功能才是真正在哪里都适用的，至于 BOM，真正用到的机会很少，因为没有完善的统一的标准。</p>\n<p>一个简单的 DOM 示例,</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">noscript</span>&gt;</span></span><br><span class=\"line\">\t\tdisable Javascript</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">noscript</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">\"para\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"color:red\"</span>&gt;</span>Red<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"app.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>我们需要修改一下 helloworld.html 添加</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">\"para\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"color:red\"</span>&gt;</span>Red<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>同时还需要将 script 标签移到 body 下面，如果没有意外的话我们会看到页面上用红色的字体显示 Red，修改 app.js。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> para=<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"para\"</span>);</span><br><span class=\"line\">para.style.color=<span class=\"string\">\"blue\"</span>;</span><br></pre></td></tr></table></figure>\n<p>接着，字体就变成了蓝色，有了 DOM 我们就可以对页面进行操作，可以说我们看到的绝大部分的页面效果都是通过 DOM 操作实现的。</p>\n<h4 id=\"美妙之处\"><a href=\"#美妙之处\" class=\"headerlink\" title=\"美妙之处\"></a>美妙之处</h4><p>这里说到的 JavaScript 仅仅只是其中的一小小部分，忽略掉的东西很多，只关心的是如何去设计一个实用的 app，作为一门编程语言，他还有其他强大的内制函数，要学好需要一本有价值的参考书。这里提到的只是其中的不到20%的东西，其他的80%或者更多会在你解决问题的时候出现。</p>\n<ul>\n<li>我们可以创建一个对象或者函数，它可以包含基本值、对象或者函数。</li>\n<li>我们可以用 JavaScript 修改页面的属性，虽然只是简单的示例。</li>\n<li>我们还可以去解决实际的编程问题。</li>\n</ul>\n","excerpt":"<p>JavaScript 现在已经无处不在了，也许你正打开的某个网站，他便可能是 node.js+json+javascript+mustache.js 完成的，虽然你还没理解上面那些是什么，也正是因为你不理解才需要去学习更多的东西。但是你只要知道 JavaScript 已经无处不在了，它可能就在你手机上的某个 app 里，就在你浏览的网页里，就运行在你 IDE 中的某个进程里。</p>\n<h3 id=\"hello-world\"><a href=\"#hello-world\" class=\"headerlink\" title=\"hello,world\"></a>hello,world</h3><p>这里我们还需要有一个 helloworld.html，JavaScript 是专为网页交互而设计的脚本语言，所以我们一点点来开始这部分的旅途，先写一个符合标准的 helloworld.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>","more":"<p>然后开始融入我们的 JavaScript，向 HTML 中插入JavaScript 的方法，就需要用到 HTML 中的 <code>&lt;script&gt;</code> 标签，我们先用页面嵌入的方法来写 helloworld。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"line\">\t\t\t<span class=\"built_in\">document</span>.write(<span class=\"string\">'hello,world'</span>);</span><br><span class=\"line\">\t\t</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>按照标准的写法，我们还需要声明这个脚本的类型</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"line\">\t\t\t<span class=\"built_in\">document</span>.write(<span class=\"string\">'hello,world'</span>);</span><br><span class=\"line\">\t\t</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>没有显示 hello,world ?试试下面的代码</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"line\">\t\t\t<span class=\"built_in\">document</span>.write(<span class=\"string\">'hello,world'</span>);</span><br><span class=\"line\">\t\t</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">noscript</span>&gt;</span></span><br><span class=\"line\">\t\t\tdisable Javascript</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">noscript</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"JavaScriptFul\"><a href=\"#JavaScriptFul\" class=\"headerlink\" title=\"JavaScriptFul\"></a>JavaScriptFul</h3><p>我们需要让我们的代码看上去更像是 js，同时是以 js 结尾。就像 C 语言的源码是以 C 结尾的，我们也同样需要让我们的代码看上去更正式一点。于是我们需要在 helloworld.html 的同一文件夹下创建一个 app.js 文件，在里面写着</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"string\">'hello,world'</span>);</span><br></pre></td></tr></table></figure>\n<p>同时我们的 helloworld.html 还需要告诉我们的浏览器 js 代码在哪里</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"app.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">noscript</span>&gt;</span></span><br><span class=\"line\">\t\t\tdisable Javascript</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">noscript</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"从数学出发\"><a href=\"#从数学出发\" class=\"headerlink\" title=\"从数学出发\"></a>从数学出发</h4><p>让我们回到第一章讲述的小明的问题，<strong>从实际问题下手编程，更容易学会编程</strong>。小学时代的数学题最喜欢这样子了——某商店里的糖一个5块钱，小明买了3个糖，小明一共花了多少钱。在编程方面，也许我们还算是小学生。最直接的方法就是直接计算 3x5=?</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"number\">3</span>*<span class=\"number\">5</span>);</span><br></pre></td></tr></table></figure>\n<p>document.write 实际也我们可以理解为输出，也就是往页面里写入 3*5 的结果，在有双引号的情况下会输出字符串。我们便会在浏览器上看到15，这便是一个好的开始，也是一个糟糕的开始。</p>\n<h4 id=\"设计和编程\"><a href=\"#设计和编程\" class=\"headerlink\" title=\"设计和编程\"></a>设计和编程</h4><p>对于实际问题，如果我们只是止于所要得到的结果，很多年之后，我们就成为了 code monkey。对这个问题进行再一次设计，所谓的设计有些时候会把简单的问题复杂化，有些时候会使以后的扩展更加简单。这一天因为这家商店的糖价格太高了，于是店长将价格降为了4块钱。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"number\">3</span>*<span class=\"number\">4</span>);</span><br></pre></td></tr></table></figure>\n<p>于是我们又得到了我们的结果，但是下次我们看到这些代码的时候没有分清楚哪个是糖的数量，哪个是价格，于是我们重新设计了程序</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tang=<span class=\"number\">4</span>;</span><br><span class=\"line\">num=<span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(tang*num);</span><br></pre></td></tr></table></figure>\n<p>这才能叫得上是程序设计，或许你注意到了”;”这个符号的存在，我想说的是这是另外一个标准，我们不得不去遵守，也不得不去 fuck。</p>\n<h4 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h4><p>记得刚开始学三角函数的时候，我们会写</p>\n<pre><code>sin 30=0.5\n</code></pre><p>而我们的函数也是类似于此，换句话说，因为很多搞计算机的先驱都学好了数学，都把数学世界的规律带到了计算机世界，所以我们的函数也是类似于此，让我们从一个简单的开始。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">document</span>.write(<span class=\"string\">\"hello,world\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">hello();</span><br></pre></td></tr></table></figure>\n<p>当我第一次看到函数的时候，有些小激动终于出现了。我们写了一个叫 hello 的函数，它返回了往页面中写入 hello,world 的方法，然后我们调用了 hello 这个函数，于是页面上有了 hello,world。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sin</span>(<span class=\"params\">degree</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">document</span>.write(<span class=\"built_in\">Math</span>.sin(degree));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sin(<span class=\"number\">30</span>);</span><br></pre></td></tr></table></figure>\n<p>在这里 degree 就称之为变量。<br>于是输出了 -0.9880316240928602，而不是 0.5，因为这里用的是弧度制，而不是角度制。</p>\n<pre><code>sin(30)\n</code></pre><p>的输出结果有点类似于sin 30。写括号的目的在于，括号是为了方便解析，这个在不同的语言中可能是不一样的，比如在 Ruby 中我们可以直接用类似于数学中的表达:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">2.0.0-p353 :004 &gt;</span> Math.sin <span class=\"number\">30</span></span><br><span class=\"line\">=&gt; -<span class=\"number\">0</span>.<span class=\"number\">9880316240928618</span></span><br><span class=\"line\"><span class=\"meta\">2.0.0-p353 :005 &gt;</span></span><br></pre></td></tr></table></figure>\n<p>我们可以在函数中传入多个变量，于是我们再回到小明的问题，就会这样去编写代码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">calc</span>(<span class=\"params\">tang,num</span>)</span>&#123;</span><br><span class=\"line\">\tresult=tang*num;</span><br><span class=\"line\">\t<span class=\"built_in\">document</span>.write(result);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">calc(<span class=\"number\">3</span>,<span class=\"number\">4</span>);</span><br></pre></td></tr></table></figure>\n<p>但是从某种程度上来说，我们的 calc 做了计算的事又做了输出的事，总的来说设计上有些不好。</p>\n<h4 id=\"重新设计\"><a href=\"#重新设计\" class=\"headerlink\" title=\"重新设计\"></a>重新设计</h4><p>我们将输出的工作移到函数的外面，</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">calc</span>(<span class=\"params\">tang,num</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> tang*num;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(calc(<span class=\"number\">3</span>,<span class=\"number\">4</span>));</span><br></pre></td></tr></table></figure>\n<p>接着我们用一种更有意思的方法来写这个问题的解决方案</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">calc</span>(<span class=\"params\">tang,num</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> tang*num;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printResult</span>(<span class=\"params\">tang,num</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">document</span>.write(calc(tang,num));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">printResult(<span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br></pre></td></tr></table></figure>\n<p>看上去更专业了一点点，如果我们只需要计算的时候我们只需要调用 calc，如果我们需要输出的时候我们就调用 printResult 的方法。</p>\n<h4 id=\"object-和函数\"><a href=\"#object-和函数\" class=\"headerlink\" title=\"object 和函数\"></a>object 和函数</h4><p>我们还没有说清楚之前我们遇到过的 document.write 以及 Math.sin 的语法为什么看上去很奇怪，所以让我们看看他们到底是什么，修改 app.js 为以下内容</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"keyword\">typeof</span> <span class=\"built_in\">document</span>);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"keyword\">typeof</span> <span class=\"built_in\">Math</span>);</span><br></pre></td></tr></table></figure>\n<p>typeof document 会返回 document 的数据类型，就会发现输出的结果是</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">object object</span><br></pre></td></tr></table></figure>\n<p>所以我们需要去弄清楚什么是 object。对象的定义是</p>\n<blockquote>\n<p>无序属性的集合，其属性可以包含基本值、对象或者函数。</p>\n</blockquote>\n<p>创建一个 object，然后观察这便是我们接下来要做的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">store=&#123;&#125;;</span><br><span class=\"line\">store.tang=<span class=\"number\">4</span>;</span><br><span class=\"line\">store.num=<span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(store.tang*store.num);</span><br></pre></td></tr></table></figure>\n<p>我们就有了和 document.write 一样的用法，这也是对象的美妙之处，只是这里的对象只是包含着基本值，因为</p>\n<pre><code>typeof story.tang=&quot;number&quot;\n</code></pre><p>一个包含对象的对象应该是这样子的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">store=&#123;&#125;;</span><br><span class=\"line\">store.tang=<span class=\"number\">4</span>;</span><br><span class=\"line\">store.num=<span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.writeln(store.tang*store.num);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> wall=<span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">wall.store=store;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"keyword\">typeof</span> wall.store);</span><br></pre></td></tr></table></figure>\n<p>而我们用到的 document.write 和上面用到的 document.writeln 都是属于这个无序属性集合中的函数。</p>\n<p>下面代码说的就是这个无序属性集合中的函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> IO=<span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">print</span>(<span class=\"params\">result</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">document</span>.write(result);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">IO.print=print;</span><br><span class=\"line\">IO.print(<span class=\"string\">\"a obejct with function\"</span>);</span><br><span class=\"line\">IO.print(<span class=\"keyword\">typeof</span> IO.print);</span><br></pre></td></tr></table></figure>\n<p>我们定义了一个叫 IO 的对象，声明对象可以用</p>\n<pre><code>var store={};\n</code></pre><p>又或者是    </p>\n<pre><code>var store=new Object{};\n</code></pre><p>两者是等价的，但是用后者的可读性会更好一点，我们定义了一个叫print的函数，他的作用也就是 document.write，IO 中的print 函数是等价于 print() 函数，这也就是对象和函数之间的一些区别，对象可以包含函数，对象是无序属性的集合，其属性可以包含基本值、对象或者函数。</p>\n<p>复杂一点的对象应该是下面这样的一种情况。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Person=&#123;name:<span class=\"string\">\"phodal\"</span>,weight:<span class=\"number\">50</span>,height:<span class=\"number\">166</span>&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dream</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\tfuture;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Person.future=dream;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"keyword\">typeof</span> Person);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(Person.future);</span><br></pre></td></tr></table></figure>\n<p>而这些会在我们未来的实际编程过程中用得更多。</p>\n<h3 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h3><p>开始之前先让我们简化上面的代码，</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person.future=<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dream</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\tfuture;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看上去比上面的简单多了，不过我们还可以简化为下面的代码。。。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Person=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name=<span class=\"string\">\"phodal\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.weight=<span class=\"number\">50</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.height=<span class=\"number\">166</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.future=<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dream</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"future\"</span>;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person=<span class=\"keyword\">new</span> Person();</span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(person.name+<span class=\"string\">\"&lt;br&gt;\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"keyword\">typeof</span> person+<span class=\"string\">\"&lt;br&gt;\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"keyword\">typeof</span> person.future+<span class=\"string\">\"&lt;br&gt;\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(person.future()+<span class=\"string\">\"&lt;br&gt;\"</span>);</span><br></pre></td></tr></table></figure>\n<p>只是在这个时候 Person 是一个函数，但是我们声明的 person 却变成了一个对象 <strong>一个Javascript函数也是一个对象，并且，所有的对象从技术上讲也只不过是函数。</strong> 这里的”\\<br\\>“是 HTML 中的元素，称之为 DOM，在这里起的是换行的作用，我们会在稍后介绍它，这里我们先关心下 this。this 关键字表示函数的所有者或作用域，也就是这里的 Person。</p>\n<p>上面的方法显得有点不可取，换句话说和一开始的</p>\n<pre><code>document.write(3*4);\n</code></pre><p>一样，不具有灵活性，因此在我们完成功能之后，我们需要对其进行优化，这就是程序设计的真谛——解决完实际问题后，我们需要开始真正的设计，而不是解决问题时的编程。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Person=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name,weight,height</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name=name;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.weight=weight;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.height=height;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.future=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"future\"</span>;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> phodal=<span class=\"keyword\">new</span> Person(<span class=\"string\">\"phodal\"</span>,<span class=\"number\">50</span>,<span class=\"number\">166</span>);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(phodal.name+<span class=\"string\">\"&lt;br&gt;\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(phodal.weight+<span class=\"string\">\"&lt;br&gt;\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(phodal.height+<span class=\"string\">\"&lt;br&gt;\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(phodal.future()+<span class=\"string\">\"&lt;br&gt;\"</span>);</span><br></pre></td></tr></table></figure>\n<p>于是，产生了这样一个可重用的 JavaScript 对象, this 关键字确立了属性的所有者。</p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>JavaScript 还有一个很强大的特性，也就是原型继承，不过这里我们先不考虑这些部分，用尽量少的代码及关键字来实际我们所要表达的核心功能，这才是这里的核心，其他的东西我们可以从其他书本上学到。</p>\n<p>所谓的继承，</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Chinese=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.country=<span class=\"string\">\"China\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> Person=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name,weight,height</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name=name;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.weight=weight;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.height=height;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.futrue=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"future\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Chinese.prototype=<span class=\"keyword\">new</span> Person();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> phodal=<span class=\"keyword\">new</span> Chinese(<span class=\"string\">\"phodal\"</span>,<span class=\"number\">50</span>,<span class=\"number\">166</span>);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(phodal.country);</span><br></pre></td></tr></table></figure>\n<p>完整的 JavaScript 应该由下列三个部分组成:</p>\n<ul>\n<li>核心(ECMAScript)——核心语言功能</li>\n<li>文档对象模型(DOM)——访问和操作网页内容的方法和接口</li>\n<li>浏览器对象模型(BOM)——与浏览器交互的方法和接口</li>\n</ul>\n<p>我们在上面讲的都是 ECMAScript，也就是语法相关的，但是 JS 真正强大的，或者说我们最需要的可能就是对 DOM 的操作，这也就是为什么 jQuery 等库可以流行的原因之一，而核心语言功能才是真正在哪里都适用的，至于 BOM，真正用到的机会很少，因为没有完善的统一的标准。</p>\n<p>一个简单的 DOM 示例,</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">noscript</span>&gt;</span></span><br><span class=\"line\">\t\tdisable Javascript</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">noscript</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">\"para\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"color:red\"</span>&gt;</span>Red<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"app.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>我们需要修改一下 helloworld.html 添加</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">\"para\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"color:red\"</span>&gt;</span>Red<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>同时还需要将 script 标签移到 body 下面，如果没有意外的话我们会看到页面上用红色的字体显示 Red，修改 app.js。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> para=<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"para\"</span>);</span><br><span class=\"line\">para.style.color=<span class=\"string\">\"blue\"</span>;</span><br></pre></td></tr></table></figure>\n<p>接着，字体就变成了蓝色，有了 DOM 我们就可以对页面进行操作，可以说我们看到的绝大部分的页面效果都是通过 DOM 操作实现的。</p>\n<h4 id=\"美妙之处\"><a href=\"#美妙之处\" class=\"headerlink\" title=\"美妙之处\"></a>美妙之处</h4><p>这里说到的 JavaScript 仅仅只是其中的一小小部分，忽略掉的东西很多，只关心的是如何去设计一个实用的 app，作为一门编程语言，他还有其他强大的内制函数，要学好需要一本有价值的参考书。这里提到的只是其中的不到20%的东西，其他的80%或者更多会在你解决问题的时候出现。</p>\n<ul>\n<li>我们可以创建一个对象或者函数，它可以包含基本值、对象或者函数。</li>\n<li>我们可以用 JavaScript 修改页面的属性，虽然只是简单的示例。</li>\n<li>我们还可以去解决实际的编程问题。</li>\n</ul>"},{"title":"后台语言选择","date":"2016-04-25T13:45:08.000Z","_content":"\n如何选择一门好的后台语言似乎是大家都很感兴趣的问题？大概只是因为他们想要在一开始的时候去学一门很实用的语言——至少会经常用到，而不是学好就被遗弃了。或者它不会因为一门新的语言的出现而消亡。\n\n### JavaScript\n\n在现在看来，JavaScript 似乎是一个性价比非常高的语言。只要是 Web 就会有前端，只要有前端就需要有 JavaScript。与此同时 Node.js 在后台中的地位已经愈发重要了。\n\n对于 JavaScript 来说，它可以做很多类型的应用。这些应用都是基于浏览器来运行的，有：\n\n - Electron + Node.js + JavaScript 做桌面应用\n - Ionic + JavaScript 做移动应用\n - Node.js + JavaScript 网站前后台\n - JavaScript + Tessl 做硬件\n\n<!-- more --> \n\nSo，这是一门很有应用前景的语言。\n\n### Python\n\nPython 诞生得比较早，其语言特性——做事情只有一件方法，也决定了这门语言很简单。在 ThoughtWorks University 的学习过程中，接触了一些外国小伙伴，这是大多数人学习的第一门语言。\n\nPython 在我看来和 JavaScript 是相当划算的语言，除了它不能在前端运行，带来了一点劣势。Python 是一门简洁的语言，而且有大量的数学、科学工具，这意味着在不远的将来它会发挥更大的作用。我喜欢在我的各种小项目上用 Python，如果不是因为我对前端及数据可视化更感兴趣，那么Python 就是我的第一语言了。\n\n### Java\n\n除此呢，我相信 Java 在目前来说也是一个不错的选择。\n\n在学校的时候，一点儿也不喜欢 Java。后来才发现，我从 Java 上学到的东西比其他语言上学得还多。如果 Oracle 不毁坏 Java，那么他会继续存活很久。我可以用 JavaScript 造出各种我想要的东西，但是通常我无法保证他们是优雅的实现。过去人们在 Java 上花费了很多的时间，或在架构上，或在语言上，或在模式上。由于这些投入，都给了人们很多的启发。这些都可以用于新的语言，新的设计，毕竟没有什么技术是独立于旧的技术产生出来的。\n\n### PHP\n\nPHP 呢，据说是这个『世界上最好的语言』，我服务器上运行着几个不同的 WordPress 实例。对于这门语言，我还是相当放心的。并且这门语言由于上手简单，同时国内有大量的程序员已经掌握好了这门语言。不得不提及的是 WordPress 已经占领了 CMS 市场超过一半的份额，并且它也占领了全球网站的四分之一。还有 Facebook，这个世界上最大的 PHP 站点也在使用这门语言。\n\n### 其他\n\n个人感觉 Go 也不错，虽然没怎么用，但是性能应该是相当可以的。\n\nRuby、Scala，对于写代码的人来说，这是非常不错的语言。但是如果是团队合作时，就有待商榷。\n","source":"_posts/2.1.0-backend-language.md","raw":"title: 后台语言选择\ndate: 2016-4-25 21:45:08\ntags:\n---\n\n如何选择一门好的后台语言似乎是大家都很感兴趣的问题？大概只是因为他们想要在一开始的时候去学一门很实用的语言——至少会经常用到，而不是学好就被遗弃了。或者它不会因为一门新的语言的出现而消亡。\n\n### JavaScript\n\n在现在看来，JavaScript 似乎是一个性价比非常高的语言。只要是 Web 就会有前端，只要有前端就需要有 JavaScript。与此同时 Node.js 在后台中的地位已经愈发重要了。\n\n对于 JavaScript 来说，它可以做很多类型的应用。这些应用都是基于浏览器来运行的，有：\n\n - Electron + Node.js + JavaScript 做桌面应用\n - Ionic + JavaScript 做移动应用\n - Node.js + JavaScript 网站前后台\n - JavaScript + Tessl 做硬件\n\n<!-- more --> \n\nSo，这是一门很有应用前景的语言。\n\n### Python\n\nPython 诞生得比较早，其语言特性——做事情只有一件方法，也决定了这门语言很简单。在 ThoughtWorks University 的学习过程中，接触了一些外国小伙伴，这是大多数人学习的第一门语言。\n\nPython 在我看来和 JavaScript 是相当划算的语言，除了它不能在前端运行，带来了一点劣势。Python 是一门简洁的语言，而且有大量的数学、科学工具，这意味着在不远的将来它会发挥更大的作用。我喜欢在我的各种小项目上用 Python，如果不是因为我对前端及数据可视化更感兴趣，那么Python 就是我的第一语言了。\n\n### Java\n\n除此呢，我相信 Java 在目前来说也是一个不错的选择。\n\n在学校的时候，一点儿也不喜欢 Java。后来才发现，我从 Java 上学到的东西比其他语言上学得还多。如果 Oracle 不毁坏 Java，那么他会继续存活很久。我可以用 JavaScript 造出各种我想要的东西，但是通常我无法保证他们是优雅的实现。过去人们在 Java 上花费了很多的时间，或在架构上，或在语言上，或在模式上。由于这些投入，都给了人们很多的启发。这些都可以用于新的语言，新的设计，毕竟没有什么技术是独立于旧的技术产生出来的。\n\n### PHP\n\nPHP 呢，据说是这个『世界上最好的语言』，我服务器上运行着几个不同的 WordPress 实例。对于这门语言，我还是相当放心的。并且这门语言由于上手简单，同时国内有大量的程序员已经掌握好了这门语言。不得不提及的是 WordPress 已经占领了 CMS 市场超过一半的份额，并且它也占领了全球网站的四分之一。还有 Facebook，这个世界上最大的 PHP 站点也在使用这门语言。\n\n### 其他\n\n个人感觉 Go 也不错，虽然没怎么用，但是性能应该是相当可以的。\n\nRuby、Scala，对于写代码的人来说，这是非常不错的语言。但是如果是团队合作时，就有待商榷。\n","slug":"2.1.0-backend-language","published":1,"updated":"2016-04-25T04:34:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuf7mpe7000ctsif2xwjdp79","content":"<p>如何选择一门好的后台语言似乎是大家都很感兴趣的问题？大概只是因为他们想要在一开始的时候去学一门很实用的语言——至少会经常用到，而不是学好就被遗弃了。或者它不会因为一门新的语言的出现而消亡。</p>\n<h3 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h3><p>在现在看来，JavaScript 似乎是一个性价比非常高的语言。只要是 Web 就会有前端，只要有前端就需要有 JavaScript。与此同时 Node.js 在后台中的地位已经愈发重要了。</p>\n<p>对于 JavaScript 来说，它可以做很多类型的应用。这些应用都是基于浏览器来运行的，有：</p>\n<ul>\n<li>Electron + Node.js + JavaScript 做桌面应用</li>\n<li>Ionic + JavaScript 做移动应用</li>\n<li>Node.js + JavaScript 网站前后台</li>\n<li>JavaScript + Tessl 做硬件</li>\n</ul>\n<a id=\"more\"></a> \n<p>So，这是一门很有应用前景的语言。</p>\n<h3 id=\"Python\"><a href=\"#Python\" class=\"headerlink\" title=\"Python\"></a>Python</h3><p>Python 诞生得比较早，其语言特性——做事情只有一件方法，也决定了这门语言很简单。在 ThoughtWorks University 的学习过程中，接触了一些外国小伙伴，这是大多数人学习的第一门语言。</p>\n<p>Python 在我看来和 JavaScript 是相当划算的语言，除了它不能在前端运行，带来了一点劣势。Python 是一门简洁的语言，而且有大量的数学、科学工具，这意味着在不远的将来它会发挥更大的作用。我喜欢在我的各种小项目上用 Python，如果不是因为我对前端及数据可视化更感兴趣，那么Python 就是我的第一语言了。</p>\n<h3 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h3><p>除此呢，我相信 Java 在目前来说也是一个不错的选择。</p>\n<p>在学校的时候，一点儿也不喜欢 Java。后来才发现，我从 Java 上学到的东西比其他语言上学得还多。如果 Oracle 不毁坏 Java，那么他会继续存活很久。我可以用 JavaScript 造出各种我想要的东西，但是通常我无法保证他们是优雅的实现。过去人们在 Java 上花费了很多的时间，或在架构上，或在语言上，或在模式上。由于这些投入，都给了人们很多的启发。这些都可以用于新的语言，新的设计，毕竟没有什么技术是独立于旧的技术产生出来的。</p>\n<h3 id=\"PHP\"><a href=\"#PHP\" class=\"headerlink\" title=\"PHP\"></a>PHP</h3><p>PHP 呢，据说是这个『世界上最好的语言』，我服务器上运行着几个不同的 WordPress 实例。对于这门语言，我还是相当放心的。并且这门语言由于上手简单，同时国内有大量的程序员已经掌握好了这门语言。不得不提及的是 WordPress 已经占领了 CMS 市场超过一半的份额，并且它也占领了全球网站的四分之一。还有 Facebook，这个世界上最大的 PHP 站点也在使用这门语言。</p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>个人感觉 Go 也不错，虽然没怎么用，但是性能应该是相当可以的。</p>\n<p>Ruby、Scala，对于写代码的人来说，这是非常不错的语言。但是如果是团队合作时，就有待商榷。</p>\n","excerpt":"<p>如何选择一门好的后台语言似乎是大家都很感兴趣的问题？大概只是因为他们想要在一开始的时候去学一门很实用的语言——至少会经常用到，而不是学好就被遗弃了。或者它不会因为一门新的语言的出现而消亡。</p>\n<h3 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h3><p>在现在看来，JavaScript 似乎是一个性价比非常高的语言。只要是 Web 就会有前端，只要有前端就需要有 JavaScript。与此同时 Node.js 在后台中的地位已经愈发重要了。</p>\n<p>对于 JavaScript 来说，它可以做很多类型的应用。这些应用都是基于浏览器来运行的，有：</p>\n<ul>\n<li>Electron + Node.js + JavaScript 做桌面应用</li>\n<li>Ionic + JavaScript 做移动应用</li>\n<li>Node.js + JavaScript 网站前后台</li>\n<li>JavaScript + Tessl 做硬件</li>\n</ul>","more":"<p>So，这是一门很有应用前景的语言。</p>\n<h3 id=\"Python\"><a href=\"#Python\" class=\"headerlink\" title=\"Python\"></a>Python</h3><p>Python 诞生得比较早，其语言特性——做事情只有一件方法，也决定了这门语言很简单。在 ThoughtWorks University 的学习过程中，接触了一些外国小伙伴，这是大多数人学习的第一门语言。</p>\n<p>Python 在我看来和 JavaScript 是相当划算的语言，除了它不能在前端运行，带来了一点劣势。Python 是一门简洁的语言，而且有大量的数学、科学工具，这意味着在不远的将来它会发挥更大的作用。我喜欢在我的各种小项目上用 Python，如果不是因为我对前端及数据可视化更感兴趣，那么Python 就是我的第一语言了。</p>\n<h3 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h3><p>除此呢，我相信 Java 在目前来说也是一个不错的选择。</p>\n<p>在学校的时候，一点儿也不喜欢 Java。后来才发现，我从 Java 上学到的东西比其他语言上学得还多。如果 Oracle 不毁坏 Java，那么他会继续存活很久。我可以用 JavaScript 造出各种我想要的东西，但是通常我无法保证他们是优雅的实现。过去人们在 Java 上花费了很多的时间，或在架构上，或在语言上，或在模式上。由于这些投入，都给了人们很多的启发。这些都可以用于新的语言，新的设计，毕竟没有什么技术是独立于旧的技术产生出来的。</p>\n<h3 id=\"PHP\"><a href=\"#PHP\" class=\"headerlink\" title=\"PHP\"></a>PHP</h3><p>PHP 呢，据说是这个『世界上最好的语言』，我服务器上运行着几个不同的 WordPress 实例。对于这门语言，我还是相当放心的。并且这门语言由于上手简单，同时国内有大量的程序员已经掌握好了这门语言。不得不提及的是 WordPress 已经占领了 CMS 市场超过一半的份额，并且它也占领了全球网站的四分之一。还有 Facebook，这个世界上最大的 PHP 站点也在使用这门语言。</p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>个人感觉 Go 也不错，虽然没怎么用，但是性能应该是相当可以的。</p>\n<p>Ruby、Scala，对于写代码的人来说，这是非常不错的语言。但是如果是团队合作时，就有待商榷。</p>"},{"title":"MVC","date":"2016-04-25T14:45:08.000Z","_content":"\n人们在不断地反思这其中复杂的过程，整理了一些好的架构模式，其中不得不提到的是我司 Martin Fowler 的《企业应用架构模式》。该书中文译版出版的时候是2004年，那时对于系统的分层是\n\n层次\t   | 职责\n-------| -----\n表现层  | \t提供服务、显示信息、用户请求、HTTP请求和命令行调用。\n领域层  | \t逻辑处理，系统中真正的核心。\n数据层  | \t与数据库、消息系统、事物管理器和其他软件包通讯。\n\n化身于当时最流行的 Spring，就是 MVC。人们有了 iBatis 这样的数据持久层框架，即 ORM，对象关系映射。于是，你的 package 就会有这样的几个文件夹：\n\n```\n|____mappers\n|____model\n|____service\n|____utils\n|____controller\n```\n\n<!-- more --> \n\n在 mappers 这一层，我们所做的莫过于如下所示的数据库相关查询：\n\n```java\n@Insert(\n        \"INSERT INTO users(username, password, enabled) \" +\n                \"VALUES (#{userName}, #{passwordHash}, #{enabled})\"\n)\n@Options(keyProperty = \"id\", keyColumn = \"id\", useGeneratedKeys = true)\nvoid insert(User user);\n```    \n\nmodel 文件夹和 mappers 文件夹都是数据层的一部分，只是两者间的职责不同，如：\n\n```java\npublic String getUserName() {\n    return userName;\n}\n\npublic void setUserName(String userName) {\n    this.userName = userName;\n}\n```\n\n而他们最后都需要在 Controller，又或者称为 ModelAndView 中处理：\n\n```java\n@RequestMapping(value = {\"/disableUser\"}, method = RequestMethod.POST)\npublic ModelAndView processUserDisable(HttpServletRequest request, ModelMap model) {\n    String userName = request.getParameter(\"userName\");\n    User user = userService.getByUsername(userName);\n    userService.disable(user);\n    Map<String,User> map = new HashMap<String,User>();\n    Map <User,String> usersWithRoles= userService.getAllUsersWithRole();\n    model.put(\"usersWithRoles\",usersWithRoles);\n    return new ModelAndView(\"redirect:users\",map);\n}\n```\n\n在多数时候，Controller 不应该直接与数据层的一部分，而将业务逻辑放在 Controller 层又是一种错误，这时就有了 Service 层，如下图：\n\n![Service MVC](http://growth.phodal.com/assets/article/chapter2/service-mvc.png)\n\nDomain（业务）是一个相当复杂的层级，这里是业务的核心。一个合理的 Controller 只应该做自己应该做的事，它不应该处理业务相关的代码：\n\n我们在 Controller 层应该做的事是：\n\n1. 处理请求的参数\n2. 渲染和重定向\n3. 选择 Model 和 Service\n4. 处理 Session 和 Cookies\n\n业务是善变的，昨天我们可能还在和对手竞争谁先推出新功能，但是今天可能已经合并了。我们很难预见业务变化，但是我们应该能预见 Controller 是不容易变化的。在一些设计里面，这种模式就是 Command 模式。\n\n### Model\n\n> 模型用于封装与应用程序的业务逻辑相关的数据以及对数据的处理方法。\n\n它是介于数据与控制器之间的层级，拥有对数据直接访问的权力——增删改查(CRUD)。Web 应用中，数据通常是由数据库来存储，有时也会用搜索引擎来存储\n\n因此在实现这个层级与数据库交付时，可以使用 SQL 语句，也可以使用 ORM 框架。\n\nSQL(Structured Query Language，即结构化查询语言)， 语句是数据库的查询语言\n\nORM(Object Relational Mapping)，即对象关系映射，主要是将数据库中的关系数据映射称为程序中的对象。\n\n### View\n\nView 层在 Web 应用中，一般是使用模板引擎装载对应 HTML。如下所示的是一段 JSP 代码：\n\n```jsp\n<html>\n<head><title>First JSP</title></head>\n<body>\n  <%\n    double num = Math.random();\n    if (num > 0.95) {\n  %>\n      <h2>You'll have a luck day!</h2><p>(<%= num %>)</p>\n  <%\n    } else {\n  %>\n      <h2>Well, life goes on ... </h2><p>(<%= num %>)</p>\n  <%\n    }\n  %>\n  <a href=\"<%= request.getRequestURI() %>\"><h3>Try Again</h3></a>\n</body>\n</html>\n```\n\n上面的 JSP 代码在经过程序解析、处理后，会变成相对应的 HTML。而我们可以发现在这里的 View 层不仅仅只有模板的作用，我们会发现这里的 View 层还计划了部分的逻辑。我们可以在后面细细看这些问题，对于前端的 View 层来说，他可能是这样的：\n\n```html\n<div class=\"information pure-g\">\n    {{#.}}\n    <div class=\"pure-u-1 \">\n        <div class=\"l-box\">\n            <h3 class=\"information-head\"><a href=\"#/blog/{{slug}}\" alt=\"{{title}}\">{{title}}</a></h3>\n            <p>\n                发布时间:<span>{{created}}</span>\n            <p>\n                {{{content}}}\n            </p>\n\n            </p>\n        </div>\n    </div>\n    {{/.}}\n</div>\n```\n\n在这里的 View 层只是单纯的一个显示作用，这也是我们推荐的做法。业务逻辑应该尽可能的放置于业务层。\n\n### Controller\n\n> 控制器层起到不同层面间的组织作用，用于控制应用程序的流程。\n\n### 更多\n\n在前后端解耦合的系统中，通常系统的架构模式就变成了 MVP，又或者是 MVVM。\n\n![MVC、MVVM、MVP 对比](http://growth.phodal.com/assets/article/chapter2/mvc-mvvm-mvp.png)\n\n三者间很大的不同在于层级间的通讯模型、使用场景。\n\n#### MVP\n\n> MVP 是从经典的模式 MVC 演变而来，它们的基本思想有相通的地方：Controller/Presenter 负责逻辑的处理，Model 提供数据，View 负责显示。\n\n#### MVVM\n\nMVVM 是 Model-View-ViewModel 的简写。相比于MVC悠久的历史来说，MVVM 是一个相当新的架构，它最早于2005年被由的 WPF 和Silverlight 的架构师 John Gossman 提出，并且应用在微软的软件开发中。而 MVC 已经被提出了二十多年了，可见两者出现的年代差别有多大。\n\nMVVM 在使用当中，通常还会利用双向绑定技术，使得 Model 变化时，ViewModel 会自动更新，而 ViewModel 变化时，View 也会自动变化。所以，MVVM 模式有些时候又被称作：model-view-binder 模式。\n","source":"_posts/2.1.2-mvc.md","raw":"title: MVC\ndate: 2016-4-25 22:45:08\ntags:\n---\n\n人们在不断地反思这其中复杂的过程，整理了一些好的架构模式，其中不得不提到的是我司 Martin Fowler 的《企业应用架构模式》。该书中文译版出版的时候是2004年，那时对于系统的分层是\n\n层次\t   | 职责\n-------| -----\n表现层  | \t提供服务、显示信息、用户请求、HTTP请求和命令行调用。\n领域层  | \t逻辑处理，系统中真正的核心。\n数据层  | \t与数据库、消息系统、事物管理器和其他软件包通讯。\n\n化身于当时最流行的 Spring，就是 MVC。人们有了 iBatis 这样的数据持久层框架，即 ORM，对象关系映射。于是，你的 package 就会有这样的几个文件夹：\n\n```\n|____mappers\n|____model\n|____service\n|____utils\n|____controller\n```\n\n<!-- more --> \n\n在 mappers 这一层，我们所做的莫过于如下所示的数据库相关查询：\n\n```java\n@Insert(\n        \"INSERT INTO users(username, password, enabled) \" +\n                \"VALUES (#{userName}, #{passwordHash}, #{enabled})\"\n)\n@Options(keyProperty = \"id\", keyColumn = \"id\", useGeneratedKeys = true)\nvoid insert(User user);\n```    \n\nmodel 文件夹和 mappers 文件夹都是数据层的一部分，只是两者间的职责不同，如：\n\n```java\npublic String getUserName() {\n    return userName;\n}\n\npublic void setUserName(String userName) {\n    this.userName = userName;\n}\n```\n\n而他们最后都需要在 Controller，又或者称为 ModelAndView 中处理：\n\n```java\n@RequestMapping(value = {\"/disableUser\"}, method = RequestMethod.POST)\npublic ModelAndView processUserDisable(HttpServletRequest request, ModelMap model) {\n    String userName = request.getParameter(\"userName\");\n    User user = userService.getByUsername(userName);\n    userService.disable(user);\n    Map<String,User> map = new HashMap<String,User>();\n    Map <User,String> usersWithRoles= userService.getAllUsersWithRole();\n    model.put(\"usersWithRoles\",usersWithRoles);\n    return new ModelAndView(\"redirect:users\",map);\n}\n```\n\n在多数时候，Controller 不应该直接与数据层的一部分，而将业务逻辑放在 Controller 层又是一种错误，这时就有了 Service 层，如下图：\n\n![Service MVC](http://growth.phodal.com/assets/article/chapter2/service-mvc.png)\n\nDomain（业务）是一个相当复杂的层级，这里是业务的核心。一个合理的 Controller 只应该做自己应该做的事，它不应该处理业务相关的代码：\n\n我们在 Controller 层应该做的事是：\n\n1. 处理请求的参数\n2. 渲染和重定向\n3. 选择 Model 和 Service\n4. 处理 Session 和 Cookies\n\n业务是善变的，昨天我们可能还在和对手竞争谁先推出新功能，但是今天可能已经合并了。我们很难预见业务变化，但是我们应该能预见 Controller 是不容易变化的。在一些设计里面，这种模式就是 Command 模式。\n\n### Model\n\n> 模型用于封装与应用程序的业务逻辑相关的数据以及对数据的处理方法。\n\n它是介于数据与控制器之间的层级，拥有对数据直接访问的权力——增删改查(CRUD)。Web 应用中，数据通常是由数据库来存储，有时也会用搜索引擎来存储\n\n因此在实现这个层级与数据库交付时，可以使用 SQL 语句，也可以使用 ORM 框架。\n\nSQL(Structured Query Language，即结构化查询语言)， 语句是数据库的查询语言\n\nORM(Object Relational Mapping)，即对象关系映射，主要是将数据库中的关系数据映射称为程序中的对象。\n\n### View\n\nView 层在 Web 应用中，一般是使用模板引擎装载对应 HTML。如下所示的是一段 JSP 代码：\n\n```jsp\n<html>\n<head><title>First JSP</title></head>\n<body>\n  <%\n    double num = Math.random();\n    if (num > 0.95) {\n  %>\n      <h2>You'll have a luck day!</h2><p>(<%= num %>)</p>\n  <%\n    } else {\n  %>\n      <h2>Well, life goes on ... </h2><p>(<%= num %>)</p>\n  <%\n    }\n  %>\n  <a href=\"<%= request.getRequestURI() %>\"><h3>Try Again</h3></a>\n</body>\n</html>\n```\n\n上面的 JSP 代码在经过程序解析、处理后，会变成相对应的 HTML。而我们可以发现在这里的 View 层不仅仅只有模板的作用，我们会发现这里的 View 层还计划了部分的逻辑。我们可以在后面细细看这些问题，对于前端的 View 层来说，他可能是这样的：\n\n```html\n<div class=\"information pure-g\">\n    {{#.}}\n    <div class=\"pure-u-1 \">\n        <div class=\"l-box\">\n            <h3 class=\"information-head\"><a href=\"#/blog/{{slug}}\" alt=\"{{title}}\">{{title}}</a></h3>\n            <p>\n                发布时间:<span>{{created}}</span>\n            <p>\n                {{{content}}}\n            </p>\n\n            </p>\n        </div>\n    </div>\n    {{/.}}\n</div>\n```\n\n在这里的 View 层只是单纯的一个显示作用，这也是我们推荐的做法。业务逻辑应该尽可能的放置于业务层。\n\n### Controller\n\n> 控制器层起到不同层面间的组织作用，用于控制应用程序的流程。\n\n### 更多\n\n在前后端解耦合的系统中，通常系统的架构模式就变成了 MVP，又或者是 MVVM。\n\n![MVC、MVVM、MVP 对比](http://growth.phodal.com/assets/article/chapter2/mvc-mvvm-mvp.png)\n\n三者间很大的不同在于层级间的通讯模型、使用场景。\n\n#### MVP\n\n> MVP 是从经典的模式 MVC 演变而来，它们的基本思想有相通的地方：Controller/Presenter 负责逻辑的处理，Model 提供数据，View 负责显示。\n\n#### MVVM\n\nMVVM 是 Model-View-ViewModel 的简写。相比于MVC悠久的历史来说，MVVM 是一个相当新的架构，它最早于2005年被由的 WPF 和Silverlight 的架构师 John Gossman 提出，并且应用在微软的软件开发中。而 MVC 已经被提出了二十多年了，可见两者出现的年代差别有多大。\n\nMVVM 在使用当中，通常还会利用双向绑定技术，使得 Model 变化时，ViewModel 会自动更新，而 ViewModel 变化时，View 也会自动变化。所以，MVVM 模式有些时候又被称作：model-view-binder 模式。\n","slug":"2.1.2-mvc","published":1,"updated":"2016-04-25T04:36:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuf7mpe9000dtsifexg7xj0a","content":"<p>人们在不断地反思这其中复杂的过程，整理了一些好的架构模式，其中不得不提到的是我司 Martin Fowler 的《企业应用架构模式》。该书中文译版出版的时候是2004年，那时对于系统的分层是</p>\n<table>\n<thead>\n<tr>\n<th>层次</th>\n<th>职责</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>表现层</td>\n<td>提供服务、显示信息、用户请求、HTTP请求和命令行调用。</td>\n</tr>\n<tr>\n<td>领域层</td>\n<td>逻辑处理，系统中真正的核心。</td>\n</tr>\n<tr>\n<td>数据层</td>\n<td>与数据库、消息系统、事物管理器和其他软件包通讯。</td>\n</tr>\n</tbody>\n</table>\n<p>化身于当时最流行的 Spring，就是 MVC。人们有了 iBatis 这样的数据持久层框架，即 ORM，对象关系映射。于是，你的 package 就会有这样的几个文件夹：</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">|____mappers</span></span><br><span class=\"line\"><span class=\"string\">|____model</span></span><br><span class=\"line\"><span class=\"string\">|____service</span></span><br><span class=\"line\"><span class=\"string\">|____utils</span></span><br><span class=\"line\"><span class=\"string\">|____controller</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a> \n<p>在 mappers 这一层，我们所做的莫过于如下所示的数据库相关查询：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Insert</span>(</span><br><span class=\"line\">        <span class=\"string\">\"INSERT INTO users(username, password, enabled) \"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"VALUES (#&#123;userName&#125;, #&#123;passwordHash&#125;, #&#123;enabled&#125;)\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"meta\">@Options</span>(keyProperty = <span class=\"string\">\"id\"</span>, keyColumn = <span class=\"string\">\"id\"</span>, useGeneratedKeys = <span class=\"keyword\">true</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(User user)</span></span>;</span><br><span class=\"line\">```    </span><br><span class=\"line\"></span><br><span class=\"line\">model 文件夹和 mappers 文件夹都是数据层的一部分，只是两者间的职责不同，如：</span><br><span class=\"line\"></span><br><span class=\"line\">```<span class=\"function\">java</span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title\">getUserName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> userName;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUserName</span><span class=\"params\">(String userName)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.userName = userName;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>而他们最后都需要在 Controller，又或者称为 ModelAndView 中处理：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(value = &#123;<span class=\"string\">\"/disableUser\"</span>&#125;, method = RequestMethod.POST)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">processUserDisable</span><span class=\"params\">(HttpServletRequest request, ModelMap model)</span> </span>&#123;</span><br><span class=\"line\">    String userName = request.getParameter(<span class=\"string\">\"userName\"</span>);</span><br><span class=\"line\">    User user = userService.getByUsername(userName);</span><br><span class=\"line\">    userService.disable(user);</span><br><span class=\"line\">    Map&lt;String,User&gt; map = <span class=\"keyword\">new</span> HashMap&lt;String,User&gt;();</span><br><span class=\"line\">    Map &lt;User,String&gt; usersWithRoles= userService.getAllUsersWithRole();</span><br><span class=\"line\">    model.put(<span class=\"string\">\"usersWithRoles\"</span>,usersWithRoles);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ModelAndView(<span class=\"string\">\"redirect:users\"</span>,map);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在多数时候，Controller 不应该直接与数据层的一部分，而将业务逻辑放在 Controller 层又是一种错误，这时就有了 Service 层，如下图：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter2/service-mvc.png\" alt=\"Service MVC\"></p>\n<p>Domain（业务）是一个相当复杂的层级，这里是业务的核心。一个合理的 Controller 只应该做自己应该做的事，它不应该处理业务相关的代码：</p>\n<p>我们在 Controller 层应该做的事是：</p>\n<ol>\n<li>处理请求的参数</li>\n<li>渲染和重定向</li>\n<li>选择 Model 和 Service</li>\n<li>处理 Session 和 Cookies</li>\n</ol>\n<p>业务是善变的，昨天我们可能还在和对手竞争谁先推出新功能，但是今天可能已经合并了。我们很难预见业务变化，但是我们应该能预见 Controller 是不容易变化的。在一些设计里面，这种模式就是 Command 模式。</p>\n<h3 id=\"Model\"><a href=\"#Model\" class=\"headerlink\" title=\"Model\"></a>Model</h3><blockquote>\n<p>模型用于封装与应用程序的业务逻辑相关的数据以及对数据的处理方法。</p>\n</blockquote>\n<p>它是介于数据与控制器之间的层级，拥有对数据直接访问的权力——增删改查(CRUD)。Web 应用中，数据通常是由数据库来存储，有时也会用搜索引擎来存储</p>\n<p>因此在实现这个层级与数据库交付时，可以使用 SQL 语句，也可以使用 ORM 框架。</p>\n<p>SQL(Structured Query Language，即结构化查询语言)， 语句是数据库的查询语言</p>\n<p>ORM(Object Relational Mapping)，即对象关系映射，主要是将数据库中的关系数据映射称为程序中的对象。</p>\n<h3 id=\"View\"><a href=\"#View\" class=\"headerlink\" title=\"View\"></a>View</h3><p>View 层在 Web 应用中，一般是使用模板引擎装载对应 HTML。如下所示的是一段 JSP 代码：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;&lt;title&gt;First JSP&lt;/title&gt;&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">  &lt;%</span><br><span class=\"line\">    double num = Math.random();</span><br><span class=\"line\">    if (num &gt; 0.95) &#123;</span><br><span class=\"line\">  %&gt;</span><br><span class=\"line\">      &lt;h2&gt;You'll have a luck day!&lt;/h2&gt;&lt;p&gt;(&lt;%= num %&gt;)&lt;/p&gt;</span><br><span class=\"line\">  &lt;%</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">  %&gt;</span><br><span class=\"line\">      &lt;h2&gt;Well, life goes on ... &lt;/h2&gt;&lt;p&gt;(&lt;%= num %&gt;)&lt;/p&gt;</span><br><span class=\"line\">  &lt;%</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  %&gt;</span><br><span class=\"line\">  &lt;a href=\"&lt;%= request.getRequestURI() %&gt;\"&gt;&lt;h3&gt;Try Again&lt;/h3&gt;&lt;/a&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>上面的 JSP 代码在经过程序解析、处理后，会变成相对应的 HTML。而我们可以发现在这里的 View 层不仅仅只有模板的作用，我们会发现这里的 View 层还计划了部分的逻辑。我们可以在后面细细看这些问题，对于前端的 View 层来说，他可能是这样的：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"information pure-g\"</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123;#.&#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"pure-u-1 \"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"l-box\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">h3</span> <span class=\"attr\">class</span>=<span class=\"string\">\"information-head\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#/blog/&#123;&#123;slug&#125;&#125;\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"&#123;&#123;title&#125;&#125;\"</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">                发布时间:<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;&#123;created&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">                &#123;&#123;&#123;content&#125;&#125;&#125;</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123;/.&#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在这里的 View 层只是单纯的一个显示作用，这也是我们推荐的做法。业务逻辑应该尽可能的放置于业务层。</p>\n<h3 id=\"Controller\"><a href=\"#Controller\" class=\"headerlink\" title=\"Controller\"></a>Controller</h3><blockquote>\n<p>控制器层起到不同层面间的组织作用，用于控制应用程序的流程。</p>\n</blockquote>\n<h3 id=\"更多\"><a href=\"#更多\" class=\"headerlink\" title=\"更多\"></a>更多</h3><p>在前后端解耦合的系统中，通常系统的架构模式就变成了 MVP，又或者是 MVVM。</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter2/mvc-mvvm-mvp.png\" alt=\"MVC、MVVM、MVP 对比\"></p>\n<p>三者间很大的不同在于层级间的通讯模型、使用场景。</p>\n<h4 id=\"MVP\"><a href=\"#MVP\" class=\"headerlink\" title=\"MVP\"></a>MVP</h4><blockquote>\n<p>MVP 是从经典的模式 MVC 演变而来，它们的基本思想有相通的地方：Controller/Presenter 负责逻辑的处理，Model 提供数据，View 负责显示。</p>\n</blockquote>\n<h4 id=\"MVVM\"><a href=\"#MVVM\" class=\"headerlink\" title=\"MVVM\"></a>MVVM</h4><p>MVVM 是 Model-View-ViewModel 的简写。相比于MVC悠久的历史来说，MVVM 是一个相当新的架构，它最早于2005年被由的 WPF 和Silverlight 的架构师 John Gossman 提出，并且应用在微软的软件开发中。而 MVC 已经被提出了二十多年了，可见两者出现的年代差别有多大。</p>\n<p>MVVM 在使用当中，通常还会利用双向绑定技术，使得 Model 变化时，ViewModel 会自动更新，而 ViewModel 变化时，View 也会自动变化。所以，MVVM 模式有些时候又被称作：model-view-binder 模式。</p>\n","excerpt":"<p>人们在不断地反思这其中复杂的过程，整理了一些好的架构模式，其中不得不提到的是我司 Martin Fowler 的《企业应用架构模式》。该书中文译版出版的时候是2004年，那时对于系统的分层是</p>\n<table>\n<thead>\n<tr>\n<th>层次</th>\n<th>职责</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>表现层</td>\n<td>提供服务、显示信息、用户请求、HTTP请求和命令行调用。</td>\n</tr>\n<tr>\n<td>领域层</td>\n<td>逻辑处理，系统中真正的核心。</td>\n</tr>\n<tr>\n<td>数据层</td>\n<td>与数据库、消息系统、事物管理器和其他软件包通讯。</td>\n</tr>\n</tbody>\n</table>\n<p>化身于当时最流行的 Spring，就是 MVC。人们有了 iBatis 这样的数据持久层框架，即 ORM，对象关系映射。于是，你的 package 就会有这样的几个文件夹：</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">|____mappers</span></span><br><span class=\"line\"><span class=\"string\">|____model</span></span><br><span class=\"line\"><span class=\"string\">|____service</span></span><br><span class=\"line\"><span class=\"string\">|____utils</span></span><br><span class=\"line\"><span class=\"string\">|____controller</span></span><br></pre></td></tr></table></figure>","more":"<p>在 mappers 这一层，我们所做的莫过于如下所示的数据库相关查询：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Insert</span>(</span><br><span class=\"line\">        <span class=\"string\">\"INSERT INTO users(username, password, enabled) \"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"VALUES (#&#123;userName&#125;, #&#123;passwordHash&#125;, #&#123;enabled&#125;)\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"meta\">@Options</span>(keyProperty = <span class=\"string\">\"id\"</span>, keyColumn = <span class=\"string\">\"id\"</span>, useGeneratedKeys = <span class=\"keyword\">true</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(User user)</span></span>;</span><br><span class=\"line\">```    </span><br><span class=\"line\"></span><br><span class=\"line\">model 文件夹和 mappers 文件夹都是数据层的一部分，只是两者间的职责不同，如：</span><br><span class=\"line\"></span><br><span class=\"line\">```<span class=\"function\">java</span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title\">getUserName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> userName;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUserName</span><span class=\"params\">(String userName)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.userName = userName;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>而他们最后都需要在 Controller，又或者称为 ModelAndView 中处理：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(value = &#123;<span class=\"string\">\"/disableUser\"</span>&#125;, method = RequestMethod.POST)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">processUserDisable</span><span class=\"params\">(HttpServletRequest request, ModelMap model)</span> </span>&#123;</span><br><span class=\"line\">    String userName = request.getParameter(<span class=\"string\">\"userName\"</span>);</span><br><span class=\"line\">    User user = userService.getByUsername(userName);</span><br><span class=\"line\">    userService.disable(user);</span><br><span class=\"line\">    Map&lt;String,User&gt; map = <span class=\"keyword\">new</span> HashMap&lt;String,User&gt;();</span><br><span class=\"line\">    Map &lt;User,String&gt; usersWithRoles= userService.getAllUsersWithRole();</span><br><span class=\"line\">    model.put(<span class=\"string\">\"usersWithRoles\"</span>,usersWithRoles);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ModelAndView(<span class=\"string\">\"redirect:users\"</span>,map);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在多数时候，Controller 不应该直接与数据层的一部分，而将业务逻辑放在 Controller 层又是一种错误，这时就有了 Service 层，如下图：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter2/service-mvc.png\" alt=\"Service MVC\"></p>\n<p>Domain（业务）是一个相当复杂的层级，这里是业务的核心。一个合理的 Controller 只应该做自己应该做的事，它不应该处理业务相关的代码：</p>\n<p>我们在 Controller 层应该做的事是：</p>\n<ol>\n<li>处理请求的参数</li>\n<li>渲染和重定向</li>\n<li>选择 Model 和 Service</li>\n<li>处理 Session 和 Cookies</li>\n</ol>\n<p>业务是善变的，昨天我们可能还在和对手竞争谁先推出新功能，但是今天可能已经合并了。我们很难预见业务变化，但是我们应该能预见 Controller 是不容易变化的。在一些设计里面，这种模式就是 Command 模式。</p>\n<h3 id=\"Model\"><a href=\"#Model\" class=\"headerlink\" title=\"Model\"></a>Model</h3><blockquote>\n<p>模型用于封装与应用程序的业务逻辑相关的数据以及对数据的处理方法。</p>\n</blockquote>\n<p>它是介于数据与控制器之间的层级，拥有对数据直接访问的权力——增删改查(CRUD)。Web 应用中，数据通常是由数据库来存储，有时也会用搜索引擎来存储</p>\n<p>因此在实现这个层级与数据库交付时，可以使用 SQL 语句，也可以使用 ORM 框架。</p>\n<p>SQL(Structured Query Language，即结构化查询语言)， 语句是数据库的查询语言</p>\n<p>ORM(Object Relational Mapping)，即对象关系映射，主要是将数据库中的关系数据映射称为程序中的对象。</p>\n<h3 id=\"View\"><a href=\"#View\" class=\"headerlink\" title=\"View\"></a>View</h3><p>View 层在 Web 应用中，一般是使用模板引擎装载对应 HTML。如下所示的是一段 JSP 代码：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;&lt;title&gt;First JSP&lt;/title&gt;&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">  &lt;%</span><br><span class=\"line\">    double num = Math.random();</span><br><span class=\"line\">    if (num &gt; 0.95) &#123;</span><br><span class=\"line\">  %&gt;</span><br><span class=\"line\">      &lt;h2&gt;You'll have a luck day!&lt;/h2&gt;&lt;p&gt;(&lt;%= num %&gt;)&lt;/p&gt;</span><br><span class=\"line\">  &lt;%</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">  %&gt;</span><br><span class=\"line\">      &lt;h2&gt;Well, life goes on ... &lt;/h2&gt;&lt;p&gt;(&lt;%= num %&gt;)&lt;/p&gt;</span><br><span class=\"line\">  &lt;%</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  %&gt;</span><br><span class=\"line\">  &lt;a href=\"&lt;%= request.getRequestURI() %&gt;\"&gt;&lt;h3&gt;Try Again&lt;/h3&gt;&lt;/a&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>上面的 JSP 代码在经过程序解析、处理后，会变成相对应的 HTML。而我们可以发现在这里的 View 层不仅仅只有模板的作用，我们会发现这里的 View 层还计划了部分的逻辑。我们可以在后面细细看这些问题，对于前端的 View 层来说，他可能是这样的：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"information pure-g\"</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123;#.&#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"pure-u-1 \"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"l-box\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">h3</span> <span class=\"attr\">class</span>=<span class=\"string\">\"information-head\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#/blog/&#123;&#123;slug&#125;&#125;\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"&#123;&#123;title&#125;&#125;\"</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">                发布时间:<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;&#123;created&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">                &#123;&#123;&#123;content&#125;&#125;&#125;</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123;/.&#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在这里的 View 层只是单纯的一个显示作用，这也是我们推荐的做法。业务逻辑应该尽可能的放置于业务层。</p>\n<h3 id=\"Controller\"><a href=\"#Controller\" class=\"headerlink\" title=\"Controller\"></a>Controller</h3><blockquote>\n<p>控制器层起到不同层面间的组织作用，用于控制应用程序的流程。</p>\n</blockquote>\n<h3 id=\"更多\"><a href=\"#更多\" class=\"headerlink\" title=\"更多\"></a>更多</h3><p>在前后端解耦合的系统中，通常系统的架构模式就变成了 MVP，又或者是 MVVM。</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter2/mvc-mvvm-mvp.png\" alt=\"MVC、MVVM、MVP 对比\"></p>\n<p>三者间很大的不同在于层级间的通讯模型、使用场景。</p>\n<h4 id=\"MVP\"><a href=\"#MVP\" class=\"headerlink\" title=\"MVP\"></a>MVP</h4><blockquote>\n<p>MVP 是从经典的模式 MVC 演变而来，它们的基本思想有相通的地方：Controller/Presenter 负责逻辑的处理，Model 提供数据，View 负责显示。</p>\n</blockquote>\n<h4 id=\"MVVM\"><a href=\"#MVVM\" class=\"headerlink\" title=\"MVVM\"></a>MVVM</h4><p>MVVM 是 Model-View-ViewModel 的简写。相比于MVC悠久的历史来说，MVVM 是一个相当新的架构，它最早于2005年被由的 WPF 和Silverlight 的架构师 John Gossman 提出，并且应用在微软的软件开发中。而 MVC 已经被提出了二十多年了，可见两者出现的年代差别有多大。</p>\n<p>MVVM 在使用当中，通常还会利用双向绑定技术，使得 Model 变化时，ViewModel 会自动更新，而 ViewModel 变化时，View 也会自动变化。所以，MVVM 模式有些时候又被称作：model-view-binder 模式。</p>"},{"title":"后台即服务","date":"2016-04-25T15:45:08.000Z","_content":"\n> BaaS（Backend as a Service）是一种新型的云服务，旨在为移动和 Web 应用提供后端云服务，包括云端数据/文件存储、账户管理、消息推送、社交媒体整合等。\n\n产生这种服务的主要原因之一是因为移动应用的流行。在移动应用中，我们实际上只需要一个 API 接口来连接数据库，并作一些相应的业务逻辑处理。对于不同的应用产商来说，他们打造 API 的方式可能稍有不同，然而他们都只是将后台作为一个服务。\n\n在一些更特殊的例子里，即有网页版和移动应用端，他们也开始使用同一个 API。前端作为一个单页面的应用，或者有后台渲染的应用。其架构如下图所示：\n\n![Backend As A Service](http://growth.phodal.com/assets/article/chapter2/baas-diagram.png)\n\n<!-- more --> \n\n### API 演进史\n\n在早期的工作中，我们会发现我们会将大量的业务逻辑放置到 View 层——如迭代出某个结果。\n\n而在今天，当我们有大量的逻辑一致时，我们怎么办，重复实现三次？\n\n如下所示是笔者之前重构的系统的一个架构缩略图：\n\n![重复逻辑的系统架构](http://growth.phodal.com/assets/article/chapter2/duplicate-business-logic.png)\n\n上面系统产生的主要原因是：技术本身的演进所造成的，并非是系统在一开始没有考虑到这个问题。\n\n![API 演进史](http://growth.phodal.com/assets/article/chapter2/api-history.png)\n\n从早期到现在的互联网公司都有这样的问题，也会有同样的过程：\n\n第一阶段： 因为创始人对于某个领域的看好，他们就创建了这样的一个桌面网站。这个时间点，大概可以在2000年左右。\n\n第二阶段： 前“智能手机”出现了，人们需要开发移动版本的网站来适用用户的需要。这时由于当时的开发环境，以及技术条件所限，当时的网站只会是桌面模板的简化。这时还没有普及 Ajax 请求、SPA 这些事物。\n\n第三阶段： 手机应用的制作开始流行起来了。由于需要制作手机应用，人们就需要在网站上创建 API。由于当时的业务或者项目需求，这个 API 是直接耦合在系统中的。\n\n第四阶段： 由于手机性能的不断提高，并且移动网络速度不断提升，人们便开始在手机上制作单页面应用。\n\n由于他们使用的是相同业务逻辑、代码逻辑相同而**技术栈不同**的代码，当有一个新的需求出现时，他们需要重复多次实现，如下图所示：\n\n![重复业务逻辑的系统架构](http://growth.phodal.com/assets/article/chapter2/duplicate-business-logic-with-domain.png)\n\n随后——也就是今天，各种新的解决方案出现了，如 React、混合应用、原生 + Web 的混合式应用、他们的目的就是解决上述的问题。不过，这些解决方案只是为了解决在前端中可能出现的问题，详细的内容可以见《前端演进史》。\n\n而人们也借此机会在统一后台——因为我们可以借助于混合应用或混合式应用（即原生 + 内嵌 WebView，可以同时解决性能和跨平台问题）统一移动端，借助于响应式设计的理念可以统一桌面、平板和手机端。\n\n因此，我们需要的就只是这样的一个 API：\n\n![One API](http://growth.phodal.com/assets/article/chapter2/one-api.png)\n\n### 后台即服务\n\n现在，让我们来看看一个采用后台即服务的网站架构会是怎样的？\n","source":"_posts/2.1.3-serviceful.md","raw":"title: 后台即服务\ndate: 2016-4-25 23:45:08\ntags:\n---\n\n> BaaS（Backend as a Service）是一种新型的云服务，旨在为移动和 Web 应用提供后端云服务，包括云端数据/文件存储、账户管理、消息推送、社交媒体整合等。\n\n产生这种服务的主要原因之一是因为移动应用的流行。在移动应用中，我们实际上只需要一个 API 接口来连接数据库，并作一些相应的业务逻辑处理。对于不同的应用产商来说，他们打造 API 的方式可能稍有不同，然而他们都只是将后台作为一个服务。\n\n在一些更特殊的例子里，即有网页版和移动应用端，他们也开始使用同一个 API。前端作为一个单页面的应用，或者有后台渲染的应用。其架构如下图所示：\n\n![Backend As A Service](http://growth.phodal.com/assets/article/chapter2/baas-diagram.png)\n\n<!-- more --> \n\n### API 演进史\n\n在早期的工作中，我们会发现我们会将大量的业务逻辑放置到 View 层——如迭代出某个结果。\n\n而在今天，当我们有大量的逻辑一致时，我们怎么办，重复实现三次？\n\n如下所示是笔者之前重构的系统的一个架构缩略图：\n\n![重复逻辑的系统架构](http://growth.phodal.com/assets/article/chapter2/duplicate-business-logic.png)\n\n上面系统产生的主要原因是：技术本身的演进所造成的，并非是系统在一开始没有考虑到这个问题。\n\n![API 演进史](http://growth.phodal.com/assets/article/chapter2/api-history.png)\n\n从早期到现在的互联网公司都有这样的问题，也会有同样的过程：\n\n第一阶段： 因为创始人对于某个领域的看好，他们就创建了这样的一个桌面网站。这个时间点，大概可以在2000年左右。\n\n第二阶段： 前“智能手机”出现了，人们需要开发移动版本的网站来适用用户的需要。这时由于当时的开发环境，以及技术条件所限，当时的网站只会是桌面模板的简化。这时还没有普及 Ajax 请求、SPA 这些事物。\n\n第三阶段： 手机应用的制作开始流行起来了。由于需要制作手机应用，人们就需要在网站上创建 API。由于当时的业务或者项目需求，这个 API 是直接耦合在系统中的。\n\n第四阶段： 由于手机性能的不断提高，并且移动网络速度不断提升，人们便开始在手机上制作单页面应用。\n\n由于他们使用的是相同业务逻辑、代码逻辑相同而**技术栈不同**的代码，当有一个新的需求出现时，他们需要重复多次实现，如下图所示：\n\n![重复业务逻辑的系统架构](http://growth.phodal.com/assets/article/chapter2/duplicate-business-logic-with-domain.png)\n\n随后——也就是今天，各种新的解决方案出现了，如 React、混合应用、原生 + Web 的混合式应用、他们的目的就是解决上述的问题。不过，这些解决方案只是为了解决在前端中可能出现的问题，详细的内容可以见《前端演进史》。\n\n而人们也借此机会在统一后台——因为我们可以借助于混合应用或混合式应用（即原生 + 内嵌 WebView，可以同时解决性能和跨平台问题）统一移动端，借助于响应式设计的理念可以统一桌面、平板和手机端。\n\n因此，我们需要的就只是这样的一个 API：\n\n![One API](http://growth.phodal.com/assets/article/chapter2/one-api.png)\n\n### 后台即服务\n\n现在，让我们来看看一个采用后台即服务的网站架构会是怎样的？\n","slug":"2.1.3-serviceful","published":1,"updated":"2016-04-25T04:44:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuf7mpeb000etsiftezpps90","content":"<blockquote>\n<p>BaaS（Backend as a Service）是一种新型的云服务，旨在为移动和 Web 应用提供后端云服务，包括云端数据/文件存储、账户管理、消息推送、社交媒体整合等。</p>\n</blockquote>\n<p>产生这种服务的主要原因之一是因为移动应用的流行。在移动应用中，我们实际上只需要一个 API 接口来连接数据库，并作一些相应的业务逻辑处理。对于不同的应用产商来说，他们打造 API 的方式可能稍有不同，然而他们都只是将后台作为一个服务。</p>\n<p>在一些更特殊的例子里，即有网页版和移动应用端，他们也开始使用同一个 API。前端作为一个单页面的应用，或者有后台渲染的应用。其架构如下图所示：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter2/baas-diagram.png\" alt=\"Backend As A Service\"></p>\n<a id=\"more\"></a> \n<h3 id=\"API-演进史\"><a href=\"#API-演进史\" class=\"headerlink\" title=\"API 演进史\"></a>API 演进史</h3><p>在早期的工作中，我们会发现我们会将大量的业务逻辑放置到 View 层——如迭代出某个结果。</p>\n<p>而在今天，当我们有大量的逻辑一致时，我们怎么办，重复实现三次？</p>\n<p>如下所示是笔者之前重构的系统的一个架构缩略图：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter2/duplicate-business-logic.png\" alt=\"重复逻辑的系统架构\"></p>\n<p>上面系统产生的主要原因是：技术本身的演进所造成的，并非是系统在一开始没有考虑到这个问题。</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter2/api-history.png\" alt=\"API 演进史\"></p>\n<p>从早期到现在的互联网公司都有这样的问题，也会有同样的过程：</p>\n<p>第一阶段： 因为创始人对于某个领域的看好，他们就创建了这样的一个桌面网站。这个时间点，大概可以在2000年左右。</p>\n<p>第二阶段： 前“智能手机”出现了，人们需要开发移动版本的网站来适用用户的需要。这时由于当时的开发环境，以及技术条件所限，当时的网站只会是桌面模板的简化。这时还没有普及 Ajax 请求、SPA 这些事物。</p>\n<p>第三阶段： 手机应用的制作开始流行起来了。由于需要制作手机应用，人们就需要在网站上创建 API。由于当时的业务或者项目需求，这个 API 是直接耦合在系统中的。</p>\n<p>第四阶段： 由于手机性能的不断提高，并且移动网络速度不断提升，人们便开始在手机上制作单页面应用。</p>\n<p>由于他们使用的是相同业务逻辑、代码逻辑相同而<strong>技术栈不同</strong>的代码，当有一个新的需求出现时，他们需要重复多次实现，如下图所示：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter2/duplicate-business-logic-with-domain.png\" alt=\"重复业务逻辑的系统架构\"></p>\n<p>随后——也就是今天，各种新的解决方案出现了，如 React、混合应用、原生 + Web 的混合式应用、他们的目的就是解决上述的问题。不过，这些解决方案只是为了解决在前端中可能出现的问题，详细的内容可以见《前端演进史》。</p>\n<p>而人们也借此机会在统一后台——因为我们可以借助于混合应用或混合式应用（即原生 + 内嵌 WebView，可以同时解决性能和跨平台问题）统一移动端，借助于响应式设计的理念可以统一桌面、平板和手机端。</p>\n<p>因此，我们需要的就只是这样的一个 API：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter2/one-api.png\" alt=\"One API\"></p>\n<h3 id=\"后台即服务\"><a href=\"#后台即服务\" class=\"headerlink\" title=\"后台即服务\"></a>后台即服务</h3><p>现在，让我们来看看一个采用后台即服务的网站架构会是怎样的？</p>\n","excerpt":"<blockquote>\n<p>BaaS（Backend as a Service）是一种新型的云服务，旨在为移动和 Web 应用提供后端云服务，包括云端数据/文件存储、账户管理、消息推送、社交媒体整合等。</p>\n</blockquote>\n<p>产生这种服务的主要原因之一是因为移动应用的流行。在移动应用中，我们实际上只需要一个 API 接口来连接数据库，并作一些相应的业务逻辑处理。对于不同的应用产商来说，他们打造 API 的方式可能稍有不同，然而他们都只是将后台作为一个服务。</p>\n<p>在一些更特殊的例子里，即有网页版和移动应用端，他们也开始使用同一个 API。前端作为一个单页面的应用，或者有后台渲染的应用。其架构如下图所示：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter2/baas-diagram.png\" alt=\"Backend As A Service\"></p>","more":"<h3 id=\"API-演进史\"><a href=\"#API-演进史\" class=\"headerlink\" title=\"API 演进史\"></a>API 演进史</h3><p>在早期的工作中，我们会发现我们会将大量的业务逻辑放置到 View 层——如迭代出某个结果。</p>\n<p>而在今天，当我们有大量的逻辑一致时，我们怎么办，重复实现三次？</p>\n<p>如下所示是笔者之前重构的系统的一个架构缩略图：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter2/duplicate-business-logic.png\" alt=\"重复逻辑的系统架构\"></p>\n<p>上面系统产生的主要原因是：技术本身的演进所造成的，并非是系统在一开始没有考虑到这个问题。</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter2/api-history.png\" alt=\"API 演进史\"></p>\n<p>从早期到现在的互联网公司都有这样的问题，也会有同样的过程：</p>\n<p>第一阶段： 因为创始人对于某个领域的看好，他们就创建了这样的一个桌面网站。这个时间点，大概可以在2000年左右。</p>\n<p>第二阶段： 前“智能手机”出现了，人们需要开发移动版本的网站来适用用户的需要。这时由于当时的开发环境，以及技术条件所限，当时的网站只会是桌面模板的简化。这时还没有普及 Ajax 请求、SPA 这些事物。</p>\n<p>第三阶段： 手机应用的制作开始流行起来了。由于需要制作手机应用，人们就需要在网站上创建 API。由于当时的业务或者项目需求，这个 API 是直接耦合在系统中的。</p>\n<p>第四阶段： 由于手机性能的不断提高，并且移动网络速度不断提升，人们便开始在手机上制作单页面应用。</p>\n<p>由于他们使用的是相同业务逻辑、代码逻辑相同而<strong>技术栈不同</strong>的代码，当有一个新的需求出现时，他们需要重复多次实现，如下图所示：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter2/duplicate-business-logic-with-domain.png\" alt=\"重复业务逻辑的系统架构\"></p>\n<p>随后——也就是今天，各种新的解决方案出现了，如 React、混合应用、原生 + Web 的混合式应用、他们的目的就是解决上述的问题。不过，这些解决方案只是为了解决在前端中可能出现的问题，详细的内容可以见《前端演进史》。</p>\n<p>而人们也借此机会在统一后台——因为我们可以借助于混合应用或混合式应用（即原生 + 内嵌 WebView，可以同时解决性能和跨平台问题）统一移动端，借助于响应式设计的理念可以统一桌面、平板和手机端。</p>\n<p>因此，我们需要的就只是这样的一个 API：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter2/one-api.png\" alt=\"One API\"></p>\n<h3 id=\"后台即服务\"><a href=\"#后台即服务\" class=\"headerlink\" title=\"后台即服务\"></a>后台即服务</h3><p>现在，让我们来看看一个采用后台即服务的网站架构会是怎样的？</p>"},{"title":"前端框架选择","date":"2016-04-26T14:45:08.000Z","_content":"\n选择前端框架似乎是一件很难的事，然而这件事情并不是看上去那么难。只是有时候你只想追随潮流，或者因为你在技术选型受到一些影响。但是总的来说，选择一个框架并不是一件很难的事。同时也不是一件非常重要的事，因为框架本身是相通的。如果我们不尽量去解耦系统，那么选择什么框架也都是一样的。\n\n### Angular\n\nAngularJS 对于后端人员写前端代码来说，是一个非常不错的选择。Angular 框架采用并扩展了传统 HTML，通过双向的数据绑定来适应动态内容，双向的数据绑定允许模型和视图之间的自动同步。\n\n并且类似于 Ionic 这样的混合框架，也将 Ionic 带到了移动应用的领域。\n\n### React\n\nReact 似乎很受市场欢迎，各种各样的新知识——虚拟 DOM、JSX、Component 等等。React 只是我们在上面章节里说到的 View 层，而这个 View 层需要辅以其他框架才能完成更多的工作。\n\n并且 React 还有一个不错的杀手锏——React Native，虽然这个框架还在有条不紊地挖坑中，但是这真的是太爽了。以后我们只需要一次开发就可以多处运行了，再也没有比这更爽的事情发生了。\n\n<!-- more --> \n\n### Vue\n\nVue.js 是一个轻量级的前端框架。它是一个更加灵活开放的解决方案。它允许你以希望的方式组织应用程序，你可以将它嵌入一个现有页面而不一定要做成一个庞大的单页应用。\n\n### jQuery 系\n\njQuery 还是一个不错的选择，不仅仅对于学习来说，而且对于工作来说也是如此。如果你们不是新起一个项目或者重构旧的项目，那么必然你是没有多少机会去超越 DOM。而如果这时候尝试去这样做会付出一定的代价，如我在前端演进史所说的那样——晚点做出选择，可能会好一点。\n\n因为谁说 jQuery 不会去解放 DOM，React 带来的一些新的思想可能就比不上它的缺点。除此，jQuery 耕织几年的生态系统也是不可忽略。\n\n### Backbone + Zepto + Mustache\n\n这是前几年（今年2016）的一个技术方向，今天似乎已经不太常见了。在这种模式下，人们使用 Backbone 来做一些路由、模型、视图、集合方面的工作，而由 jQuery 的兼容者 Zepto 来负责对 DOM 的处理，而 Mustache 在这里则充当模板系统的工作。\n","source":"_posts/2.2.0-choice-frontend.md","raw":"title: 前端框架选择\ndate: 2016-4-26 22:45:08\ntags:\n---\n\n选择前端框架似乎是一件很难的事，然而这件事情并不是看上去那么难。只是有时候你只想追随潮流，或者因为你在技术选型受到一些影响。但是总的来说，选择一个框架并不是一件很难的事。同时也不是一件非常重要的事，因为框架本身是相通的。如果我们不尽量去解耦系统，那么选择什么框架也都是一样的。\n\n### Angular\n\nAngularJS 对于后端人员写前端代码来说，是一个非常不错的选择。Angular 框架采用并扩展了传统 HTML，通过双向的数据绑定来适应动态内容，双向的数据绑定允许模型和视图之间的自动同步。\n\n并且类似于 Ionic 这样的混合框架，也将 Ionic 带到了移动应用的领域。\n\n### React\n\nReact 似乎很受市场欢迎，各种各样的新知识——虚拟 DOM、JSX、Component 等等。React 只是我们在上面章节里说到的 View 层，而这个 View 层需要辅以其他框架才能完成更多的工作。\n\n并且 React 还有一个不错的杀手锏——React Native，虽然这个框架还在有条不紊地挖坑中，但是这真的是太爽了。以后我们只需要一次开发就可以多处运行了，再也没有比这更爽的事情发生了。\n\n<!-- more --> \n\n### Vue\n\nVue.js 是一个轻量级的前端框架。它是一个更加灵活开放的解决方案。它允许你以希望的方式组织应用程序，你可以将它嵌入一个现有页面而不一定要做成一个庞大的单页应用。\n\n### jQuery 系\n\njQuery 还是一个不错的选择，不仅仅对于学习来说，而且对于工作来说也是如此。如果你们不是新起一个项目或者重构旧的项目，那么必然你是没有多少机会去超越 DOM。而如果这时候尝试去这样做会付出一定的代价，如我在前端演进史所说的那样——晚点做出选择，可能会好一点。\n\n因为谁说 jQuery 不会去解放 DOM，React 带来的一些新的思想可能就比不上它的缺点。除此，jQuery 耕织几年的生态系统也是不可忽略。\n\n### Backbone + Zepto + Mustache\n\n这是前几年（今年2016）的一个技术方向，今天似乎已经不太常见了。在这种模式下，人们使用 Backbone 来做一些路由、模型、视图、集合方面的工作，而由 jQuery 的兼容者 Zepto 来负责对 DOM 的处理，而 Mustache 在这里则充当模板系统的工作。\n","slug":"2.2.0-choice-frontend","published":1,"updated":"2016-04-26T05:35:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuf7mpeh000ftsifw5jdu27i","content":"<p>选择前端框架似乎是一件很难的事，然而这件事情并不是看上去那么难。只是有时候你只想追随潮流，或者因为你在技术选型受到一些影响。但是总的来说，选择一个框架并不是一件很难的事。同时也不是一件非常重要的事，因为框架本身是相通的。如果我们不尽量去解耦系统，那么选择什么框架也都是一样的。</p>\n<h3 id=\"Angular\"><a href=\"#Angular\" class=\"headerlink\" title=\"Angular\"></a>Angular</h3><p>AngularJS 对于后端人员写前端代码来说，是一个非常不错的选择。Angular 框架采用并扩展了传统 HTML，通过双向的数据绑定来适应动态内容，双向的数据绑定允许模型和视图之间的自动同步。</p>\n<p>并且类似于 Ionic 这样的混合框架，也将 Ionic 带到了移动应用的领域。</p>\n<h3 id=\"React\"><a href=\"#React\" class=\"headerlink\" title=\"React\"></a>React</h3><p>React 似乎很受市场欢迎，各种各样的新知识——虚拟 DOM、JSX、Component 等等。React 只是我们在上面章节里说到的 View 层，而这个 View 层需要辅以其他框架才能完成更多的工作。</p>\n<p>并且 React 还有一个不错的杀手锏——React Native，虽然这个框架还在有条不紊地挖坑中，但是这真的是太爽了。以后我们只需要一次开发就可以多处运行了，再也没有比这更爽的事情发生了。</p>\n<a id=\"more\"></a> \n<h3 id=\"Vue\"><a href=\"#Vue\" class=\"headerlink\" title=\"Vue\"></a>Vue</h3><p>Vue.js 是一个轻量级的前端框架。它是一个更加灵活开放的解决方案。它允许你以希望的方式组织应用程序，你可以将它嵌入一个现有页面而不一定要做成一个庞大的单页应用。</p>\n<h3 id=\"jQuery-系\"><a href=\"#jQuery-系\" class=\"headerlink\" title=\"jQuery 系\"></a>jQuery 系</h3><p>jQuery 还是一个不错的选择，不仅仅对于学习来说，而且对于工作来说也是如此。如果你们不是新起一个项目或者重构旧的项目，那么必然你是没有多少机会去超越 DOM。而如果这时候尝试去这样做会付出一定的代价，如我在前端演进史所说的那样——晚点做出选择，可能会好一点。</p>\n<p>因为谁说 jQuery 不会去解放 DOM，React 带来的一些新的思想可能就比不上它的缺点。除此，jQuery 耕织几年的生态系统也是不可忽略。</p>\n<h3 id=\"Backbone-Zepto-Mustache\"><a href=\"#Backbone-Zepto-Mustache\" class=\"headerlink\" title=\"Backbone + Zepto + Mustache\"></a>Backbone + Zepto + Mustache</h3><p>这是前几年（今年2016）的一个技术方向，今天似乎已经不太常见了。在这种模式下，人们使用 Backbone 来做一些路由、模型、视图、集合方面的工作，而由 jQuery 的兼容者 Zepto 来负责对 DOM 的处理，而 Mustache 在这里则充当模板系统的工作。</p>\n","excerpt":"<p>选择前端框架似乎是一件很难的事，然而这件事情并不是看上去那么难。只是有时候你只想追随潮流，或者因为你在技术选型受到一些影响。但是总的来说，选择一个框架并不是一件很难的事。同时也不是一件非常重要的事，因为框架本身是相通的。如果我们不尽量去解耦系统，那么选择什么框架也都是一样的。</p>\n<h3 id=\"Angular\"><a href=\"#Angular\" class=\"headerlink\" title=\"Angular\"></a>Angular</h3><p>AngularJS 对于后端人员写前端代码来说，是一个非常不错的选择。Angular 框架采用并扩展了传统 HTML，通过双向的数据绑定来适应动态内容，双向的数据绑定允许模型和视图之间的自动同步。</p>\n<p>并且类似于 Ionic 这样的混合框架，也将 Ionic 带到了移动应用的领域。</p>\n<h3 id=\"React\"><a href=\"#React\" class=\"headerlink\" title=\"React\"></a>React</h3><p>React 似乎很受市场欢迎，各种各样的新知识——虚拟 DOM、JSX、Component 等等。React 只是我们在上面章节里说到的 View 层，而这个 View 层需要辅以其他框架才能完成更多的工作。</p>\n<p>并且 React 还有一个不错的杀手锏——React Native，虽然这个框架还在有条不紊地挖坑中，但是这真的是太爽了。以后我们只需要一次开发就可以多处运行了，再也没有比这更爽的事情发生了。</p>","more":"<h3 id=\"Vue\"><a href=\"#Vue\" class=\"headerlink\" title=\"Vue\"></a>Vue</h3><p>Vue.js 是一个轻量级的前端框架。它是一个更加灵活开放的解决方案。它允许你以希望的方式组织应用程序，你可以将它嵌入一个现有页面而不一定要做成一个庞大的单页应用。</p>\n<h3 id=\"jQuery-系\"><a href=\"#jQuery-系\" class=\"headerlink\" title=\"jQuery 系\"></a>jQuery 系</h3><p>jQuery 还是一个不错的选择，不仅仅对于学习来说，而且对于工作来说也是如此。如果你们不是新起一个项目或者重构旧的项目，那么必然你是没有多少机会去超越 DOM。而如果这时候尝试去这样做会付出一定的代价，如我在前端演进史所说的那样——晚点做出选择，可能会好一点。</p>\n<p>因为谁说 jQuery 不会去解放 DOM，React 带来的一些新的思想可能就比不上它的缺点。除此，jQuery 耕织几年的生态系统也是不可忽略。</p>\n<h3 id=\"Backbone-Zepto-Mustache\"><a href=\"#Backbone-Zepto-Mustache\" class=\"headerlink\" title=\"Backbone + Zepto + Mustache\"></a>Backbone + Zepto + Mustache</h3><p>这是前几年（今年2016）的一个技术方向，今天似乎已经不太常见了。在这种模式下，人们使用 Backbone 来做一些路由、模型、视图、集合方面的工作，而由 jQuery 的兼容者 Zepto 来负责对 DOM 的处理，而 Mustache 在这里则充当模板系统的工作。</p>"},{"title":"前台与后台交互","date":"2016-04-26T15:45:08.000Z","_content":"\n在我们把后台服务化后，前端跨平台化之前，我们还需要了解前台和后台之间怎么通讯。从现有的一些技术上来看，Ajax 和 WebSocket 是比较受欢迎的。\n\n### Ajax\n\nAJAX 即 “Asynchronous JavaScript And XML”（异步 JavaScript 和 XML），是指一种创建交互式网页应用的网页开发技术。这个功能在之前的很多年来一直被 Web 开发者所忽视，直到最近 Gmail、Google Suggest 和 Google Maps 的出现，才使人们开始意识到其重要性。通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。传统的网页如果需要更新内容，必须重载整个网页页面。\n\n![Ajax 请求](http://growth.phodal.com/assets/article/chapter2/ajax_request.png)\n\n说起 Ajax，我们就需要用 JavaScript 向服务器发送一个 HTTP 请求。这个过程要从 XMLHttpRequest 开始说起，它是一个 JavaScript 对象。它最初由微软设计，随后被 Mozilla、Apple 和 Google 采纳。如今，该对象已经被 W3C 组织标准化。\n\n<!-- more --> \n\n如下的所示的是一个 Ajax 请求的示例代码：\n\n```javascript\nvar xhr = new XMLHttpRequest();\nxhr.onreadystatechange = function() {\n    if (xhr.readyState == XMLHttpRequest.DONE) {\n        alert(xhr.responseText);\n    }\n}\nxhr.open('GET', 'http://example.com', true);\nxhr.send(null);\n```\n\n我们只需要简单的创建一个请求对象实例，打开一个 URL，然后发送这个请求。当传输完毕后，结果的 HTTP 状态以及返回的响应内容也可以从请求对象中获取。\n\n而这个返回的内容可以是多种格式，如 XML 和 JSON，但是从近年的趋势来看，XML 基本上已经很少看到了。这里我们以 JSON 为主，来简单地介绍一下返回数据的解析。\n\n### JSON\n\n> JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。它基于 ECMAScript 的一个子集。 JSON采用完全独立于语言的文本格式，但是也使用了类似于 C 语言家族的习惯（包括 C、C++、C#、Java、JavaScript、Perl、Python等）。这些特性使 JSON 成为理想的数据交换语言。易于人阅读和编写，同时也易于机器解析和生成(一般用于提升网络传输速率)。\n\n#### XML VS JSON\n\nJSON 格式的数据具有以下的一些特点：\n\n - 容易阅读\n - 解析速度更快\n - 占用空间更少\n\n如下所示的是一个简单的对比过程：\n\n```javascript\nmyJSON = {\"age\" : 12, \"name\" : \"Danielle\"}\n```\n\n如果我们要取出上面数值中的age，那么我们只需要这样做：\n\n```javascript\nanObject = JSON.parse(myJSON);\nanObject.age === 12 // True\n```\n\n同样的，对于 XML 来说，我们有下面的格式:\n\n```\n<person>\n    <age>12</age>\n    <name>Danielle</name>\n</person>\n```\n\n而如果我们要取出上面数据中的age的值，他将是这样的：\n\n```javascript\nmyObject = parseThatXMLPlease();\nthePeople = myObject.getChildren(\"person\");\nthePerson = thePeople[0];\nthePerson.getChildren(\"age\")[0].value() == \"12\" // True\n```\n\n对比一下，我们可以发现XML的数据不仅仅解析上比较麻烦，而且还繁琐。\n\n#### JSON WEB Tokens\n\n> JSON Web Token (JWT) 是一种基于 token 的认证方案。\n\n在人们大规模地开始 Web 应用的时候，我们在授权的时候遇到了一些问题，而这些问题不是 Cookie 所能解决的。Cookie 存在一些明显的问题：不能支持跨域、并且不是无状态的、不能使用CDN、与系统耦合等等。除了解决上面的问题，它还可以提高性能等等。基于 Session 的授权机制需要服务端来保存这个状态，而使用 JWT 则可以跳过这个问题，并且使我们设计出来的 API 满足 RESTful 规范。即，我们 API 的状态应该是没有状态的。因此人们提出了 JWT 来解决这一系列的问题。\n\n通过 JWT 我们可以更方便地写出适用于前端应用的认证方案，如登陆、注册这些功能。当我们使用 JWT 来实现我们的注册、登陆功能时，我们在登陆的时候将向我们的服务器发送我们的用户名和密码，服务器验证后将生成对应的 Token。在下次我们进行页面操作的时候，如访问 /Dashboard 时，发出的 HTTP 请求的 Header 中会包含这个 Token。服务器在接收到请求后，将对这个 Token 进行验证并判断这个 Token 是否已经过期了。\n\n![JWT 流程](http://growth.phodal.com/assets/article/chapter2/jwt-process.jpeg)\n\n需要注意的一点是：在使用 JWT 的时候也需要注意安全问题，在允许的情况下应该使用 HTTPS 协议。\n\n### WebSocket\n\n在一些网站上为了实现推送技术，都采用了轮询的技术。即在特定的的时间间隔里，由浏览器对服务器发出 HTTP 请求，然后浏览器便可以从服务器获取最新的技术。如下图所示的是 Google Chrome 申请开发者账号时发出的对应的请求：\n\n![Chrome Ajax 轮询](http://growth.phodal.com/assets/article/chapter2/chrome-ajax-poll.jpg)\n\n从上图中我们可以看到，Chrome 的前台正在不断地向后台查询 API 的结果。由于浏览器需要不断的向服务器发出请求，而 HTTP 的 Header 是非常长的，即使是一个很小的数据也会占用大量的带宽和服务器资源。为了解决这个问题，HTML5 推出了一种在单个 TCP 连接上进行全双工通讯的协议WebSocket。\n\nWebSocket 可以让客户端和服务器之间存在持久的连接，而且双方都可以随时开始发送数据。\n","source":"_posts/2.2.2-communication.md","raw":"title: 前台与后台交互\ndate: 2016-4-26 23:45:08\ntags:\n---\n\n在我们把后台服务化后，前端跨平台化之前，我们还需要了解前台和后台之间怎么通讯。从现有的一些技术上来看，Ajax 和 WebSocket 是比较受欢迎的。\n\n### Ajax\n\nAJAX 即 “Asynchronous JavaScript And XML”（异步 JavaScript 和 XML），是指一种创建交互式网页应用的网页开发技术。这个功能在之前的很多年来一直被 Web 开发者所忽视，直到最近 Gmail、Google Suggest 和 Google Maps 的出现，才使人们开始意识到其重要性。通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。传统的网页如果需要更新内容，必须重载整个网页页面。\n\n![Ajax 请求](http://growth.phodal.com/assets/article/chapter2/ajax_request.png)\n\n说起 Ajax，我们就需要用 JavaScript 向服务器发送一个 HTTP 请求。这个过程要从 XMLHttpRequest 开始说起，它是一个 JavaScript 对象。它最初由微软设计，随后被 Mozilla、Apple 和 Google 采纳。如今，该对象已经被 W3C 组织标准化。\n\n<!-- more --> \n\n如下的所示的是一个 Ajax 请求的示例代码：\n\n```javascript\nvar xhr = new XMLHttpRequest();\nxhr.onreadystatechange = function() {\n    if (xhr.readyState == XMLHttpRequest.DONE) {\n        alert(xhr.responseText);\n    }\n}\nxhr.open('GET', 'http://example.com', true);\nxhr.send(null);\n```\n\n我们只需要简单的创建一个请求对象实例，打开一个 URL，然后发送这个请求。当传输完毕后，结果的 HTTP 状态以及返回的响应内容也可以从请求对象中获取。\n\n而这个返回的内容可以是多种格式，如 XML 和 JSON，但是从近年的趋势来看，XML 基本上已经很少看到了。这里我们以 JSON 为主，来简单地介绍一下返回数据的解析。\n\n### JSON\n\n> JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。它基于 ECMAScript 的一个子集。 JSON采用完全独立于语言的文本格式，但是也使用了类似于 C 语言家族的习惯（包括 C、C++、C#、Java、JavaScript、Perl、Python等）。这些特性使 JSON 成为理想的数据交换语言。易于人阅读和编写，同时也易于机器解析和生成(一般用于提升网络传输速率)。\n\n#### XML VS JSON\n\nJSON 格式的数据具有以下的一些特点：\n\n - 容易阅读\n - 解析速度更快\n - 占用空间更少\n\n如下所示的是一个简单的对比过程：\n\n```javascript\nmyJSON = {\"age\" : 12, \"name\" : \"Danielle\"}\n```\n\n如果我们要取出上面数值中的age，那么我们只需要这样做：\n\n```javascript\nanObject = JSON.parse(myJSON);\nanObject.age === 12 // True\n```\n\n同样的，对于 XML 来说，我们有下面的格式:\n\n```\n<person>\n    <age>12</age>\n    <name>Danielle</name>\n</person>\n```\n\n而如果我们要取出上面数据中的age的值，他将是这样的：\n\n```javascript\nmyObject = parseThatXMLPlease();\nthePeople = myObject.getChildren(\"person\");\nthePerson = thePeople[0];\nthePerson.getChildren(\"age\")[0].value() == \"12\" // True\n```\n\n对比一下，我们可以发现XML的数据不仅仅解析上比较麻烦，而且还繁琐。\n\n#### JSON WEB Tokens\n\n> JSON Web Token (JWT) 是一种基于 token 的认证方案。\n\n在人们大规模地开始 Web 应用的时候，我们在授权的时候遇到了一些问题，而这些问题不是 Cookie 所能解决的。Cookie 存在一些明显的问题：不能支持跨域、并且不是无状态的、不能使用CDN、与系统耦合等等。除了解决上面的问题，它还可以提高性能等等。基于 Session 的授权机制需要服务端来保存这个状态，而使用 JWT 则可以跳过这个问题，并且使我们设计出来的 API 满足 RESTful 规范。即，我们 API 的状态应该是没有状态的。因此人们提出了 JWT 来解决这一系列的问题。\n\n通过 JWT 我们可以更方便地写出适用于前端应用的认证方案，如登陆、注册这些功能。当我们使用 JWT 来实现我们的注册、登陆功能时，我们在登陆的时候将向我们的服务器发送我们的用户名和密码，服务器验证后将生成对应的 Token。在下次我们进行页面操作的时候，如访问 /Dashboard 时，发出的 HTTP 请求的 Header 中会包含这个 Token。服务器在接收到请求后，将对这个 Token 进行验证并判断这个 Token 是否已经过期了。\n\n![JWT 流程](http://growth.phodal.com/assets/article/chapter2/jwt-process.jpeg)\n\n需要注意的一点是：在使用 JWT 的时候也需要注意安全问题，在允许的情况下应该使用 HTTPS 协议。\n\n### WebSocket\n\n在一些网站上为了实现推送技术，都采用了轮询的技术。即在特定的的时间间隔里，由浏览器对服务器发出 HTTP 请求，然后浏览器便可以从服务器获取最新的技术。如下图所示的是 Google Chrome 申请开发者账号时发出的对应的请求：\n\n![Chrome Ajax 轮询](http://growth.phodal.com/assets/article/chapter2/chrome-ajax-poll.jpg)\n\n从上图中我们可以看到，Chrome 的前台正在不断地向后台查询 API 的结果。由于浏览器需要不断的向服务器发出请求，而 HTTP 的 Header 是非常长的，即使是一个很小的数据也会占用大量的带宽和服务器资源。为了解决这个问题，HTML5 推出了一种在单个 TCP 连接上进行全双工通讯的协议WebSocket。\n\nWebSocket 可以让客户端和服务器之间存在持久的连接，而且双方都可以随时开始发送数据。\n","slug":"2.2.2-communication","published":1,"updated":"2016-04-26T04:26:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuf7mpej000gtsifyt8f5jfo","content":"<p>在我们把后台服务化后，前端跨平台化之前，我们还需要了解前台和后台之间怎么通讯。从现有的一些技术上来看，Ajax 和 WebSocket 是比较受欢迎的。</p>\n<h3 id=\"Ajax\"><a href=\"#Ajax\" class=\"headerlink\" title=\"Ajax\"></a>Ajax</h3><p>AJAX 即 “Asynchronous JavaScript And XML”（异步 JavaScript 和 XML），是指一种创建交互式网页应用的网页开发技术。这个功能在之前的很多年来一直被 Web 开发者所忽视，直到最近 Gmail、Google Suggest 和 Google Maps 的出现，才使人们开始意识到其重要性。通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。传统的网页如果需要更新内容，必须重载整个网页页面。</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter2/ajax_request.png\" alt=\"Ajax 请求\"></p>\n<p>说起 Ajax，我们就需要用 JavaScript 向服务器发送一个 HTTP 请求。这个过程要从 XMLHttpRequest 开始说起，它是一个 JavaScript 对象。它最初由微软设计，随后被 Mozilla、Apple 和 Google 采纳。如今，该对象已经被 W3C 组织标准化。</p>\n<a id=\"more\"></a> \n<p>如下的所示的是一个 Ajax 请求的示例代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (xhr.readyState == XMLHttpRequest.DONE) &#123;</span><br><span class=\"line\">        alert(xhr.responseText);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">xhr.open(<span class=\"string\">'GET'</span>, <span class=\"string\">'http://example.com'</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">xhr.send(<span class=\"literal\">null</span>);</span><br></pre></td></tr></table></figure>\n<p>我们只需要简单的创建一个请求对象实例，打开一个 URL，然后发送这个请求。当传输完毕后，结果的 HTTP 状态以及返回的响应内容也可以从请求对象中获取。</p>\n<p>而这个返回的内容可以是多种格式，如 XML 和 JSON，但是从近年的趋势来看，XML 基本上已经很少看到了。这里我们以 JSON 为主，来简单地介绍一下返回数据的解析。</p>\n<h3 id=\"JSON\"><a href=\"#JSON\" class=\"headerlink\" title=\"JSON\"></a>JSON</h3><blockquote>\n<p>JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。它基于 ECMAScript 的一个子集。 JSON采用完全独立于语言的文本格式，但是也使用了类似于 C 语言家族的习惯（包括 C、C++、C#、Java、JavaScript、Perl、Python等）。这些特性使 JSON 成为理想的数据交换语言。易于人阅读和编写，同时也易于机器解析和生成(一般用于提升网络传输速率)。</p>\n</blockquote>\n<h4 id=\"XML-VS-JSON\"><a href=\"#XML-VS-JSON\" class=\"headerlink\" title=\"XML VS JSON\"></a>XML VS JSON</h4><p>JSON 格式的数据具有以下的一些特点：</p>\n<ul>\n<li>容易阅读</li>\n<li>解析速度更快</li>\n<li>占用空间更少</li>\n</ul>\n<p>如下所示的是一个简单的对比过程：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myJSON = &#123;<span class=\"string\">\"age\"</span> : <span class=\"number\">12</span>, <span class=\"string\">\"name\"</span> : <span class=\"string\">\"Danielle\"</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>如果我们要取出上面数值中的age，那么我们只需要这样做：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">anObject = <span class=\"built_in\">JSON</span>.parse(myJSON);</span><br><span class=\"line\">anObject.age === <span class=\"number\">12</span> <span class=\"comment\">// True</span></span><br></pre></td></tr></table></figure>\n<p>同样的，对于 XML 来说，我们有下面的格式:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">person</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">age</span>&gt;</span>12<span class=\"tag\">&lt;/<span class=\"name\">age</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Danielle<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">person</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>而如果我们要取出上面数据中的age的值，他将是这样的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myObject = parseThatXMLPlease();</span><br><span class=\"line\">thePeople = myObject.getChildren(<span class=\"string\">\"person\"</span>);</span><br><span class=\"line\">thePerson = thePeople[<span class=\"number\">0</span>];</span><br><span class=\"line\">thePerson.getChildren(<span class=\"string\">\"age\"</span>)[<span class=\"number\">0</span>].value() == <span class=\"string\">\"12\"</span> <span class=\"comment\">// True</span></span><br></pre></td></tr></table></figure>\n<p>对比一下，我们可以发现XML的数据不仅仅解析上比较麻烦，而且还繁琐。</p>\n<h4 id=\"JSON-WEB-Tokens\"><a href=\"#JSON-WEB-Tokens\" class=\"headerlink\" title=\"JSON WEB Tokens\"></a>JSON WEB Tokens</h4><blockquote>\n<p>JSON Web Token (JWT) 是一种基于 token 的认证方案。</p>\n</blockquote>\n<p>在人们大规模地开始 Web 应用的时候，我们在授权的时候遇到了一些问题，而这些问题不是 Cookie 所能解决的。Cookie 存在一些明显的问题：不能支持跨域、并且不是无状态的、不能使用CDN、与系统耦合等等。除了解决上面的问题，它还可以提高性能等等。基于 Session 的授权机制需要服务端来保存这个状态，而使用 JWT 则可以跳过这个问题，并且使我们设计出来的 API 满足 RESTful 规范。即，我们 API 的状态应该是没有状态的。因此人们提出了 JWT 来解决这一系列的问题。</p>\n<p>通过 JWT 我们可以更方便地写出适用于前端应用的认证方案，如登陆、注册这些功能。当我们使用 JWT 来实现我们的注册、登陆功能时，我们在登陆的时候将向我们的服务器发送我们的用户名和密码，服务器验证后将生成对应的 Token。在下次我们进行页面操作的时候，如访问 /Dashboard 时，发出的 HTTP 请求的 Header 中会包含这个 Token。服务器在接收到请求后，将对这个 Token 进行验证并判断这个 Token 是否已经过期了。</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter2/jwt-process.jpeg\" alt=\"JWT 流程\"></p>\n<p>需要注意的一点是：在使用 JWT 的时候也需要注意安全问题，在允许的情况下应该使用 HTTPS 协议。</p>\n<h3 id=\"WebSocket\"><a href=\"#WebSocket\" class=\"headerlink\" title=\"WebSocket\"></a>WebSocket</h3><p>在一些网站上为了实现推送技术，都采用了轮询的技术。即在特定的的时间间隔里，由浏览器对服务器发出 HTTP 请求，然后浏览器便可以从服务器获取最新的技术。如下图所示的是 Google Chrome 申请开发者账号时发出的对应的请求：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter2/chrome-ajax-poll.jpg\" alt=\"Chrome Ajax 轮询\"></p>\n<p>从上图中我们可以看到，Chrome 的前台正在不断地向后台查询 API 的结果。由于浏览器需要不断的向服务器发出请求，而 HTTP 的 Header 是非常长的，即使是一个很小的数据也会占用大量的带宽和服务器资源。为了解决这个问题，HTML5 推出了一种在单个 TCP 连接上进行全双工通讯的协议WebSocket。</p>\n<p>WebSocket 可以让客户端和服务器之间存在持久的连接，而且双方都可以随时开始发送数据。</p>\n","excerpt":"<p>在我们把后台服务化后，前端跨平台化之前，我们还需要了解前台和后台之间怎么通讯。从现有的一些技术上来看，Ajax 和 WebSocket 是比较受欢迎的。</p>\n<h3 id=\"Ajax\"><a href=\"#Ajax\" class=\"headerlink\" title=\"Ajax\"></a>Ajax</h3><p>AJAX 即 “Asynchronous JavaScript And XML”（异步 JavaScript 和 XML），是指一种创建交互式网页应用的网页开发技术。这个功能在之前的很多年来一直被 Web 开发者所忽视，直到最近 Gmail、Google Suggest 和 Google Maps 的出现，才使人们开始意识到其重要性。通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。传统的网页如果需要更新内容，必须重载整个网页页面。</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter2/ajax_request.png\" alt=\"Ajax 请求\"></p>\n<p>说起 Ajax，我们就需要用 JavaScript 向服务器发送一个 HTTP 请求。这个过程要从 XMLHttpRequest 开始说起，它是一个 JavaScript 对象。它最初由微软设计，随后被 Mozilla、Apple 和 Google 采纳。如今，该对象已经被 W3C 组织标准化。</p>","more":"<p>如下的所示的是一个 Ajax 请求的示例代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (xhr.readyState == XMLHttpRequest.DONE) &#123;</span><br><span class=\"line\">        alert(xhr.responseText);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">xhr.open(<span class=\"string\">'GET'</span>, <span class=\"string\">'http://example.com'</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">xhr.send(<span class=\"literal\">null</span>);</span><br></pre></td></tr></table></figure>\n<p>我们只需要简单的创建一个请求对象实例，打开一个 URL，然后发送这个请求。当传输完毕后，结果的 HTTP 状态以及返回的响应内容也可以从请求对象中获取。</p>\n<p>而这个返回的内容可以是多种格式，如 XML 和 JSON，但是从近年的趋势来看，XML 基本上已经很少看到了。这里我们以 JSON 为主，来简单地介绍一下返回数据的解析。</p>\n<h3 id=\"JSON\"><a href=\"#JSON\" class=\"headerlink\" title=\"JSON\"></a>JSON</h3><blockquote>\n<p>JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。它基于 ECMAScript 的一个子集。 JSON采用完全独立于语言的文本格式，但是也使用了类似于 C 语言家族的习惯（包括 C、C++、C#、Java、JavaScript、Perl、Python等）。这些特性使 JSON 成为理想的数据交换语言。易于人阅读和编写，同时也易于机器解析和生成(一般用于提升网络传输速率)。</p>\n</blockquote>\n<h4 id=\"XML-VS-JSON\"><a href=\"#XML-VS-JSON\" class=\"headerlink\" title=\"XML VS JSON\"></a>XML VS JSON</h4><p>JSON 格式的数据具有以下的一些特点：</p>\n<ul>\n<li>容易阅读</li>\n<li>解析速度更快</li>\n<li>占用空间更少</li>\n</ul>\n<p>如下所示的是一个简单的对比过程：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myJSON = &#123;<span class=\"string\">\"age\"</span> : <span class=\"number\">12</span>, <span class=\"string\">\"name\"</span> : <span class=\"string\">\"Danielle\"</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>如果我们要取出上面数值中的age，那么我们只需要这样做：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">anObject = <span class=\"built_in\">JSON</span>.parse(myJSON);</span><br><span class=\"line\">anObject.age === <span class=\"number\">12</span> <span class=\"comment\">// True</span></span><br></pre></td></tr></table></figure>\n<p>同样的，对于 XML 来说，我们有下面的格式:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">person</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">age</span>&gt;</span>12<span class=\"tag\">&lt;/<span class=\"name\">age</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Danielle<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">person</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>而如果我们要取出上面数据中的age的值，他将是这样的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myObject = parseThatXMLPlease();</span><br><span class=\"line\">thePeople = myObject.getChildren(<span class=\"string\">\"person\"</span>);</span><br><span class=\"line\">thePerson = thePeople[<span class=\"number\">0</span>];</span><br><span class=\"line\">thePerson.getChildren(<span class=\"string\">\"age\"</span>)[<span class=\"number\">0</span>].value() == <span class=\"string\">\"12\"</span> <span class=\"comment\">// True</span></span><br></pre></td></tr></table></figure>\n<p>对比一下，我们可以发现XML的数据不仅仅解析上比较麻烦，而且还繁琐。</p>\n<h4 id=\"JSON-WEB-Tokens\"><a href=\"#JSON-WEB-Tokens\" class=\"headerlink\" title=\"JSON WEB Tokens\"></a>JSON WEB Tokens</h4><blockquote>\n<p>JSON Web Token (JWT) 是一种基于 token 的认证方案。</p>\n</blockquote>\n<p>在人们大规模地开始 Web 应用的时候，我们在授权的时候遇到了一些问题，而这些问题不是 Cookie 所能解决的。Cookie 存在一些明显的问题：不能支持跨域、并且不是无状态的、不能使用CDN、与系统耦合等等。除了解决上面的问题，它还可以提高性能等等。基于 Session 的授权机制需要服务端来保存这个状态，而使用 JWT 则可以跳过这个问题，并且使我们设计出来的 API 满足 RESTful 规范。即，我们 API 的状态应该是没有状态的。因此人们提出了 JWT 来解决这一系列的问题。</p>\n<p>通过 JWT 我们可以更方便地写出适用于前端应用的认证方案，如登陆、注册这些功能。当我们使用 JWT 来实现我们的注册、登陆功能时，我们在登陆的时候将向我们的服务器发送我们的用户名和密码，服务器验证后将生成对应的 Token。在下次我们进行页面操作的时候，如访问 /Dashboard 时，发出的 HTTP 请求的 Header 中会包含这个 Token。服务器在接收到请求后，将对这个 Token 进行验证并判断这个 Token 是否已经过期了。</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter2/jwt-process.jpeg\" alt=\"JWT 流程\"></p>\n<p>需要注意的一点是：在使用 JWT 的时候也需要注意安全问题，在允许的情况下应该使用 HTTPS 协议。</p>\n<h3 id=\"WebSocket\"><a href=\"#WebSocket\" class=\"headerlink\" title=\"WebSocket\"></a>WebSocket</h3><p>在一些网站上为了实现推送技术，都采用了轮询的技术。即在特定的的时间间隔里，由浏览器对服务器发出 HTTP 请求，然后浏览器便可以从服务器获取最新的技术。如下图所示的是 Google Chrome 申请开发者账号时发出的对应的请求：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter2/chrome-ajax-poll.jpg\" alt=\"Chrome Ajax 轮询\"></p>\n<p>从上图中我们可以看到，Chrome 的前台正在不断地向后台查询 API 的结果。由于浏览器需要不断的向服务器发出请求，而 HTTP 的 Header 是非常长的，即使是一个很小的数据也会占用大量的带宽和服务器资源。为了解决这个问题，HTML5 推出了一种在单个 TCP 连接上进行全双工通讯的协议WebSocket。</p>\n<p>WebSocket 可以让客户端和服务器之间存在持久的连接，而且双方都可以随时开始发送数据。</p>"},{"title":"数据持久化","date":"2016-04-26T13:45:08.000Z","_content":"\n信息源于数据，我们在网站上看到的内容都应该是属于信息的范畴。这些信息是应用从数据库中根据业务需求查找、过滤出来的数据。\n\n数据通常以文件的形式存储，毕竟文件是存储信息的基本单位。只是由于业务本身对于 Create、Update、Query、Index 等有不同的组合需求就引发了不同的数据存储软件。\n\n如上章所说，View 层直接从 Model 层取数据，无遗也会暴露数据的模型。作为一个前端开发人员，我们对数据的操作有三种类型：\n\n1. 数据库。由于 Node.js 在最近几年里发展迅猛，越来越多的开发者选择使用 Node.js 作为后台语言。这与传统的 Model 层并无多大不同，要么直接操作数据库，要么间接操作数据库。即使在 NoSQL 数据库中也是如此。\n2. 搜索引擎。对于以查询为主的领域来说，搜索引擎是一个更好的选择，而搜索引擎又不好直接向 View 层暴露接口。这和招聘信息一样，都在暴露公司的技术栈。\n3. RESTful。RESTful 相当于是 CRUD 的衍生，只是传输介质变了。\n4. LocalStorage。LocalStorage 算是另外一种方式的 CRUD。\n\n说了这么多都是废话，他们都是可以用类 CRUD 的方式操作。\n\n<!-- more --> \n\n### 文件存储\n\n通常来说，以这种方式存储最常见的方式是 log(日志)，如 Nginx 的 access.log。像这样的文件就需要一些专业的软件，如 GoAccess、又或者是 Hadoop、Spark 来做对应的事。\n\n在数据库出现之前，人们都是使用文件来存储数据的。数据以文件为单位存储在硬盘上，并且这些文件不容易一起管理、修改等等。如下图所示的是我早期存储文件的一种方式：\n\n\n├── 3.12\n│   ├── cover.png\n│   └── favicon.ico\n└── 3.13\n    └── template.tex\n\n每天我们都会修改、查看大量的不同类型的文件。而由于工作繁忙，我们可能没有办法一一地去分类这些文件。有时选择的便是，优先先按日期把文件一划分，接着再在随后的日子里归档。而这种存储方式大量的依赖于人来索引的工作，在很多时候往往显得不是很靠谱。并且当我们将数据存储进去后，往往很难进行修改。大量的 Log 文件就需要专门的工作来分析和使用，依赖于人来解析这些日志往往显得不是很靠谱。这时我们就需要一些重量级的工具，如用 Logstash、ElasticSearch、Kibana 来处理 Nginx 访问日志。\n\n而对于那些非专业人员来说，使用 Excel 这样的工具往往显得比较方便。他们不需要去操作数据库，也不需要专业的知识来处理这些知识。只是从某种意义上来说，Excel 应该归属于数据库的范畴。\n\n### 数据库\n\n当我们开始一个 Web 应用的时候，如创建一个用户管理系统的时候，我们就需要不断由于经常对文件进行查询、修改、插入和删除等操作。不仅仅如此，我们还需要定义数据之前的关系，如这个用户对应这个密码。在一些更复杂的情况下，我们还需要寻找中这些用户对应的一些操作数据等等。如果我们还是这些工作交给文件来处理，那么我们便是在向自己挖坑。\n\n> 数据库，简单来说可视为电子化的文件柜——存储电子文件的处所，用户可以对文件中的数据运行新增、截取、更新、删除等操作。\n\n在操作库的时候，我们会使用到一名为 SQL（英语：Structural Query Language，中文： 结构化查询语言）的领域特定语言来对数据进行操作。\n\n> SQL 是高级的非过程化编程语言，它允许用户在高层数据结构上工作。它不要求用户指定对数据的存放方法，也不需要用户了解其具体的数据存放方式。\n\n数据库里存储着大量的数据，在我们对系统建模的时候，也在决定系统的基础模型。\n\n\n#### ORM\n\n在传统 SQL 数据库中，我们可能会依赖于 ORM，也可能会自己写 SQL。在使用 ORM 框架时，我们需要先定义 Model，如下是 Node.js 的 ORM 框架 Sequelize 的一个示例：\n\n```javascript\nvar User = sequelize.define('user', {\n  firstName: {\n    type: Sequelize.STRING,\n    field: 'first_name'\n  },\n  lastName: {\n    type: Sequelize.STRING\n  }\n}, {\n  freezeTableName: true\n});\n\nUser.sync({force: true}).then(function () {\n  // Table created\n  return User.create({\n    firstName: 'John',\n    lastName: 'Hancock'\n  });\n});\n```\n\n上面定义的 Model，在程序初始化的时候将会创建相应的数据库字段。并且会创建一个 firstName 为 'John'，lastName 为 'Hancock' 的用户。而这个过程中，我们并不需要操作数据库。\n\n像如 MongoDB 这类的数据库，也是存在数据模型，但说的却是嵌入子文档。在业务量大的情况下，数据库在考验公司的技术能力，想想便觉得 Amazon RDS 挺好的。\n\n### 搜索引擎\n\n尽管百科上对于搜索引擎的定义是这样的：\n\n> 搜索引擎指自动从因特网搜集信息，经过一定整理以后，提供给用户进行查询的系统。\n\n但是这样说往得不是非常准备。因为有相当多的网站采用了搜索引擎作为基础的存储服务架构，而且他们并非自动从互联网上搜索信息。搜索引擎应该分成三个部分来组成：\n\n1. 索引服务\n2. 搜索服务\n3. 索引数据\n\n索引服务便是用于将数据存储到索引数据中，而搜索服务正是搜索引擎存在的意义。对于查询条件复杂的网站来说，采用搜索引擎就意味着减少了非常多的繁琐数据处理事务。在一些架构中，人们用数据库存储数据，并使用工具来将数据注入到搜索引擎中。\n\n从架构上来说，使用搜索引擎的优点是：分离存储、查询部分。从开发上来说，它可以让我们更关注于业务本身的价值，而不是去实现这样一个搜索逻辑。\n\n如下图所示的 Lucene 应用的架构：\n\n![Lucene 应用架构](http://growth.phodal.com/assets/article/chapter2/lucene-arch.jpg)\n\n可以从图中看到系统明显被划分成两部分：\n\n1. Index Documents。索引文档部分，将用于存储数据到文件系统中。\n2. Search Index。搜索部分，用于查询相应的数据。\n","source":"_posts/2.1.4-persistence.md","raw":"title: 数据持久化\ndate: 2016-4-26 21:45:08\ntags:\n---\n\n信息源于数据，我们在网站上看到的内容都应该是属于信息的范畴。这些信息是应用从数据库中根据业务需求查找、过滤出来的数据。\n\n数据通常以文件的形式存储，毕竟文件是存储信息的基本单位。只是由于业务本身对于 Create、Update、Query、Index 等有不同的组合需求就引发了不同的数据存储软件。\n\n如上章所说，View 层直接从 Model 层取数据，无遗也会暴露数据的模型。作为一个前端开发人员，我们对数据的操作有三种类型：\n\n1. 数据库。由于 Node.js 在最近几年里发展迅猛，越来越多的开发者选择使用 Node.js 作为后台语言。这与传统的 Model 层并无多大不同，要么直接操作数据库，要么间接操作数据库。即使在 NoSQL 数据库中也是如此。\n2. 搜索引擎。对于以查询为主的领域来说，搜索引擎是一个更好的选择，而搜索引擎又不好直接向 View 层暴露接口。这和招聘信息一样，都在暴露公司的技术栈。\n3. RESTful。RESTful 相当于是 CRUD 的衍生，只是传输介质变了。\n4. LocalStorage。LocalStorage 算是另外一种方式的 CRUD。\n\n说了这么多都是废话，他们都是可以用类 CRUD 的方式操作。\n\n<!-- more --> \n\n### 文件存储\n\n通常来说，以这种方式存储最常见的方式是 log(日志)，如 Nginx 的 access.log。像这样的文件就需要一些专业的软件，如 GoAccess、又或者是 Hadoop、Spark 来做对应的事。\n\n在数据库出现之前，人们都是使用文件来存储数据的。数据以文件为单位存储在硬盘上，并且这些文件不容易一起管理、修改等等。如下图所示的是我早期存储文件的一种方式：\n\n\n├── 3.12\n│   ├── cover.png\n│   └── favicon.ico\n└── 3.13\n    └── template.tex\n\n每天我们都会修改、查看大量的不同类型的文件。而由于工作繁忙，我们可能没有办法一一地去分类这些文件。有时选择的便是，优先先按日期把文件一划分，接着再在随后的日子里归档。而这种存储方式大量的依赖于人来索引的工作，在很多时候往往显得不是很靠谱。并且当我们将数据存储进去后，往往很难进行修改。大量的 Log 文件就需要专门的工作来分析和使用，依赖于人来解析这些日志往往显得不是很靠谱。这时我们就需要一些重量级的工具，如用 Logstash、ElasticSearch、Kibana 来处理 Nginx 访问日志。\n\n而对于那些非专业人员来说，使用 Excel 这样的工具往往显得比较方便。他们不需要去操作数据库，也不需要专业的知识来处理这些知识。只是从某种意义上来说，Excel 应该归属于数据库的范畴。\n\n### 数据库\n\n当我们开始一个 Web 应用的时候，如创建一个用户管理系统的时候，我们就需要不断由于经常对文件进行查询、修改、插入和删除等操作。不仅仅如此，我们还需要定义数据之前的关系，如这个用户对应这个密码。在一些更复杂的情况下，我们还需要寻找中这些用户对应的一些操作数据等等。如果我们还是这些工作交给文件来处理，那么我们便是在向自己挖坑。\n\n> 数据库，简单来说可视为电子化的文件柜——存储电子文件的处所，用户可以对文件中的数据运行新增、截取、更新、删除等操作。\n\n在操作库的时候，我们会使用到一名为 SQL（英语：Structural Query Language，中文： 结构化查询语言）的领域特定语言来对数据进行操作。\n\n> SQL 是高级的非过程化编程语言，它允许用户在高层数据结构上工作。它不要求用户指定对数据的存放方法，也不需要用户了解其具体的数据存放方式。\n\n数据库里存储着大量的数据，在我们对系统建模的时候，也在决定系统的基础模型。\n\n\n#### ORM\n\n在传统 SQL 数据库中，我们可能会依赖于 ORM，也可能会自己写 SQL。在使用 ORM 框架时，我们需要先定义 Model，如下是 Node.js 的 ORM 框架 Sequelize 的一个示例：\n\n```javascript\nvar User = sequelize.define('user', {\n  firstName: {\n    type: Sequelize.STRING,\n    field: 'first_name'\n  },\n  lastName: {\n    type: Sequelize.STRING\n  }\n}, {\n  freezeTableName: true\n});\n\nUser.sync({force: true}).then(function () {\n  // Table created\n  return User.create({\n    firstName: 'John',\n    lastName: 'Hancock'\n  });\n});\n```\n\n上面定义的 Model，在程序初始化的时候将会创建相应的数据库字段。并且会创建一个 firstName 为 'John'，lastName 为 'Hancock' 的用户。而这个过程中，我们并不需要操作数据库。\n\n像如 MongoDB 这类的数据库，也是存在数据模型，但说的却是嵌入子文档。在业务量大的情况下，数据库在考验公司的技术能力，想想便觉得 Amazon RDS 挺好的。\n\n### 搜索引擎\n\n尽管百科上对于搜索引擎的定义是这样的：\n\n> 搜索引擎指自动从因特网搜集信息，经过一定整理以后，提供给用户进行查询的系统。\n\n但是这样说往得不是非常准备。因为有相当多的网站采用了搜索引擎作为基础的存储服务架构，而且他们并非自动从互联网上搜索信息。搜索引擎应该分成三个部分来组成：\n\n1. 索引服务\n2. 搜索服务\n3. 索引数据\n\n索引服务便是用于将数据存储到索引数据中，而搜索服务正是搜索引擎存在的意义。对于查询条件复杂的网站来说，采用搜索引擎就意味着减少了非常多的繁琐数据处理事务。在一些架构中，人们用数据库存储数据，并使用工具来将数据注入到搜索引擎中。\n\n从架构上来说，使用搜索引擎的优点是：分离存储、查询部分。从开发上来说，它可以让我们更关注于业务本身的价值，而不是去实现这样一个搜索逻辑。\n\n如下图所示的 Lucene 应用的架构：\n\n![Lucene 应用架构](http://growth.phodal.com/assets/article/chapter2/lucene-arch.jpg)\n\n可以从图中看到系统明显被划分成两部分：\n\n1. Index Documents。索引文档部分，将用于存储数据到文件系统中。\n2. Search Index。搜索部分，用于查询相应的数据。\n","slug":"2.1.4-persistence","published":1,"updated":"2016-04-26T06:58:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuf7mpel000htsift6hmh6zl","content":"<p>信息源于数据，我们在网站上看到的内容都应该是属于信息的范畴。这些信息是应用从数据库中根据业务需求查找、过滤出来的数据。</p>\n<p>数据通常以文件的形式存储，毕竟文件是存储信息的基本单位。只是由于业务本身对于 Create、Update、Query、Index 等有不同的组合需求就引发了不同的数据存储软件。</p>\n<p>如上章所说，View 层直接从 Model 层取数据，无遗也会暴露数据的模型。作为一个前端开发人员，我们对数据的操作有三种类型：</p>\n<ol>\n<li>数据库。由于 Node.js 在最近几年里发展迅猛，越来越多的开发者选择使用 Node.js 作为后台语言。这与传统的 Model 层并无多大不同，要么直接操作数据库，要么间接操作数据库。即使在 NoSQL 数据库中也是如此。</li>\n<li>搜索引擎。对于以查询为主的领域来说，搜索引擎是一个更好的选择，而搜索引擎又不好直接向 View 层暴露接口。这和招聘信息一样，都在暴露公司的技术栈。</li>\n<li>RESTful。RESTful 相当于是 CRUD 的衍生，只是传输介质变了。</li>\n<li>LocalStorage。LocalStorage 算是另外一种方式的 CRUD。</li>\n</ol>\n<p>说了这么多都是废话，他们都是可以用类 CRUD 的方式操作。</p>\n<a id=\"more\"></a> \n<h3 id=\"文件存储\"><a href=\"#文件存储\" class=\"headerlink\" title=\"文件存储\"></a>文件存储</h3><p>通常来说，以这种方式存储最常见的方式是 log(日志)，如 Nginx 的 access.log。像这样的文件就需要一些专业的软件，如 GoAccess、又或者是 Hadoop、Spark 来做对应的事。</p>\n<p>在数据库出现之前，人们都是使用文件来存储数据的。数据以文件为单位存储在硬盘上，并且这些文件不容易一起管理、修改等等。如下图所示的是我早期存储文件的一种方式：</p>\n<p>├── 3.12<br>│   ├── cover.png<br>│   └── favicon.ico<br>└── 3.13<br>    └── template.tex</p>\n<p>每天我们都会修改、查看大量的不同类型的文件。而由于工作繁忙，我们可能没有办法一一地去分类这些文件。有时选择的便是，优先先按日期把文件一划分，接着再在随后的日子里归档。而这种存储方式大量的依赖于人来索引的工作，在很多时候往往显得不是很靠谱。并且当我们将数据存储进去后，往往很难进行修改。大量的 Log 文件就需要专门的工作来分析和使用，依赖于人来解析这些日志往往显得不是很靠谱。这时我们就需要一些重量级的工具，如用 Logstash、ElasticSearch、Kibana 来处理 Nginx 访问日志。</p>\n<p>而对于那些非专业人员来说，使用 Excel 这样的工具往往显得比较方便。他们不需要去操作数据库，也不需要专业的知识来处理这些知识。只是从某种意义上来说，Excel 应该归属于数据库的范畴。</p>\n<h3 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h3><p>当我们开始一个 Web 应用的时候，如创建一个用户管理系统的时候，我们就需要不断由于经常对文件进行查询、修改、插入和删除等操作。不仅仅如此，我们还需要定义数据之前的关系，如这个用户对应这个密码。在一些更复杂的情况下，我们还需要寻找中这些用户对应的一些操作数据等等。如果我们还是这些工作交给文件来处理，那么我们便是在向自己挖坑。</p>\n<blockquote>\n<p>数据库，简单来说可视为电子化的文件柜——存储电子文件的处所，用户可以对文件中的数据运行新增、截取、更新、删除等操作。</p>\n</blockquote>\n<p>在操作库的时候，我们会使用到一名为 SQL（英语：Structural Query Language，中文： 结构化查询语言）的领域特定语言来对数据进行操作。</p>\n<blockquote>\n<p>SQL 是高级的非过程化编程语言，它允许用户在高层数据结构上工作。它不要求用户指定对数据的存放方法，也不需要用户了解其具体的数据存放方式。</p>\n</blockquote>\n<p>数据库里存储着大量的数据，在我们对系统建模的时候，也在决定系统的基础模型。</p>\n<h4 id=\"ORM\"><a href=\"#ORM\" class=\"headerlink\" title=\"ORM\"></a>ORM</h4><p>在传统 SQL 数据库中，我们可能会依赖于 ORM，也可能会自己写 SQL。在使用 ORM 框架时，我们需要先定义 Model，如下是 Node.js 的 ORM 框架 Sequelize 的一个示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> User = sequelize.define(<span class=\"string\">'user'</span>, &#123;</span><br><span class=\"line\">  firstName: &#123;</span><br><span class=\"line\">    type: Sequelize.STRING,</span><br><span class=\"line\">    field: <span class=\"string\">'first_name'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  lastName: &#123;</span><br><span class=\"line\">    type: Sequelize.STRING</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">  freezeTableName: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">User.sync(&#123;force: <span class=\"literal\">true</span>&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Table created</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> User.create(&#123;</span><br><span class=\"line\">    firstName: <span class=\"string\">'John'</span>,</span><br><span class=\"line\">    lastName: <span class=\"string\">'Hancock'</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>上面定义的 Model，在程序初始化的时候将会创建相应的数据库字段。并且会创建一个 firstName 为 ‘John’，lastName 为 ‘Hancock’ 的用户。而这个过程中，我们并不需要操作数据库。</p>\n<p>像如 MongoDB 这类的数据库，也是存在数据模型，但说的却是嵌入子文档。在业务量大的情况下，数据库在考验公司的技术能力，想想便觉得 Amazon RDS 挺好的。</p>\n<h3 id=\"搜索引擎\"><a href=\"#搜索引擎\" class=\"headerlink\" title=\"搜索引擎\"></a>搜索引擎</h3><p>尽管百科上对于搜索引擎的定义是这样的：</p>\n<blockquote>\n<p>搜索引擎指自动从因特网搜集信息，经过一定整理以后，提供给用户进行查询的系统。</p>\n</blockquote>\n<p>但是这样说往得不是非常准备。因为有相当多的网站采用了搜索引擎作为基础的存储服务架构，而且他们并非自动从互联网上搜索信息。搜索引擎应该分成三个部分来组成：</p>\n<ol>\n<li>索引服务</li>\n<li>搜索服务</li>\n<li>索引数据</li>\n</ol>\n<p>索引服务便是用于将数据存储到索引数据中，而搜索服务正是搜索引擎存在的意义。对于查询条件复杂的网站来说，采用搜索引擎就意味着减少了非常多的繁琐数据处理事务。在一些架构中，人们用数据库存储数据，并使用工具来将数据注入到搜索引擎中。</p>\n<p>从架构上来说，使用搜索引擎的优点是：分离存储、查询部分。从开发上来说，它可以让我们更关注于业务本身的价值，而不是去实现这样一个搜索逻辑。</p>\n<p>如下图所示的 Lucene 应用的架构：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter2/lucene-arch.jpg\" alt=\"Lucene 应用架构\"></p>\n<p>可以从图中看到系统明显被划分成两部分：</p>\n<ol>\n<li>Index Documents。索引文档部分，将用于存储数据到文件系统中。</li>\n<li>Search Index。搜索部分，用于查询相应的数据。</li>\n</ol>\n","excerpt":"<p>信息源于数据，我们在网站上看到的内容都应该是属于信息的范畴。这些信息是应用从数据库中根据业务需求查找、过滤出来的数据。</p>\n<p>数据通常以文件的形式存储，毕竟文件是存储信息的基本单位。只是由于业务本身对于 Create、Update、Query、Index 等有不同的组合需求就引发了不同的数据存储软件。</p>\n<p>如上章所说，View 层直接从 Model 层取数据，无遗也会暴露数据的模型。作为一个前端开发人员，我们对数据的操作有三种类型：</p>\n<ol>\n<li>数据库。由于 Node.js 在最近几年里发展迅猛，越来越多的开发者选择使用 Node.js 作为后台语言。这与传统的 Model 层并无多大不同，要么直接操作数据库，要么间接操作数据库。即使在 NoSQL 数据库中也是如此。</li>\n<li>搜索引擎。对于以查询为主的领域来说，搜索引擎是一个更好的选择，而搜索引擎又不好直接向 View 层暴露接口。这和招聘信息一样，都在暴露公司的技术栈。</li>\n<li>RESTful。RESTful 相当于是 CRUD 的衍生，只是传输介质变了。</li>\n<li>LocalStorage。LocalStorage 算是另外一种方式的 CRUD。</li>\n</ol>\n<p>说了这么多都是废话，他们都是可以用类 CRUD 的方式操作。</p>","more":"<h3 id=\"文件存储\"><a href=\"#文件存储\" class=\"headerlink\" title=\"文件存储\"></a>文件存储</h3><p>通常来说，以这种方式存储最常见的方式是 log(日志)，如 Nginx 的 access.log。像这样的文件就需要一些专业的软件，如 GoAccess、又或者是 Hadoop、Spark 来做对应的事。</p>\n<p>在数据库出现之前，人们都是使用文件来存储数据的。数据以文件为单位存储在硬盘上，并且这些文件不容易一起管理、修改等等。如下图所示的是我早期存储文件的一种方式：</p>\n<p>├── 3.12<br>│   ├── cover.png<br>│   └── favicon.ico<br>└── 3.13<br>    └── template.tex</p>\n<p>每天我们都会修改、查看大量的不同类型的文件。而由于工作繁忙，我们可能没有办法一一地去分类这些文件。有时选择的便是，优先先按日期把文件一划分，接着再在随后的日子里归档。而这种存储方式大量的依赖于人来索引的工作，在很多时候往往显得不是很靠谱。并且当我们将数据存储进去后，往往很难进行修改。大量的 Log 文件就需要专门的工作来分析和使用，依赖于人来解析这些日志往往显得不是很靠谱。这时我们就需要一些重量级的工具，如用 Logstash、ElasticSearch、Kibana 来处理 Nginx 访问日志。</p>\n<p>而对于那些非专业人员来说，使用 Excel 这样的工具往往显得比较方便。他们不需要去操作数据库，也不需要专业的知识来处理这些知识。只是从某种意义上来说，Excel 应该归属于数据库的范畴。</p>\n<h3 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h3><p>当我们开始一个 Web 应用的时候，如创建一个用户管理系统的时候，我们就需要不断由于经常对文件进行查询、修改、插入和删除等操作。不仅仅如此，我们还需要定义数据之前的关系，如这个用户对应这个密码。在一些更复杂的情况下，我们还需要寻找中这些用户对应的一些操作数据等等。如果我们还是这些工作交给文件来处理，那么我们便是在向自己挖坑。</p>\n<blockquote>\n<p>数据库，简单来说可视为电子化的文件柜——存储电子文件的处所，用户可以对文件中的数据运行新增、截取、更新、删除等操作。</p>\n</blockquote>\n<p>在操作库的时候，我们会使用到一名为 SQL（英语：Structural Query Language，中文： 结构化查询语言）的领域特定语言来对数据进行操作。</p>\n<blockquote>\n<p>SQL 是高级的非过程化编程语言，它允许用户在高层数据结构上工作。它不要求用户指定对数据的存放方法，也不需要用户了解其具体的数据存放方式。</p>\n</blockquote>\n<p>数据库里存储着大量的数据，在我们对系统建模的时候，也在决定系统的基础模型。</p>\n<h4 id=\"ORM\"><a href=\"#ORM\" class=\"headerlink\" title=\"ORM\"></a>ORM</h4><p>在传统 SQL 数据库中，我们可能会依赖于 ORM，也可能会自己写 SQL。在使用 ORM 框架时，我们需要先定义 Model，如下是 Node.js 的 ORM 框架 Sequelize 的一个示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> User = sequelize.define(<span class=\"string\">'user'</span>, &#123;</span><br><span class=\"line\">  firstName: &#123;</span><br><span class=\"line\">    type: Sequelize.STRING,</span><br><span class=\"line\">    field: <span class=\"string\">'first_name'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  lastName: &#123;</span><br><span class=\"line\">    type: Sequelize.STRING</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">  freezeTableName: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">User.sync(&#123;force: <span class=\"literal\">true</span>&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Table created</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> User.create(&#123;</span><br><span class=\"line\">    firstName: <span class=\"string\">'John'</span>,</span><br><span class=\"line\">    lastName: <span class=\"string\">'Hancock'</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>上面定义的 Model，在程序初始化的时候将会创建相应的数据库字段。并且会创建一个 firstName 为 ‘John’，lastName 为 ‘Hancock’ 的用户。而这个过程中，我们并不需要操作数据库。</p>\n<p>像如 MongoDB 这类的数据库，也是存在数据模型，但说的却是嵌入子文档。在业务量大的情况下，数据库在考验公司的技术能力，想想便觉得 Amazon RDS 挺好的。</p>\n<h3 id=\"搜索引擎\"><a href=\"#搜索引擎\" class=\"headerlink\" title=\"搜索引擎\"></a>搜索引擎</h3><p>尽管百科上对于搜索引擎的定义是这样的：</p>\n<blockquote>\n<p>搜索引擎指自动从因特网搜集信息，经过一定整理以后，提供给用户进行查询的系统。</p>\n</blockquote>\n<p>但是这样说往得不是非常准备。因为有相当多的网站采用了搜索引擎作为基础的存储服务架构，而且他们并非自动从互联网上搜索信息。搜索引擎应该分成三个部分来组成：</p>\n<ol>\n<li>索引服务</li>\n<li>搜索服务</li>\n<li>索引数据</li>\n</ol>\n<p>索引服务便是用于将数据存储到索引数据中，而搜索服务正是搜索引擎存在的意义。对于查询条件复杂的网站来说，采用搜索引擎就意味着减少了非常多的繁琐数据处理事务。在一些架构中，人们用数据库存储数据，并使用工具来将数据注入到搜索引擎中。</p>\n<p>从架构上来说，使用搜索引擎的优点是：分离存储、查询部分。从开发上来说，它可以让我们更关注于业务本身的价值，而不是去实现这样一个搜索逻辑。</p>\n<p>如下图所示的 Lucene 应用的架构：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter2/lucene-arch.jpg\" alt=\"Lucene 应用架构\"></p>\n<p>可以从图中看到系统明显被划分成两部分：</p>\n<ol>\n<li>Index Documents。索引文档部分，将用于存储数据到文件系统中。</li>\n<li>Search Index。搜索部分，用于查询相应的数据。</li>\n</ol>"},{"title":"编码","date":"2016-04-27T13:45:08.000Z","_content":"\n在我们真正开始去写代码之前，我们可能会去考虑一些事情。怎么去规划我们的任务，如何去细分这个任务。\n\n1. 如果一件事可以自动化，那么就尽量去自动化，毕竟你是一个程序员。\n2. 快捷键！快捷键！快捷键！\n3. 使用可以帮助你快速工作的工具——如启动器。\n\n不过不得不提到的一点是：你需要去考虑这个需求是不是一个坑的问题。如果这是个一个坑，那么你应该尽早的去反馈这个问题。沟通越早，成本越低。\n\n<!-- more --> \n\n编码过程\n---\n\n整个编程的过程如下图所示：\n\n![编码过程](http://growth.phodal.com/assets/article/chapter3/coding.png)\n\n步骤如下所示：\n\n1. Kick Off。在这个步骤中，我们要详细地了解我们所需要做的东西、我们的验收条件是什么、我们需要做哪些事情。\n2. Tasking。**简单**的规则一下，我们需要怎么做。一般来说，如果是结对编程的话，还会记录下来。\n3. 最新的代码。对于使用 Git 来管理项目的团队来说，在一个任务刚开始的时候应该保证本地的代码是最新的。\n4. Test First。测试优先是一个很不错的实践，可以保证我们写的代码的健壮，并且函数尽可能小，当然也会有测试。\n5. Code。就是实现功能，一般人都知道。\n6. 重构。在我们实现了上面两步之后，我们还需要重构代码，使我们的代码更容易阅读、更易懂等等。\n7. 提交代码。这里的提交代码只是本地的提交代码，因此都提倡在本地多次提交代码。\n8. 运行测试。当我们完成我们的任务后，我们就可以准备 PUSH 代码了。在这时，我们需要在本地运行测试——以保证我们不破坏别人的功能。\n9. PUSH 代码。\n10. 等 CI 测试通过。如果这时候 CI 是挂的话，那么我们就需要再修 CI。这时其他的人就没有理由 PUSH 代码，如果他们的代码也是有问题的，这只会使情况变得愈加复杂。\n\n不过，在最开始的时候我们要了解一下如何去搭建一个项目。\n","source":"_posts/3.0.0-coding.md","raw":"title: 编码\ndate: 2016-4-27 21:45:08\ntags:\n---\n\n在我们真正开始去写代码之前，我们可能会去考虑一些事情。怎么去规划我们的任务，如何去细分这个任务。\n\n1. 如果一件事可以自动化，那么就尽量去自动化，毕竟你是一个程序员。\n2. 快捷键！快捷键！快捷键！\n3. 使用可以帮助你快速工作的工具——如启动器。\n\n不过不得不提到的一点是：你需要去考虑这个需求是不是一个坑的问题。如果这是个一个坑，那么你应该尽早的去反馈这个问题。沟通越早，成本越低。\n\n<!-- more --> \n\n编码过程\n---\n\n整个编程的过程如下图所示：\n\n![编码过程](http://growth.phodal.com/assets/article/chapter3/coding.png)\n\n步骤如下所示：\n\n1. Kick Off。在这个步骤中，我们要详细地了解我们所需要做的东西、我们的验收条件是什么、我们需要做哪些事情。\n2. Tasking。**简单**的规则一下，我们需要怎么做。一般来说，如果是结对编程的话，还会记录下来。\n3. 最新的代码。对于使用 Git 来管理项目的团队来说，在一个任务刚开始的时候应该保证本地的代码是最新的。\n4. Test First。测试优先是一个很不错的实践，可以保证我们写的代码的健壮，并且函数尽可能小，当然也会有测试。\n5. Code。就是实现功能，一般人都知道。\n6. 重构。在我们实现了上面两步之后，我们还需要重构代码，使我们的代码更容易阅读、更易懂等等。\n7. 提交代码。这里的提交代码只是本地的提交代码，因此都提倡在本地多次提交代码。\n8. 运行测试。当我们完成我们的任务后，我们就可以准备 PUSH 代码了。在这时，我们需要在本地运行测试——以保证我们不破坏别人的功能。\n9. PUSH 代码。\n10. 等 CI 测试通过。如果这时候 CI 是挂的话，那么我们就需要再修 CI。这时其他的人就没有理由 PUSH 代码，如果他们的代码也是有问题的，这只会使情况变得愈加复杂。\n\n不过，在最开始的时候我们要了解一下如何去搭建一个项目。\n","slug":"3.0.0-coding","published":1,"updated":"2016-04-27T03:43:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuf7mpeo000itsifcp649fz5","content":"<p>在我们真正开始去写代码之前，我们可能会去考虑一些事情。怎么去规划我们的任务，如何去细分这个任务。</p>\n<ol>\n<li>如果一件事可以自动化，那么就尽量去自动化，毕竟你是一个程序员。</li>\n<li>快捷键！快捷键！快捷键！</li>\n<li>使用可以帮助你快速工作的工具——如启动器。</li>\n</ol>\n<p>不过不得不提到的一点是：你需要去考虑这个需求是不是一个坑的问题。如果这是个一个坑，那么你应该尽早的去反馈这个问题。沟通越早，成本越低。</p>\n<a id=\"more\"></a> \n<h2 id=\"编码过程\"><a href=\"#编码过程\" class=\"headerlink\" title=\"编码过程\"></a>编码过程</h2><p>整个编程的过程如下图所示：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter3/coding.png\" alt=\"编码过程\"></p>\n<p>步骤如下所示：</p>\n<ol>\n<li>Kick Off。在这个步骤中，我们要详细地了解我们所需要做的东西、我们的验收条件是什么、我们需要做哪些事情。</li>\n<li>Tasking。<strong>简单</strong>的规则一下，我们需要怎么做。一般来说，如果是结对编程的话，还会记录下来。</li>\n<li>最新的代码。对于使用 Git 来管理项目的团队来说，在一个任务刚开始的时候应该保证本地的代码是最新的。</li>\n<li>Test First。测试优先是一个很不错的实践，可以保证我们写的代码的健壮，并且函数尽可能小，当然也会有测试。</li>\n<li>Code。就是实现功能，一般人都知道。</li>\n<li>重构。在我们实现了上面两步之后，我们还需要重构代码，使我们的代码更容易阅读、更易懂等等。</li>\n<li>提交代码。这里的提交代码只是本地的提交代码，因此都提倡在本地多次提交代码。</li>\n<li>运行测试。当我们完成我们的任务后，我们就可以准备 PUSH 代码了。在这时，我们需要在本地运行测试——以保证我们不破坏别人的功能。</li>\n<li>PUSH 代码。</li>\n<li>等 CI 测试通过。如果这时候 CI 是挂的话，那么我们就需要再修 CI。这时其他的人就没有理由 PUSH 代码，如果他们的代码也是有问题的，这只会使情况变得愈加复杂。</li>\n</ol>\n<p>不过，在最开始的时候我们要了解一下如何去搭建一个项目。</p>\n","excerpt":"<p>在我们真正开始去写代码之前，我们可能会去考虑一些事情。怎么去规划我们的任务，如何去细分这个任务。</p>\n<ol>\n<li>如果一件事可以自动化，那么就尽量去自动化，毕竟你是一个程序员。</li>\n<li>快捷键！快捷键！快捷键！</li>\n<li>使用可以帮助你快速工作的工具——如启动器。</li>\n</ol>\n<p>不过不得不提到的一点是：你需要去考虑这个需求是不是一个坑的问题。如果这是个一个坑，那么你应该尽早的去反馈这个问题。沟通越早，成本越低。</p>","more":"<h2 id=\"编码过程\"><a href=\"#编码过程\" class=\"headerlink\" title=\"编码过程\"></a>编码过程</h2><p>整个编程的过程如下图所示：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter3/coding.png\" alt=\"编码过程\"></p>\n<p>步骤如下所示：</p>\n<ol>\n<li>Kick Off。在这个步骤中，我们要详细地了解我们所需要做的东西、我们的验收条件是什么、我们需要做哪些事情。</li>\n<li>Tasking。<strong>简单</strong>的规则一下，我们需要怎么做。一般来说，如果是结对编程的话，还会记录下来。</li>\n<li>最新的代码。对于使用 Git 来管理项目的团队来说，在一个任务刚开始的时候应该保证本地的代码是最新的。</li>\n<li>Test First。测试优先是一个很不错的实践，可以保证我们写的代码的健壮，并且函数尽可能小，当然也会有测试。</li>\n<li>Code。就是实现功能，一般人都知道。</li>\n<li>重构。在我们实现了上面两步之后，我们还需要重构代码，使我们的代码更容易阅读、更易懂等等。</li>\n<li>提交代码。这里的提交代码只是本地的提交代码，因此都提倡在本地多次提交代码。</li>\n<li>运行测试。当我们完成我们的任务后，我们就可以准备 PUSH 代码了。在这时，我们需要在本地运行测试——以保证我们不破坏别人的功能。</li>\n<li>PUSH 代码。</li>\n<li>等 CI 测试通过。如果这时候 CI 是挂的话，那么我们就需要再修 CI。这时其他的人就没有理由 PUSH 代码，如果他们的代码也是有问题的，这只会使情况变得愈加复杂。</li>\n</ol>\n<p>不过，在最开始的时候我们要了解一下如何去搭建一个项目。</p>"},{"title":"Web 应用的构建系统","date":"2016-04-27T14:45:08.000Z","_content":"\n> 构建系统(build system)是用来从源代码生成用户可以使用的目标的自动化工具。目标可以包括库、可执行文件、或者生成的脚本等等。\n\n常用的构建工具包括 GNU Make、GNU autotools、CMake、Apache Ant（主要用于JAVA）。此外，所有的集成开发环境（IDE）比如 Qt Creator、Microsoft Visual Studio 和 Eclipse 都对他们支持的语言添加了自己的构建系统配置工具。通常 IDE 中的构建系统只是基于控制台的构建系统（比如 Autotool 和 CMake ）的前端。\n\n对比于 Web 应用开发来说，构建系统应该还包括应用打包（如 Java 中的 Jar 包，或者用于部署的 RPM 包）、源代码分析、测试覆盖率分析等等。\n\n### Web 应用的构建过程\n\n在刚创建项目的时候，我们都会有一个完整的构建思路。如下图便是这样的一个例子：\n\n![构建过程](http://growth.phodal.com/assets/article/chapter3/build-web-project.png)\n\n<!-- more --> \n\n这是一个后台语言用的是 Java，前台语言用的是 JavaScript 项目的构建流程。\n\n**Compile**。对于那些不是用浏览器的前端项目来说，如 ES6、CoffeeScript，他们还需要将代码编译成浏览器使用的 JavaScript 版本。对于 Java 语言来说，他需要一个编译的过程，在这个编译的过程中，会检查一些语法问题。\n\n**Check Style**。通常我们会在我们的项目里定义一些代码规范，如 JavaScript 中的使用两个空格的缩进，Java 的 Checkstyle 中一个函数不能超过30行的限制。\n\n**单元测试**。作为测试中最基础也是最快的测试，这个测试将集中于测试单个函数的是不是正确的。\n\n**功能测试**。功能测试的意义在于，保证一个功能依赖的几个函数组合在一起也是可以工作的。\n\n**Mock Server**。当我们的代码依赖于第三方服务的时候，我们就需要一个 Mock Server 来保证我们的功能代码可以独立地测试。\n\n**集成测试**。这一步将集成前台、后台，并且运行起最后将上线的应用。接着依据于用户所需要的功能来编写相应的测试，来保证一个个的功能是可以工作的。\n\n**打包**。对于部署来说，直接安装一个 RPM 包，或者 DEB 包是最方便的事。在这个包里会包含应用程序所需的所有二进制文件、数据和配置文件等等。\n\n**上传包**。在完成打包后，我们就可以上传这个软件包了。\n\n**部署**。最后，我们就可以在我们的线上环境中安装这个软件包。\n\n### Web 应用的构建实战\n\n下面就让我们来构建一个简单的 Web 应用，来实践一下这个过程。在这里，我们要使用到的一个工具是 Gulp，当然对于 Grunt 也是类似的。\n\n#### Gulp 入门指南\n\n> Gulp.js 是一个自动化构建工具，开发者可以使用它在项目开发过程中自动执行常见任务。Gulp.js 是基于 Node.js 构建的，利用 Node.js 流的威力，你可以快速构建项目并减少频繁的 IO 操作。Gulp.js 源文件和你用来定义任务的 Gulp 文件都是通过 JavaScript（或者 CoffeeScript ）源码来实现的。\n\n1. 全局安装 gulp：\n\n```bash\n$ npm install --global gulp\n```\n\n2. 作为项目的开发依赖（devDependencies）安装：\n\n```bash\n$ npm install --save-dev gulp\n```\n\n3. 在项目根目录下创建一个名为 gulpfile.js 的文件：\n\n```javascript\nvar gulp = require('gulp');\n\ngulp.task('default', function() {\n  // 将你的默认的任务代码放在这\n});\n```\n\n4. 运行 gulp：\n\n```bash\n$ gulp\n```\n\n默认的名为 default 的任务（task）将会被运行，在这里，这个任务并未做任何事情。接下来，我们就可以打造我们的应用的构建系统了。\n\n#### 代码质量检测工具\n\n当 C 还是一门新型的编程语言时，还存在一些未被原始编译器捕获的常见错误，所以程序员们开发了一个被称作 lint 的配套项目用来扫描源文件，查找问题。\n\n对应于不同的语言都会有不同的 lint 工具，在 JavaScript 中就有 JSLint。JavaScript 是一门年轻、语法灵活多变且对格式要求相对松散的语言，因此这样的工具对于这门语言来说比较重要。\n\n2011年，一个叫 Anton Kovalyov 的前端程序员借助开源社区的力量弄出来了 JSHint，其思想基本上和 JSLint 是一致的，但是其有一下几项优势：\n\n - 可配置规则，每个团队可以自己定义自己想要的代码规范。\n - 对社区非常友好，社区支持度高。\n - 可定制的结果报表。\n\n下面就让我们来安装这个软件吧：\n\n**安装及使用**\n\n```bash\nnpm install jshint gulp-jshint --save-dev\n```\n\n示例代码:\n\n```javascript\nvar jshint = require('gulp-jshint');\nvar gulp   = require('gulp');\n\ngulp.task('lint', function() {\n  return gulp.src('./lib/*.js')\n    .pipe(jshint())\n    .pipe(jshint.reporter('YOUR_REPORTER_HERE'));\n});\n```\n\n#### 自动化测试工具\n\n一般来说，自动测试应该从两部分考虑：\n\n - 单元测试\n - 功能测试\n\nMocha 是一个可以运行在 Node.js 和浏览器环境里的测试框架，\n\n```\nvar gulp = require('gulp');\nvar mocha = require('gulp-mocha');\n\ngulp.task('default', function () {\n\treturn gulp.src('test.js', {read: false})\n\t\t// gulp-mocha needs filepaths so you can't have any plugins before it\n\t\t.pipe(mocha({reporter: 'nyan'}));\n});\n```\n\n#### 编译\n\n对于静态型语言来说，编译是一个很重要的步骤。不过，对于动态语言来说也存在这样的工具。\n\n**动态语言的编译**\n\n可以说这类型的语言，是以我们常见的 JavaScript 为代表。\n\n1. CoffeeScript 是一套 JavaScript 的转译语言，并且它增强了 JavaScript 的简洁性与可读性。\n\n2. Webpack 是一款模块加载器兼打包工具，它能把各种资源，例如 JS（含JSX）、coffee、样式（含less/sass）、图片等都作为模块来使用和处理。\n\n3. Babel 是一个转换编译器，它能将 ES6 转换成可以在浏览器中运行的代码。\n\n#### 打包\n\n在 GNU/Linux 系统的软件包里通过包含了已压缩的软件文件集以及该软件的内容信息。常见的软件包有\n\n1. DEB。Debian 软件包格式，文件扩展名为 .deb\n2. RPM（原 Red Hat Package Manager，现在是一个递归缩写）。该软件包分为二进制包（Binary）、源代码包（Source）和 Delta 包三种。二进制包可以直接安装在计算机中，而源代码包将会由 RPM 自动编译、安装。源代码包经常以 src.rpm 作为后缀名。\n3. 压缩文档 tar.gz。通常是该软件的源码，故而在安装的过程中需要编译、安装，并且在编译时需要自己手动安装所需要依赖的软件。在软件仓库没有最新版本的软件时，tar.gz 往往是最好的选择。\n\n由于这里的打包过程比较繁琐，就不介绍了。有兴趣的读者可以自己了解一下。\n\n#### 上传及发布包\n\n上传包之前我们需要创建一个相应的文件服务器，又或者是相应的软件源。并且对于我们的产品环境的服务器来说，我们还需要指定好这个软件源才能安装这个包。\n\n以 Ubuntu 为例，Ubuntu 里的许多应用程序软件包，是放在网络里的服务器上，这些服务器网站，就称作“源”，从源里可以很方便地获取软件包。\n\n因而在这一步中，我们所需要做的事便是将我们打包完的软件上传到相应的服务器上。\n","source":"_posts/3.0.1-builder.md","raw":"title: Web 应用的构建系统\ndate: 2016-4-27 22:45:08\ntags:\n---\n\n> 构建系统(build system)是用来从源代码生成用户可以使用的目标的自动化工具。目标可以包括库、可执行文件、或者生成的脚本等等。\n\n常用的构建工具包括 GNU Make、GNU autotools、CMake、Apache Ant（主要用于JAVA）。此外，所有的集成开发环境（IDE）比如 Qt Creator、Microsoft Visual Studio 和 Eclipse 都对他们支持的语言添加了自己的构建系统配置工具。通常 IDE 中的构建系统只是基于控制台的构建系统（比如 Autotool 和 CMake ）的前端。\n\n对比于 Web 应用开发来说，构建系统应该还包括应用打包（如 Java 中的 Jar 包，或者用于部署的 RPM 包）、源代码分析、测试覆盖率分析等等。\n\n### Web 应用的构建过程\n\n在刚创建项目的时候，我们都会有一个完整的构建思路。如下图便是这样的一个例子：\n\n![构建过程](http://growth.phodal.com/assets/article/chapter3/build-web-project.png)\n\n<!-- more --> \n\n这是一个后台语言用的是 Java，前台语言用的是 JavaScript 项目的构建流程。\n\n**Compile**。对于那些不是用浏览器的前端项目来说，如 ES6、CoffeeScript，他们还需要将代码编译成浏览器使用的 JavaScript 版本。对于 Java 语言来说，他需要一个编译的过程，在这个编译的过程中，会检查一些语法问题。\n\n**Check Style**。通常我们会在我们的项目里定义一些代码规范，如 JavaScript 中的使用两个空格的缩进，Java 的 Checkstyle 中一个函数不能超过30行的限制。\n\n**单元测试**。作为测试中最基础也是最快的测试，这个测试将集中于测试单个函数的是不是正确的。\n\n**功能测试**。功能测试的意义在于，保证一个功能依赖的几个函数组合在一起也是可以工作的。\n\n**Mock Server**。当我们的代码依赖于第三方服务的时候，我们就需要一个 Mock Server 来保证我们的功能代码可以独立地测试。\n\n**集成测试**。这一步将集成前台、后台，并且运行起最后将上线的应用。接着依据于用户所需要的功能来编写相应的测试，来保证一个个的功能是可以工作的。\n\n**打包**。对于部署来说，直接安装一个 RPM 包，或者 DEB 包是最方便的事。在这个包里会包含应用程序所需的所有二进制文件、数据和配置文件等等。\n\n**上传包**。在完成打包后，我们就可以上传这个软件包了。\n\n**部署**。最后，我们就可以在我们的线上环境中安装这个软件包。\n\n### Web 应用的构建实战\n\n下面就让我们来构建一个简单的 Web 应用，来实践一下这个过程。在这里，我们要使用到的一个工具是 Gulp，当然对于 Grunt 也是类似的。\n\n#### Gulp 入门指南\n\n> Gulp.js 是一个自动化构建工具，开发者可以使用它在项目开发过程中自动执行常见任务。Gulp.js 是基于 Node.js 构建的，利用 Node.js 流的威力，你可以快速构建项目并减少频繁的 IO 操作。Gulp.js 源文件和你用来定义任务的 Gulp 文件都是通过 JavaScript（或者 CoffeeScript ）源码来实现的。\n\n1. 全局安装 gulp：\n\n```bash\n$ npm install --global gulp\n```\n\n2. 作为项目的开发依赖（devDependencies）安装：\n\n```bash\n$ npm install --save-dev gulp\n```\n\n3. 在项目根目录下创建一个名为 gulpfile.js 的文件：\n\n```javascript\nvar gulp = require('gulp');\n\ngulp.task('default', function() {\n  // 将你的默认的任务代码放在这\n});\n```\n\n4. 运行 gulp：\n\n```bash\n$ gulp\n```\n\n默认的名为 default 的任务（task）将会被运行，在这里，这个任务并未做任何事情。接下来，我们就可以打造我们的应用的构建系统了。\n\n#### 代码质量检测工具\n\n当 C 还是一门新型的编程语言时，还存在一些未被原始编译器捕获的常见错误，所以程序员们开发了一个被称作 lint 的配套项目用来扫描源文件，查找问题。\n\n对应于不同的语言都会有不同的 lint 工具，在 JavaScript 中就有 JSLint。JavaScript 是一门年轻、语法灵活多变且对格式要求相对松散的语言，因此这样的工具对于这门语言来说比较重要。\n\n2011年，一个叫 Anton Kovalyov 的前端程序员借助开源社区的力量弄出来了 JSHint，其思想基本上和 JSLint 是一致的，但是其有一下几项优势：\n\n - 可配置规则，每个团队可以自己定义自己想要的代码规范。\n - 对社区非常友好，社区支持度高。\n - 可定制的结果报表。\n\n下面就让我们来安装这个软件吧：\n\n**安装及使用**\n\n```bash\nnpm install jshint gulp-jshint --save-dev\n```\n\n示例代码:\n\n```javascript\nvar jshint = require('gulp-jshint');\nvar gulp   = require('gulp');\n\ngulp.task('lint', function() {\n  return gulp.src('./lib/*.js')\n    .pipe(jshint())\n    .pipe(jshint.reporter('YOUR_REPORTER_HERE'));\n});\n```\n\n#### 自动化测试工具\n\n一般来说，自动测试应该从两部分考虑：\n\n - 单元测试\n - 功能测试\n\nMocha 是一个可以运行在 Node.js 和浏览器环境里的测试框架，\n\n```\nvar gulp = require('gulp');\nvar mocha = require('gulp-mocha');\n\ngulp.task('default', function () {\n\treturn gulp.src('test.js', {read: false})\n\t\t// gulp-mocha needs filepaths so you can't have any plugins before it\n\t\t.pipe(mocha({reporter: 'nyan'}));\n});\n```\n\n#### 编译\n\n对于静态型语言来说，编译是一个很重要的步骤。不过，对于动态语言来说也存在这样的工具。\n\n**动态语言的编译**\n\n可以说这类型的语言，是以我们常见的 JavaScript 为代表。\n\n1. CoffeeScript 是一套 JavaScript 的转译语言，并且它增强了 JavaScript 的简洁性与可读性。\n\n2. Webpack 是一款模块加载器兼打包工具，它能把各种资源，例如 JS（含JSX）、coffee、样式（含less/sass）、图片等都作为模块来使用和处理。\n\n3. Babel 是一个转换编译器，它能将 ES6 转换成可以在浏览器中运行的代码。\n\n#### 打包\n\n在 GNU/Linux 系统的软件包里通过包含了已压缩的软件文件集以及该软件的内容信息。常见的软件包有\n\n1. DEB。Debian 软件包格式，文件扩展名为 .deb\n2. RPM（原 Red Hat Package Manager，现在是一个递归缩写）。该软件包分为二进制包（Binary）、源代码包（Source）和 Delta 包三种。二进制包可以直接安装在计算机中，而源代码包将会由 RPM 自动编译、安装。源代码包经常以 src.rpm 作为后缀名。\n3. 压缩文档 tar.gz。通常是该软件的源码，故而在安装的过程中需要编译、安装，并且在编译时需要自己手动安装所需要依赖的软件。在软件仓库没有最新版本的软件时，tar.gz 往往是最好的选择。\n\n由于这里的打包过程比较繁琐，就不介绍了。有兴趣的读者可以自己了解一下。\n\n#### 上传及发布包\n\n上传包之前我们需要创建一个相应的文件服务器，又或者是相应的软件源。并且对于我们的产品环境的服务器来说，我们还需要指定好这个软件源才能安装这个包。\n\n以 Ubuntu 为例，Ubuntu 里的许多应用程序软件包，是放在网络里的服务器上，这些服务器网站，就称作“源”，从源里可以很方便地获取软件包。\n\n因而在这一步中，我们所需要做的事便是将我们打包完的软件上传到相应的服务器上。\n","slug":"3.0.1-builder","published":1,"updated":"2016-04-27T03:46:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuf7mper000jtsifm5vbwfnk","content":"<blockquote>\n<p>构建系统(build system)是用来从源代码生成用户可以使用的目标的自动化工具。目标可以包括库、可执行文件、或者生成的脚本等等。</p>\n</blockquote>\n<p>常用的构建工具包括 GNU Make、GNU autotools、CMake、Apache Ant（主要用于JAVA）。此外，所有的集成开发环境（IDE）比如 Qt Creator、Microsoft Visual Studio 和 Eclipse 都对他们支持的语言添加了自己的构建系统配置工具。通常 IDE 中的构建系统只是基于控制台的构建系统（比如 Autotool 和 CMake ）的前端。</p>\n<p>对比于 Web 应用开发来说，构建系统应该还包括应用打包（如 Java 中的 Jar 包，或者用于部署的 RPM 包）、源代码分析、测试覆盖率分析等等。</p>\n<h3 id=\"Web-应用的构建过程\"><a href=\"#Web-应用的构建过程\" class=\"headerlink\" title=\"Web 应用的构建过程\"></a>Web 应用的构建过程</h3><p>在刚创建项目的时候，我们都会有一个完整的构建思路。如下图便是这样的一个例子：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter3/build-web-project.png\" alt=\"构建过程\"></p>\n<a id=\"more\"></a> \n<p>这是一个后台语言用的是 Java，前台语言用的是 JavaScript 项目的构建流程。</p>\n<p><strong>Compile</strong>。对于那些不是用浏览器的前端项目来说，如 ES6、CoffeeScript，他们还需要将代码编译成浏览器使用的 JavaScript 版本。对于 Java 语言来说，他需要一个编译的过程，在这个编译的过程中，会检查一些语法问题。</p>\n<p><strong>Check Style</strong>。通常我们会在我们的项目里定义一些代码规范，如 JavaScript 中的使用两个空格的缩进，Java 的 Checkstyle 中一个函数不能超过30行的限制。</p>\n<p><strong>单元测试</strong>。作为测试中最基础也是最快的测试，这个测试将集中于测试单个函数的是不是正确的。</p>\n<p><strong>功能测试</strong>。功能测试的意义在于，保证一个功能依赖的几个函数组合在一起也是可以工作的。</p>\n<p><strong>Mock Server</strong>。当我们的代码依赖于第三方服务的时候，我们就需要一个 Mock Server 来保证我们的功能代码可以独立地测试。</p>\n<p><strong>集成测试</strong>。这一步将集成前台、后台，并且运行起最后将上线的应用。接着依据于用户所需要的功能来编写相应的测试，来保证一个个的功能是可以工作的。</p>\n<p><strong>打包</strong>。对于部署来说，直接安装一个 RPM 包，或者 DEB 包是最方便的事。在这个包里会包含应用程序所需的所有二进制文件、数据和配置文件等等。</p>\n<p><strong>上传包</strong>。在完成打包后，我们就可以上传这个软件包了。</p>\n<p><strong>部署</strong>。最后，我们就可以在我们的线上环境中安装这个软件包。</p>\n<h3 id=\"Web-应用的构建实战\"><a href=\"#Web-应用的构建实战\" class=\"headerlink\" title=\"Web 应用的构建实战\"></a>Web 应用的构建实战</h3><p>下面就让我们来构建一个简单的 Web 应用，来实践一下这个过程。在这里，我们要使用到的一个工具是 Gulp，当然对于 Grunt 也是类似的。</p>\n<h4 id=\"Gulp-入门指南\"><a href=\"#Gulp-入门指南\" class=\"headerlink\" title=\"Gulp 入门指南\"></a>Gulp 入门指南</h4><blockquote>\n<p>Gulp.js 是一个自动化构建工具，开发者可以使用它在项目开发过程中自动执行常见任务。Gulp.js 是基于 Node.js 构建的，利用 Node.js 流的威力，你可以快速构建项目并减少频繁的 IO 操作。Gulp.js 源文件和你用来定义任务的 Gulp 文件都是通过 JavaScript（或者 CoffeeScript ）源码来实现的。</p>\n</blockquote>\n<ol>\n<li>全局安装 gulp：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install --global gulp</span><br></pre></td></tr></table></figure>\n<ol>\n<li>作为项目的开发依赖（devDependencies）安装：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install --save-dev gulp</span><br></pre></td></tr></table></figure>\n<ol>\n<li>在项目根目录下创建一个名为 gulpfile.js 的文件：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 将你的默认的任务代码放在这</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ol>\n<li>运行 gulp：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gulp</span><br></pre></td></tr></table></figure>\n<p>默认的名为 default 的任务（task）将会被运行，在这里，这个任务并未做任何事情。接下来，我们就可以打造我们的应用的构建系统了。</p>\n<h4 id=\"代码质量检测工具\"><a href=\"#代码质量检测工具\" class=\"headerlink\" title=\"代码质量检测工具\"></a>代码质量检测工具</h4><p>当 C 还是一门新型的编程语言时，还存在一些未被原始编译器捕获的常见错误，所以程序员们开发了一个被称作 lint 的配套项目用来扫描源文件，查找问题。</p>\n<p>对应于不同的语言都会有不同的 lint 工具，在 JavaScript 中就有 JSLint。JavaScript 是一门年轻、语法灵活多变且对格式要求相对松散的语言，因此这样的工具对于这门语言来说比较重要。</p>\n<p>2011年，一个叫 Anton Kovalyov 的前端程序员借助开源社区的力量弄出来了 JSHint，其思想基本上和 JSLint 是一致的，但是其有一下几项优势：</p>\n<ul>\n<li>可配置规则，每个团队可以自己定义自己想要的代码规范。</li>\n<li>对社区非常友好，社区支持度高。</li>\n<li>可定制的结果报表。</li>\n</ul>\n<p>下面就让我们来安装这个软件吧：</p>\n<p><strong>安装及使用</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install jshint gulp-jshint --save-dev</span><br></pre></td></tr></table></figure>\n<p>示例代码:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> jshint = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-jshint'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> gulp   = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'lint'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'./lib/*.js'</span>)</span><br><span class=\"line\">    .pipe(jshint())</span><br><span class=\"line\">    .pipe(jshint.reporter(<span class=\"string\">'YOUR_REPORTER_HERE'</span>));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"自动化测试工具\"><a href=\"#自动化测试工具\" class=\"headerlink\" title=\"自动化测试工具\"></a>自动化测试工具</h4><p>一般来说，自动测试应该从两部分考虑：</p>\n<ul>\n<li>单元测试</li>\n<li>功能测试</li>\n</ul>\n<p>Mocha 是一个可以运行在 Node.js 和浏览器环境里的测试框架，</p>\n<figure class=\"highlight qml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>);</span><br><span class=\"line\"><span class=\"built_in\">var</span> mocha = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-mocha'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'test.js'</span>, &#123;<span class=\"attribute\">read</span>: <span class=\"literal\">false</span>&#125;)</span><br><span class=\"line\">\t\t<span class=\"comment\">// gulp-mocha needs filepaths so you can't have any plugins before it</span></span><br><span class=\"line\">\t\t.pipe(mocha(&#123;<span class=\"attribute\">reporter</span>: <span class=\"string\">'nyan'</span>&#125;));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h4><p>对于静态型语言来说，编译是一个很重要的步骤。不过，对于动态语言来说也存在这样的工具。</p>\n<p><strong>动态语言的编译</strong></p>\n<p>可以说这类型的语言，是以我们常见的 JavaScript 为代表。</p>\n<ol>\n<li><p>CoffeeScript 是一套 JavaScript 的转译语言，并且它增强了 JavaScript 的简洁性与可读性。</p>\n</li>\n<li><p>Webpack 是一款模块加载器兼打包工具，它能把各种资源，例如 JS（含JSX）、coffee、样式（含less/sass）、图片等都作为模块来使用和处理。</p>\n</li>\n<li><p>Babel 是一个转换编译器，它能将 ES6 转换成可以在浏览器中运行的代码。</p>\n</li>\n</ol>\n<h4 id=\"打包\"><a href=\"#打包\" class=\"headerlink\" title=\"打包\"></a>打包</h4><p>在 GNU/Linux 系统的软件包里通过包含了已压缩的软件文件集以及该软件的内容信息。常见的软件包有</p>\n<ol>\n<li>DEB。Debian 软件包格式，文件扩展名为 .deb</li>\n<li>RPM（原 Red Hat Package Manager，现在是一个递归缩写）。该软件包分为二进制包（Binary）、源代码包（Source）和 Delta 包三种。二进制包可以直接安装在计算机中，而源代码包将会由 RPM 自动编译、安装。源代码包经常以 src.rpm 作为后缀名。</li>\n<li>压缩文档 tar.gz。通常是该软件的源码，故而在安装的过程中需要编译、安装，并且在编译时需要自己手动安装所需要依赖的软件。在软件仓库没有最新版本的软件时，tar.gz 往往是最好的选择。</li>\n</ol>\n<p>由于这里的打包过程比较繁琐，就不介绍了。有兴趣的读者可以自己了解一下。</p>\n<h4 id=\"上传及发布包\"><a href=\"#上传及发布包\" class=\"headerlink\" title=\"上传及发布包\"></a>上传及发布包</h4><p>上传包之前我们需要创建一个相应的文件服务器，又或者是相应的软件源。并且对于我们的产品环境的服务器来说，我们还需要指定好这个软件源才能安装这个包。</p>\n<p>以 Ubuntu 为例，Ubuntu 里的许多应用程序软件包，是放在网络里的服务器上，这些服务器网站，就称作“源”，从源里可以很方便地获取软件包。</p>\n<p>因而在这一步中，我们所需要做的事便是将我们打包完的软件上传到相应的服务器上。</p>\n","excerpt":"<blockquote>\n<p>构建系统(build system)是用来从源代码生成用户可以使用的目标的自动化工具。目标可以包括库、可执行文件、或者生成的脚本等等。</p>\n</blockquote>\n<p>常用的构建工具包括 GNU Make、GNU autotools、CMake、Apache Ant（主要用于JAVA）。此外，所有的集成开发环境（IDE）比如 Qt Creator、Microsoft Visual Studio 和 Eclipse 都对他们支持的语言添加了自己的构建系统配置工具。通常 IDE 中的构建系统只是基于控制台的构建系统（比如 Autotool 和 CMake ）的前端。</p>\n<p>对比于 Web 应用开发来说，构建系统应该还包括应用打包（如 Java 中的 Jar 包，或者用于部署的 RPM 包）、源代码分析、测试覆盖率分析等等。</p>\n<h3 id=\"Web-应用的构建过程\"><a href=\"#Web-应用的构建过程\" class=\"headerlink\" title=\"Web 应用的构建过程\"></a>Web 应用的构建过程</h3><p>在刚创建项目的时候，我们都会有一个完整的构建思路。如下图便是这样的一个例子：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter3/build-web-project.png\" alt=\"构建过程\"></p>","more":"<p>这是一个后台语言用的是 Java，前台语言用的是 JavaScript 项目的构建流程。</p>\n<p><strong>Compile</strong>。对于那些不是用浏览器的前端项目来说，如 ES6、CoffeeScript，他们还需要将代码编译成浏览器使用的 JavaScript 版本。对于 Java 语言来说，他需要一个编译的过程，在这个编译的过程中，会检查一些语法问题。</p>\n<p><strong>Check Style</strong>。通常我们会在我们的项目里定义一些代码规范，如 JavaScript 中的使用两个空格的缩进，Java 的 Checkstyle 中一个函数不能超过30行的限制。</p>\n<p><strong>单元测试</strong>。作为测试中最基础也是最快的测试，这个测试将集中于测试单个函数的是不是正确的。</p>\n<p><strong>功能测试</strong>。功能测试的意义在于，保证一个功能依赖的几个函数组合在一起也是可以工作的。</p>\n<p><strong>Mock Server</strong>。当我们的代码依赖于第三方服务的时候，我们就需要一个 Mock Server 来保证我们的功能代码可以独立地测试。</p>\n<p><strong>集成测试</strong>。这一步将集成前台、后台，并且运行起最后将上线的应用。接着依据于用户所需要的功能来编写相应的测试，来保证一个个的功能是可以工作的。</p>\n<p><strong>打包</strong>。对于部署来说，直接安装一个 RPM 包，或者 DEB 包是最方便的事。在这个包里会包含应用程序所需的所有二进制文件、数据和配置文件等等。</p>\n<p><strong>上传包</strong>。在完成打包后，我们就可以上传这个软件包了。</p>\n<p><strong>部署</strong>。最后，我们就可以在我们的线上环境中安装这个软件包。</p>\n<h3 id=\"Web-应用的构建实战\"><a href=\"#Web-应用的构建实战\" class=\"headerlink\" title=\"Web 应用的构建实战\"></a>Web 应用的构建实战</h3><p>下面就让我们来构建一个简单的 Web 应用，来实践一下这个过程。在这里，我们要使用到的一个工具是 Gulp，当然对于 Grunt 也是类似的。</p>\n<h4 id=\"Gulp-入门指南\"><a href=\"#Gulp-入门指南\" class=\"headerlink\" title=\"Gulp 入门指南\"></a>Gulp 入门指南</h4><blockquote>\n<p>Gulp.js 是一个自动化构建工具，开发者可以使用它在项目开发过程中自动执行常见任务。Gulp.js 是基于 Node.js 构建的，利用 Node.js 流的威力，你可以快速构建项目并减少频繁的 IO 操作。Gulp.js 源文件和你用来定义任务的 Gulp 文件都是通过 JavaScript（或者 CoffeeScript ）源码来实现的。</p>\n</blockquote>\n<ol>\n<li>全局安装 gulp：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install --global gulp</span><br></pre></td></tr></table></figure>\n<ol>\n<li>作为项目的开发依赖（devDependencies）安装：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install --save-dev gulp</span><br></pre></td></tr></table></figure>\n<ol>\n<li>在项目根目录下创建一个名为 gulpfile.js 的文件：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 将你的默认的任务代码放在这</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ol>\n<li>运行 gulp：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gulp</span><br></pre></td></tr></table></figure>\n<p>默认的名为 default 的任务（task）将会被运行，在这里，这个任务并未做任何事情。接下来，我们就可以打造我们的应用的构建系统了。</p>\n<h4 id=\"代码质量检测工具\"><a href=\"#代码质量检测工具\" class=\"headerlink\" title=\"代码质量检测工具\"></a>代码质量检测工具</h4><p>当 C 还是一门新型的编程语言时，还存在一些未被原始编译器捕获的常见错误，所以程序员们开发了一个被称作 lint 的配套项目用来扫描源文件，查找问题。</p>\n<p>对应于不同的语言都会有不同的 lint 工具，在 JavaScript 中就有 JSLint。JavaScript 是一门年轻、语法灵活多变且对格式要求相对松散的语言，因此这样的工具对于这门语言来说比较重要。</p>\n<p>2011年，一个叫 Anton Kovalyov 的前端程序员借助开源社区的力量弄出来了 JSHint，其思想基本上和 JSLint 是一致的，但是其有一下几项优势：</p>\n<ul>\n<li>可配置规则，每个团队可以自己定义自己想要的代码规范。</li>\n<li>对社区非常友好，社区支持度高。</li>\n<li>可定制的结果报表。</li>\n</ul>\n<p>下面就让我们来安装这个软件吧：</p>\n<p><strong>安装及使用</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install jshint gulp-jshint --save-dev</span><br></pre></td></tr></table></figure>\n<p>示例代码:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> jshint = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-jshint'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> gulp   = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'lint'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'./lib/*.js'</span>)</span><br><span class=\"line\">    .pipe(jshint())</span><br><span class=\"line\">    .pipe(jshint.reporter(<span class=\"string\">'YOUR_REPORTER_HERE'</span>));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"自动化测试工具\"><a href=\"#自动化测试工具\" class=\"headerlink\" title=\"自动化测试工具\"></a>自动化测试工具</h4><p>一般来说，自动测试应该从两部分考虑：</p>\n<ul>\n<li>单元测试</li>\n<li>功能测试</li>\n</ul>\n<p>Mocha 是一个可以运行在 Node.js 和浏览器环境里的测试框架，</p>\n<figure class=\"highlight qml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>);</span><br><span class=\"line\"><span class=\"built_in\">var</span> mocha = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-mocha'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'test.js'</span>, &#123;<span class=\"attribute\">read</span>: <span class=\"literal\">false</span>&#125;)</span><br><span class=\"line\">\t\t<span class=\"comment\">// gulp-mocha needs filepaths so you can't have any plugins before it</span></span><br><span class=\"line\">\t\t.pipe(mocha(&#123;<span class=\"attribute\">reporter</span>: <span class=\"string\">'nyan'</span>&#125;));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h4><p>对于静态型语言来说，编译是一个很重要的步骤。不过，对于动态语言来说也存在这样的工具。</p>\n<p><strong>动态语言的编译</strong></p>\n<p>可以说这类型的语言，是以我们常见的 JavaScript 为代表。</p>\n<ol>\n<li><p>CoffeeScript 是一套 JavaScript 的转译语言，并且它增强了 JavaScript 的简洁性与可读性。</p>\n</li>\n<li><p>Webpack 是一款模块加载器兼打包工具，它能把各种资源，例如 JS（含JSX）、coffee、样式（含less/sass）、图片等都作为模块来使用和处理。</p>\n</li>\n<li><p>Babel 是一个转换编译器，它能将 ES6 转换成可以在浏览器中运行的代码。</p>\n</li>\n</ol>\n<h4 id=\"打包\"><a href=\"#打包\" class=\"headerlink\" title=\"打包\"></a>打包</h4><p>在 GNU/Linux 系统的软件包里通过包含了已压缩的软件文件集以及该软件的内容信息。常见的软件包有</p>\n<ol>\n<li>DEB。Debian 软件包格式，文件扩展名为 .deb</li>\n<li>RPM（原 Red Hat Package Manager，现在是一个递归缩写）。该软件包分为二进制包（Binary）、源代码包（Source）和 Delta 包三种。二进制包可以直接安装在计算机中，而源代码包将会由 RPM 自动编译、安装。源代码包经常以 src.rpm 作为后缀名。</li>\n<li>压缩文档 tar.gz。通常是该软件的源码，故而在安装的过程中需要编译、安装，并且在编译时需要自己手动安装所需要依赖的软件。在软件仓库没有最新版本的软件时，tar.gz 往往是最好的选择。</li>\n</ol>\n<p>由于这里的打包过程比较繁琐，就不介绍了。有兴趣的读者可以自己了解一下。</p>\n<h4 id=\"上传及发布包\"><a href=\"#上传及发布包\" class=\"headerlink\" title=\"上传及发布包\"></a>上传及发布包</h4><p>上传包之前我们需要创建一个相应的文件服务器，又或者是相应的软件源。并且对于我们的产品环境的服务器来说，我们还需要指定好这个软件源才能安装这个包。</p>\n<p>以 Ubuntu 为例，Ubuntu 里的许多应用程序软件包，是放在网络里的服务器上，这些服务器网站，就称作“源”，从源里可以很方便地获取软件包。</p>\n<p>因而在这一步中，我们所需要做的事便是将我们打包完的软件上传到相应的服务器上。</p>"},{"title":"Git 与版本控制","date":"2016-04-27T15:45:08.000Z","_content":"\n### 版本控制\n\n> 版本控制是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。\n\n虽然基于 Git 的工作流可能并不是一个非常好的实践，但是在这里我们以这个工作流做为实践来开展我们的项目。如下图所示是一个基于 Git 的项目流：\n\n![基于 Git 的工作流](http://growth.phodal.com/assets/article/chapter3/gitflow.png)\n\n我们日常会工作在 \"develop\" 分支（那条线）上，通常来说每个迭代我们会发布一个新的版本，而这个新的版本将会直接上线到产品环境。那么上线到产品环境的这个版本就需要打一个版本号——这样不仅可以方便跟踪我们的系统，而且当出错的时候我们也可以直接回滚到上一个版本。如果在上线的时候有些 Bug 不得不去修复，并且由于上线的新功能很重要，我们就需要一些 Hotfix。而从整个过程来看，版本控制起了一个非常大的作用。\n\n<!-- more --> \n\n不仅仅如此，版本控制的最大重要是在开发的过程中扮演的角色。通过版本管理系统，我们可以：\n\n1. 将某个文件回溯到之前的状态。\n2. 将项目回退到过去某个时间点。\n3. 在修改 Bug 时，可以查看修改历史，查出修改原因\n4. 只要版本控制系统还在，你可以任意修改项目中的文件，并且还可以轻松恢复。\n\n常用的版本管理系统有 Git、SVN，但是从近年来看 Git 似乎更受市场欢迎。\n\n### Git\n\n从一般开发者的角度来看，Git 有以下功能：\n\n1. 从服务器上克隆数据库（包括代码和版本信息）到单机上。\n2. 在自己的机器上创建分支，修改代码。\n3. 在单机上自己创建的分支上提交代码。\n4. 在单机上合并分支。\n5. 新建一个分支，把服务器上最新版的代码 fetch 下来，然后跟自己的主分支合并。\n6. 生成补丁（patch），把补丁发送给主开发者。\n7. 看主开发者的反馈，如果主开发者发现两个一般开发者之间有冲突（他们之间可以合作解决的冲突），就会要求他们先解决冲突，然后再由其中一个人提交。如果主开发者可以自己解决，或者没有冲突，就通过。\n8. 一般开发者之间解决冲突的方法，开发者之间可以使用 pull 命令解决冲突，解决完冲突之后再向主开发者提交补丁。\n\n从主开发者的角度（假设主开发者不用开发代码）看，Git 有以下功能：\n\n1. 查看邮件或者通过其它方式查看一般开发者的提交状态。\n2. 打上补丁，解决冲突（可以自己解决，也可以要求开发者之间解决以后再重新提交，如果是开源项目，还要决定哪些补丁有用，哪些不用）。\n3. 向公共服务器提交结果，然后通知所有开发人员。\n\n#### Git 初入\n\n如果是第一次使用 Git，你需要设置署名和邮箱：\n\n```\n$ git config --global user.name \"用户名\"\n$ git config --global user.email \"电子邮箱\"\n```\n\n你可以在 [GitHub](https://github.com) 新建免费的公开仓库或在 [Coding.net](https://coding.net) 新建免费的私有仓库。\n\n按照 [GitHub 的文档](https://help.github.com/articles/generating-an-ssh-key/) 或 [Coding.net 的文档](https://coding.net/help/doc/account/ssh-key.html) 配置 SSH Key，然后将代码仓库 clone 到本地，其实就是将代码复制到你的机器里，并交由 Git 来管理：\n\n```\n$ git clone git@github.com:username/repository.git\n或\n$ git clone git@git.coding.net:username/repository.git\n```\n\n或使用 HTTPS 地址进行 clone：\n\n```\n$ git clone https://username:password@github.com/username/repository.git\n或\n$ git clone https://username:password@git.coding.net/username/repository.git\n```\n\n你可以修改复制到本地的代码了（ symfony-docs-chs 项目里都是 rst 格式的文档）。当你觉得完成了一定的工作量，想做个阶段性的提交：\n\n向这个本地的代码仓库添加当前目录的所有改动：\n\n```\n$ git add .\n```\n\n或者只是添加某个文件：\n\n```\n$ git add -p\n```\n\n我们可以输入\n\n```\n$ git status\n```\n\n来看现在的状态，如下图是添加之前的：\n\n![Before add](http://growth.phodal.com/assets/article/chapter3/before-add.png)\n\n下面是添加之后 的\n\n![After add](http://growth.phodal.com/assets/article/chapter3/after-add.png)\n\n可以看到状态的变化是从黄色到绿色，即 unstage 到 add。\n\n在完成添加之后，我们就可以写入相应的提交信息——如这次修改添加了什么内容 、这次修改修复了什么问题等等。在我们的工作流程里，我们使用 Jira 这样的工具来管理我们的项目，也会在我们的 Commit Message 里写上作者的名字，如下：\n\n```\n$ git commit -m \"[GROWTH-001] Phodal: add first commit & example\"\n```\n\n在这里的``GROWTH-001``就相当于是我们的任务号，Phodal 则对应于用户名，后面的提交信息也会写明这个任务是干嘛的。\n\n由于有测试的存在，在完成提交之后，我们就需要运行相应的测试来保证我们没有破坏原来的功能。因此，我们就可以PUSH我们的代码到服务器端：\n\n```\n$ git push\n```\n\n这样其他人就可以看到我们修改的代码。\n","source":"_posts/3.0.2-git.md","raw":"title: Git 与版本控制\ndate: 2016-4-27 23:45:08\ntags:\n---\n\n### 版本控制\n\n> 版本控制是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。\n\n虽然基于 Git 的工作流可能并不是一个非常好的实践，但是在这里我们以这个工作流做为实践来开展我们的项目。如下图所示是一个基于 Git 的项目流：\n\n![基于 Git 的工作流](http://growth.phodal.com/assets/article/chapter3/gitflow.png)\n\n我们日常会工作在 \"develop\" 分支（那条线）上，通常来说每个迭代我们会发布一个新的版本，而这个新的版本将会直接上线到产品环境。那么上线到产品环境的这个版本就需要打一个版本号——这样不仅可以方便跟踪我们的系统，而且当出错的时候我们也可以直接回滚到上一个版本。如果在上线的时候有些 Bug 不得不去修复，并且由于上线的新功能很重要，我们就需要一些 Hotfix。而从整个过程来看，版本控制起了一个非常大的作用。\n\n<!-- more --> \n\n不仅仅如此，版本控制的最大重要是在开发的过程中扮演的角色。通过版本管理系统，我们可以：\n\n1. 将某个文件回溯到之前的状态。\n2. 将项目回退到过去某个时间点。\n3. 在修改 Bug 时，可以查看修改历史，查出修改原因\n4. 只要版本控制系统还在，你可以任意修改项目中的文件，并且还可以轻松恢复。\n\n常用的版本管理系统有 Git、SVN，但是从近年来看 Git 似乎更受市场欢迎。\n\n### Git\n\n从一般开发者的角度来看，Git 有以下功能：\n\n1. 从服务器上克隆数据库（包括代码和版本信息）到单机上。\n2. 在自己的机器上创建分支，修改代码。\n3. 在单机上自己创建的分支上提交代码。\n4. 在单机上合并分支。\n5. 新建一个分支，把服务器上最新版的代码 fetch 下来，然后跟自己的主分支合并。\n6. 生成补丁（patch），把补丁发送给主开发者。\n7. 看主开发者的反馈，如果主开发者发现两个一般开发者之间有冲突（他们之间可以合作解决的冲突），就会要求他们先解决冲突，然后再由其中一个人提交。如果主开发者可以自己解决，或者没有冲突，就通过。\n8. 一般开发者之间解决冲突的方法，开发者之间可以使用 pull 命令解决冲突，解决完冲突之后再向主开发者提交补丁。\n\n从主开发者的角度（假设主开发者不用开发代码）看，Git 有以下功能：\n\n1. 查看邮件或者通过其它方式查看一般开发者的提交状态。\n2. 打上补丁，解决冲突（可以自己解决，也可以要求开发者之间解决以后再重新提交，如果是开源项目，还要决定哪些补丁有用，哪些不用）。\n3. 向公共服务器提交结果，然后通知所有开发人员。\n\n#### Git 初入\n\n如果是第一次使用 Git，你需要设置署名和邮箱：\n\n```\n$ git config --global user.name \"用户名\"\n$ git config --global user.email \"电子邮箱\"\n```\n\n你可以在 [GitHub](https://github.com) 新建免费的公开仓库或在 [Coding.net](https://coding.net) 新建免费的私有仓库。\n\n按照 [GitHub 的文档](https://help.github.com/articles/generating-an-ssh-key/) 或 [Coding.net 的文档](https://coding.net/help/doc/account/ssh-key.html) 配置 SSH Key，然后将代码仓库 clone 到本地，其实就是将代码复制到你的机器里，并交由 Git 来管理：\n\n```\n$ git clone git@github.com:username/repository.git\n或\n$ git clone git@git.coding.net:username/repository.git\n```\n\n或使用 HTTPS 地址进行 clone：\n\n```\n$ git clone https://username:password@github.com/username/repository.git\n或\n$ git clone https://username:password@git.coding.net/username/repository.git\n```\n\n你可以修改复制到本地的代码了（ symfony-docs-chs 项目里都是 rst 格式的文档）。当你觉得完成了一定的工作量，想做个阶段性的提交：\n\n向这个本地的代码仓库添加当前目录的所有改动：\n\n```\n$ git add .\n```\n\n或者只是添加某个文件：\n\n```\n$ git add -p\n```\n\n我们可以输入\n\n```\n$ git status\n```\n\n来看现在的状态，如下图是添加之前的：\n\n![Before add](http://growth.phodal.com/assets/article/chapter3/before-add.png)\n\n下面是添加之后 的\n\n![After add](http://growth.phodal.com/assets/article/chapter3/after-add.png)\n\n可以看到状态的变化是从黄色到绿色，即 unstage 到 add。\n\n在完成添加之后，我们就可以写入相应的提交信息——如这次修改添加了什么内容 、这次修改修复了什么问题等等。在我们的工作流程里，我们使用 Jira 这样的工具来管理我们的项目，也会在我们的 Commit Message 里写上作者的名字，如下：\n\n```\n$ git commit -m \"[GROWTH-001] Phodal: add first commit & example\"\n```\n\n在这里的``GROWTH-001``就相当于是我们的任务号，Phodal 则对应于用户名，后面的提交信息也会写明这个任务是干嘛的。\n\n由于有测试的存在，在完成提交之后，我们就需要运行相应的测试来保证我们没有破坏原来的功能。因此，我们就可以PUSH我们的代码到服务器端：\n\n```\n$ git push\n```\n\n这样其他人就可以看到我们修改的代码。\n","slug":"3.0.2-git","published":1,"updated":"2016-04-27T03:48:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuf7mpeu000ktsife3jz3ki7","content":"<h3 id=\"版本控制\"><a href=\"#版本控制\" class=\"headerlink\" title=\"版本控制\"></a>版本控制</h3><blockquote>\n<p>版本控制是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。</p>\n</blockquote>\n<p>虽然基于 Git 的工作流可能并不是一个非常好的实践，但是在这里我们以这个工作流做为实践来开展我们的项目。如下图所示是一个基于 Git 的项目流：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter3/gitflow.png\" alt=\"基于 Git 的工作流\"></p>\n<p>我们日常会工作在 “develop” 分支（那条线）上，通常来说每个迭代我们会发布一个新的版本，而这个新的版本将会直接上线到产品环境。那么上线到产品环境的这个版本就需要打一个版本号——这样不仅可以方便跟踪我们的系统，而且当出错的时候我们也可以直接回滚到上一个版本。如果在上线的时候有些 Bug 不得不去修复，并且由于上线的新功能很重要，我们就需要一些 Hotfix。而从整个过程来看，版本控制起了一个非常大的作用。</p>\n<a id=\"more\"></a> \n<p>不仅仅如此，版本控制的最大重要是在开发的过程中扮演的角色。通过版本管理系统，我们可以：</p>\n<ol>\n<li>将某个文件回溯到之前的状态。</li>\n<li>将项目回退到过去某个时间点。</li>\n<li>在修改 Bug 时，可以查看修改历史，查出修改原因</li>\n<li>只要版本控制系统还在，你可以任意修改项目中的文件，并且还可以轻松恢复。</li>\n</ol>\n<p>常用的版本管理系统有 Git、SVN，但是从近年来看 Git 似乎更受市场欢迎。</p>\n<h3 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h3><p>从一般开发者的角度来看，Git 有以下功能：</p>\n<ol>\n<li>从服务器上克隆数据库（包括代码和版本信息）到单机上。</li>\n<li>在自己的机器上创建分支，修改代码。</li>\n<li>在单机上自己创建的分支上提交代码。</li>\n<li>在单机上合并分支。</li>\n<li>新建一个分支，把服务器上最新版的代码 fetch 下来，然后跟自己的主分支合并。</li>\n<li>生成补丁（patch），把补丁发送给主开发者。</li>\n<li>看主开发者的反馈，如果主开发者发现两个一般开发者之间有冲突（他们之间可以合作解决的冲突），就会要求他们先解决冲突，然后再由其中一个人提交。如果主开发者可以自己解决，或者没有冲突，就通过。</li>\n<li>一般开发者之间解决冲突的方法，开发者之间可以使用 pull 命令解决冲突，解决完冲突之后再向主开发者提交补丁。</li>\n</ol>\n<p>从主开发者的角度（假设主开发者不用开发代码）看，Git 有以下功能：</p>\n<ol>\n<li>查看邮件或者通过其它方式查看一般开发者的提交状态。</li>\n<li>打上补丁，解决冲突（可以自己解决，也可以要求开发者之间解决以后再重新提交，如果是开源项目，还要决定哪些补丁有用，哪些不用）。</li>\n<li>向公共服务器提交结果，然后通知所有开发人员。</li>\n</ol>\n<h4 id=\"Git-初入\"><a href=\"#Git-初入\" class=\"headerlink\" title=\"Git 初入\"></a>Git 初入</h4><p>如果是第一次使用 Git，你需要设置署名和邮箱：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global user<span class=\"selector-class\">.name</span> <span class=\"string\">\"用户名\"</span></span><br><span class=\"line\">$ git config --global user<span class=\"selector-class\">.email</span> <span class=\"string\">\"电子邮箱\"</span></span><br></pre></td></tr></table></figure>\n<p>你可以在 <a href=\"https://github.com\" target=\"_blank\" rel=\"external\">GitHub</a> 新建免费的公开仓库或在 <a href=\"https://coding.net\" target=\"_blank\" rel=\"external\">Coding.net</a> 新建免费的私有仓库。</p>\n<p>按照 <a href=\"https://help.github.com/articles/generating-an-ssh-key/\" target=\"_blank\" rel=\"external\">GitHub 的文档</a> 或 <a href=\"https://coding.net/help/doc/account/ssh-key.html\" target=\"_blank\" rel=\"external\">Coding.net 的文档</a> 配置 SSH Key，然后将代码仓库 clone 到本地，其实就是将代码复制到你的机器里，并交由 Git 来管理：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone git@github<span class=\"selector-class\">.com</span>:username/repository<span class=\"selector-class\">.git</span></span><br><span class=\"line\">或</span><br><span class=\"line\">$ git clone git@git<span class=\"selector-class\">.coding</span><span class=\"selector-class\">.net</span>:username/repository.git</span><br></pre></td></tr></table></figure>\n<p>或使用 HTTPS 地址进行 clone：</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">clone</span> <span class=\"title\">https</span>://username:password@github.com/username/repository.git</span><br><span class=\"line\">或</span><br><span class=\"line\">$ git <span class=\"keyword\">clone</span> <span class=\"title\">https</span>://username:password@git.coding.net/username/repository.git</span><br></pre></td></tr></table></figure>\n<p>你可以修改复制到本地的代码了（ symfony-docs-chs 项目里都是 rst 格式的文档）。当你觉得完成了一定的工作量，想做个阶段性的提交：</p>\n<p>向这个本地的代码仓库添加当前目录的所有改动：</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">add </span>.</span><br></pre></td></tr></table></figure>\n<p>或者只是添加某个文件：</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">add </span>-p</span><br></pre></td></tr></table></figure>\n<p>我们可以输入</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>git status</span><br></pre></td></tr></table></figure>\n<p>来看现在的状态，如下图是添加之前的：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter3/before-add.png\" alt=\"Before add\"></p>\n<p>下面是添加之后 的</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter3/after-add.png\" alt=\"After add\"></p>\n<p>可以看到状态的变化是从黄色到绿色，即 unstage 到 add。</p>\n<p>在完成添加之后，我们就可以写入相应的提交信息——如这次修改添加了什么内容 、这次修改修复了什么问题等等。在我们的工作流程里，我们使用 Jira 这样的工具来管理我们的项目，也会在我们的 Commit Message 里写上作者的名字，如下：</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>git commit -m <span class=\"string\">\"[GROWTH-001] Phodal: add first commit &amp; example\"</span></span><br></pre></td></tr></table></figure>\n<p>在这里的<code>GROWTH-001</code>就相当于是我们的任务号，Phodal 则对应于用户名，后面的提交信息也会写明这个任务是干嘛的。</p>\n<p>由于有测试的存在，在完成提交之后，我们就需要运行相应的测试来保证我们没有破坏原来的功能。因此，我们就可以PUSH我们的代码到服务器端：</p>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">push</span></span><br></pre></td></tr></table></figure>\n<p>这样其他人就可以看到我们修改的代码。</p>\n","excerpt":"<h3 id=\"版本控制\"><a href=\"#版本控制\" class=\"headerlink\" title=\"版本控制\"></a>版本控制</h3><blockquote>\n<p>版本控制是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。</p>\n</blockquote>\n<p>虽然基于 Git 的工作流可能并不是一个非常好的实践，但是在这里我们以这个工作流做为实践来开展我们的项目。如下图所示是一个基于 Git 的项目流：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter3/gitflow.png\" alt=\"基于 Git 的工作流\"></p>\n<p>我们日常会工作在 “develop” 分支（那条线）上，通常来说每个迭代我们会发布一个新的版本，而这个新的版本将会直接上线到产品环境。那么上线到产品环境的这个版本就需要打一个版本号——这样不仅可以方便跟踪我们的系统，而且当出错的时候我们也可以直接回滚到上一个版本。如果在上线的时候有些 Bug 不得不去修复，并且由于上线的新功能很重要，我们就需要一些 Hotfix。而从整个过程来看，版本控制起了一个非常大的作用。</p>","more":"<p>不仅仅如此，版本控制的最大重要是在开发的过程中扮演的角色。通过版本管理系统，我们可以：</p>\n<ol>\n<li>将某个文件回溯到之前的状态。</li>\n<li>将项目回退到过去某个时间点。</li>\n<li>在修改 Bug 时，可以查看修改历史，查出修改原因</li>\n<li>只要版本控制系统还在，你可以任意修改项目中的文件，并且还可以轻松恢复。</li>\n</ol>\n<p>常用的版本管理系统有 Git、SVN，但是从近年来看 Git 似乎更受市场欢迎。</p>\n<h3 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h3><p>从一般开发者的角度来看，Git 有以下功能：</p>\n<ol>\n<li>从服务器上克隆数据库（包括代码和版本信息）到单机上。</li>\n<li>在自己的机器上创建分支，修改代码。</li>\n<li>在单机上自己创建的分支上提交代码。</li>\n<li>在单机上合并分支。</li>\n<li>新建一个分支，把服务器上最新版的代码 fetch 下来，然后跟自己的主分支合并。</li>\n<li>生成补丁（patch），把补丁发送给主开发者。</li>\n<li>看主开发者的反馈，如果主开发者发现两个一般开发者之间有冲突（他们之间可以合作解决的冲突），就会要求他们先解决冲突，然后再由其中一个人提交。如果主开发者可以自己解决，或者没有冲突，就通过。</li>\n<li>一般开发者之间解决冲突的方法，开发者之间可以使用 pull 命令解决冲突，解决完冲突之后再向主开发者提交补丁。</li>\n</ol>\n<p>从主开发者的角度（假设主开发者不用开发代码）看，Git 有以下功能：</p>\n<ol>\n<li>查看邮件或者通过其它方式查看一般开发者的提交状态。</li>\n<li>打上补丁，解决冲突（可以自己解决，也可以要求开发者之间解决以后再重新提交，如果是开源项目，还要决定哪些补丁有用，哪些不用）。</li>\n<li>向公共服务器提交结果，然后通知所有开发人员。</li>\n</ol>\n<h4 id=\"Git-初入\"><a href=\"#Git-初入\" class=\"headerlink\" title=\"Git 初入\"></a>Git 初入</h4><p>如果是第一次使用 Git，你需要设置署名和邮箱：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global user<span class=\"selector-class\">.name</span> <span class=\"string\">\"用户名\"</span></span><br><span class=\"line\">$ git config --global user<span class=\"selector-class\">.email</span> <span class=\"string\">\"电子邮箱\"</span></span><br></pre></td></tr></table></figure>\n<p>你可以在 <a href=\"https://github.com\">GitHub</a> 新建免费的公开仓库或在 <a href=\"https://coding.net\">Coding.net</a> 新建免费的私有仓库。</p>\n<p>按照 <a href=\"https://help.github.com/articles/generating-an-ssh-key/\">GitHub 的文档</a> 或 <a href=\"https://coding.net/help/doc/account/ssh-key.html\">Coding.net 的文档</a> 配置 SSH Key，然后将代码仓库 clone 到本地，其实就是将代码复制到你的机器里，并交由 Git 来管理：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone git@github<span class=\"selector-class\">.com</span>:username/repository<span class=\"selector-class\">.git</span></span><br><span class=\"line\">或</span><br><span class=\"line\">$ git clone git@git<span class=\"selector-class\">.coding</span><span class=\"selector-class\">.net</span>:username/repository.git</span><br></pre></td></tr></table></figure>\n<p>或使用 HTTPS 地址进行 clone：</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">clone</span> <span class=\"title\">https</span>://username:password@github.com/username/repository.git</span><br><span class=\"line\">或</span><br><span class=\"line\">$ git <span class=\"keyword\">clone</span> <span class=\"title\">https</span>://username:password@git.coding.net/username/repository.git</span><br></pre></td></tr></table></figure>\n<p>你可以修改复制到本地的代码了（ symfony-docs-chs 项目里都是 rst 格式的文档）。当你觉得完成了一定的工作量，想做个阶段性的提交：</p>\n<p>向这个本地的代码仓库添加当前目录的所有改动：</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">add </span>.</span><br></pre></td></tr></table></figure>\n<p>或者只是添加某个文件：</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">add </span>-p</span><br></pre></td></tr></table></figure>\n<p>我们可以输入</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>git status</span><br></pre></td></tr></table></figure>\n<p>来看现在的状态，如下图是添加之前的：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter3/before-add.png\" alt=\"Before add\"></p>\n<p>下面是添加之后 的</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter3/after-add.png\" alt=\"After add\"></p>\n<p>可以看到状态的变化是从黄色到绿色，即 unstage 到 add。</p>\n<p>在完成添加之后，我们就可以写入相应的提交信息——如这次修改添加了什么内容 、这次修改修复了什么问题等等。在我们的工作流程里，我们使用 Jira 这样的工具来管理我们的项目，也会在我们的 Commit Message 里写上作者的名字，如下：</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>git commit -m <span class=\"string\">\"[GROWTH-001] Phodal: add first commit &amp; example\"</span></span><br></pre></td></tr></table></figure>\n<p>在这里的<code>GROWTH-001</code>就相当于是我们的任务号，Phodal 则对应于用户名，后面的提交信息也会写明这个任务是干嘛的。</p>\n<p>由于有测试的存在，在完成提交之后，我们就需要运行相应的测试来保证我们没有破坏原来的功能。因此，我们就可以PUSH我们的代码到服务器端：</p>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">push</span></span><br></pre></td></tr></table></figure>\n<p>这样其他人就可以看到我们修改的代码。</p>"},{"title":"Tasking","date":"2016-04-28T13:45:08.000Z","_content":"\n初到 ThoughtWorks 时，Pair 时候总会有人教我如何开始编码，这应该也是一项基础的能力。结合日常，重新演绎一下这个过程：\n\n1. 有一个明确的实现目标。\n2. 评估目标并将其拆解成任务(TODO)。\n3. 规划任务的步骤(TODO)\n4. 学习相关技能\n5. 执行 Task，遇到难题就跳到第二步。\n\n<!-- more --> \n\n### 如何 Tasking 一本书\n\n以本文的写作为例，细分上面的过程就是：\n\n1. 我有了一个中心思想——在某种意义上来说就是标题。\n2. 依据中心思想我将这篇文章分成了四小节。\n3. 然后我开始写四小节的内容。\n4. 直到完成。\n\n而如果将其划分到一个编程任务，那么也是一样的：\n\n1. 我们想到做一个 xxx 的 idea。\n2. 为了这个 idea 我们需要分成几步，或者几层设计。\n3. 对于每一步，我们应该做点什么\n4. 我们需要学习怎样的技能\n5. 集成每一步的代码，就有了我们的系统。\n\n现在让我们以这本书的写作过程为例，来看看这个过程是怎么发生的。\n\n在计划写一本书的时候，我们有关于这本书主题的一些想法。正是一些想法慢慢地凝聚成一个稳定的想法，不过这不是我们所要讨论的重点。\n\n当我们已经有了一本书的相关话题的时候，我们会打算去怎么做？先来个头脑风暴，在上面写满我们的一些想法，如这本书最开始划分了这七步：\n\n - 从零开始\n - 编码\n - 上线\n - 数据分析\n - 持续交付\n - 遗留系统\n - 回顾与新架构\n\n接着，依据我们的想法整理出几个章节。如本书最初的时候只有七个章节，但是我们还需要第一个章节来指引新手，因此变成了八个章节。对应于每一个章节，我们都需要想好每一章里的内容。如在第一章里，又可以分成不同的几部分。随后，我们再对每一部分的内容进行任务划分，那么我们就会得到一个又一个的小的章节。在每个小的章节里，我们都可以大概策划一下我们要写的内容。\n\n然后我们就可以开始写这样的一本书——由一节节汇聚成一章，由一章一章汇聚成一本。\n\n### Tasking 开发任务\n\n现在，让我们简单地来 Tasking 如何开发一个博客。作为一个程序员，如果我们要去开始一个博客系统的话，那么我们会怎么做？\n\n1. 先规划一下我们所需要的功能——如后台、评论、Social 等等，并且我们还应该设计我们博客的 Mockup。\n2. 随后我们就可以简单地设计一下系统的架构，如传统的前后端结合。\n3. 我们就可以进行技术选型了——使用哪个后端框架、使用哪个前端框架。\n4. 创建我们的 hello,world，然后开始进行一个功能的编码工作。\n5. 编码时，我们就需要不断地查看、添加测试等等。\n6. 完成一个个功能的时候，我们就会得到一个子模块。\n7. 依据一个个子模块，我们就可以得到我们的博客系统。\n\n与我们日常开发一致的是：我们需要去划分任务的优先级。换句话来说，我们需要先实现我们的核心功能。\n\n对于我们的博客系统来说，最主要的功能就是发博客、展示博客。往简单地说，一篇博客应该有这么基础的四部分：\n\n1. 标题\n2. 内容\n3. 作者\n4. 时间\n5. Slug\n\n然后，我们就需要创建相应的 Model，根据这个 Model，我们就可以创建相应的控制器代码。再配置下路由，添加下页面。对于有些系统来说，我们就可以完成博客系统的展示了。\n","source":"_posts/3.0.3-tasking.md","raw":"title: Tasking\ndate: 2016-4-28 21:45:08\ntags:\n---\n\n初到 ThoughtWorks 时，Pair 时候总会有人教我如何开始编码，这应该也是一项基础的能力。结合日常，重新演绎一下这个过程：\n\n1. 有一个明确的实现目标。\n2. 评估目标并将其拆解成任务(TODO)。\n3. 规划任务的步骤(TODO)\n4. 学习相关技能\n5. 执行 Task，遇到难题就跳到第二步。\n\n<!-- more --> \n\n### 如何 Tasking 一本书\n\n以本文的写作为例，细分上面的过程就是：\n\n1. 我有了一个中心思想——在某种意义上来说就是标题。\n2. 依据中心思想我将这篇文章分成了四小节。\n3. 然后我开始写四小节的内容。\n4. 直到完成。\n\n而如果将其划分到一个编程任务，那么也是一样的：\n\n1. 我们想到做一个 xxx 的 idea。\n2. 为了这个 idea 我们需要分成几步，或者几层设计。\n3. 对于每一步，我们应该做点什么\n4. 我们需要学习怎样的技能\n5. 集成每一步的代码，就有了我们的系统。\n\n现在让我们以这本书的写作过程为例，来看看这个过程是怎么发生的。\n\n在计划写一本书的时候，我们有关于这本书主题的一些想法。正是一些想法慢慢地凝聚成一个稳定的想法，不过这不是我们所要讨论的重点。\n\n当我们已经有了一本书的相关话题的时候，我们会打算去怎么做？先来个头脑风暴，在上面写满我们的一些想法，如这本书最开始划分了这七步：\n\n - 从零开始\n - 编码\n - 上线\n - 数据分析\n - 持续交付\n - 遗留系统\n - 回顾与新架构\n\n接着，依据我们的想法整理出几个章节。如本书最初的时候只有七个章节，但是我们还需要第一个章节来指引新手，因此变成了八个章节。对应于每一个章节，我们都需要想好每一章里的内容。如在第一章里，又可以分成不同的几部分。随后，我们再对每一部分的内容进行任务划分，那么我们就会得到一个又一个的小的章节。在每个小的章节里，我们都可以大概策划一下我们要写的内容。\n\n然后我们就可以开始写这样的一本书——由一节节汇聚成一章，由一章一章汇聚成一本。\n\n### Tasking 开发任务\n\n现在，让我们简单地来 Tasking 如何开发一个博客。作为一个程序员，如果我们要去开始一个博客系统的话，那么我们会怎么做？\n\n1. 先规划一下我们所需要的功能——如后台、评论、Social 等等，并且我们还应该设计我们博客的 Mockup。\n2. 随后我们就可以简单地设计一下系统的架构，如传统的前后端结合。\n3. 我们就可以进行技术选型了——使用哪个后端框架、使用哪个前端框架。\n4. 创建我们的 hello,world，然后开始进行一个功能的编码工作。\n5. 编码时，我们就需要不断地查看、添加测试等等。\n6. 完成一个个功能的时候，我们就会得到一个子模块。\n7. 依据一个个子模块，我们就可以得到我们的博客系统。\n\n与我们日常开发一致的是：我们需要去划分任务的优先级。换句话来说，我们需要先实现我们的核心功能。\n\n对于我们的博客系统来说，最主要的功能就是发博客、展示博客。往简单地说，一篇博客应该有这么基础的四部分：\n\n1. 标题\n2. 内容\n3. 作者\n4. 时间\n5. Slug\n\n然后，我们就需要创建相应的 Model，根据这个 Model，我们就可以创建相应的控制器代码。再配置下路由，添加下页面。对于有些系统来说，我们就可以完成博客系统的展示了。\n","slug":"3.0.3-tasking","published":1,"updated":"2016-04-28T05:29:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuf7mpey000ltsift7g0o1vt","content":"<p>初到 ThoughtWorks 时，Pair 时候总会有人教我如何开始编码，这应该也是一项基础的能力。结合日常，重新演绎一下这个过程：</p>\n<ol>\n<li>有一个明确的实现目标。</li>\n<li>评估目标并将其拆解成任务(TODO)。</li>\n<li>规划任务的步骤(TODO)</li>\n<li>学习相关技能</li>\n<li>执行 Task，遇到难题就跳到第二步。</li>\n</ol>\n<a id=\"more\"></a> \n<h3 id=\"如何-Tasking-一本书\"><a href=\"#如何-Tasking-一本书\" class=\"headerlink\" title=\"如何 Tasking 一本书\"></a>如何 Tasking 一本书</h3><p>以本文的写作为例，细分上面的过程就是：</p>\n<ol>\n<li>我有了一个中心思想——在某种意义上来说就是标题。</li>\n<li>依据中心思想我将这篇文章分成了四小节。</li>\n<li>然后我开始写四小节的内容。</li>\n<li>直到完成。</li>\n</ol>\n<p>而如果将其划分到一个编程任务，那么也是一样的：</p>\n<ol>\n<li>我们想到做一个 xxx 的 idea。</li>\n<li>为了这个 idea 我们需要分成几步，或者几层设计。</li>\n<li>对于每一步，我们应该做点什么</li>\n<li>我们需要学习怎样的技能</li>\n<li>集成每一步的代码，就有了我们的系统。</li>\n</ol>\n<p>现在让我们以这本书的写作过程为例，来看看这个过程是怎么发生的。</p>\n<p>在计划写一本书的时候，我们有关于这本书主题的一些想法。正是一些想法慢慢地凝聚成一个稳定的想法，不过这不是我们所要讨论的重点。</p>\n<p>当我们已经有了一本书的相关话题的时候，我们会打算去怎么做？先来个头脑风暴，在上面写满我们的一些想法，如这本书最开始划分了这七步：</p>\n<ul>\n<li>从零开始</li>\n<li>编码</li>\n<li>上线</li>\n<li>数据分析</li>\n<li>持续交付</li>\n<li>遗留系统</li>\n<li>回顾与新架构</li>\n</ul>\n<p>接着，依据我们的想法整理出几个章节。如本书最初的时候只有七个章节，但是我们还需要第一个章节来指引新手，因此变成了八个章节。对应于每一个章节，我们都需要想好每一章里的内容。如在第一章里，又可以分成不同的几部分。随后，我们再对每一部分的内容进行任务划分，那么我们就会得到一个又一个的小的章节。在每个小的章节里，我们都可以大概策划一下我们要写的内容。</p>\n<p>然后我们就可以开始写这样的一本书——由一节节汇聚成一章，由一章一章汇聚成一本。</p>\n<h3 id=\"Tasking-开发任务\"><a href=\"#Tasking-开发任务\" class=\"headerlink\" title=\"Tasking 开发任务\"></a>Tasking 开发任务</h3><p>现在，让我们简单地来 Tasking 如何开发一个博客。作为一个程序员，如果我们要去开始一个博客系统的话，那么我们会怎么做？</p>\n<ol>\n<li>先规划一下我们所需要的功能——如后台、评论、Social 等等，并且我们还应该设计我们博客的 Mockup。</li>\n<li>随后我们就可以简单地设计一下系统的架构，如传统的前后端结合。</li>\n<li>我们就可以进行技术选型了——使用哪个后端框架、使用哪个前端框架。</li>\n<li>创建我们的 hello,world，然后开始进行一个功能的编码工作。</li>\n<li>编码时，我们就需要不断地查看、添加测试等等。</li>\n<li>完成一个个功能的时候，我们就会得到一个子模块。</li>\n<li>依据一个个子模块，我们就可以得到我们的博客系统。</li>\n</ol>\n<p>与我们日常开发一致的是：我们需要去划分任务的优先级。换句话来说，我们需要先实现我们的核心功能。</p>\n<p>对于我们的博客系统来说，最主要的功能就是发博客、展示博客。往简单地说，一篇博客应该有这么基础的四部分：</p>\n<ol>\n<li>标题</li>\n<li>内容</li>\n<li>作者</li>\n<li>时间</li>\n<li>Slug</li>\n</ol>\n<p>然后，我们就需要创建相应的 Model，根据这个 Model，我们就可以创建相应的控制器代码。再配置下路由，添加下页面。对于有些系统来说，我们就可以完成博客系统的展示了。</p>\n","excerpt":"<p>初到 ThoughtWorks 时，Pair 时候总会有人教我如何开始编码，这应该也是一项基础的能力。结合日常，重新演绎一下这个过程：</p>\n<ol>\n<li>有一个明确的实现目标。</li>\n<li>评估目标并将其拆解成任务(TODO)。</li>\n<li>规划任务的步骤(TODO)</li>\n<li>学习相关技能</li>\n<li>执行 Task，遇到难题就跳到第二步。</li>\n</ol>","more":"<h3 id=\"如何-Tasking-一本书\"><a href=\"#如何-Tasking-一本书\" class=\"headerlink\" title=\"如何 Tasking 一本书\"></a>如何 Tasking 一本书</h3><p>以本文的写作为例，细分上面的过程就是：</p>\n<ol>\n<li>我有了一个中心思想——在某种意义上来说就是标题。</li>\n<li>依据中心思想我将这篇文章分成了四小节。</li>\n<li>然后我开始写四小节的内容。</li>\n<li>直到完成。</li>\n</ol>\n<p>而如果将其划分到一个编程任务，那么也是一样的：</p>\n<ol>\n<li>我们想到做一个 xxx 的 idea。</li>\n<li>为了这个 idea 我们需要分成几步，或者几层设计。</li>\n<li>对于每一步，我们应该做点什么</li>\n<li>我们需要学习怎样的技能</li>\n<li>集成每一步的代码，就有了我们的系统。</li>\n</ol>\n<p>现在让我们以这本书的写作过程为例，来看看这个过程是怎么发生的。</p>\n<p>在计划写一本书的时候，我们有关于这本书主题的一些想法。正是一些想法慢慢地凝聚成一个稳定的想法，不过这不是我们所要讨论的重点。</p>\n<p>当我们已经有了一本书的相关话题的时候，我们会打算去怎么做？先来个头脑风暴，在上面写满我们的一些想法，如这本书最开始划分了这七步：</p>\n<ul>\n<li>从零开始</li>\n<li>编码</li>\n<li>上线</li>\n<li>数据分析</li>\n<li>持续交付</li>\n<li>遗留系统</li>\n<li>回顾与新架构</li>\n</ul>\n<p>接着，依据我们的想法整理出几个章节。如本书最初的时候只有七个章节，但是我们还需要第一个章节来指引新手，因此变成了八个章节。对应于每一个章节，我们都需要想好每一章里的内容。如在第一章里，又可以分成不同的几部分。随后，我们再对每一部分的内容进行任务划分，那么我们就会得到一个又一个的小的章节。在每个小的章节里，我们都可以大概策划一下我们要写的内容。</p>\n<p>然后我们就可以开始写这样的一本书——由一节节汇聚成一章，由一章一章汇聚成一本。</p>\n<h3 id=\"Tasking-开发任务\"><a href=\"#Tasking-开发任务\" class=\"headerlink\" title=\"Tasking 开发任务\"></a>Tasking 开发任务</h3><p>现在，让我们简单地来 Tasking 如何开发一个博客。作为一个程序员，如果我们要去开始一个博客系统的话，那么我们会怎么做？</p>\n<ol>\n<li>先规划一下我们所需要的功能——如后台、评论、Social 等等，并且我们还应该设计我们博客的 Mockup。</li>\n<li>随后我们就可以简单地设计一下系统的架构，如传统的前后端结合。</li>\n<li>我们就可以进行技术选型了——使用哪个后端框架、使用哪个前端框架。</li>\n<li>创建我们的 hello,world，然后开始进行一个功能的编码工作。</li>\n<li>编码时，我们就需要不断地查看、添加测试等等。</li>\n<li>完成一个个功能的时候，我们就会得到一个子模块。</li>\n<li>依据一个个子模块，我们就可以得到我们的博客系统。</li>\n</ol>\n<p>与我们日常开发一致的是：我们需要去划分任务的优先级。换句话来说，我们需要先实现我们的核心功能。</p>\n<p>对于我们的博客系统来说，最主要的功能就是发博客、展示博客。往简单地说，一篇博客应该有这么基础的四部分：</p>\n<ol>\n<li>标题</li>\n<li>内容</li>\n<li>作者</li>\n<li>时间</li>\n<li>Slug</li>\n</ol>\n<p>然后，我们就需要创建相应的 Model，根据这个 Model，我们就可以创建相应的控制器代码。再配置下路由，添加下页面。对于有些系统来说，我们就可以完成博客系统的展示了。</p>"},{"title":"写代码只是在码字","date":"2016-04-28T14:45:08.000Z","_content":"\n编程这件事情实际上一点儿也不难，当我们只是在使用一个工具创造一些东西的时候，比如我们拿着电烙铁、芯片、电线等去焊一个电路板的时候，我们学的是如何运用这些工具。虽然最后我们的电路板可以实现相同的功能，但是我们可以一眼看到差距所在。\n\n换个贴切一点的比喻，比如烧菜做饭，对于一个优秀的厨师和一个像我这样的门外汉而言，就算给我们相同的食材、厨具，一段时间后也许一份是诱人的美食，一份只能喂猪了——即使我模仿着厨师的步骤一步步地来，也许看上去会差不多，但是一吃便吃出差距了。\n\n我们还做不好饭，还焊不好电路，还写不好代码，很大程度上并不是因为我们比别人笨，而只是别人比我们做了更多。有时候一种机缘巧遇的学习或者 bug 的出现，对于不同的人的编程人生都会有不一样的影响(ps:说的好像是蝴蝶效应)。我们只是在使用工具，使用的好与坏，在某种程序上决定了我们写出来的质量。\n\n写字便是如此，给我们同样的纸和笔(ps:减少无关因素)，不同的人写出来的字的差距很大，写得好的相比于写得不好的 ，只是因为练习得更多。而编程难道不也是如此么，最后写代码这件事就和写字一样简单了。\n\n刚开始写字的时候，我们需要去了解一个字的笔划顺序、字体结构，而这些因素相当于语法及其结构。熟悉了之后，写代码也和写字一样是简简单单的事。\n\n<!-- more --> \n\n#### 学习编程只是在学造句\n\n> ?多么无聊的一个标题\n\n``计算机语言同人类语言一样``，有时候我们也许会感慨一些计算机语言是多么地背离我们的世界，但是他们才是真正的计算机语言。\n\n计算机语言是模仿人类的语言，从 if 到其他，而这些计算机语言又比人类语言简单。故而一开始学习语言的时候我们只是在学习造句，用一句话来概括一句代码的意思，或者可以称之为函数、方法(method)。\n\n于是我们开始组词造句，以便最后能拼凑出一整篇文章。\n\n#### 编程是在写作\n\n> ?编程是在写作，这是一个怎样的玩笑?这是在讽刺那些写不好代码，又写不好文章的么\n\n代码如诗，又或者代码如散文。总的来说，这是相对于英语而言，对于中文而言可不是如此。**如果用一种所谓的中文语言写出来的代码，不能像中文诗一样，那么它就算不上是一种真正的中文语言。**\n\n那些所谓的写作逻辑对编程的影响\n\n - 早期的代码是以行数算的，文章是以字数算的\n - 代码是写给人看的，文章也是写给人看的\n - 编程同写作一样，都由想法开始\n - 代码同文章一样都可以堆砌出来(ps:如本文)\n - 写出好的文章不容易，需要反复琢磨，写出好的代码不也是如此么\n - 构造一个类，好比是构造一个人物的性格特点，多一点不行，少一点又不全\n - 代码生成，和生成诗一样，没有情感，过于机械化\n - 。。。\n\n然而好的作家和一般的写作者，区别总是很大，对同一个问题的思考程度也是不同的。从一个作者到一个作家的过程，是一个不断写作不断积累的过程。而从一个普通的程序员到一个优秀的程序员也是如此，需要一个不断编程的过程。\n\n当我们开始真正去编程的时候，我们还会纠结于\"**僧推月下门**\"还是\"**僧敲月下门**\"的时候，当我们越来越熟练就容易决定究竟用哪一个。而这样的“推敲”，无论在写作中还是在编程中都是相似的过程。\n\n> 写作的过程真的就是一次探索之旅，而且它会贯穿人的一生。\n\n因此：\n\n> 编程只是在码字，难道不是么？\n\n真正的想法都在脑子里，而不在纸上，或者 IDE 里。\n","source":"_posts/3.0.4-typing.md","raw":"title: 写代码只是在码字\ndate: 2016-4-28 22:45:08\ntags:\n---\n\n编程这件事情实际上一点儿也不难，当我们只是在使用一个工具创造一些东西的时候，比如我们拿着电烙铁、芯片、电线等去焊一个电路板的时候，我们学的是如何运用这些工具。虽然最后我们的电路板可以实现相同的功能，但是我们可以一眼看到差距所在。\n\n换个贴切一点的比喻，比如烧菜做饭，对于一个优秀的厨师和一个像我这样的门外汉而言，就算给我们相同的食材、厨具，一段时间后也许一份是诱人的美食，一份只能喂猪了——即使我模仿着厨师的步骤一步步地来，也许看上去会差不多，但是一吃便吃出差距了。\n\n我们还做不好饭，还焊不好电路，还写不好代码，很大程度上并不是因为我们比别人笨，而只是别人比我们做了更多。有时候一种机缘巧遇的学习或者 bug 的出现，对于不同的人的编程人生都会有不一样的影响(ps:说的好像是蝴蝶效应)。我们只是在使用工具，使用的好与坏，在某种程序上决定了我们写出来的质量。\n\n写字便是如此，给我们同样的纸和笔(ps:减少无关因素)，不同的人写出来的字的差距很大，写得好的相比于写得不好的 ，只是因为练习得更多。而编程难道不也是如此么，最后写代码这件事就和写字一样简单了。\n\n刚开始写字的时候，我们需要去了解一个字的笔划顺序、字体结构，而这些因素相当于语法及其结构。熟悉了之后，写代码也和写字一样是简简单单的事。\n\n<!-- more --> \n\n#### 学习编程只是在学造句\n\n> ?多么无聊的一个标题\n\n``计算机语言同人类语言一样``，有时候我们也许会感慨一些计算机语言是多么地背离我们的世界，但是他们才是真正的计算机语言。\n\n计算机语言是模仿人类的语言，从 if 到其他，而这些计算机语言又比人类语言简单。故而一开始学习语言的时候我们只是在学习造句，用一句话来概括一句代码的意思，或者可以称之为函数、方法(method)。\n\n于是我们开始组词造句，以便最后能拼凑出一整篇文章。\n\n#### 编程是在写作\n\n> ?编程是在写作，这是一个怎样的玩笑?这是在讽刺那些写不好代码，又写不好文章的么\n\n代码如诗，又或者代码如散文。总的来说，这是相对于英语而言，对于中文而言可不是如此。**如果用一种所谓的中文语言写出来的代码，不能像中文诗一样，那么它就算不上是一种真正的中文语言。**\n\n那些所谓的写作逻辑对编程的影响\n\n - 早期的代码是以行数算的，文章是以字数算的\n - 代码是写给人看的，文章也是写给人看的\n - 编程同写作一样，都由想法开始\n - 代码同文章一样都可以堆砌出来(ps:如本文)\n - 写出好的文章不容易，需要反复琢磨，写出好的代码不也是如此么\n - 构造一个类，好比是构造一个人物的性格特点，多一点不行，少一点又不全\n - 代码生成，和生成诗一样，没有情感，过于机械化\n - 。。。\n\n然而好的作家和一般的写作者，区别总是很大，对同一个问题的思考程度也是不同的。从一个作者到一个作家的过程，是一个不断写作不断积累的过程。而从一个普通的程序员到一个优秀的程序员也是如此，需要一个不断编程的过程。\n\n当我们开始真正去编程的时候，我们还会纠结于\"**僧推月下门**\"还是\"**僧敲月下门**\"的时候，当我们越来越熟练就容易决定究竟用哪一个。而这样的“推敲”，无论在写作中还是在编程中都是相似的过程。\n\n> 写作的过程真的就是一次探索之旅，而且它会贯穿人的一生。\n\n因此：\n\n> 编程只是在码字，难道不是么？\n\n真正的想法都在脑子里，而不在纸上，或者 IDE 里。\n","slug":"3.0.4-typing","published":1,"updated":"2016-04-28T05:31:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuf7mpf2000mtsif6bu2sm5n","content":"<p>编程这件事情实际上一点儿也不难，当我们只是在使用一个工具创造一些东西的时候，比如我们拿着电烙铁、芯片、电线等去焊一个电路板的时候，我们学的是如何运用这些工具。虽然最后我们的电路板可以实现相同的功能，但是我们可以一眼看到差距所在。</p>\n<p>换个贴切一点的比喻，比如烧菜做饭，对于一个优秀的厨师和一个像我这样的门外汉而言，就算给我们相同的食材、厨具，一段时间后也许一份是诱人的美食，一份只能喂猪了——即使我模仿着厨师的步骤一步步地来，也许看上去会差不多，但是一吃便吃出差距了。</p>\n<p>我们还做不好饭，还焊不好电路，还写不好代码，很大程度上并不是因为我们比别人笨，而只是别人比我们做了更多。有时候一种机缘巧遇的学习或者 bug 的出现，对于不同的人的编程人生都会有不一样的影响(ps:说的好像是蝴蝶效应)。我们只是在使用工具，使用的好与坏，在某种程序上决定了我们写出来的质量。</p>\n<p>写字便是如此，给我们同样的纸和笔(ps:减少无关因素)，不同的人写出来的字的差距很大，写得好的相比于写得不好的 ，只是因为练习得更多。而编程难道不也是如此么，最后写代码这件事就和写字一样简单了。</p>\n<p>刚开始写字的时候，我们需要去了解一个字的笔划顺序、字体结构，而这些因素相当于语法及其结构。熟悉了之后，写代码也和写字一样是简简单单的事。</p>\n<a id=\"more\"></a> \n<h4 id=\"学习编程只是在学造句\"><a href=\"#学习编程只是在学造句\" class=\"headerlink\" title=\"学习编程只是在学造句\"></a>学习编程只是在学造句</h4><blockquote>\n<p>?多么无聊的一个标题</p>\n</blockquote>\n<p><code>计算机语言同人类语言一样</code>，有时候我们也许会感慨一些计算机语言是多么地背离我们的世界，但是他们才是真正的计算机语言。</p>\n<p>计算机语言是模仿人类的语言，从 if 到其他，而这些计算机语言又比人类语言简单。故而一开始学习语言的时候我们只是在学习造句，用一句话来概括一句代码的意思，或者可以称之为函数、方法(method)。</p>\n<p>于是我们开始组词造句，以便最后能拼凑出一整篇文章。</p>\n<h4 id=\"编程是在写作\"><a href=\"#编程是在写作\" class=\"headerlink\" title=\"编程是在写作\"></a>编程是在写作</h4><blockquote>\n<p>?编程是在写作，这是一个怎样的玩笑?这是在讽刺那些写不好代码，又写不好文章的么</p>\n</blockquote>\n<p>代码如诗，又或者代码如散文。总的来说，这是相对于英语而言，对于中文而言可不是如此。<strong>如果用一种所谓的中文语言写出来的代码，不能像中文诗一样，那么它就算不上是一种真正的中文语言。</strong></p>\n<p>那些所谓的写作逻辑对编程的影响</p>\n<ul>\n<li>早期的代码是以行数算的，文章是以字数算的</li>\n<li>代码是写给人看的，文章也是写给人看的</li>\n<li>编程同写作一样，都由想法开始</li>\n<li>代码同文章一样都可以堆砌出来(ps:如本文)</li>\n<li>写出好的文章不容易，需要反复琢磨，写出好的代码不也是如此么</li>\n<li>构造一个类，好比是构造一个人物的性格特点，多一点不行，少一点又不全</li>\n<li>代码生成，和生成诗一样，没有情感，过于机械化</li>\n<li>。。。</li>\n</ul>\n<p>然而好的作家和一般的写作者，区别总是很大，对同一个问题的思考程度也是不同的。从一个作者到一个作家的过程，是一个不断写作不断积累的过程。而从一个普通的程序员到一个优秀的程序员也是如此，需要一个不断编程的过程。</p>\n<p>当我们开始真正去编程的时候，我们还会纠结于”<strong>僧推月下门</strong>“还是”<strong>僧敲月下门</strong>“的时候，当我们越来越熟练就容易决定究竟用哪一个。而这样的“推敲”，无论在写作中还是在编程中都是相似的过程。</p>\n<blockquote>\n<p>写作的过程真的就是一次探索之旅，而且它会贯穿人的一生。</p>\n</blockquote>\n<p>因此：</p>\n<blockquote>\n<p>编程只是在码字，难道不是么？</p>\n</blockquote>\n<p>真正的想法都在脑子里，而不在纸上，或者 IDE 里。</p>\n","excerpt":"<p>编程这件事情实际上一点儿也不难，当我们只是在使用一个工具创造一些东西的时候，比如我们拿着电烙铁、芯片、电线等去焊一个电路板的时候，我们学的是如何运用这些工具。虽然最后我们的电路板可以实现相同的功能，但是我们可以一眼看到差距所在。</p>\n<p>换个贴切一点的比喻，比如烧菜做饭，对于一个优秀的厨师和一个像我这样的门外汉而言，就算给我们相同的食材、厨具，一段时间后也许一份是诱人的美食，一份只能喂猪了——即使我模仿着厨师的步骤一步步地来，也许看上去会差不多，但是一吃便吃出差距了。</p>\n<p>我们还做不好饭，还焊不好电路，还写不好代码，很大程度上并不是因为我们比别人笨，而只是别人比我们做了更多。有时候一种机缘巧遇的学习或者 bug 的出现，对于不同的人的编程人生都会有不一样的影响(ps:说的好像是蝴蝶效应)。我们只是在使用工具，使用的好与坏，在某种程序上决定了我们写出来的质量。</p>\n<p>写字便是如此，给我们同样的纸和笔(ps:减少无关因素)，不同的人写出来的字的差距很大，写得好的相比于写得不好的 ，只是因为练习得更多。而编程难道不也是如此么，最后写代码这件事就和写字一样简单了。</p>\n<p>刚开始写字的时候，我们需要去了解一个字的笔划顺序、字体结构，而这些因素相当于语法及其结构。熟悉了之后，写代码也和写字一样是简简单单的事。</p>","more":"<h4 id=\"学习编程只是在学造句\"><a href=\"#学习编程只是在学造句\" class=\"headerlink\" title=\"学习编程只是在学造句\"></a>学习编程只是在学造句</h4><blockquote>\n<p>?多么无聊的一个标题</p>\n</blockquote>\n<p><code>计算机语言同人类语言一样</code>，有时候我们也许会感慨一些计算机语言是多么地背离我们的世界，但是他们才是真正的计算机语言。</p>\n<p>计算机语言是模仿人类的语言，从 if 到其他，而这些计算机语言又比人类语言简单。故而一开始学习语言的时候我们只是在学习造句，用一句话来概括一句代码的意思，或者可以称之为函数、方法(method)。</p>\n<p>于是我们开始组词造句，以便最后能拼凑出一整篇文章。</p>\n<h4 id=\"编程是在写作\"><a href=\"#编程是在写作\" class=\"headerlink\" title=\"编程是在写作\"></a>编程是在写作</h4><blockquote>\n<p>?编程是在写作，这是一个怎样的玩笑?这是在讽刺那些写不好代码，又写不好文章的么</p>\n</blockquote>\n<p>代码如诗，又或者代码如散文。总的来说，这是相对于英语而言，对于中文而言可不是如此。<strong>如果用一种所谓的中文语言写出来的代码，不能像中文诗一样，那么它就算不上是一种真正的中文语言。</strong></p>\n<p>那些所谓的写作逻辑对编程的影响</p>\n<ul>\n<li>早期的代码是以行数算的，文章是以字数算的</li>\n<li>代码是写给人看的，文章也是写给人看的</li>\n<li>编程同写作一样，都由想法开始</li>\n<li>代码同文章一样都可以堆砌出来(ps:如本文)</li>\n<li>写出好的文章不容易，需要反复琢磨，写出好的代码不也是如此么</li>\n<li>构造一个类，好比是构造一个人物的性格特点，多一点不行，少一点又不全</li>\n<li>代码生成，和生成诗一样，没有情感，过于机械化</li>\n<li>。。。</li>\n</ul>\n<p>然而好的作家和一般的写作者，区别总是很大，对同一个问题的思考程度也是不同的。从一个作者到一个作家的过程，是一个不断写作不断积累的过程。而从一个普通的程序员到一个优秀的程序员也是如此，需要一个不断编程的过程。</p>\n<p>当我们开始真正去编程的时候，我们还会纠结于”<strong>僧推月下门</strong>“还是”<strong>僧敲月下门</strong>“的时候，当我们越来越熟练就容易决定究竟用哪一个。而这样的“推敲”，无论在写作中还是在编程中都是相似的过程。</p>\n<blockquote>\n<p>写作的过程真的就是一次探索之旅，而且它会贯穿人的一生。</p>\n</blockquote>\n<p>因此：</p>\n<blockquote>\n<p>编程只是在码字，难道不是么？</p>\n</blockquote>\n<p>真正的想法都在脑子里，而不在纸上，或者 IDE 里。</p>"},{"title":"内置索引与外置引擎","date":"2016-04-28T15:45:08.000Z","_content":"\n### 门户网站\n\n让我们先来看看门户网站。\n\n百科上说：\n\n> 门户网站（英语：Web portal，又稱入口網站，入门网站）指的是将不同来源的信息以一种整齐划一的形式整理、储存并呈现的网站\n\n从某种意义上来说门户网站更适合那些什么都不知道，从头开始探索互联网的人。换句话说，这类似于有点于类似我们在学第一门计算机语言——我们不需要去寻找什么，我们也不知道一些复杂的概念。\n\n这时候我们只能随便的看一本别人推荐的书籍，读一读别人写的笔记，开始一点点构建我们的知识体系。\n\n<!-- more --> \n\n而在我们学习第二门计算机语言的时候，我们有了更多的诀窍——我们知道怎么去搜索。在我们的知识体系里，我们知道如何去搜索，这时我们就可以通过搜索引擎来学习。\n\n百科上大致将搜索引擎分成了四部分：搜索器、索引器、检索器、用户接口。\n\n1. 搜索器：其功能是在互联网中漫游，发现和搜集信息。\n2. 索引器：其功能是理解搜索器所搜索到的信息，从中抽取出索引项，用于表示文档以及生成文档库的索引表。\n3. 检索器：其功能是根据用户的查询在索引库中快速检索文档，进行相关度评价，对将要输出的结果排序，并能按用户的查询需求合理反馈信息。\n4. 用户接口：其作用是接纳用户查询、显示查询结果、提供个性化查询项。\n\n我想这部分大家都是有点印象的就不多介绍了(即：Ctrl + C, Ctrl + V)。\n\n对于一个新手来说，使用搜索引擎的最大障碍就是——你知道问题，但是你不知道怎么搜索。这也是为什么，你会在那么多的博客、问答里，看到如何使用搜索引擎。\n\n但是这并不能解决根本性问题——你需要知道你的问题是什么。顺便，推荐一本书叫做《你的灯亮着吗？》\n\n### 内置索引与外置引擎\n\n(ps: 为了和搜索引擎对应起来，这里就将内置门户改成内置索引。)\n\n所以，再仔细回到上面的问题里。要成为一名可以完成任务的程序员，你就需要不断地构建你的门户网站。我们要学习 Web 开发，我们就需要对整个知识体系有一个好的理解。不断理解的过程中，我们就不断也添加了新的文档，构建新的索引。每遇到一个新的知识点，我们就开始重新生成新的索引。\n\n然后又会引入一个问题：\n\n> 人的大脑如同一间空空的阁楼，要有选择地把一些家具装进去。\n\n我们需要不断地整理一些新的技术，并且想方设法地忘记旧的知识。\n\n有时，不得不说笔记和博客是这样一个很好的载体。在未来的某一天，我们可以重新挖掘这些技术，识别技术的旧有缺陷，发展出新的技术——水能载舟，亦能覆舟。\n","source":"_posts/3.0.5-knowledge.md","raw":"title: 内置索引与外置引擎\ndate: 2016-4-28 23:45:08\ntags:\n---\n\n### 门户网站\n\n让我们先来看看门户网站。\n\n百科上说：\n\n> 门户网站（英语：Web portal，又稱入口網站，入门网站）指的是将不同来源的信息以一种整齐划一的形式整理、储存并呈现的网站\n\n从某种意义上来说门户网站更适合那些什么都不知道，从头开始探索互联网的人。换句话说，这类似于有点于类似我们在学第一门计算机语言——我们不需要去寻找什么，我们也不知道一些复杂的概念。\n\n这时候我们只能随便的看一本别人推荐的书籍，读一读别人写的笔记，开始一点点构建我们的知识体系。\n\n<!-- more --> \n\n而在我们学习第二门计算机语言的时候，我们有了更多的诀窍——我们知道怎么去搜索。在我们的知识体系里，我们知道如何去搜索，这时我们就可以通过搜索引擎来学习。\n\n百科上大致将搜索引擎分成了四部分：搜索器、索引器、检索器、用户接口。\n\n1. 搜索器：其功能是在互联网中漫游，发现和搜集信息。\n2. 索引器：其功能是理解搜索器所搜索到的信息，从中抽取出索引项，用于表示文档以及生成文档库的索引表。\n3. 检索器：其功能是根据用户的查询在索引库中快速检索文档，进行相关度评价，对将要输出的结果排序，并能按用户的查询需求合理反馈信息。\n4. 用户接口：其作用是接纳用户查询、显示查询结果、提供个性化查询项。\n\n我想这部分大家都是有点印象的就不多介绍了(即：Ctrl + C, Ctrl + V)。\n\n对于一个新手来说，使用搜索引擎的最大障碍就是——你知道问题，但是你不知道怎么搜索。这也是为什么，你会在那么多的博客、问答里，看到如何使用搜索引擎。\n\n但是这并不能解决根本性问题——你需要知道你的问题是什么。顺便，推荐一本书叫做《你的灯亮着吗？》\n\n### 内置索引与外置引擎\n\n(ps: 为了和搜索引擎对应起来，这里就将内置门户改成内置索引。)\n\n所以，再仔细回到上面的问题里。要成为一名可以完成任务的程序员，你就需要不断地构建你的门户网站。我们要学习 Web 开发，我们就需要对整个知识体系有一个好的理解。不断理解的过程中，我们就不断也添加了新的文档，构建新的索引。每遇到一个新的知识点，我们就开始重新生成新的索引。\n\n然后又会引入一个问题：\n\n> 人的大脑如同一间空空的阁楼，要有选择地把一些家具装进去。\n\n我们需要不断地整理一些新的技术，并且想方设法地忘记旧的知识。\n\n有时，不得不说笔记和博客是这样一个很好的载体。在未来的某一天，我们可以重新挖掘这些技术，识别技术的旧有缺陷，发展出新的技术——水能载舟，亦能覆舟。\n","slug":"3.0.5-knowledge","published":1,"updated":"2016-04-28T05:32:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuf7mpf5000ntsife0jn931i","content":"<h3 id=\"门户网站\"><a href=\"#门户网站\" class=\"headerlink\" title=\"门户网站\"></a>门户网站</h3><p>让我们先来看看门户网站。</p>\n<p>百科上说：</p>\n<blockquote>\n<p>门户网站（英语：Web portal，又稱入口網站，入门网站）指的是将不同来源的信息以一种整齐划一的形式整理、储存并呈现的网站</p>\n</blockquote>\n<p>从某种意义上来说门户网站更适合那些什么都不知道，从头开始探索互联网的人。换句话说，这类似于有点于类似我们在学第一门计算机语言——我们不需要去寻找什么，我们也不知道一些复杂的概念。</p>\n<p>这时候我们只能随便的看一本别人推荐的书籍，读一读别人写的笔记，开始一点点构建我们的知识体系。</p>\n<a id=\"more\"></a> \n<p>而在我们学习第二门计算机语言的时候，我们有了更多的诀窍——我们知道怎么去搜索。在我们的知识体系里，我们知道如何去搜索，这时我们就可以通过搜索引擎来学习。</p>\n<p>百科上大致将搜索引擎分成了四部分：搜索器、索引器、检索器、用户接口。</p>\n<ol>\n<li>搜索器：其功能是在互联网中漫游，发现和搜集信息。</li>\n<li>索引器：其功能是理解搜索器所搜索到的信息，从中抽取出索引项，用于表示文档以及生成文档库的索引表。</li>\n<li>检索器：其功能是根据用户的查询在索引库中快速检索文档，进行相关度评价，对将要输出的结果排序，并能按用户的查询需求合理反馈信息。</li>\n<li>用户接口：其作用是接纳用户查询、显示查询结果、提供个性化查询项。</li>\n</ol>\n<p>我想这部分大家都是有点印象的就不多介绍了(即：Ctrl + C, Ctrl + V)。</p>\n<p>对于一个新手来说，使用搜索引擎的最大障碍就是——你知道问题，但是你不知道怎么搜索。这也是为什么，你会在那么多的博客、问答里，看到如何使用搜索引擎。</p>\n<p>但是这并不能解决根本性问题——你需要知道你的问题是什么。顺便，推荐一本书叫做《你的灯亮着吗？》</p>\n<h3 id=\"内置索引与外置引擎\"><a href=\"#内置索引与外置引擎\" class=\"headerlink\" title=\"内置索引与外置引擎\"></a>内置索引与外置引擎</h3><p>(ps: 为了和搜索引擎对应起来，这里就将内置门户改成内置索引。)</p>\n<p>所以，再仔细回到上面的问题里。要成为一名可以完成任务的程序员，你就需要不断地构建你的门户网站。我们要学习 Web 开发，我们就需要对整个知识体系有一个好的理解。不断理解的过程中，我们就不断也添加了新的文档，构建新的索引。每遇到一个新的知识点，我们就开始重新生成新的索引。</p>\n<p>然后又会引入一个问题：</p>\n<blockquote>\n<p>人的大脑如同一间空空的阁楼，要有选择地把一些家具装进去。</p>\n</blockquote>\n<p>我们需要不断地整理一些新的技术，并且想方设法地忘记旧的知识。</p>\n<p>有时，不得不说笔记和博客是这样一个很好的载体。在未来的某一天，我们可以重新挖掘这些技术，识别技术的旧有缺陷，发展出新的技术——水能载舟，亦能覆舟。</p>\n","excerpt":"<h3 id=\"门户网站\"><a href=\"#门户网站\" class=\"headerlink\" title=\"门户网站\"></a>门户网站</h3><p>让我们先来看看门户网站。</p>\n<p>百科上说：</p>\n<blockquote>\n<p>门户网站（英语：Web portal，又稱入口網站，入门网站）指的是将不同来源的信息以一种整齐划一的形式整理、储存并呈现的网站</p>\n</blockquote>\n<p>从某种意义上来说门户网站更适合那些什么都不知道，从头开始探索互联网的人。换句话说，这类似于有点于类似我们在学第一门计算机语言——我们不需要去寻找什么，我们也不知道一些复杂的概念。</p>\n<p>这时候我们只能随便的看一本别人推荐的书籍，读一读别人写的笔记，开始一点点构建我们的知识体系。</p>","more":"<p>而在我们学习第二门计算机语言的时候，我们有了更多的诀窍——我们知道怎么去搜索。在我们的知识体系里，我们知道如何去搜索，这时我们就可以通过搜索引擎来学习。</p>\n<p>百科上大致将搜索引擎分成了四部分：搜索器、索引器、检索器、用户接口。</p>\n<ol>\n<li>搜索器：其功能是在互联网中漫游，发现和搜集信息。</li>\n<li>索引器：其功能是理解搜索器所搜索到的信息，从中抽取出索引项，用于表示文档以及生成文档库的索引表。</li>\n<li>检索器：其功能是根据用户的查询在索引库中快速检索文档，进行相关度评价，对将要输出的结果排序，并能按用户的查询需求合理反馈信息。</li>\n<li>用户接口：其作用是接纳用户查询、显示查询结果、提供个性化查询项。</li>\n</ol>\n<p>我想这部分大家都是有点印象的就不多介绍了(即：Ctrl + C, Ctrl + V)。</p>\n<p>对于一个新手来说，使用搜索引擎的最大障碍就是——你知道问题，但是你不知道怎么搜索。这也是为什么，你会在那么多的博客、问答里，看到如何使用搜索引擎。</p>\n<p>但是这并不能解决根本性问题——你需要知道你的问题是什么。顺便，推荐一本书叫做《你的灯亮着吗？》</p>\n<h3 id=\"内置索引与外置引擎\"><a href=\"#内置索引与外置引擎\" class=\"headerlink\" title=\"内置索引与外置引擎\"></a>内置索引与外置引擎</h3><p>(ps: 为了和搜索引擎对应起来，这里就将内置门户改成内置索引。)</p>\n<p>所以，再仔细回到上面的问题里。要成为一名可以完成任务的程序员，你就需要不断地构建你的门户网站。我们要学习 Web 开发，我们就需要对整个知识体系有一个好的理解。不断理解的过程中，我们就不断也添加了新的文档，构建新的索引。每遇到一个新的知识点，我们就开始重新生成新的索引。</p>\n<p>然后又会引入一个问题：</p>\n<blockquote>\n<p>人的大脑如同一间空空的阁楼，要有选择地把一些家具装进去。</p>\n</blockquote>\n<p>我们需要不断地整理一些新的技术，并且想方设法地忘记旧的知识。</p>\n<p>有时，不得不说笔记和博客是这样一个很好的载体。在未来的某一天，我们可以重新挖掘这些技术，识别技术的旧有缺陷，发展出新的技术——水能载舟，亦能覆舟。</p>"},{"title":"如何编写测试","date":"2016-04-29T13:45:08.000Z","_content":"\n写测试相比于写代码来说算是一种简单的事。多数时候，我们并不需要考虑复杂的逻辑。我们只需要按照我们的代码逻辑，对代码的行为进行覆盖。\n\n需要注意的是——在不同的团队、工作流里，测试可能是会有不同的工作流程：\n\n - 开发人员写单元测试、集成测试等等\n - 测试团队通过界面来做黑盒测试\n - 测试人员手动测试来测试功能\n\n在允许的情况下，测试应该由开发人员来编写，并且是由底层开始写测试。为了更好地去测试代码，我们需要了解测试金字塔。\n\n<!-- more --> \n\n### 测试金字塔\n\n测试金字塔是由 Mike Cohn 提出的，主要观点是：底层单元测试应多于依赖 GUI 的高层端到端测试。其结构图如下所示：\n\n![测试金字塔](http://growth.phodal.com/assets/article/chapter3/test-pyramid.png)\n\n从结构上来说，上面的金字塔可以分成三部分：\n\n1. 单元测试。\n2. 服务测试\n3. UI 测试\n\n从图中我们可以发现：单元测试应该要是最多的，也是最底层的。其次才是服务测试，最后才是 UI 测试。大量的单元测试可以保证我们的基础函数是正常、正确工作的。而服务测试则是一门很有学问的测试，不仅仅只在测试我们自己提供的服务，也会测试我们依赖第三方提供的服务。在测试第三方提供的服务时，这就会变成一件有意思的事了。除此还有对功能和 UI 的测试，写这些测试可以减轻测试人员的工作量——毕竟这些工作量转向了开发人员来完成。\n\n#### 单元测试\n\n单元测试是针对程序模块（软件设计的最小单位）来进行正确性检验的测试工作。它是应用的最小可测试部件。举个例子来说，下面是一个JavaScript 的函数，用于判断一个变量是否是一个对象：\n\n\n```\nvar isObject = function (obj) {\n    var type = typeof obj;\n    return type === 'function' || type === 'object' && !!obj;\n};\n```\n\n\n这是一个很简单的功能，对应的我们会有一个简单的 Jasmine 测试来保证这个函数是正常工作的：\n\n\n\n```javascript\nit(\"should be a object\", function () {\n    expect(l.isObject([])).toEqual(true);\n    expect(l.isObject([{}])).toEqual(true);\n});\n```\n\n\n虽然这个测试看上去很简单，但是大量的基本的单元测试可以保证我们调用的函数都是可以正常工作的。这也相当于是我们在建设金字塔时用的石块——如果我们的石块都是经常测试的，那么我们就不怕金字塔因为石块的损坏而坍塌。\n\n当单元测试达到一定的覆盖率，我们的代码就会变得更健壮。因为我们都需要保证我们的代码都是可测的，也意味着我们代码间的耦合度会降低。我们需要去考虑代码的长度，越长的代码在测试的时间会变得越困难。这也就是为什么 TDD 会促使我们写出短的代码。如果我们的代码都是有测试的，单元测试可以帮助我们在未来重构我们的代码。\n\n并且在很多没有文档或者文档不完整的开源项目中，了解这个项目某个函数的用法就是查看他的测试用例。测试用例（Test Case）是为某个特殊目标而编制的一组测试输入、执行条件以及预期结果，以便测试某个程序路径或核实是否满足某个特定需求。这些测试用例可以让我们直观地理解程序程序的 API。\n\n#### 服务测试\n\n服务测试顾名思义便是对服务进行测试，而服务可以是有不同的类型，不同层次的测试。如第三方的 API 服务、我们程序提供的服务，虽然他们他应该在这一个层级上进行测试，但是对他们的测试会稍有不同。\n\n对于第三方的提供的 API 服务或者其他类似的服务，在这一个层级的测试，我们都不会真实地去测试他们能不能工作——这些依赖性的服务只会在功能测试上进行测试。在这里的测试，我们只会保证我们的功能代码是可以正常工作的，所以我们会使用一些虚假的 API 测试数据来进行测试。这一类提供 API 的 Mock Server 可以模拟被测系统外部依赖模块行为的通用服务。我们只要保证我们的功能代码是正常工作的，那么依赖他的服务也会是正常工作的。\n\n![Mock Server](http://growth.phodal.com/assets/article/chapter3/mock-server.png)\n\n而对于我们提供的服务来说，这一类的服务不一定是 API 的服务，还有可能是多个函数组成的功能性服务。当我们在测试这些服务的时候，实际上是在测试这个函数结合在一起是不是正常的。\n\n一个服务可能依赖于多个函数，因而我们会发现服务测试的数量是少于单元测试的。\n\n#### UI 测试\n\n在传统的软件开发中，UI 测试多数是由人手动来完成的。而在稍后的章节里，你将会看到这些工作是可以由机器自己来完成的——当然，前提是我们要编写这些自动化测试的代码。需要注意的是 UI 测试并不能完全替代手工的工作，一些测试还是应该由人来进行测试——如对 UI 的布局，在现阶段机器还没有审美意识呢。\n\n自动化 UI 测试是一个缓慢的过程，在这个过程里我们需要做这么几件事：\n\n1. 运行起我们的网站——这可能需要几分钟。\n2. 添加一些 Mock 的数据，以使网站看上去正常——这也需要几分钟到几十分钟的时间。\n3. 开始运行测试——在一些依赖于网络的测试中，运行完一个测试可能会需要几分钟。尽管可以并行运行测试，但是一个测试几分钟算到最后就会累积成很长的时间。\n\n所以，你会发现这是一个很长的测试过程。尽可能地将这个层级的测试往下层级移，就会尽可能的节省时间。一个 UI 测试需要几分钟，但是一个单元测试可能不到1秒。这就意味着，这样的测试下移可以节省上百个数量级的时间。\n\n### 如何测试\n\n现在问题来了，我们应该怎么去写测试？换句话来说，我要测什么？这是一个很难的问题，这足够可以以一本书的幅度来说明这个问题。这个问题也需要依赖于不同的实践，不同的时候我们可能对问题的看法都有不同。\n\n编写测试的过程大致可以分成下面的几个步骤：\n\n1. 了解测试目的(Why)？即我们需要测什么，我们是为了什么而编写的测试。\n2. 我们要测哪些内容(What)？即测试点，我们即要从功能点上出发来寻找需要我们测试的点，在不同的条件下这个测试点是不一样的。\n3. 我们要如何进行测试(How)？我们要使用怎么样的方法进行测试？\n\n#### 测试目的\n\n我们在上面提到过的测试金字塔，也表明了我们在每个层级要测试的目的是不一样的。\n\n在单元测试这一层级，因为我们所测试的是每一个函数，这些函数没有办法构成完成的功能。这时候我们就只是用于简简单单的测试函数本身的功能，没有太多的业务需求。\n\n而对于服务这一层级，我们所要测试的就是一个完整的功能。对于以 API 为主的项目来说，实际上就是在测返回结果是否是正确的。\n\n最后 UI 这一层级，我们所需要测试的就是一个完整的功能。用户操作的时候应该是怎样的，那么我们就应该模仿用户的行为来测试。这是一个完整的业务需求，也可以称之为验证测试。\n\n#### 测试点\n\n在了解完我们要测试的目的之后，我们要测试的点也变得很清晰。即在单元测试测试我们的函数的功能，在我们的服务测试我们的服务，在我们的 UI测试测试业务。\n\n而这些都理想的情况，当系统由于业务的原因不得不耦合的时候。究竟是单元测试还是功能测试，这是一个特别值得思考的问题。如果一个功能即可以在单元测试里测，又可以在服务测试里测，那么我们要测试哪一个？或者说我们应该把两个都测一遍？而如果是花费时间更长的 UI 测试呢？这样做是不是会变得不划算。\n\n#### 如何写测试代码\n\n先让来们来简单地看一下测试用例，然后再让我们看看一般情况下我们是如何写测试代码的。下面的代码是一个用Python写的测试用例：\n\n\n```python\nclass HomepageTestCase(LiveServerTestCase):\n    def setUp(self):\n        self.selenium = webdriver.Firefox()\n        self.selenium.maximize_window()\n        super(HomepageTestCase, self).setUp()\n\n    def tearDown(self):\n        self.selenium.quit()\n        super(HomepageTestCase, self).tearDown()\n\n    def test_can_visit_homepage(self):\n        self.selenium.get(\n            '%s%s' % (self.live_server_url,  \"/\")\n        )\n\n        self.assertIn(\"Welcome to my blog\", self.selenium.title)\n```\n\n\n在上面的代码里主要有三个方法，setUp()、tearDown()和 test_can_visit_homepage()。在这三个方法中起主要作用的是 test_can_visit_homepage()方法。而 setUp() 和 tearDown() 是特殊的方法，分别在测试方法开始之前运行和之后运行。同时，在这里我们也用这两个方法来打开和关闭浏览器。\n\n而在我们的测试方法 test_can_visit_homepage() 里，主要有两个步骤：\n\n1. 访问首页\n2. 验证首页的标题是“Welcome to my blog”\n\n大部分的测试代码也是以如何的流程来运行着。有一点需要注意的是：一般来说函数名就表示了这个测试所要做测试的事情，如这里就是测试可以访问首页。\n\n如上所示的测试过程称为“四阶段测试”，即这个过程分为如下的四个阶段：\n\n1. **Setup**。在这个阶段主要是做一些准备工作，如数据准备和初始化等等，在上面的 setup 阶段就是用 selenium 启动了一个 Firefox 浏览器，然后把窗口最大化了。\n2. **Execute**。在执行阶段就是做好验证结果前的工作，如我们在测试注册的时候，那么这里就是填写数据，并点击提交按钮。在上面的代码里，我们只是打开了首页。\n3. **Verify**。在验证阶段，我们所要做的就是验证返回的结果是否和我们预期的一致。在这里我们还是使用和单元测试一样的 assert 来做断言，通过判断这个页面的标题是\"Welcome to my blog\"，来说明我们现在就是在首页里。\n4. **Tear Down**。就是一些收尾工作啦 ，比如关闭浏览器、清除测试数据等等。\n\n#### Tips\n\n需要注意的几点是：\n\n1. 从运行测试速度上来看，三种测试的运行速度是呈倒金字塔结构。即，单元测试跑得最快，开发速度也越快。随后是服务测试，最后是 UI 测试。\n2. 即使现在的 UI 测试跑得非常快，但是随着时间的推移，UI 测试会越来越多。这也意味着测试来跑得越来越久，那么人们就开始不想测试了。在我们之前的项目里，运行完所有的测试大概接近一个小时，我们开始在会议会争论这些测试的必要性，也在想方设法减少这些测试。\n3. 如果一个测试可以在最底层写，那么就不要在他的上一层写了，因为他的运行速度更快。\n\n参考书籍:\n\n - 《优质代码——软件测试的原则、实践与模式》\n - 《Python Web 开发： 测试驱动开发方法》\n","source":"_posts/3.1.0-how-to-test.md","raw":"title: 如何编写测试\ndate: 2016-4-29 21:45:08\ntags:\n---\n\n写测试相比于写代码来说算是一种简单的事。多数时候，我们并不需要考虑复杂的逻辑。我们只需要按照我们的代码逻辑，对代码的行为进行覆盖。\n\n需要注意的是——在不同的团队、工作流里，测试可能是会有不同的工作流程：\n\n - 开发人员写单元测试、集成测试等等\n - 测试团队通过界面来做黑盒测试\n - 测试人员手动测试来测试功能\n\n在允许的情况下，测试应该由开发人员来编写，并且是由底层开始写测试。为了更好地去测试代码，我们需要了解测试金字塔。\n\n<!-- more --> \n\n### 测试金字塔\n\n测试金字塔是由 Mike Cohn 提出的，主要观点是：底层单元测试应多于依赖 GUI 的高层端到端测试。其结构图如下所示：\n\n![测试金字塔](http://growth.phodal.com/assets/article/chapter3/test-pyramid.png)\n\n从结构上来说，上面的金字塔可以分成三部分：\n\n1. 单元测试。\n2. 服务测试\n3. UI 测试\n\n从图中我们可以发现：单元测试应该要是最多的，也是最底层的。其次才是服务测试，最后才是 UI 测试。大量的单元测试可以保证我们的基础函数是正常、正确工作的。而服务测试则是一门很有学问的测试，不仅仅只在测试我们自己提供的服务，也会测试我们依赖第三方提供的服务。在测试第三方提供的服务时，这就会变成一件有意思的事了。除此还有对功能和 UI 的测试，写这些测试可以减轻测试人员的工作量——毕竟这些工作量转向了开发人员来完成。\n\n#### 单元测试\n\n单元测试是针对程序模块（软件设计的最小单位）来进行正确性检验的测试工作。它是应用的最小可测试部件。举个例子来说，下面是一个JavaScript 的函数，用于判断一个变量是否是一个对象：\n\n\n```\nvar isObject = function (obj) {\n    var type = typeof obj;\n    return type === 'function' || type === 'object' && !!obj;\n};\n```\n\n\n这是一个很简单的功能，对应的我们会有一个简单的 Jasmine 测试来保证这个函数是正常工作的：\n\n\n\n```javascript\nit(\"should be a object\", function () {\n    expect(l.isObject([])).toEqual(true);\n    expect(l.isObject([{}])).toEqual(true);\n});\n```\n\n\n虽然这个测试看上去很简单，但是大量的基本的单元测试可以保证我们调用的函数都是可以正常工作的。这也相当于是我们在建设金字塔时用的石块——如果我们的石块都是经常测试的，那么我们就不怕金字塔因为石块的损坏而坍塌。\n\n当单元测试达到一定的覆盖率，我们的代码就会变得更健壮。因为我们都需要保证我们的代码都是可测的，也意味着我们代码间的耦合度会降低。我们需要去考虑代码的长度，越长的代码在测试的时间会变得越困难。这也就是为什么 TDD 会促使我们写出短的代码。如果我们的代码都是有测试的，单元测试可以帮助我们在未来重构我们的代码。\n\n并且在很多没有文档或者文档不完整的开源项目中，了解这个项目某个函数的用法就是查看他的测试用例。测试用例（Test Case）是为某个特殊目标而编制的一组测试输入、执行条件以及预期结果，以便测试某个程序路径或核实是否满足某个特定需求。这些测试用例可以让我们直观地理解程序程序的 API。\n\n#### 服务测试\n\n服务测试顾名思义便是对服务进行测试，而服务可以是有不同的类型，不同层次的测试。如第三方的 API 服务、我们程序提供的服务，虽然他们他应该在这一个层级上进行测试，但是对他们的测试会稍有不同。\n\n对于第三方的提供的 API 服务或者其他类似的服务，在这一个层级的测试，我们都不会真实地去测试他们能不能工作——这些依赖性的服务只会在功能测试上进行测试。在这里的测试，我们只会保证我们的功能代码是可以正常工作的，所以我们会使用一些虚假的 API 测试数据来进行测试。这一类提供 API 的 Mock Server 可以模拟被测系统外部依赖模块行为的通用服务。我们只要保证我们的功能代码是正常工作的，那么依赖他的服务也会是正常工作的。\n\n![Mock Server](http://growth.phodal.com/assets/article/chapter3/mock-server.png)\n\n而对于我们提供的服务来说，这一类的服务不一定是 API 的服务，还有可能是多个函数组成的功能性服务。当我们在测试这些服务的时候，实际上是在测试这个函数结合在一起是不是正常的。\n\n一个服务可能依赖于多个函数，因而我们会发现服务测试的数量是少于单元测试的。\n\n#### UI 测试\n\n在传统的软件开发中，UI 测试多数是由人手动来完成的。而在稍后的章节里，你将会看到这些工作是可以由机器自己来完成的——当然，前提是我们要编写这些自动化测试的代码。需要注意的是 UI 测试并不能完全替代手工的工作，一些测试还是应该由人来进行测试——如对 UI 的布局，在现阶段机器还没有审美意识呢。\n\n自动化 UI 测试是一个缓慢的过程，在这个过程里我们需要做这么几件事：\n\n1. 运行起我们的网站——这可能需要几分钟。\n2. 添加一些 Mock 的数据，以使网站看上去正常——这也需要几分钟到几十分钟的时间。\n3. 开始运行测试——在一些依赖于网络的测试中，运行完一个测试可能会需要几分钟。尽管可以并行运行测试，但是一个测试几分钟算到最后就会累积成很长的时间。\n\n所以，你会发现这是一个很长的测试过程。尽可能地将这个层级的测试往下层级移，就会尽可能的节省时间。一个 UI 测试需要几分钟，但是一个单元测试可能不到1秒。这就意味着，这样的测试下移可以节省上百个数量级的时间。\n\n### 如何测试\n\n现在问题来了，我们应该怎么去写测试？换句话来说，我要测什么？这是一个很难的问题，这足够可以以一本书的幅度来说明这个问题。这个问题也需要依赖于不同的实践，不同的时候我们可能对问题的看法都有不同。\n\n编写测试的过程大致可以分成下面的几个步骤：\n\n1. 了解测试目的(Why)？即我们需要测什么，我们是为了什么而编写的测试。\n2. 我们要测哪些内容(What)？即测试点，我们即要从功能点上出发来寻找需要我们测试的点，在不同的条件下这个测试点是不一样的。\n3. 我们要如何进行测试(How)？我们要使用怎么样的方法进行测试？\n\n#### 测试目的\n\n我们在上面提到过的测试金字塔，也表明了我们在每个层级要测试的目的是不一样的。\n\n在单元测试这一层级，因为我们所测试的是每一个函数，这些函数没有办法构成完成的功能。这时候我们就只是用于简简单单的测试函数本身的功能，没有太多的业务需求。\n\n而对于服务这一层级，我们所要测试的就是一个完整的功能。对于以 API 为主的项目来说，实际上就是在测返回结果是否是正确的。\n\n最后 UI 这一层级，我们所需要测试的就是一个完整的功能。用户操作的时候应该是怎样的，那么我们就应该模仿用户的行为来测试。这是一个完整的业务需求，也可以称之为验证测试。\n\n#### 测试点\n\n在了解完我们要测试的目的之后，我们要测试的点也变得很清晰。即在单元测试测试我们的函数的功能，在我们的服务测试我们的服务，在我们的 UI测试测试业务。\n\n而这些都理想的情况，当系统由于业务的原因不得不耦合的时候。究竟是单元测试还是功能测试，这是一个特别值得思考的问题。如果一个功能即可以在单元测试里测，又可以在服务测试里测，那么我们要测试哪一个？或者说我们应该把两个都测一遍？而如果是花费时间更长的 UI 测试呢？这样做是不是会变得不划算。\n\n#### 如何写测试代码\n\n先让来们来简单地看一下测试用例，然后再让我们看看一般情况下我们是如何写测试代码的。下面的代码是一个用Python写的测试用例：\n\n\n```python\nclass HomepageTestCase(LiveServerTestCase):\n    def setUp(self):\n        self.selenium = webdriver.Firefox()\n        self.selenium.maximize_window()\n        super(HomepageTestCase, self).setUp()\n\n    def tearDown(self):\n        self.selenium.quit()\n        super(HomepageTestCase, self).tearDown()\n\n    def test_can_visit_homepage(self):\n        self.selenium.get(\n            '%s%s' % (self.live_server_url,  \"/\")\n        )\n\n        self.assertIn(\"Welcome to my blog\", self.selenium.title)\n```\n\n\n在上面的代码里主要有三个方法，setUp()、tearDown()和 test_can_visit_homepage()。在这三个方法中起主要作用的是 test_can_visit_homepage()方法。而 setUp() 和 tearDown() 是特殊的方法，分别在测试方法开始之前运行和之后运行。同时，在这里我们也用这两个方法来打开和关闭浏览器。\n\n而在我们的测试方法 test_can_visit_homepage() 里，主要有两个步骤：\n\n1. 访问首页\n2. 验证首页的标题是“Welcome to my blog”\n\n大部分的测试代码也是以如何的流程来运行着。有一点需要注意的是：一般来说函数名就表示了这个测试所要做测试的事情，如这里就是测试可以访问首页。\n\n如上所示的测试过程称为“四阶段测试”，即这个过程分为如下的四个阶段：\n\n1. **Setup**。在这个阶段主要是做一些准备工作，如数据准备和初始化等等，在上面的 setup 阶段就是用 selenium 启动了一个 Firefox 浏览器，然后把窗口最大化了。\n2. **Execute**。在执行阶段就是做好验证结果前的工作，如我们在测试注册的时候，那么这里就是填写数据，并点击提交按钮。在上面的代码里，我们只是打开了首页。\n3. **Verify**。在验证阶段，我们所要做的就是验证返回的结果是否和我们预期的一致。在这里我们还是使用和单元测试一样的 assert 来做断言，通过判断这个页面的标题是\"Welcome to my blog\"，来说明我们现在就是在首页里。\n4. **Tear Down**。就是一些收尾工作啦 ，比如关闭浏览器、清除测试数据等等。\n\n#### Tips\n\n需要注意的几点是：\n\n1. 从运行测试速度上来看，三种测试的运行速度是呈倒金字塔结构。即，单元测试跑得最快，开发速度也越快。随后是服务测试，最后是 UI 测试。\n2. 即使现在的 UI 测试跑得非常快，但是随着时间的推移，UI 测试会越来越多。这也意味着测试来跑得越来越久，那么人们就开始不想测试了。在我们之前的项目里，运行完所有的测试大概接近一个小时，我们开始在会议会争论这些测试的必要性，也在想方设法减少这些测试。\n3. 如果一个测试可以在最底层写，那么就不要在他的上一层写了，因为他的运行速度更快。\n\n参考书籍:\n\n - 《优质代码——软件测试的原则、实践与模式》\n - 《Python Web 开发： 测试驱动开发方法》\n","slug":"3.1.0-how-to-test","published":1,"updated":"2016-04-29T05:14:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuf7mpf7000otsifp7049h5l","content":"<p>写测试相比于写代码来说算是一种简单的事。多数时候，我们并不需要考虑复杂的逻辑。我们只需要按照我们的代码逻辑，对代码的行为进行覆盖。</p>\n<p>需要注意的是——在不同的团队、工作流里，测试可能是会有不同的工作流程：</p>\n<ul>\n<li>开发人员写单元测试、集成测试等等</li>\n<li>测试团队通过界面来做黑盒测试</li>\n<li>测试人员手动测试来测试功能</li>\n</ul>\n<p>在允许的情况下，测试应该由开发人员来编写，并且是由底层开始写测试。为了更好地去测试代码，我们需要了解测试金字塔。</p>\n<a id=\"more\"></a> \n<h3 id=\"测试金字塔\"><a href=\"#测试金字塔\" class=\"headerlink\" title=\"测试金字塔\"></a>测试金字塔</h3><p>测试金字塔是由 Mike Cohn 提出的，主要观点是：底层单元测试应多于依赖 GUI 的高层端到端测试。其结构图如下所示：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter3/test-pyramid.png\" alt=\"测试金字塔\"></p>\n<p>从结构上来说，上面的金字塔可以分成三部分：</p>\n<ol>\n<li>单元测试。</li>\n<li>服务测试</li>\n<li>UI 测试</li>\n</ol>\n<p>从图中我们可以发现：单元测试应该要是最多的，也是最底层的。其次才是服务测试，最后才是 UI 测试。大量的单元测试可以保证我们的基础函数是正常、正确工作的。而服务测试则是一门很有学问的测试，不仅仅只在测试我们自己提供的服务，也会测试我们依赖第三方提供的服务。在测试第三方提供的服务时，这就会变成一件有意思的事了。除此还有对功能和 UI 的测试，写这些测试可以减轻测试人员的工作量——毕竟这些工作量转向了开发人员来完成。</p>\n<h4 id=\"单元测试\"><a href=\"#单元测试\" class=\"headerlink\" title=\"单元测试\"></a>单元测试</h4><p>单元测试是针对程序模块（软件设计的最小单位）来进行正确性检验的测试工作。它是应用的最小可测试部件。举个例子来说，下面是一个JavaScript 的函数，用于判断一个变量是否是一个对象：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> isObject = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> <span class=\"keyword\">type</span> = <span class=\"keyword\">typeof</span> obj;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">type</span> === <span class=\"string\">'function'</span> || <span class=\"keyword\">type</span> === <span class=\"string\">'object'</span> &amp;&amp; !!obj;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>这是一个很简单的功能，对应的我们会有一个简单的 Jasmine 测试来保证这个函数是正常工作的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">it(<span class=\"string\">\"should be a object\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    expect(l.isObject([])).toEqual(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    expect(l.isObject([&#123;&#125;])).toEqual(<span class=\"literal\">true</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>虽然这个测试看上去很简单，但是大量的基本的单元测试可以保证我们调用的函数都是可以正常工作的。这也相当于是我们在建设金字塔时用的石块——如果我们的石块都是经常测试的，那么我们就不怕金字塔因为石块的损坏而坍塌。</p>\n<p>当单元测试达到一定的覆盖率，我们的代码就会变得更健壮。因为我们都需要保证我们的代码都是可测的，也意味着我们代码间的耦合度会降低。我们需要去考虑代码的长度，越长的代码在测试的时间会变得越困难。这也就是为什么 TDD 会促使我们写出短的代码。如果我们的代码都是有测试的，单元测试可以帮助我们在未来重构我们的代码。</p>\n<p>并且在很多没有文档或者文档不完整的开源项目中，了解这个项目某个函数的用法就是查看他的测试用例。测试用例（Test Case）是为某个特殊目标而编制的一组测试输入、执行条件以及预期结果，以便测试某个程序路径或核实是否满足某个特定需求。这些测试用例可以让我们直观地理解程序程序的 API。</p>\n<h4 id=\"服务测试\"><a href=\"#服务测试\" class=\"headerlink\" title=\"服务测试\"></a>服务测试</h4><p>服务测试顾名思义便是对服务进行测试，而服务可以是有不同的类型，不同层次的测试。如第三方的 API 服务、我们程序提供的服务，虽然他们他应该在这一个层级上进行测试，但是对他们的测试会稍有不同。</p>\n<p>对于第三方的提供的 API 服务或者其他类似的服务，在这一个层级的测试，我们都不会真实地去测试他们能不能工作——这些依赖性的服务只会在功能测试上进行测试。在这里的测试，我们只会保证我们的功能代码是可以正常工作的，所以我们会使用一些虚假的 API 测试数据来进行测试。这一类提供 API 的 Mock Server 可以模拟被测系统外部依赖模块行为的通用服务。我们只要保证我们的功能代码是正常工作的，那么依赖他的服务也会是正常工作的。</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter3/mock-server.png\" alt=\"Mock Server\"></p>\n<p>而对于我们提供的服务来说，这一类的服务不一定是 API 的服务，还有可能是多个函数组成的功能性服务。当我们在测试这些服务的时候，实际上是在测试这个函数结合在一起是不是正常的。</p>\n<p>一个服务可能依赖于多个函数，因而我们会发现服务测试的数量是少于单元测试的。</p>\n<h4 id=\"UI-测试\"><a href=\"#UI-测试\" class=\"headerlink\" title=\"UI 测试\"></a>UI 测试</h4><p>在传统的软件开发中，UI 测试多数是由人手动来完成的。而在稍后的章节里，你将会看到这些工作是可以由机器自己来完成的——当然，前提是我们要编写这些自动化测试的代码。需要注意的是 UI 测试并不能完全替代手工的工作，一些测试还是应该由人来进行测试——如对 UI 的布局，在现阶段机器还没有审美意识呢。</p>\n<p>自动化 UI 测试是一个缓慢的过程，在这个过程里我们需要做这么几件事：</p>\n<ol>\n<li>运行起我们的网站——这可能需要几分钟。</li>\n<li>添加一些 Mock 的数据，以使网站看上去正常——这也需要几分钟到几十分钟的时间。</li>\n<li>开始运行测试——在一些依赖于网络的测试中，运行完一个测试可能会需要几分钟。尽管可以并行运行测试，但是一个测试几分钟算到最后就会累积成很长的时间。</li>\n</ol>\n<p>所以，你会发现这是一个很长的测试过程。尽可能地将这个层级的测试往下层级移，就会尽可能的节省时间。一个 UI 测试需要几分钟，但是一个单元测试可能不到1秒。这就意味着，这样的测试下移可以节省上百个数量级的时间。</p>\n<h3 id=\"如何测试\"><a href=\"#如何测试\" class=\"headerlink\" title=\"如何测试\"></a>如何测试</h3><p>现在问题来了，我们应该怎么去写测试？换句话来说，我要测什么？这是一个很难的问题，这足够可以以一本书的幅度来说明这个问题。这个问题也需要依赖于不同的实践，不同的时候我们可能对问题的看法都有不同。</p>\n<p>编写测试的过程大致可以分成下面的几个步骤：</p>\n<ol>\n<li>了解测试目的(Why)？即我们需要测什么，我们是为了什么而编写的测试。</li>\n<li>我们要测哪些内容(What)？即测试点，我们即要从功能点上出发来寻找需要我们测试的点，在不同的条件下这个测试点是不一样的。</li>\n<li>我们要如何进行测试(How)？我们要使用怎么样的方法进行测试？</li>\n</ol>\n<h4 id=\"测试目的\"><a href=\"#测试目的\" class=\"headerlink\" title=\"测试目的\"></a>测试目的</h4><p>我们在上面提到过的测试金字塔，也表明了我们在每个层级要测试的目的是不一样的。</p>\n<p>在单元测试这一层级，因为我们所测试的是每一个函数，这些函数没有办法构成完成的功能。这时候我们就只是用于简简单单的测试函数本身的功能，没有太多的业务需求。</p>\n<p>而对于服务这一层级，我们所要测试的就是一个完整的功能。对于以 API 为主的项目来说，实际上就是在测返回结果是否是正确的。</p>\n<p>最后 UI 这一层级，我们所需要测试的就是一个完整的功能。用户操作的时候应该是怎样的，那么我们就应该模仿用户的行为来测试。这是一个完整的业务需求，也可以称之为验证测试。</p>\n<h4 id=\"测试点\"><a href=\"#测试点\" class=\"headerlink\" title=\"测试点\"></a>测试点</h4><p>在了解完我们要测试的目的之后，我们要测试的点也变得很清晰。即在单元测试测试我们的函数的功能，在我们的服务测试我们的服务，在我们的 UI测试测试业务。</p>\n<p>而这些都理想的情况，当系统由于业务的原因不得不耦合的时候。究竟是单元测试还是功能测试，这是一个特别值得思考的问题。如果一个功能即可以在单元测试里测，又可以在服务测试里测，那么我们要测试哪一个？或者说我们应该把两个都测一遍？而如果是花费时间更长的 UI 测试呢？这样做是不是会变得不划算。</p>\n<h4 id=\"如何写测试代码\"><a href=\"#如何写测试代码\" class=\"headerlink\" title=\"如何写测试代码\"></a>如何写测试代码</h4><p>先让来们来简单地看一下测试用例，然后再让我们看看一般情况下我们是如何写测试代码的。下面的代码是一个用Python写的测试用例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HomepageTestCase</span><span class=\"params\">(LiveServerTestCase)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">setUp</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.selenium = webdriver.Firefox()</span><br><span class=\"line\">        self.selenium.maximize_window()</span><br><span class=\"line\">        super(HomepageTestCase, self).setUp()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">tearDown</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.selenium.quit()</span><br><span class=\"line\">        super(HomepageTestCase, self).tearDown()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_can_visit_homepage</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.selenium.get(</span><br><span class=\"line\">            <span class=\"string\">'%s%s'</span> % (self.live_server_url,  <span class=\"string\">\"/\"</span>)</span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">        self.assertIn(<span class=\"string\">\"Welcome to my blog\"</span>, self.selenium.title)</span><br></pre></td></tr></table></figure>\n<p>在上面的代码里主要有三个方法，setUp()、tearDown()和 test_can_visit_homepage()。在这三个方法中起主要作用的是 test_can_visit_homepage()方法。而 setUp() 和 tearDown() 是特殊的方法，分别在测试方法开始之前运行和之后运行。同时，在这里我们也用这两个方法来打开和关闭浏览器。</p>\n<p>而在我们的测试方法 test_can_visit_homepage() 里，主要有两个步骤：</p>\n<ol>\n<li>访问首页</li>\n<li>验证首页的标题是“Welcome to my blog”</li>\n</ol>\n<p>大部分的测试代码也是以如何的流程来运行着。有一点需要注意的是：一般来说函数名就表示了这个测试所要做测试的事情，如这里就是测试可以访问首页。</p>\n<p>如上所示的测试过程称为“四阶段测试”，即这个过程分为如下的四个阶段：</p>\n<ol>\n<li><strong>Setup</strong>。在这个阶段主要是做一些准备工作，如数据准备和初始化等等，在上面的 setup 阶段就是用 selenium 启动了一个 Firefox 浏览器，然后把窗口最大化了。</li>\n<li><strong>Execute</strong>。在执行阶段就是做好验证结果前的工作，如我们在测试注册的时候，那么这里就是填写数据，并点击提交按钮。在上面的代码里，我们只是打开了首页。</li>\n<li><strong>Verify</strong>。在验证阶段，我们所要做的就是验证返回的结果是否和我们预期的一致。在这里我们还是使用和单元测试一样的 assert 来做断言，通过判断这个页面的标题是”Welcome to my blog”，来说明我们现在就是在首页里。</li>\n<li><strong>Tear Down</strong>。就是一些收尾工作啦 ，比如关闭浏览器、清除测试数据等等。</li>\n</ol>\n<h4 id=\"Tips\"><a href=\"#Tips\" class=\"headerlink\" title=\"Tips\"></a>Tips</h4><p>需要注意的几点是：</p>\n<ol>\n<li>从运行测试速度上来看，三种测试的运行速度是呈倒金字塔结构。即，单元测试跑得最快，开发速度也越快。随后是服务测试，最后是 UI 测试。</li>\n<li>即使现在的 UI 测试跑得非常快，但是随着时间的推移，UI 测试会越来越多。这也意味着测试来跑得越来越久，那么人们就开始不想测试了。在我们之前的项目里，运行完所有的测试大概接近一个小时，我们开始在会议会争论这些测试的必要性，也在想方设法减少这些测试。</li>\n<li>如果一个测试可以在最底层写，那么就不要在他的上一层写了，因为他的运行速度更快。</li>\n</ol>\n<p>参考书籍:</p>\n<ul>\n<li>《优质代码——软件测试的原则、实践与模式》</li>\n<li>《Python Web 开发： 测试驱动开发方法》</li>\n</ul>\n","excerpt":"<p>写测试相比于写代码来说算是一种简单的事。多数时候，我们并不需要考虑复杂的逻辑。我们只需要按照我们的代码逻辑，对代码的行为进行覆盖。</p>\n<p>需要注意的是——在不同的团队、工作流里，测试可能是会有不同的工作流程：</p>\n<ul>\n<li>开发人员写单元测试、集成测试等等</li>\n<li>测试团队通过界面来做黑盒测试</li>\n<li>测试人员手动测试来测试功能</li>\n</ul>\n<p>在允许的情况下，测试应该由开发人员来编写，并且是由底层开始写测试。为了更好地去测试代码，我们需要了解测试金字塔。</p>","more":"<h3 id=\"测试金字塔\"><a href=\"#测试金字塔\" class=\"headerlink\" title=\"测试金字塔\"></a>测试金字塔</h3><p>测试金字塔是由 Mike Cohn 提出的，主要观点是：底层单元测试应多于依赖 GUI 的高层端到端测试。其结构图如下所示：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter3/test-pyramid.png\" alt=\"测试金字塔\"></p>\n<p>从结构上来说，上面的金字塔可以分成三部分：</p>\n<ol>\n<li>单元测试。</li>\n<li>服务测试</li>\n<li>UI 测试</li>\n</ol>\n<p>从图中我们可以发现：单元测试应该要是最多的，也是最底层的。其次才是服务测试，最后才是 UI 测试。大量的单元测试可以保证我们的基础函数是正常、正确工作的。而服务测试则是一门很有学问的测试，不仅仅只在测试我们自己提供的服务，也会测试我们依赖第三方提供的服务。在测试第三方提供的服务时，这就会变成一件有意思的事了。除此还有对功能和 UI 的测试，写这些测试可以减轻测试人员的工作量——毕竟这些工作量转向了开发人员来完成。</p>\n<h4 id=\"单元测试\"><a href=\"#单元测试\" class=\"headerlink\" title=\"单元测试\"></a>单元测试</h4><p>单元测试是针对程序模块（软件设计的最小单位）来进行正确性检验的测试工作。它是应用的最小可测试部件。举个例子来说，下面是一个JavaScript 的函数，用于判断一个变量是否是一个对象：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> isObject = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> <span class=\"keyword\">type</span> = <span class=\"keyword\">typeof</span> obj;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">type</span> === <span class=\"string\">'function'</span> || <span class=\"keyword\">type</span> === <span class=\"string\">'object'</span> &amp;&amp; !!obj;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>这是一个很简单的功能，对应的我们会有一个简单的 Jasmine 测试来保证这个函数是正常工作的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">it(<span class=\"string\">\"should be a object\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    expect(l.isObject([])).toEqual(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    expect(l.isObject([&#123;&#125;])).toEqual(<span class=\"literal\">true</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>虽然这个测试看上去很简单，但是大量的基本的单元测试可以保证我们调用的函数都是可以正常工作的。这也相当于是我们在建设金字塔时用的石块——如果我们的石块都是经常测试的，那么我们就不怕金字塔因为石块的损坏而坍塌。</p>\n<p>当单元测试达到一定的覆盖率，我们的代码就会变得更健壮。因为我们都需要保证我们的代码都是可测的，也意味着我们代码间的耦合度会降低。我们需要去考虑代码的长度，越长的代码在测试的时间会变得越困难。这也就是为什么 TDD 会促使我们写出短的代码。如果我们的代码都是有测试的，单元测试可以帮助我们在未来重构我们的代码。</p>\n<p>并且在很多没有文档或者文档不完整的开源项目中，了解这个项目某个函数的用法就是查看他的测试用例。测试用例（Test Case）是为某个特殊目标而编制的一组测试输入、执行条件以及预期结果，以便测试某个程序路径或核实是否满足某个特定需求。这些测试用例可以让我们直观地理解程序程序的 API。</p>\n<h4 id=\"服务测试\"><a href=\"#服务测试\" class=\"headerlink\" title=\"服务测试\"></a>服务测试</h4><p>服务测试顾名思义便是对服务进行测试，而服务可以是有不同的类型，不同层次的测试。如第三方的 API 服务、我们程序提供的服务，虽然他们他应该在这一个层级上进行测试，但是对他们的测试会稍有不同。</p>\n<p>对于第三方的提供的 API 服务或者其他类似的服务，在这一个层级的测试，我们都不会真实地去测试他们能不能工作——这些依赖性的服务只会在功能测试上进行测试。在这里的测试，我们只会保证我们的功能代码是可以正常工作的，所以我们会使用一些虚假的 API 测试数据来进行测试。这一类提供 API 的 Mock Server 可以模拟被测系统外部依赖模块行为的通用服务。我们只要保证我们的功能代码是正常工作的，那么依赖他的服务也会是正常工作的。</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter3/mock-server.png\" alt=\"Mock Server\"></p>\n<p>而对于我们提供的服务来说，这一类的服务不一定是 API 的服务，还有可能是多个函数组成的功能性服务。当我们在测试这些服务的时候，实际上是在测试这个函数结合在一起是不是正常的。</p>\n<p>一个服务可能依赖于多个函数，因而我们会发现服务测试的数量是少于单元测试的。</p>\n<h4 id=\"UI-测试\"><a href=\"#UI-测试\" class=\"headerlink\" title=\"UI 测试\"></a>UI 测试</h4><p>在传统的软件开发中，UI 测试多数是由人手动来完成的。而在稍后的章节里，你将会看到这些工作是可以由机器自己来完成的——当然，前提是我们要编写这些自动化测试的代码。需要注意的是 UI 测试并不能完全替代手工的工作，一些测试还是应该由人来进行测试——如对 UI 的布局，在现阶段机器还没有审美意识呢。</p>\n<p>自动化 UI 测试是一个缓慢的过程，在这个过程里我们需要做这么几件事：</p>\n<ol>\n<li>运行起我们的网站——这可能需要几分钟。</li>\n<li>添加一些 Mock 的数据，以使网站看上去正常——这也需要几分钟到几十分钟的时间。</li>\n<li>开始运行测试——在一些依赖于网络的测试中，运行完一个测试可能会需要几分钟。尽管可以并行运行测试，但是一个测试几分钟算到最后就会累积成很长的时间。</li>\n</ol>\n<p>所以，你会发现这是一个很长的测试过程。尽可能地将这个层级的测试往下层级移，就会尽可能的节省时间。一个 UI 测试需要几分钟，但是一个单元测试可能不到1秒。这就意味着，这样的测试下移可以节省上百个数量级的时间。</p>\n<h3 id=\"如何测试\"><a href=\"#如何测试\" class=\"headerlink\" title=\"如何测试\"></a>如何测试</h3><p>现在问题来了，我们应该怎么去写测试？换句话来说，我要测什么？这是一个很难的问题，这足够可以以一本书的幅度来说明这个问题。这个问题也需要依赖于不同的实践，不同的时候我们可能对问题的看法都有不同。</p>\n<p>编写测试的过程大致可以分成下面的几个步骤：</p>\n<ol>\n<li>了解测试目的(Why)？即我们需要测什么，我们是为了什么而编写的测试。</li>\n<li>我们要测哪些内容(What)？即测试点，我们即要从功能点上出发来寻找需要我们测试的点，在不同的条件下这个测试点是不一样的。</li>\n<li>我们要如何进行测试(How)？我们要使用怎么样的方法进行测试？</li>\n</ol>\n<h4 id=\"测试目的\"><a href=\"#测试目的\" class=\"headerlink\" title=\"测试目的\"></a>测试目的</h4><p>我们在上面提到过的测试金字塔，也表明了我们在每个层级要测试的目的是不一样的。</p>\n<p>在单元测试这一层级，因为我们所测试的是每一个函数，这些函数没有办法构成完成的功能。这时候我们就只是用于简简单单的测试函数本身的功能，没有太多的业务需求。</p>\n<p>而对于服务这一层级，我们所要测试的就是一个完整的功能。对于以 API 为主的项目来说，实际上就是在测返回结果是否是正确的。</p>\n<p>最后 UI 这一层级，我们所需要测试的就是一个完整的功能。用户操作的时候应该是怎样的，那么我们就应该模仿用户的行为来测试。这是一个完整的业务需求，也可以称之为验证测试。</p>\n<h4 id=\"测试点\"><a href=\"#测试点\" class=\"headerlink\" title=\"测试点\"></a>测试点</h4><p>在了解完我们要测试的目的之后，我们要测试的点也变得很清晰。即在单元测试测试我们的函数的功能，在我们的服务测试我们的服务，在我们的 UI测试测试业务。</p>\n<p>而这些都理想的情况，当系统由于业务的原因不得不耦合的时候。究竟是单元测试还是功能测试，这是一个特别值得思考的问题。如果一个功能即可以在单元测试里测，又可以在服务测试里测，那么我们要测试哪一个？或者说我们应该把两个都测一遍？而如果是花费时间更长的 UI 测试呢？这样做是不是会变得不划算。</p>\n<h4 id=\"如何写测试代码\"><a href=\"#如何写测试代码\" class=\"headerlink\" title=\"如何写测试代码\"></a>如何写测试代码</h4><p>先让来们来简单地看一下测试用例，然后再让我们看看一般情况下我们是如何写测试代码的。下面的代码是一个用Python写的测试用例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HomepageTestCase</span><span class=\"params\">(LiveServerTestCase)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">setUp</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.selenium = webdriver.Firefox()</span><br><span class=\"line\">        self.selenium.maximize_window()</span><br><span class=\"line\">        super(HomepageTestCase, self).setUp()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">tearDown</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.selenium.quit()</span><br><span class=\"line\">        super(HomepageTestCase, self).tearDown()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_can_visit_homepage</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.selenium.get(</span><br><span class=\"line\">            <span class=\"string\">'%s%s'</span> % (self.live_server_url,  <span class=\"string\">\"/\"</span>)</span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">        self.assertIn(<span class=\"string\">\"Welcome to my blog\"</span>, self.selenium.title)</span><br></pre></td></tr></table></figure>\n<p>在上面的代码里主要有三个方法，setUp()、tearDown()和 test_can_visit_homepage()。在这三个方法中起主要作用的是 test_can_visit_homepage()方法。而 setUp() 和 tearDown() 是特殊的方法，分别在测试方法开始之前运行和之后运行。同时，在这里我们也用这两个方法来打开和关闭浏览器。</p>\n<p>而在我们的测试方法 test_can_visit_homepage() 里，主要有两个步骤：</p>\n<ol>\n<li>访问首页</li>\n<li>验证首页的标题是“Welcome to my blog”</li>\n</ol>\n<p>大部分的测试代码也是以如何的流程来运行着。有一点需要注意的是：一般来说函数名就表示了这个测试所要做测试的事情，如这里就是测试可以访问首页。</p>\n<p>如上所示的测试过程称为“四阶段测试”，即这个过程分为如下的四个阶段：</p>\n<ol>\n<li><strong>Setup</strong>。在这个阶段主要是做一些准备工作，如数据准备和初始化等等，在上面的 setup 阶段就是用 selenium 启动了一个 Firefox 浏览器，然后把窗口最大化了。</li>\n<li><strong>Execute</strong>。在执行阶段就是做好验证结果前的工作，如我们在测试注册的时候，那么这里就是填写数据，并点击提交按钮。在上面的代码里，我们只是打开了首页。</li>\n<li><strong>Verify</strong>。在验证阶段，我们所要做的就是验证返回的结果是否和我们预期的一致。在这里我们还是使用和单元测试一样的 assert 来做断言，通过判断这个页面的标题是”Welcome to my blog”，来说明我们现在就是在首页里。</li>\n<li><strong>Tear Down</strong>。就是一些收尾工作啦 ，比如关闭浏览器、清除测试数据等等。</li>\n</ol>\n<h4 id=\"Tips\"><a href=\"#Tips\" class=\"headerlink\" title=\"Tips\"></a>Tips</h4><p>需要注意的几点是：</p>\n<ol>\n<li>从运行测试速度上来看，三种测试的运行速度是呈倒金字塔结构。即，单元测试跑得最快，开发速度也越快。随后是服务测试，最后是 UI 测试。</li>\n<li>即使现在的 UI 测试跑得非常快，但是随着时间的推移，UI 测试会越来越多。这也意味着测试来跑得越来越久，那么人们就开始不想测试了。在我们之前的项目里，运行完所有的测试大概接近一个小时，我们开始在会议会争论这些测试的必要性，也在想方设法减少这些测试。</li>\n<li>如果一个测试可以在最底层写，那么就不要在他的上一层写了，因为他的运行速度更快。</li>\n</ol>\n<p>参考书籍:</p>\n<ul>\n<li>《优质代码——软件测试的原则、实践与模式》</li>\n<li>《Python Web 开发： 测试驱动开发方法》</li>\n</ul>"},{"title":"测试替身","date":"2016-04-29T14:45:08.000Z","_content":"\n测试替身（Test Double）是一个非常有意思的概念。\n\n> 有时候对被测系统(SUT)进行测试是很困难的，因为它依赖于其他无法在测试环境中使用的组件。这有可能是因为这些组件不可用，它们不会返回测试所需要的结果，或者执行它们会有不良副作用。在其他情况下，我们的测试策略要求对被测系统的内部行为有更多控制或更多可见性。\n> 如果在编写测试时无法使用（或选择不使用）实际的依赖组件(DOC)，可以用测试替身来代替。测试替身不需要和真正的依赖组件有完全一样的的行为方式；他只需要提供和真正的组件同样的 API 即可，这样被测系统就会以为它是真正的组件！ ——Gerard Meszaros\n\n当我们遇到一些难以测试的方法、行为的时候，我们就一些特别的方式来帮助我们测试。Mock 和 Stub 就是常见的两种方式：\n\n1. Stub 是一种状态确认，它用简单的行为来替换复杂的行为\n2. Mock 是一种行为确认，它用于模拟其行为\n\n通俗地来说：Stub 从某种程度上来说，会返回我们一个特定的结果，用代码替换来方法；而 Mock 只是确保这个方法被调用。\n\n<!-- more --> \n\n### Stub\n\nStub 从字面意义上来说是存根，存根可以理解为我们保留了一些预留的结果。这个时候我们相当于构建了这样一个特殊的测试场景，用于替换诸如网络或者 IO 口调度等高度不可预期的测试。如当我们需要去验证某个 API 被调用并返回了一个结果，举例在最小物联网系统设计中返回的 json，我们可以在本地构建一个\n\n```javascript\n[{\"id\":1,\"temperature\":14,\"sensors1\":15,\"sensors2\":12,\"led1\":1}]\n```\n\n的结果来当我们预期的数据，也就是所谓的存根。那么我们所要做的也就是解析 json，并返回预期的结果。当我们依赖于网络时，此时测试容易出现问题。\n\n### Mock\n\nMock 从字面意义上来说是模仿，也就是说我们要在本地构造一个模仿的环境，而我们只需要验证我们的方法被调用了。\n\n```javascript\nvar Foo = function(){};\nFoo.prototype.callMe = function() {};\nvar foo = mock( Foo );\n\nfoo.callMe();\n\nexpect( foo.callMe ).toHaveBeenCalled();\n```\n","source":"_posts/3.1.1-test-double.md","raw":"title: 测试替身\ndate: 2016-4-29 22:45:08\ntags:\n---\n\n测试替身（Test Double）是一个非常有意思的概念。\n\n> 有时候对被测系统(SUT)进行测试是很困难的，因为它依赖于其他无法在测试环境中使用的组件。这有可能是因为这些组件不可用，它们不会返回测试所需要的结果，或者执行它们会有不良副作用。在其他情况下，我们的测试策略要求对被测系统的内部行为有更多控制或更多可见性。\n> 如果在编写测试时无法使用（或选择不使用）实际的依赖组件(DOC)，可以用测试替身来代替。测试替身不需要和真正的依赖组件有完全一样的的行为方式；他只需要提供和真正的组件同样的 API 即可，这样被测系统就会以为它是真正的组件！ ——Gerard Meszaros\n\n当我们遇到一些难以测试的方法、行为的时候，我们就一些特别的方式来帮助我们测试。Mock 和 Stub 就是常见的两种方式：\n\n1. Stub 是一种状态确认，它用简单的行为来替换复杂的行为\n2. Mock 是一种行为确认，它用于模拟其行为\n\n通俗地来说：Stub 从某种程度上来说，会返回我们一个特定的结果，用代码替换来方法；而 Mock 只是确保这个方法被调用。\n\n<!-- more --> \n\n### Stub\n\nStub 从字面意义上来说是存根，存根可以理解为我们保留了一些预留的结果。这个时候我们相当于构建了这样一个特殊的测试场景，用于替换诸如网络或者 IO 口调度等高度不可预期的测试。如当我们需要去验证某个 API 被调用并返回了一个结果，举例在最小物联网系统设计中返回的 json，我们可以在本地构建一个\n\n```javascript\n[{\"id\":1,\"temperature\":14,\"sensors1\":15,\"sensors2\":12,\"led1\":1}]\n```\n\n的结果来当我们预期的数据，也就是所谓的存根。那么我们所要做的也就是解析 json，并返回预期的结果。当我们依赖于网络时，此时测试容易出现问题。\n\n### Mock\n\nMock 从字面意义上来说是模仿，也就是说我们要在本地构造一个模仿的环境，而我们只需要验证我们的方法被调用了。\n\n```javascript\nvar Foo = function(){};\nFoo.prototype.callMe = function() {};\nvar foo = mock( Foo );\n\nfoo.callMe();\n\nexpect( foo.callMe ).toHaveBeenCalled();\n```\n","slug":"3.1.1-test-double","published":1,"updated":"2016-04-29T04:36:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuf7mpfa000ptsif7un712n8","content":"<p>测试替身（Test Double）是一个非常有意思的概念。</p>\n<blockquote>\n<p>有时候对被测系统(SUT)进行测试是很困难的，因为它依赖于其他无法在测试环境中使用的组件。这有可能是因为这些组件不可用，它们不会返回测试所需要的结果，或者执行它们会有不良副作用。在其他情况下，我们的测试策略要求对被测系统的内部行为有更多控制或更多可见性。<br>如果在编写测试时无法使用（或选择不使用）实际的依赖组件(DOC)，可以用测试替身来代替。测试替身不需要和真正的依赖组件有完全一样的的行为方式；他只需要提供和真正的组件同样的 API 即可，这样被测系统就会以为它是真正的组件！ ——Gerard Meszaros</p>\n</blockquote>\n<p>当我们遇到一些难以测试的方法、行为的时候，我们就一些特别的方式来帮助我们测试。Mock 和 Stub 就是常见的两种方式：</p>\n<ol>\n<li>Stub 是一种状态确认，它用简单的行为来替换复杂的行为</li>\n<li>Mock 是一种行为确认，它用于模拟其行为</li>\n</ol>\n<p>通俗地来说：Stub 从某种程度上来说，会返回我们一个特定的结果，用代码替换来方法；而 Mock 只是确保这个方法被调用。</p>\n<a id=\"more\"></a> \n<h3 id=\"Stub\"><a href=\"#Stub\" class=\"headerlink\" title=\"Stub\"></a>Stub</h3><p>Stub 从字面意义上来说是存根，存根可以理解为我们保留了一些预留的结果。这个时候我们相当于构建了这样一个特殊的测试场景，用于替换诸如网络或者 IO 口调度等高度不可预期的测试。如当我们需要去验证某个 API 被调用并返回了一个结果，举例在最小物联网系统设计中返回的 json，我们可以在本地构建一个</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&#123;<span class=\"string\">\"id\"</span>:<span class=\"number\">1</span>,<span class=\"string\">\"temperature\"</span>:<span class=\"number\">14</span>,<span class=\"string\">\"sensors1\"</span>:<span class=\"number\">15</span>,<span class=\"string\">\"sensors2\"</span>:<span class=\"number\">12</span>,<span class=\"string\">\"led1\"</span>:<span class=\"number\">1</span>&#125;]</span><br></pre></td></tr></table></figure>\n<p>的结果来当我们预期的数据，也就是所谓的存根。那么我们所要做的也就是解析 json，并返回预期的结果。当我们依赖于网络时，此时测试容易出现问题。</p>\n<h3 id=\"Mock\"><a href=\"#Mock\" class=\"headerlink\" title=\"Mock\"></a>Mock</h3><p>Mock 从字面意义上来说是模仿，也就是说我们要在本地构造一个模仿的环境，而我们只需要验证我们的方法被调用了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Foo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">Foo.prototype.callMe = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = mock( Foo );</span><br><span class=\"line\"></span><br><span class=\"line\">foo.callMe();</span><br><span class=\"line\"></span><br><span class=\"line\">expect( foo.callMe ).toHaveBeenCalled();</span><br></pre></td></tr></table></figure>\n","excerpt":"<p>测试替身（Test Double）是一个非常有意思的概念。</p>\n<blockquote>\n<p>有时候对被测系统(SUT)进行测试是很困难的，因为它依赖于其他无法在测试环境中使用的组件。这有可能是因为这些组件不可用，它们不会返回测试所需要的结果，或者执行它们会有不良副作用。在其他情况下，我们的测试策略要求对被测系统的内部行为有更多控制或更多可见性。<br>如果在编写测试时无法使用（或选择不使用）实际的依赖组件(DOC)，可以用测试替身来代替。测试替身不需要和真正的依赖组件有完全一样的的行为方式；他只需要提供和真正的组件同样的 API 即可，这样被测系统就会以为它是真正的组件！ ——Gerard Meszaros</p>\n</blockquote>\n<p>当我们遇到一些难以测试的方法、行为的时候，我们就一些特别的方式来帮助我们测试。Mock 和 Stub 就是常见的两种方式：</p>\n<ol>\n<li>Stub 是一种状态确认，它用简单的行为来替换复杂的行为</li>\n<li>Mock 是一种行为确认，它用于模拟其行为</li>\n</ol>\n<p>通俗地来说：Stub 从某种程度上来说，会返回我们一个特定的结果，用代码替换来方法；而 Mock 只是确保这个方法被调用。</p>","more":"<h3 id=\"Stub\"><a href=\"#Stub\" class=\"headerlink\" title=\"Stub\"></a>Stub</h3><p>Stub 从字面意义上来说是存根，存根可以理解为我们保留了一些预留的结果。这个时候我们相当于构建了这样一个特殊的测试场景，用于替换诸如网络或者 IO 口调度等高度不可预期的测试。如当我们需要去验证某个 API 被调用并返回了一个结果，举例在最小物联网系统设计中返回的 json，我们可以在本地构建一个</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&#123;<span class=\"string\">\"id\"</span>:<span class=\"number\">1</span>,<span class=\"string\">\"temperature\"</span>:<span class=\"number\">14</span>,<span class=\"string\">\"sensors1\"</span>:<span class=\"number\">15</span>,<span class=\"string\">\"sensors2\"</span>:<span class=\"number\">12</span>,<span class=\"string\">\"led1\"</span>:<span class=\"number\">1</span>&#125;]</span><br></pre></td></tr></table></figure>\n<p>的结果来当我们预期的数据，也就是所谓的存根。那么我们所要做的也就是解析 json，并返回预期的结果。当我们依赖于网络时，此时测试容易出现问题。</p>\n<h3 id=\"Mock\"><a href=\"#Mock\" class=\"headerlink\" title=\"Mock\"></a>Mock</h3><p>Mock 从字面意义上来说是模仿，也就是说我们要在本地构造一个模仿的环境，而我们只需要验证我们的方法被调用了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Foo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">Foo.prototype.callMe = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = mock( Foo );</span><br><span class=\"line\"></span><br><span class=\"line\">foo.callMe();</span><br><span class=\"line\"></span><br><span class=\"line\">expect( foo.callMe ).toHaveBeenCalled();</span><br></pre></td></tr></table></figure>"},{"title":"测试驱动开发","date":"2016-04-29T15:45:08.000Z","_content":"\n测试驱动开发是一个很\"古老\"的程序开发方法，然而由于国内的开发流程的问题——即开发人员负责功能的测试，导致这么好的一项技术没有在国内推广。\n\n### 红-绿-重构\n\n测试驱动开发的主要过程是: 红 —> 绿 -> 重构\n\n![TDD](http://growth.phodal.com/assets/article/chapter3/tdd.jpg)\n\n1. 先写一个失败的单元测试。即我们并没有实现这个方法，但是已经有了这个方法的测试。\n2. 让测试通过。实现简单的代码来保证测试通过，就算我们用一些作弊的方法也是可以的。我们写的是功能代码，那么我们应该提交代码，因为我们已经实现了这个功能。\n3. 重构，并改进功能代码，让它变得更加合理。\n\nTDD 有助于我们将问题分解成更小的部分，再一点点的添加我们所需要的业务代码。随着这个过程的不断进行，我们会发现我们已经接近完成我们的功能代码了。并且到了最后，我们会发现我们的代码都会被测试到。\n\n<!-- more --> \n\n虽然说起来看上去很简单，但是真正实现起来并不是那么容易。于我而言我只会在我自己造的一些轮子中使用 TDD。因为这个花费大量的时间，通常来说测试代码和功能代码的比例可能是1:1，或者是2：1等等。在自己创建的一些个人应用，如博客中，我不需要与其他人 Share 我的 Content。由于我使用的是第三方框架，框架本身的测试已经足够多，并且没有复杂的逻辑，我就没有对我的博客写测试。而在我写的一些框架里，我就会尽量保证足够高的测试覆盖率，并且在适当的时候会去 TDD。\n\n通常来说对于单元测试我会采用 TDD 的方式来进行，但是功能测试仍会选择在最后添加进去。主要的缘由是：在写 UI 的过程中，元素会发生变化。这一点和我们在写 Unit 的时候，有很大的区别。div + class 会使得我们思考问题的方式发生变化，我们需要去点击某个元素，并观察某个元素发生的变化。而多数时候，我们很难把握好一个页面最好的样子。\n\n不得不说明的一点是，TDD 需要你对测试比较了解后，你才容易使用它。从个人的感受来说，TDD 是在一开始是一件很难的事。\n\n### 测试先行\n\n对于写测试的人来说，测试先行有点难以理解，而对于不写测试的人来说，就更难以理解。这里假定你已经开始写测试了，因为对于不写测试的人来说，写测试就是一件难以理解的事。既然我们都要写测试，那么为什么我们就不能先写测试呢？或者说为什么后写测试存在一些问题？\n\n依据 J.Timothy King 所总结的《测试先行的12个好处》：\n\n1. 测试可证明你的代码是可以解决问题的\n2. 一面写单元测试，一面写实现代码，这样感觉更有兴趣\n3. 单元测试也可以用于演示代码\n4. 会让你在写代码之前做好计划\n5. 它降低了 Bug 修复的成本\n6. 可以得到一个底层模块的回归测试工具\n7. 可以在不改变现有功能的基础上继续改进你的设计\n8. 可以用于展示开发的进度\n9. 它真实的为程序员消除了工作上的很多障碍\n10. 单元测试也可以让你更好的设计\n11. 单元测试比代码审查的效果还要好\n12. 它比直接写代码的效率更高\n\n但是在我个人的感觉里，多比较喜欢的是： **写出可以测试的函数**。这是一个一直困扰着我的难题，特别是当我的代码里存在很多条件的时候，在后期我编写的时候，难度越来越大。当我只有一个简单的 IF-ELSE 的时候，我的代码测试起来也很简单:\n\n```javascript\nif (hour < 18) {\n    greeting = \"Good day\";\n} else {\n    greeting = \"Good evening\";\n}\n```\n\n而当我有复杂的业务逻辑时，后写测试就会变成一场恶梦：\n\n```javascript\nif (EchoesWorks.isObject(words)) {\n\tvar nextTime = that.parser.parseTime(that.data.times)[currentSlide + 1];\n\tif (that.time < nextTime && words.length > 1) {\n\t\tvar length = words.length;\n\t\tvar currentTime = that.parser.parseTime(that.data.times)[currentSlide];\n\t\tvar time = nextTime - currentTime;\n\t\tvar average = time / length * 1000;\n\t\tvar i = 0;\n\t\tdocument.querySelector('words').innerHTML = words[i].word;\n\n\t\ttimerWord = setInterval(function () {\n\t\t\ti++;\n\t\t\tif (i - 1 === length) {\n\t\t\t\tclearInterval(timerWord);\n\t\t\t} else {\n\t\t\t\tdocument.querySelector('words').innerHTML = words[i].word;\n\t\t\t}\n\t\t}, average);\n\t}\n\treturn timerWord;\n} else {\n\tdocument.querySelector('words').innerHTML = words;\n}\n```\n\n我们需要重新理清业务的逻辑，再依据这些逻辑来编写测试代码。而当我们已经忘记具体的业务逻辑时，我们已然无法写出测试。\n\n**思考**\n\n通常在我的理解下，TDD 是可有可无的。既然我知道了我要实现的大部分功能，而且我也知道如何实现。与此同时，对 Code Smell 也保持着警惕、要保证功能被测试覆盖。那么，总的来说 TDD 带来的价值并不大。\n\n然而，在当前这种情况下，我知道我想要的功能，但是我并不理解其深层次的功能。我需要花费大量的时候来理解，它为什么是这样的，需要先有一些脚本来知道它是怎么工作的。TDD 变显得很有价值，换句话来说，在现有的情况下，TDD 对于我们不了解的一些事情，可以驱动出更多的开发。毕竟在我们完成测试脚本之后，我们也会发现这些测试脚本成为了代码的一部分。\n\n在这种理想的情况下，我们为什么不 TDD 呢?\n\n参考资料\n\n J.Timothy King 《Twelve Benefits of Writing Unit Tests First》\n","source":"_posts/3.1.2-tdd.md","raw":"title: 测试驱动开发\ndate: 2016-4-29 23:45:08\ntags:\n---\n\n测试驱动开发是一个很\"古老\"的程序开发方法，然而由于国内的开发流程的问题——即开发人员负责功能的测试，导致这么好的一项技术没有在国内推广。\n\n### 红-绿-重构\n\n测试驱动开发的主要过程是: 红 —> 绿 -> 重构\n\n![TDD](http://growth.phodal.com/assets/article/chapter3/tdd.jpg)\n\n1. 先写一个失败的单元测试。即我们并没有实现这个方法，但是已经有了这个方法的测试。\n2. 让测试通过。实现简单的代码来保证测试通过，就算我们用一些作弊的方法也是可以的。我们写的是功能代码，那么我们应该提交代码，因为我们已经实现了这个功能。\n3. 重构，并改进功能代码，让它变得更加合理。\n\nTDD 有助于我们将问题分解成更小的部分，再一点点的添加我们所需要的业务代码。随着这个过程的不断进行，我们会发现我们已经接近完成我们的功能代码了。并且到了最后，我们会发现我们的代码都会被测试到。\n\n<!-- more --> \n\n虽然说起来看上去很简单，但是真正实现起来并不是那么容易。于我而言我只会在我自己造的一些轮子中使用 TDD。因为这个花费大量的时间，通常来说测试代码和功能代码的比例可能是1:1，或者是2：1等等。在自己创建的一些个人应用，如博客中，我不需要与其他人 Share 我的 Content。由于我使用的是第三方框架，框架本身的测试已经足够多，并且没有复杂的逻辑，我就没有对我的博客写测试。而在我写的一些框架里，我就会尽量保证足够高的测试覆盖率，并且在适当的时候会去 TDD。\n\n通常来说对于单元测试我会采用 TDD 的方式来进行，但是功能测试仍会选择在最后添加进去。主要的缘由是：在写 UI 的过程中，元素会发生变化。这一点和我们在写 Unit 的时候，有很大的区别。div + class 会使得我们思考问题的方式发生变化，我们需要去点击某个元素，并观察某个元素发生的变化。而多数时候，我们很难把握好一个页面最好的样子。\n\n不得不说明的一点是，TDD 需要你对测试比较了解后，你才容易使用它。从个人的感受来说，TDD 是在一开始是一件很难的事。\n\n### 测试先行\n\n对于写测试的人来说，测试先行有点难以理解，而对于不写测试的人来说，就更难以理解。这里假定你已经开始写测试了，因为对于不写测试的人来说，写测试就是一件难以理解的事。既然我们都要写测试，那么为什么我们就不能先写测试呢？或者说为什么后写测试存在一些问题？\n\n依据 J.Timothy King 所总结的《测试先行的12个好处》：\n\n1. 测试可证明你的代码是可以解决问题的\n2. 一面写单元测试，一面写实现代码，这样感觉更有兴趣\n3. 单元测试也可以用于演示代码\n4. 会让你在写代码之前做好计划\n5. 它降低了 Bug 修复的成本\n6. 可以得到一个底层模块的回归测试工具\n7. 可以在不改变现有功能的基础上继续改进你的设计\n8. 可以用于展示开发的进度\n9. 它真实的为程序员消除了工作上的很多障碍\n10. 单元测试也可以让你更好的设计\n11. 单元测试比代码审查的效果还要好\n12. 它比直接写代码的效率更高\n\n但是在我个人的感觉里，多比较喜欢的是： **写出可以测试的函数**。这是一个一直困扰着我的难题，特别是当我的代码里存在很多条件的时候，在后期我编写的时候，难度越来越大。当我只有一个简单的 IF-ELSE 的时候，我的代码测试起来也很简单:\n\n```javascript\nif (hour < 18) {\n    greeting = \"Good day\";\n} else {\n    greeting = \"Good evening\";\n}\n```\n\n而当我有复杂的业务逻辑时，后写测试就会变成一场恶梦：\n\n```javascript\nif (EchoesWorks.isObject(words)) {\n\tvar nextTime = that.parser.parseTime(that.data.times)[currentSlide + 1];\n\tif (that.time < nextTime && words.length > 1) {\n\t\tvar length = words.length;\n\t\tvar currentTime = that.parser.parseTime(that.data.times)[currentSlide];\n\t\tvar time = nextTime - currentTime;\n\t\tvar average = time / length * 1000;\n\t\tvar i = 0;\n\t\tdocument.querySelector('words').innerHTML = words[i].word;\n\n\t\ttimerWord = setInterval(function () {\n\t\t\ti++;\n\t\t\tif (i - 1 === length) {\n\t\t\t\tclearInterval(timerWord);\n\t\t\t} else {\n\t\t\t\tdocument.querySelector('words').innerHTML = words[i].word;\n\t\t\t}\n\t\t}, average);\n\t}\n\treturn timerWord;\n} else {\n\tdocument.querySelector('words').innerHTML = words;\n}\n```\n\n我们需要重新理清业务的逻辑，再依据这些逻辑来编写测试代码。而当我们已经忘记具体的业务逻辑时，我们已然无法写出测试。\n\n**思考**\n\n通常在我的理解下，TDD 是可有可无的。既然我知道了我要实现的大部分功能，而且我也知道如何实现。与此同时，对 Code Smell 也保持着警惕、要保证功能被测试覆盖。那么，总的来说 TDD 带来的价值并不大。\n\n然而，在当前这种情况下，我知道我想要的功能，但是我并不理解其深层次的功能。我需要花费大量的时候来理解，它为什么是这样的，需要先有一些脚本来知道它是怎么工作的。TDD 变显得很有价值，换句话来说，在现有的情况下，TDD 对于我们不了解的一些事情，可以驱动出更多的开发。毕竟在我们完成测试脚本之后，我们也会发现这些测试脚本成为了代码的一部分。\n\n在这种理想的情况下，我们为什么不 TDD 呢?\n\n参考资料\n\n J.Timothy King 《Twelve Benefits of Writing Unit Tests First》\n","slug":"3.1.2-tdd","published":1,"updated":"2016-04-29T04:38:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuf7mpfb000qtsifmx1eugud","content":"<p>测试驱动开发是一个很”古老”的程序开发方法，然而由于国内的开发流程的问题——即开发人员负责功能的测试，导致这么好的一项技术没有在国内推广。</p>\n<h3 id=\"红-绿-重构\"><a href=\"#红-绿-重构\" class=\"headerlink\" title=\"红-绿-重构\"></a>红-绿-重构</h3><p>测试驱动开发的主要过程是: 红 —&gt; 绿 -&gt; 重构</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter3/tdd.jpg\" alt=\"TDD\"></p>\n<ol>\n<li>先写一个失败的单元测试。即我们并没有实现这个方法，但是已经有了这个方法的测试。</li>\n<li>让测试通过。实现简单的代码来保证测试通过，就算我们用一些作弊的方法也是可以的。我们写的是功能代码，那么我们应该提交代码，因为我们已经实现了这个功能。</li>\n<li>重构，并改进功能代码，让它变得更加合理。</li>\n</ol>\n<p>TDD 有助于我们将问题分解成更小的部分，再一点点的添加我们所需要的业务代码。随着这个过程的不断进行，我们会发现我们已经接近完成我们的功能代码了。并且到了最后，我们会发现我们的代码都会被测试到。</p>\n<a id=\"more\"></a> \n<p>虽然说起来看上去很简单，但是真正实现起来并不是那么容易。于我而言我只会在我自己造的一些轮子中使用 TDD。因为这个花费大量的时间，通常来说测试代码和功能代码的比例可能是1:1，或者是2：1等等。在自己创建的一些个人应用，如博客中，我不需要与其他人 Share 我的 Content。由于我使用的是第三方框架，框架本身的测试已经足够多，并且没有复杂的逻辑，我就没有对我的博客写测试。而在我写的一些框架里，我就会尽量保证足够高的测试覆盖率，并且在适当的时候会去 TDD。</p>\n<p>通常来说对于单元测试我会采用 TDD 的方式来进行，但是功能测试仍会选择在最后添加进去。主要的缘由是：在写 UI 的过程中，元素会发生变化。这一点和我们在写 Unit 的时候，有很大的区别。div + class 会使得我们思考问题的方式发生变化，我们需要去点击某个元素，并观察某个元素发生的变化。而多数时候，我们很难把握好一个页面最好的样子。</p>\n<p>不得不说明的一点是，TDD 需要你对测试比较了解后，你才容易使用它。从个人的感受来说，TDD 是在一开始是一件很难的事。</p>\n<h3 id=\"测试先行\"><a href=\"#测试先行\" class=\"headerlink\" title=\"测试先行\"></a>测试先行</h3><p>对于写测试的人来说，测试先行有点难以理解，而对于不写测试的人来说，就更难以理解。这里假定你已经开始写测试了，因为对于不写测试的人来说，写测试就是一件难以理解的事。既然我们都要写测试，那么为什么我们就不能先写测试呢？或者说为什么后写测试存在一些问题？</p>\n<p>依据 J.Timothy King 所总结的《测试先行的12个好处》：</p>\n<ol>\n<li>测试可证明你的代码是可以解决问题的</li>\n<li>一面写单元测试，一面写实现代码，这样感觉更有兴趣</li>\n<li>单元测试也可以用于演示代码</li>\n<li>会让你在写代码之前做好计划</li>\n<li>它降低了 Bug 修复的成本</li>\n<li>可以得到一个底层模块的回归测试工具</li>\n<li>可以在不改变现有功能的基础上继续改进你的设计</li>\n<li>可以用于展示开发的进度</li>\n<li>它真实的为程序员消除了工作上的很多障碍</li>\n<li>单元测试也可以让你更好的设计</li>\n<li>单元测试比代码审查的效果还要好</li>\n<li>它比直接写代码的效率更高</li>\n</ol>\n<p>但是在我个人的感觉里，多比较喜欢的是： <strong>写出可以测试的函数</strong>。这是一个一直困扰着我的难题，特别是当我的代码里存在很多条件的时候，在后期我编写的时候，难度越来越大。当我只有一个简单的 IF-ELSE 的时候，我的代码测试起来也很简单:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (hour &lt; <span class=\"number\">18</span>) &#123;</span><br><span class=\"line\">    greeting = <span class=\"string\">\"Good day\"</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    greeting = <span class=\"string\">\"Good evening\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>而当我有复杂的业务逻辑时，后写测试就会变成一场恶梦：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (EchoesWorks.isObject(words)) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> nextTime = that.parser.parseTime(that.data.times)[currentSlide + <span class=\"number\">1</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (that.time &lt; nextTime &amp;&amp; words.length &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> length = words.length;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> currentTime = that.parser.parseTime(that.data.times)[currentSlide];</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> time = nextTime - currentTime;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> average = time / length * <span class=\"number\">1000</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'words'</span>).innerHTML = words[i].word;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\ttimerWord = setInterval(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t\ti++;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (i - <span class=\"number\">1</span> === length) &#123;</span><br><span class=\"line\">\t\t\t\tclearInterval(timerWord);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'words'</span>).innerHTML = words[i].word;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;, average);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> timerWord;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'words'</span>).innerHTML = words;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们需要重新理清业务的逻辑，再依据这些逻辑来编写测试代码。而当我们已经忘记具体的业务逻辑时，我们已然无法写出测试。</p>\n<p><strong>思考</strong></p>\n<p>通常在我的理解下，TDD 是可有可无的。既然我知道了我要实现的大部分功能，而且我也知道如何实现。与此同时，对 Code Smell 也保持着警惕、要保证功能被测试覆盖。那么，总的来说 TDD 带来的价值并不大。</p>\n<p>然而，在当前这种情况下，我知道我想要的功能，但是我并不理解其深层次的功能。我需要花费大量的时候来理解，它为什么是这样的，需要先有一些脚本来知道它是怎么工作的。TDD 变显得很有价值，换句话来说，在现有的情况下，TDD 对于我们不了解的一些事情，可以驱动出更多的开发。毕竟在我们完成测试脚本之后，我们也会发现这些测试脚本成为了代码的一部分。</p>\n<p>在这种理想的情况下，我们为什么不 TDD 呢?</p>\n<p>参考资料</p>\n<p> J.Timothy King 《Twelve Benefits of Writing Unit Tests First》</p>\n","excerpt":"<p>测试驱动开发是一个很”古老”的程序开发方法，然而由于国内的开发流程的问题——即开发人员负责功能的测试，导致这么好的一项技术没有在国内推广。</p>\n<h3 id=\"红-绿-重构\"><a href=\"#红-绿-重构\" class=\"headerlink\" title=\"红-绿-重构\"></a>红-绿-重构</h3><p>测试驱动开发的主要过程是: 红 —&gt; 绿 -&gt; 重构</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter3/tdd.jpg\" alt=\"TDD\"></p>\n<ol>\n<li>先写一个失败的单元测试。即我们并没有实现这个方法，但是已经有了这个方法的测试。</li>\n<li>让测试通过。实现简单的代码来保证测试通过，就算我们用一些作弊的方法也是可以的。我们写的是功能代码，那么我们应该提交代码，因为我们已经实现了这个功能。</li>\n<li>重构，并改进功能代码，让它变得更加合理。</li>\n</ol>\n<p>TDD 有助于我们将问题分解成更小的部分，再一点点的添加我们所需要的业务代码。随着这个过程的不断进行，我们会发现我们已经接近完成我们的功能代码了。并且到了最后，我们会发现我们的代码都会被测试到。</p>","more":"<p>虽然说起来看上去很简单，但是真正实现起来并不是那么容易。于我而言我只会在我自己造的一些轮子中使用 TDD。因为这个花费大量的时间，通常来说测试代码和功能代码的比例可能是1:1，或者是2：1等等。在自己创建的一些个人应用，如博客中，我不需要与其他人 Share 我的 Content。由于我使用的是第三方框架，框架本身的测试已经足够多，并且没有复杂的逻辑，我就没有对我的博客写测试。而在我写的一些框架里，我就会尽量保证足够高的测试覆盖率，并且在适当的时候会去 TDD。</p>\n<p>通常来说对于单元测试我会采用 TDD 的方式来进行，但是功能测试仍会选择在最后添加进去。主要的缘由是：在写 UI 的过程中，元素会发生变化。这一点和我们在写 Unit 的时候，有很大的区别。div + class 会使得我们思考问题的方式发生变化，我们需要去点击某个元素，并观察某个元素发生的变化。而多数时候，我们很难把握好一个页面最好的样子。</p>\n<p>不得不说明的一点是，TDD 需要你对测试比较了解后，你才容易使用它。从个人的感受来说，TDD 是在一开始是一件很难的事。</p>\n<h3 id=\"测试先行\"><a href=\"#测试先行\" class=\"headerlink\" title=\"测试先行\"></a>测试先行</h3><p>对于写测试的人来说，测试先行有点难以理解，而对于不写测试的人来说，就更难以理解。这里假定你已经开始写测试了，因为对于不写测试的人来说，写测试就是一件难以理解的事。既然我们都要写测试，那么为什么我们就不能先写测试呢？或者说为什么后写测试存在一些问题？</p>\n<p>依据 J.Timothy King 所总结的《测试先行的12个好处》：</p>\n<ol>\n<li>测试可证明你的代码是可以解决问题的</li>\n<li>一面写单元测试，一面写实现代码，这样感觉更有兴趣</li>\n<li>单元测试也可以用于演示代码</li>\n<li>会让你在写代码之前做好计划</li>\n<li>它降低了 Bug 修复的成本</li>\n<li>可以得到一个底层模块的回归测试工具</li>\n<li>可以在不改变现有功能的基础上继续改进你的设计</li>\n<li>可以用于展示开发的进度</li>\n<li>它真实的为程序员消除了工作上的很多障碍</li>\n<li>单元测试也可以让你更好的设计</li>\n<li>单元测试比代码审查的效果还要好</li>\n<li>它比直接写代码的效率更高</li>\n</ol>\n<p>但是在我个人的感觉里，多比较喜欢的是： <strong>写出可以测试的函数</strong>。这是一个一直困扰着我的难题，特别是当我的代码里存在很多条件的时候，在后期我编写的时候，难度越来越大。当我只有一个简单的 IF-ELSE 的时候，我的代码测试起来也很简单:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (hour &lt; <span class=\"number\">18</span>) &#123;</span><br><span class=\"line\">    greeting = <span class=\"string\">\"Good day\"</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    greeting = <span class=\"string\">\"Good evening\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>而当我有复杂的业务逻辑时，后写测试就会变成一场恶梦：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (EchoesWorks.isObject(words)) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> nextTime = that.parser.parseTime(that.data.times)[currentSlide + <span class=\"number\">1</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (that.time &lt; nextTime &amp;&amp; words.length &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> length = words.length;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> currentTime = that.parser.parseTime(that.data.times)[currentSlide];</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> time = nextTime - currentTime;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> average = time / length * <span class=\"number\">1000</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'words'</span>).innerHTML = words[i].word;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\ttimerWord = setInterval(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t\ti++;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (i - <span class=\"number\">1</span> === length) &#123;</span><br><span class=\"line\">\t\t\t\tclearInterval(timerWord);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'words'</span>).innerHTML = words[i].word;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;, average);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> timerWord;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'words'</span>).innerHTML = words;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们需要重新理清业务的逻辑，再依据这些逻辑来编写测试代码。而当我们已经忘记具体的业务逻辑时，我们已然无法写出测试。</p>\n<p><strong>思考</strong></p>\n<p>通常在我的理解下，TDD 是可有可无的。既然我知道了我要实现的大部分功能，而且我也知道如何实现。与此同时，对 Code Smell 也保持着警惕、要保证功能被测试覆盖。那么，总的来说 TDD 带来的价值并不大。</p>\n<p>然而，在当前这种情况下，我知道我想要的功能，但是我并不理解其深层次的功能。我需要花费大量的时候来理解，它为什么是这样的，需要先有一些脚本来知道它是怎么工作的。TDD 变显得很有价值，换句话来说，在现有的情况下，TDD 对于我们不了解的一些事情，可以驱动出更多的开发。毕竟在我们完成测试脚本之后，我们也会发现这些测试脚本成为了代码的一部分。</p>\n<p>在这种理想的情况下，我们为什么不 TDD 呢?</p>\n<p>参考资料</p>\n<p> J.Timothy King 《Twelve Benefits of Writing Unit Tests First》</p>"},{"title":"代码重构","date":"2016-05-03T14:45:08.000Z","_content":"\n> 重构，一言以蔽之，就是在不改变外部行为的前提下，有条不紊地改善代码。\n\n代码重构（英语：Code refactoring）指对软件代码做任何更动以增加可读性或者简化结构而不影响输出结果。在经历了一年多的工作之后，我平时的主要工作就是修 Bug。刚开始的时候觉得无聊，后来才发现修 Bug 需要更好的技术。有时候你可能要面对着一坨一坨的代码，有时候你可能要花几天的时间去阅读代码。而，你重写那几十代码可能只会花上你不到一天的时间。但是如果你没办法理解当时为什么这么做，你的修改只会带来更多的 Bug。修 Bug，更多的是维护代码。还是前人总结的那句话对:\n\n> 写代码容易，读代码难。\n\n假设我们写这些代码只要半天，而别人读起来要一天。为什么不试着用一天的时候去写这些代码，让别人花半天或者更少的时间来理解。\n\n### 重命名\n\n在上一节中，我们提到了命名的重要性，这里首先要说到的也就是重命名~~~。让再看看《编写可读代码的艺术》也提到了这几点：\n\n<!-- more -->\n\n1. 选择专业的词。最好是可以和业务相关的，它应该极具表现力。\n2. 避免像 tmp 和 retval 这样泛泛的名字。不得不提到的一点是，tmp 实在是一个有够烂的名字，将其变为 timeTemp 或者类似的会更直观。它只应该是名字中的一部分。\n3. 用具体的名字代替抽象的名字。\n4. 为名字赋予更多的信息。\n5. 名字应该有多长。\n6. 利用名字的格式来传递含义。\n\n### 提取变量\n\n先让我们来看看一个简单的情况：\n\n```javascript\nif ($scope.goodSkills.indexOf('analytics') !== -1) {\n  skills.analytics = 5;\n}\n```\n\n在上面的代码里比较难以看懂的就是数字5，这时候你会怎么做？写一行注释？这里的5就是一个 Magic Number。\n\n而实际上，最简单有效的办法就是把5提取成一个变量：\n\n\n```javascript\nvar LEVEL_FIVE = 5;\nif ($scope.goodSkills.indexOf('analytics') !== -1) {\n  skills.analytics = LEVEL_FIVE;\n}\n```\n\n### 提炼函数\n\n这个简单有效的方法就是为了对付之前太长的函数，抽取提炼函数出应该抽取出来的部分成为一个新的函数。引自《重构》一书的说法，短的精巧的函数有以下的特点：\n\n1. 如果每个函数的粒度都很小，那么函数被复用的机会就更大；\n2. 是这会让高层函数读起来就像一系列注释一样，容易理解；\n3. 是如果函数都是细粒度，那么函数的复写也会更加容易。\n\n在提炼函数中我们所要做的就是——判断出原有的函数的意图，再依据我们的新意图来命名新的函数。然后判断依赖——变量值，处理这些变量。提取出函数，最近对其测试。\n\n这里只简单地对重构进行一些介绍，更多详细信息请参阅《重构：改善既有代码的设计》。\n","source":"_posts/3.2.2-refactor.md","raw":"title: 代码重构\ndate: 2016-5-3 22:45:08\ntags:\n---\n\n> 重构，一言以蔽之，就是在不改变外部行为的前提下，有条不紊地改善代码。\n\n代码重构（英语：Code refactoring）指对软件代码做任何更动以增加可读性或者简化结构而不影响输出结果。在经历了一年多的工作之后，我平时的主要工作就是修 Bug。刚开始的时候觉得无聊，后来才发现修 Bug 需要更好的技术。有时候你可能要面对着一坨一坨的代码，有时候你可能要花几天的时间去阅读代码。而，你重写那几十代码可能只会花上你不到一天的时间。但是如果你没办法理解当时为什么这么做，你的修改只会带来更多的 Bug。修 Bug，更多的是维护代码。还是前人总结的那句话对:\n\n> 写代码容易，读代码难。\n\n假设我们写这些代码只要半天，而别人读起来要一天。为什么不试着用一天的时候去写这些代码，让别人花半天或者更少的时间来理解。\n\n### 重命名\n\n在上一节中，我们提到了命名的重要性，这里首先要说到的也就是重命名~~~。让再看看《编写可读代码的艺术》也提到了这几点：\n\n<!-- more -->\n\n1. 选择专业的词。最好是可以和业务相关的，它应该极具表现力。\n2. 避免像 tmp 和 retval 这样泛泛的名字。不得不提到的一点是，tmp 实在是一个有够烂的名字，将其变为 timeTemp 或者类似的会更直观。它只应该是名字中的一部分。\n3. 用具体的名字代替抽象的名字。\n4. 为名字赋予更多的信息。\n5. 名字应该有多长。\n6. 利用名字的格式来传递含义。\n\n### 提取变量\n\n先让我们来看看一个简单的情况：\n\n```javascript\nif ($scope.goodSkills.indexOf('analytics') !== -1) {\n  skills.analytics = 5;\n}\n```\n\n在上面的代码里比较难以看懂的就是数字5，这时候你会怎么做？写一行注释？这里的5就是一个 Magic Number。\n\n而实际上，最简单有效的办法就是把5提取成一个变量：\n\n\n```javascript\nvar LEVEL_FIVE = 5;\nif ($scope.goodSkills.indexOf('analytics') !== -1) {\n  skills.analytics = LEVEL_FIVE;\n}\n```\n\n### 提炼函数\n\n这个简单有效的方法就是为了对付之前太长的函数，抽取提炼函数出应该抽取出来的部分成为一个新的函数。引自《重构》一书的说法，短的精巧的函数有以下的特点：\n\n1. 如果每个函数的粒度都很小，那么函数被复用的机会就更大；\n2. 是这会让高层函数读起来就像一系列注释一样，容易理解；\n3. 是如果函数都是细粒度，那么函数的复写也会更加容易。\n\n在提炼函数中我们所要做的就是——判断出原有的函数的意图，再依据我们的新意图来命名新的函数。然后判断依赖——变量值，处理这些变量。提取出函数，最近对其测试。\n\n这里只简单地对重构进行一些介绍，更多详细信息请参阅《重构：改善既有代码的设计》。\n","slug":"3.2.2-refactor","published":1,"updated":"2016-05-03T12:50:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuf7mpfe000rtsifhcysq0o8","content":"<blockquote>\n<p>重构，一言以蔽之，就是在不改变外部行为的前提下，有条不紊地改善代码。</p>\n</blockquote>\n<p>代码重构（英语：Code refactoring）指对软件代码做任何更动以增加可读性或者简化结构而不影响输出结果。在经历了一年多的工作之后，我平时的主要工作就是修 Bug。刚开始的时候觉得无聊，后来才发现修 Bug 需要更好的技术。有时候你可能要面对着一坨一坨的代码，有时候你可能要花几天的时间去阅读代码。而，你重写那几十代码可能只会花上你不到一天的时间。但是如果你没办法理解当时为什么这么做，你的修改只会带来更多的 Bug。修 Bug，更多的是维护代码。还是前人总结的那句话对:</p>\n<blockquote>\n<p>写代码容易，读代码难。</p>\n</blockquote>\n<p>假设我们写这些代码只要半天，而别人读起来要一天。为什么不试着用一天的时候去写这些代码，让别人花半天或者更少的时间来理解。</p>\n<h3 id=\"重命名\"><a href=\"#重命名\" class=\"headerlink\" title=\"重命名\"></a>重命名</h3><p>在上一节中，我们提到了命名的重要性，这里首先要说到的也就是重命名~~~。让再看看《编写可读代码的艺术》也提到了这几点：</p>\n<a id=\"more\"></a>\n<ol>\n<li>选择专业的词。最好是可以和业务相关的，它应该极具表现力。</li>\n<li>避免像 tmp 和 retval 这样泛泛的名字。不得不提到的一点是，tmp 实在是一个有够烂的名字，将其变为 timeTemp 或者类似的会更直观。它只应该是名字中的一部分。</li>\n<li>用具体的名字代替抽象的名字。</li>\n<li>为名字赋予更多的信息。</li>\n<li>名字应该有多长。</li>\n<li>利用名字的格式来传递含义。</li>\n</ol>\n<h3 id=\"提取变量\"><a href=\"#提取变量\" class=\"headerlink\" title=\"提取变量\"></a>提取变量</h3><p>先让我们来看看一个简单的情况：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ($scope.goodSkills.indexOf(<span class=\"string\">'analytics'</span>) !== <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">  skills.analytics = <span class=\"number\">5</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在上面的代码里比较难以看懂的就是数字5，这时候你会怎么做？写一行注释？这里的5就是一个 Magic Number。</p>\n<p>而实际上，最简单有效的办法就是把5提取成一个变量：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> LEVEL_FIVE = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> ($scope.goodSkills.indexOf(<span class=\"string\">'analytics'</span>) !== <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">  skills.analytics = LEVEL_FIVE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"提炼函数\"><a href=\"#提炼函数\" class=\"headerlink\" title=\"提炼函数\"></a>提炼函数</h3><p>这个简单有效的方法就是为了对付之前太长的函数，抽取提炼函数出应该抽取出来的部分成为一个新的函数。引自《重构》一书的说法，短的精巧的函数有以下的特点：</p>\n<ol>\n<li>如果每个函数的粒度都很小，那么函数被复用的机会就更大；</li>\n<li>是这会让高层函数读起来就像一系列注释一样，容易理解；</li>\n<li>是如果函数都是细粒度，那么函数的复写也会更加容易。</li>\n</ol>\n<p>在提炼函数中我们所要做的就是——判断出原有的函数的意图，再依据我们的新意图来命名新的函数。然后判断依赖——变量值，处理这些变量。提取出函数，最近对其测试。</p>\n<p>这里只简单地对重构进行一些介绍，更多详细信息请参阅《重构：改善既有代码的设计》。</p>\n","excerpt":"<blockquote>\n<p>重构，一言以蔽之，就是在不改变外部行为的前提下，有条不紊地改善代码。</p>\n</blockquote>\n<p>代码重构（英语：Code refactoring）指对软件代码做任何更动以增加可读性或者简化结构而不影响输出结果。在经历了一年多的工作之后，我平时的主要工作就是修 Bug。刚开始的时候觉得无聊，后来才发现修 Bug 需要更好的技术。有时候你可能要面对着一坨一坨的代码，有时候你可能要花几天的时间去阅读代码。而，你重写那几十代码可能只会花上你不到一天的时间。但是如果你没办法理解当时为什么这么做，你的修改只会带来更多的 Bug。修 Bug，更多的是维护代码。还是前人总结的那句话对:</p>\n<blockquote>\n<p>写代码容易，读代码难。</p>\n</blockquote>\n<p>假设我们写这些代码只要半天，而别人读起来要一天。为什么不试着用一天的时候去写这些代码，让别人花半天或者更少的时间来理解。</p>\n<h3 id=\"重命名\"><a href=\"#重命名\" class=\"headerlink\" title=\"重命名\"></a>重命名</h3><p>在上一节中，我们提到了命名的重要性，这里首先要说到的也就是重命名~~~。让再看看《编写可读代码的艺术》也提到了这几点：</p>","more":"<ol>\n<li>选择专业的词。最好是可以和业务相关的，它应该极具表现力。</li>\n<li>避免像 tmp 和 retval 这样泛泛的名字。不得不提到的一点是，tmp 实在是一个有够烂的名字，将其变为 timeTemp 或者类似的会更直观。它只应该是名字中的一部分。</li>\n<li>用具体的名字代替抽象的名字。</li>\n<li>为名字赋予更多的信息。</li>\n<li>名字应该有多长。</li>\n<li>利用名字的格式来传递含义。</li>\n</ol>\n<h3 id=\"提取变量\"><a href=\"#提取变量\" class=\"headerlink\" title=\"提取变量\"></a>提取变量</h3><p>先让我们来看看一个简单的情况：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ($scope.goodSkills.indexOf(<span class=\"string\">'analytics'</span>) !== <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">  skills.analytics = <span class=\"number\">5</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在上面的代码里比较难以看懂的就是数字5，这时候你会怎么做？写一行注释？这里的5就是一个 Magic Number。</p>\n<p>而实际上，最简单有效的办法就是把5提取成一个变量：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> LEVEL_FIVE = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> ($scope.goodSkills.indexOf(<span class=\"string\">'analytics'</span>) !== <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">  skills.analytics = LEVEL_FIVE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"提炼函数\"><a href=\"#提炼函数\" class=\"headerlink\" title=\"提炼函数\"></a>提炼函数</h3><p>这个简单有效的方法就是为了对付之前太长的函数，抽取提炼函数出应该抽取出来的部分成为一个新的函数。引自《重构》一书的说法，短的精巧的函数有以下的特点：</p>\n<ol>\n<li>如果每个函数的粒度都很小，那么函数被复用的机会就更大；</li>\n<li>是这会让高层函数读起来就像一系列注释一样，容易理解；</li>\n<li>是如果函数都是细粒度，那么函数的复写也会更加容易。</li>\n</ol>\n<p>在提炼函数中我们所要做的就是——判断出原有的函数的意图，再依据我们的新意图来命名新的函数。然后判断依赖——变量值，处理这些变量。提取出函数，最近对其测试。</p>\n<p>这里只简单地对重构进行一些介绍，更多详细信息请参阅《重构：改善既有代码的设计》。</p>"},{"title":"可读的代码","date":"2016-05-03T13:45:08.000Z","_content":"\n过去，我有过在不同的场合吐槽别人的代码写得烂。而我写的仅仅是比别人好一点而已——而不是好很多。\n\n然而这是一件很难的事，人们对于同一件事物未来的考虑都是不一样的。同样的代码在相同的情景下，不同的人会有不同的设计模式。同样的代码在不同的情景下，同样的人会有不同的设计模式。在这里，我们没有办法讨论设计模式，也不需要讨论。\n\n我们所需要做的是，确保我们的代码易读、易测试，看上去这样就够了，然而这也是挺复杂的一件事:\n\n - 确保我们的变量名、函数名是易读的\n - 没有复杂的逻辑判断\n - 没有多层嵌套 (事不过三)\n - 减少复杂函数的出现（如,不超过三十行）\n - 然后，你要去测试它。这样你就知道需要什么，实际上要做到这些也不是一些难事。\n\n<!-- more -->\n\n只是首先，我们要知道我们要自己需要这些。对于没有太多编程经验的人，建议先从两个基本点做起：\n\n - 命名\n - 函数长度\n\n首先要说的就是程序员认为最难的一个话题了——命名。\n\n### 命名\n\n命名是一个特别长的，也是特别忧伤的故事。我想作为一个程序员的你，也相当恐惧这件事。一个好的函数名、变量名应该包含着这个函数的信息，如这个函数是干什么的，或者这个函数是怎么来的，这个变量名存储的是什么。\n\n正因为取名字是一件很重要的事，所以它也是一件很难的事。一个好的函数名、变量名应该能正确地表达出它的涵义。如你可以猜到下面的代码中的i是什么意思吗？\n\n```python\nfruits = ['banana', 'apple',  'mango']\nfor i in fruits:        # Second Example\n   print 'Current fruit :', i\n```\n\n那如果换成下面的代码会不会更容易阅读呢？\n\n\n```python\nfruits = ['banana', 'apple',  'mango']\nfor fruit in fruits:        # Second Example\n   print 'Current fruit :', fruit\n```\n\n而命令还存在于对函数的命名上，如我们可能会用 getNumber 来表示去获取一个数值，但是要知道这样的命名并不是在所有的语言中都可以这样用。如在 Java 中存在 getter 和 setter 这种模式，如下的代码所示：\n\n\n```\npublic String getNumber() {\n  return number;\n}\npublic void setNumber(String number) {\n  this.number = number;\n}\n```\n\n如果我们是去取某个东西的数值，那么我们应该使用 retrieveNumber 这样的更具代表性的名字。\n\n在《编写可读代码的艺术》也提到了这几点：\n\n1. 选择专业的词。最好是可以和业务相关的，它应该极具表现力。\n2. 避免像 tmp 和 retval 这样泛泛的名字。不得不提到的一点是，tmp 实在是一个有够烂的名字，将其变为 timeTemp 或者类似的会更直观。它只应该是名字中的一部分。\n3. 用具体的名字代替抽象的名字。\n4. 为名字赋予更多的信息。\n5. 名字应该有多长。\n6. 利用名字的格式来传递含义。\n\n### 函数长度\n\n> 函数是指一段在一起的、可以做某一件事儿的程序。\n\n这就意味着从定义上来说，这段函数应该只做一件事——但是什么才是真正的一件事呢？实际上还是 TASKING，将一个复杂的过程一步步地分解成一个个的函数，每个函数只做他的名称对应的事。对于一个任务来说，他有一个稳定的过程，在这个过程中的每一步都可以变成一个函数。\n\n因此，长的代码意味着一件事——这个函数可能违反了单一职责原则，即这个类做了太多的事。通常来说，一个类，只有一个引起它变化的原因。当一个类有多个职责的时候，这些代码就容易耦合到一起了。\n\n对于函数长度的控制是为了有效控制分支深度。如果我们用一个函数来实现一个复杂的功能，那么不仅仅在我们下次阅读的时间会花费大量的时间。而且如果我们的代码没有测试话，那么这些代码就会变得越来越难以理解。而在我们写这些函数的时候就没有测试，那么这个函数就会变得越来越难以测试，它们就会变成遗留代码。\n\n### 其他\n\n虽然只想介绍上面的简单的两点，但是顺便在这里也提一下重复代码~~。\n\n#### 重复代码\n\n在《重构》一书中首先提到的 Code Smell 就是重复代码（Duplicate Code）。重复代码看上去并不会影响我们的阅读体验，但是实际上会发生这样的事——重复的代码阅读体验越不好。\n\nDRY(Don't Repeat Yourself)原则是特别值得玩味的。当我们不断地偏执的去减少重复代码的时候，会导致复杂度越来越高。在适当的时候，由于业务发生变更，我们还需要去拆解这些不重复的代码。\n\n","source":"_posts/3.2.1-readable.md","raw":"title: 可读的代码\ndate: 2016-5-3 21:45:08\ntags:\n---\n\n过去，我有过在不同的场合吐槽别人的代码写得烂。而我写的仅仅是比别人好一点而已——而不是好很多。\n\n然而这是一件很难的事，人们对于同一件事物未来的考虑都是不一样的。同样的代码在相同的情景下，不同的人会有不同的设计模式。同样的代码在不同的情景下，同样的人会有不同的设计模式。在这里，我们没有办法讨论设计模式，也不需要讨论。\n\n我们所需要做的是，确保我们的代码易读、易测试，看上去这样就够了，然而这也是挺复杂的一件事:\n\n - 确保我们的变量名、函数名是易读的\n - 没有复杂的逻辑判断\n - 没有多层嵌套 (事不过三)\n - 减少复杂函数的出现（如,不超过三十行）\n - 然后，你要去测试它。这样你就知道需要什么，实际上要做到这些也不是一些难事。\n\n<!-- more -->\n\n只是首先，我们要知道我们要自己需要这些。对于没有太多编程经验的人，建议先从两个基本点做起：\n\n - 命名\n - 函数长度\n\n首先要说的就是程序员认为最难的一个话题了——命名。\n\n### 命名\n\n命名是一个特别长的，也是特别忧伤的故事。我想作为一个程序员的你，也相当恐惧这件事。一个好的函数名、变量名应该包含着这个函数的信息，如这个函数是干什么的，或者这个函数是怎么来的，这个变量名存储的是什么。\n\n正因为取名字是一件很重要的事，所以它也是一件很难的事。一个好的函数名、变量名应该能正确地表达出它的涵义。如你可以猜到下面的代码中的i是什么意思吗？\n\n```python\nfruits = ['banana', 'apple',  'mango']\nfor i in fruits:        # Second Example\n   print 'Current fruit :', i\n```\n\n那如果换成下面的代码会不会更容易阅读呢？\n\n\n```python\nfruits = ['banana', 'apple',  'mango']\nfor fruit in fruits:        # Second Example\n   print 'Current fruit :', fruit\n```\n\n而命令还存在于对函数的命名上，如我们可能会用 getNumber 来表示去获取一个数值，但是要知道这样的命名并不是在所有的语言中都可以这样用。如在 Java 中存在 getter 和 setter 这种模式，如下的代码所示：\n\n\n```\npublic String getNumber() {\n  return number;\n}\npublic void setNumber(String number) {\n  this.number = number;\n}\n```\n\n如果我们是去取某个东西的数值，那么我们应该使用 retrieveNumber 这样的更具代表性的名字。\n\n在《编写可读代码的艺术》也提到了这几点：\n\n1. 选择专业的词。最好是可以和业务相关的，它应该极具表现力。\n2. 避免像 tmp 和 retval 这样泛泛的名字。不得不提到的一点是，tmp 实在是一个有够烂的名字，将其变为 timeTemp 或者类似的会更直观。它只应该是名字中的一部分。\n3. 用具体的名字代替抽象的名字。\n4. 为名字赋予更多的信息。\n5. 名字应该有多长。\n6. 利用名字的格式来传递含义。\n\n### 函数长度\n\n> 函数是指一段在一起的、可以做某一件事儿的程序。\n\n这就意味着从定义上来说，这段函数应该只做一件事——但是什么才是真正的一件事呢？实际上还是 TASKING，将一个复杂的过程一步步地分解成一个个的函数，每个函数只做他的名称对应的事。对于一个任务来说，他有一个稳定的过程，在这个过程中的每一步都可以变成一个函数。\n\n因此，长的代码意味着一件事——这个函数可能违反了单一职责原则，即这个类做了太多的事。通常来说，一个类，只有一个引起它变化的原因。当一个类有多个职责的时候，这些代码就容易耦合到一起了。\n\n对于函数长度的控制是为了有效控制分支深度。如果我们用一个函数来实现一个复杂的功能，那么不仅仅在我们下次阅读的时间会花费大量的时间。而且如果我们的代码没有测试话，那么这些代码就会变得越来越难以理解。而在我们写这些函数的时候就没有测试，那么这个函数就会变得越来越难以测试，它们就会变成遗留代码。\n\n### 其他\n\n虽然只想介绍上面的简单的两点，但是顺便在这里也提一下重复代码~~。\n\n#### 重复代码\n\n在《重构》一书中首先提到的 Code Smell 就是重复代码（Duplicate Code）。重复代码看上去并不会影响我们的阅读体验，但是实际上会发生这样的事——重复的代码阅读体验越不好。\n\nDRY(Don't Repeat Yourself)原则是特别值得玩味的。当我们不断地偏执的去减少重复代码的时候，会导致复杂度越来越高。在适当的时候，由于业务发生变更，我们还需要去拆解这些不重复的代码。\n\n","slug":"3.2.1-readable","published":1,"updated":"2016-05-03T12:48:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuf7mpfj000stsif00kcwh45","content":"<p>过去，我有过在不同的场合吐槽别人的代码写得烂。而我写的仅仅是比别人好一点而已——而不是好很多。</p>\n<p>然而这是一件很难的事，人们对于同一件事物未来的考虑都是不一样的。同样的代码在相同的情景下，不同的人会有不同的设计模式。同样的代码在不同的情景下，同样的人会有不同的设计模式。在这里，我们没有办法讨论设计模式，也不需要讨论。</p>\n<p>我们所需要做的是，确保我们的代码易读、易测试，看上去这样就够了，然而这也是挺复杂的一件事:</p>\n<ul>\n<li>确保我们的变量名、函数名是易读的</li>\n<li>没有复杂的逻辑判断</li>\n<li>没有多层嵌套 (事不过三)</li>\n<li>减少复杂函数的出现（如,不超过三十行）</li>\n<li>然后，你要去测试它。这样你就知道需要什么，实际上要做到这些也不是一些难事。</li>\n</ul>\n<a id=\"more\"></a>\n<p>只是首先，我们要知道我们要自己需要这些。对于没有太多编程经验的人，建议先从两个基本点做起：</p>\n<ul>\n<li>命名</li>\n<li>函数长度</li>\n</ul>\n<p>首先要说的就是程序员认为最难的一个话题了——命名。</p>\n<h3 id=\"命名\"><a href=\"#命名\" class=\"headerlink\" title=\"命名\"></a>命名</h3><p>命名是一个特别长的，也是特别忧伤的故事。我想作为一个程序员的你，也相当恐惧这件事。一个好的函数名、变量名应该包含着这个函数的信息，如这个函数是干什么的，或者这个函数是怎么来的，这个变量名存储的是什么。</p>\n<p>正因为取名字是一件很重要的事，所以它也是一件很难的事。一个好的函数名、变量名应该能正确地表达出它的涵义。如你可以猜到下面的代码中的i是什么意思吗？</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fruits = [<span class=\"string\">'banana'</span>, <span class=\"string\">'apple'</span>,  <span class=\"string\">'mango'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> fruits:        <span class=\"comment\"># Second Example</span></span><br><span class=\"line\">   <span class=\"keyword\">print</span> <span class=\"string\">'Current fruit :'</span>, i</span><br></pre></td></tr></table></figure>\n<p>那如果换成下面的代码会不会更容易阅读呢？</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fruits = [<span class=\"string\">'banana'</span>, <span class=\"string\">'apple'</span>,  <span class=\"string\">'mango'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> fruit <span class=\"keyword\">in</span> fruits:        <span class=\"comment\"># Second Example</span></span><br><span class=\"line\">   <span class=\"keyword\">print</span> <span class=\"string\">'Current fruit :'</span>, fruit</span><br></pre></td></tr></table></figure>\n<p>而命令还存在于对函数的命名上，如我们可能会用 getNumber 来表示去获取一个数值，但是要知道这样的命名并不是在所有的语言中都可以这样用。如在 Java 中存在 getter 和 setter 这种模式，如下的代码所示：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"built_in\">String</span> getNumber() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"built_in\">void</span> setNumber(<span class=\"built_in\">String</span> <span class=\"built_in\">number</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.number = <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果我们是去取某个东西的数值，那么我们应该使用 retrieveNumber 这样的更具代表性的名字。</p>\n<p>在《编写可读代码的艺术》也提到了这几点：</p>\n<ol>\n<li>选择专业的词。最好是可以和业务相关的，它应该极具表现力。</li>\n<li>避免像 tmp 和 retval 这样泛泛的名字。不得不提到的一点是，tmp 实在是一个有够烂的名字，将其变为 timeTemp 或者类似的会更直观。它只应该是名字中的一部分。</li>\n<li>用具体的名字代替抽象的名字。</li>\n<li>为名字赋予更多的信息。</li>\n<li>名字应该有多长。</li>\n<li>利用名字的格式来传递含义。</li>\n</ol>\n<h3 id=\"函数长度\"><a href=\"#函数长度\" class=\"headerlink\" title=\"函数长度\"></a>函数长度</h3><blockquote>\n<p>函数是指一段在一起的、可以做某一件事儿的程序。</p>\n</blockquote>\n<p>这就意味着从定义上来说，这段函数应该只做一件事——但是什么才是真正的一件事呢？实际上还是 TASKING，将一个复杂的过程一步步地分解成一个个的函数，每个函数只做他的名称对应的事。对于一个任务来说，他有一个稳定的过程，在这个过程中的每一步都可以变成一个函数。</p>\n<p>因此，长的代码意味着一件事——这个函数可能违反了单一职责原则，即这个类做了太多的事。通常来说，一个类，只有一个引起它变化的原因。当一个类有多个职责的时候，这些代码就容易耦合到一起了。</p>\n<p>对于函数长度的控制是为了有效控制分支深度。如果我们用一个函数来实现一个复杂的功能，那么不仅仅在我们下次阅读的时间会花费大量的时间。而且如果我们的代码没有测试话，那么这些代码就会变得越来越难以理解。而在我们写这些函数的时候就没有测试，那么这个函数就会变得越来越难以测试，它们就会变成遗留代码。</p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>虽然只想介绍上面的简单的两点，但是顺便在这里也提一下重复代码~~。</p>\n<h4 id=\"重复代码\"><a href=\"#重复代码\" class=\"headerlink\" title=\"重复代码\"></a>重复代码</h4><p>在《重构》一书中首先提到的 Code Smell 就是重复代码（Duplicate Code）。重复代码看上去并不会影响我们的阅读体验，但是实际上会发生这样的事——重复的代码阅读体验越不好。</p>\n<p>DRY(Don’t Repeat Yourself)原则是特别值得玩味的。当我们不断地偏执的去减少重复代码的时候，会导致复杂度越来越高。在适当的时候，由于业务发生变更，我们还需要去拆解这些不重复的代码。</p>\n","excerpt":"<p>过去，我有过在不同的场合吐槽别人的代码写得烂。而我写的仅仅是比别人好一点而已——而不是好很多。</p>\n<p>然而这是一件很难的事，人们对于同一件事物未来的考虑都是不一样的。同样的代码在相同的情景下，不同的人会有不同的设计模式。同样的代码在不同的情景下，同样的人会有不同的设计模式。在这里，我们没有办法讨论设计模式，也不需要讨论。</p>\n<p>我们所需要做的是，确保我们的代码易读、易测试，看上去这样就够了，然而这也是挺复杂的一件事:</p>\n<ul>\n<li>确保我们的变量名、函数名是易读的</li>\n<li>没有复杂的逻辑判断</li>\n<li>没有多层嵌套 (事不过三)</li>\n<li>减少复杂函数的出现（如,不超过三十行）</li>\n<li>然后，你要去测试它。这样你就知道需要什么，实际上要做到这些也不是一些难事。</li>\n</ul>","more":"<p>只是首先，我们要知道我们要自己需要这些。对于没有太多编程经验的人，建议先从两个基本点做起：</p>\n<ul>\n<li>命名</li>\n<li>函数长度</li>\n</ul>\n<p>首先要说的就是程序员认为最难的一个话题了——命名。</p>\n<h3 id=\"命名\"><a href=\"#命名\" class=\"headerlink\" title=\"命名\"></a>命名</h3><p>命名是一个特别长的，也是特别忧伤的故事。我想作为一个程序员的你，也相当恐惧这件事。一个好的函数名、变量名应该包含着这个函数的信息，如这个函数是干什么的，或者这个函数是怎么来的，这个变量名存储的是什么。</p>\n<p>正因为取名字是一件很重要的事，所以它也是一件很难的事。一个好的函数名、变量名应该能正确地表达出它的涵义。如你可以猜到下面的代码中的i是什么意思吗？</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fruits = [<span class=\"string\">'banana'</span>, <span class=\"string\">'apple'</span>,  <span class=\"string\">'mango'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> fruits:        <span class=\"comment\"># Second Example</span></span><br><span class=\"line\">   <span class=\"keyword\">print</span> <span class=\"string\">'Current fruit :'</span>, i</span><br></pre></td></tr></table></figure>\n<p>那如果换成下面的代码会不会更容易阅读呢？</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fruits = [<span class=\"string\">'banana'</span>, <span class=\"string\">'apple'</span>,  <span class=\"string\">'mango'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> fruit <span class=\"keyword\">in</span> fruits:        <span class=\"comment\"># Second Example</span></span><br><span class=\"line\">   <span class=\"keyword\">print</span> <span class=\"string\">'Current fruit :'</span>, fruit</span><br></pre></td></tr></table></figure>\n<p>而命令还存在于对函数的命名上，如我们可能会用 getNumber 来表示去获取一个数值，但是要知道这样的命名并不是在所有的语言中都可以这样用。如在 Java 中存在 getter 和 setter 这种模式，如下的代码所示：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"built_in\">String</span> getNumber() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"built_in\">void</span> setNumber(<span class=\"built_in\">String</span> <span class=\"built_in\">number</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.number = <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果我们是去取某个东西的数值，那么我们应该使用 retrieveNumber 这样的更具代表性的名字。</p>\n<p>在《编写可读代码的艺术》也提到了这几点：</p>\n<ol>\n<li>选择专业的词。最好是可以和业务相关的，它应该极具表现力。</li>\n<li>避免像 tmp 和 retval 这样泛泛的名字。不得不提到的一点是，tmp 实在是一个有够烂的名字，将其变为 timeTemp 或者类似的会更直观。它只应该是名字中的一部分。</li>\n<li>用具体的名字代替抽象的名字。</li>\n<li>为名字赋予更多的信息。</li>\n<li>名字应该有多长。</li>\n<li>利用名字的格式来传递含义。</li>\n</ol>\n<h3 id=\"函数长度\"><a href=\"#函数长度\" class=\"headerlink\" title=\"函数长度\"></a>函数长度</h3><blockquote>\n<p>函数是指一段在一起的、可以做某一件事儿的程序。</p>\n</blockquote>\n<p>这就意味着从定义上来说，这段函数应该只做一件事——但是什么才是真正的一件事呢？实际上还是 TASKING，将一个复杂的过程一步步地分解成一个个的函数，每个函数只做他的名称对应的事。对于一个任务来说，他有一个稳定的过程，在这个过程中的每一步都可以变成一个函数。</p>\n<p>因此，长的代码意味着一件事——这个函数可能违反了单一职责原则，即这个类做了太多的事。通常来说，一个类，只有一个引起它变化的原因。当一个类有多个职责的时候，这些代码就容易耦合到一起了。</p>\n<p>对于函数长度的控制是为了有效控制分支深度。如果我们用一个函数来实现一个复杂的功能，那么不仅仅在我们下次阅读的时间会花费大量的时间。而且如果我们的代码没有测试话，那么这些代码就会变得越来越难以理解。而在我们写这些函数的时候就没有测试，那么这个函数就会变得越来越难以测试，它们就会变成遗留代码。</p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>虽然只想介绍上面的简单的两点，但是顺便在这里也提一下重复代码~~。</p>\n<h4 id=\"重复代码\"><a href=\"#重复代码\" class=\"headerlink\" title=\"重复代码\"></a>重复代码</h4><p>在《重构》一书中首先提到的 Code Smell 就是重复代码（Duplicate Code）。重复代码看上去并不会影响我们的阅读体验，但是实际上会发生这样的事——重复的代码阅读体验越不好。</p>\n<p>DRY(Don’t Repeat Yourself)原则是特别值得玩味的。当我们不断地偏执的去减少重复代码的时候，会导致复杂度越来越高。在适当的时候，由于业务发生变更，我们还需要去拆解这些不重复的代码。</p>"},{"title":"Intellij Idea 重构","date":"2016-05-03T15:45:08.000Z","_content":"\n下面简单地介绍一下，一些可以直接使用 IDE 就能完成的重构。这种重构可以用在日常的工作中，只需要使用 IDE 上的快捷键就可以完成了。\n\n### 提炼函数\n\nIntellij IDEA 带了一些有意思的快捷键，或者说自己之前不在意这些快捷键的存在。重构作为单独的一个菜单，显然也突显了其功能的重要性，说说**提炼函数**，或者说提出方法。\n\n快捷键\n\nMac:  ``alt``+``command``+``M``\n\nWindows/Linux: ``Ctrl``+``Alt``+``M``\n\n鼠标: Refactor | Extract | Method\n\n<!-- more -->\n\n**重构之前**\n\n以重构一书代码为例，重构之前的代码\n\n```java\npublic class extract {\n    private String _name;\n\n    void printOwing(double amount){\n        printBanner();\n\n        System.out.println(\"name:\" + _name);\n        System.out.println(\"amount\" + amount);\n    }\n\n    private void printBanner() {\n    }\n}\n```\n\n**重构**\n\n选中\n\n```java\nSystem.out.println(\"name:\" + _name);\nSystem.out.println(\"amount\" + amount);\n```\n\n按下上述的快捷键，会弹出下面的对话框\n\n![Extrct Method](http://growth.phodal.com/assets/article/chapter3/extract-method.png)\n\n输入\n\n     printDetails\n\n那么重构就完成了。\n\n**重构之后**\n\nIDE 就可以将方法提出来\n\n```java\npublic class extract {\n    private String _name;\n\n    void printOwing(double amount){\n        printBanner();\n        printDetails(amount);\n    }\n\n    private void printDetails(double amount) {\n        System.out.println(\"name:\" + _name);\n        System.out.println(\"amount\" + amount);\n    }\n\n    private void printBanner() {\n    }\n}\n```\n\n**重构**\n\n还有一种就以 Intellij IDEA 的示例为例，这像是在说其的智能。\n\n```java\npublic class extract {\n    public void method() {\n        int one = 1;\n        int two = 2;\n        int three = one + two;\n        int four = one + three;\n    }\n}\n```\n\n只是这次要选中的只有一行，\n\n```\nint three = one + two;\n```\n\n以便于其的智能，它便很愉快地告诉你它又找到了一个重复\n\n     IDE has detected 1 code fragments in this file that can be replaced with a call to extracted method...\n\n便返回了这样一个结果\n\n```java\npublic class extract {\n\n    public void method() {\n        int one = 1;\n        int two = 2;\n        int three = add(one, two);\n        int four = add(one, three);\n    }\n\n    private int add(int one, int two) {\n        return one + two;\n    }\n\n}\n```\n\n然而我们就可以很愉快地继续和它玩耍了。当然这其中还会有一些更复杂的情形，当学会了这一个剩下的也不难了。\n\n### 内联函数\n\n继续走这重构一书的复习之路，接着便是内联，除了内联变量，当然还有内联函数。\n\n快捷键\n\nMac:  ``alt``+``command``+``N``\n\nWindows/Linux: ``Ctrl``+``Alt``+``N``\n\n鼠标: Refactor | Inline\n\n**重构之前**\n\n```java\npublic class extract {\n\n    public void method() {\n        int one = 1;\n        int two = 2;\n        int three = add(one, two);\n        int four = add(one, three);\n    }\n\n    private int add(int one, int two) {\n        return one + two;\n    }\n\n}\n```\n\n在``add(one,two)``很愉快地按上个快捷键吧，就会弹出\n\n![Inline Method](http://growth.phodal.com/assets/article/chapter3/inline.jpg)\n\n再轻轻地回车，Refactor 就这么结束了。。\n\n**Intellij Idea 内联临时变量**\n\n以书中的代码为例\n\n```java\ndouble basePrice = anOrder.basePrice();\nreturn (basePrice > 1000);\n```\n\n同样的，按下``Command``+``alt``+``N``\n\n```java\nreturn (anOrder.basePrice() > 1000);\n```\n\n对于 python 之类的语言也是如此\n\n```python\ndef inline_method():\n    baseprice = anOrder.basePrice()\n    return baseprice > 1000\n```\n\n### 查询取代临时变量\n\n快捷键\n\nMac:  木有\n\nWindows/Linux:  木有\n\n或者: ``Shift``+``alt``+``command``+``T`` 再选择  ``Replace Temp with Query``\n\n鼠标: **Refactor** | ``Replace Temp with Query``\n\n**重构之前**\n\n过多的临时变量会让我们写出更长的函数，函数不应该太多，以便使功能单一。这也是重构的另外的目的所在，只有函数专注于其功能，才会更容易读懂。\n\n以书中的代码为例\n\n```java\nimport java.lang.System;\n\npublic class replaceTemp {\n    public void count() {\n        double basePrice = _quantity * _itemPrice;\n        if (basePrice > 1000) {\n            return basePrice * 0.95;\n        } else {\n            return basePrice * 0.98;\n        }\n    }\n}\n```\n\n**重构**\n\n选中``basePrice``很愉快地拿鼠标点上面的重构\n\n![Replace Temp With Query](http://growth.phodal.com/assets/article/chapter3/replace.jpg)\n\n便会返回\n\n```java\nimport java.lang.System;\n\npublic class replaceTemp {\n    public void count() {\n        if (basePrice() > 1000) {\n            return basePrice() * 0.95;\n        } else {\n            return basePrice() * 0.98;\n        }\n    }\n\n    private double basePrice() {\n        return _quantity * _itemPrice;\n    }\n}\n```\n\n而实际上我们也可以\n\n1. 选中\n\n        _quantity * _itemPrice\n\n2. 对其进行``Extrace Method``\n\n3. 选择``basePrice``再``Inline Method``\n\n在 Intellij IDEA 的文档中对此是这样的例子\n\n```java\npublic class replaceTemp {\n\n    public void method() {\n        String str = \"str\";\n        String aString = returnString().concat(str);\n        System.out.println(aString);\n    }\n\n}\n```\n\n接着我们选中``aString``，再打开重构菜单，或者\n\n``Command``+``Alt``+``Shift``+``T`` 再选中 Replace Temp with Query\n\n便会有下面的结果:\n\n```java\nimport java.lang.String;\n\npublic class replaceTemp {\n\n    public void method() {\n        String str = \"str\";\n        System.out.println(aString(str));\n    }\n\n    private String aString(String str) {\n        return returnString().concat(str);\n    }\n\n}\n```\n","source":"_posts/3.2.3-intellij-refactor.md","raw":"title: Intellij Idea 重构\ndate: 2016-5-3 23:45:08\ntags:\n---\n\n下面简单地介绍一下，一些可以直接使用 IDE 就能完成的重构。这种重构可以用在日常的工作中，只需要使用 IDE 上的快捷键就可以完成了。\n\n### 提炼函数\n\nIntellij IDEA 带了一些有意思的快捷键，或者说自己之前不在意这些快捷键的存在。重构作为单独的一个菜单，显然也突显了其功能的重要性，说说**提炼函数**，或者说提出方法。\n\n快捷键\n\nMac:  ``alt``+``command``+``M``\n\nWindows/Linux: ``Ctrl``+``Alt``+``M``\n\n鼠标: Refactor | Extract | Method\n\n<!-- more -->\n\n**重构之前**\n\n以重构一书代码为例，重构之前的代码\n\n```java\npublic class extract {\n    private String _name;\n\n    void printOwing(double amount){\n        printBanner();\n\n        System.out.println(\"name:\" + _name);\n        System.out.println(\"amount\" + amount);\n    }\n\n    private void printBanner() {\n    }\n}\n```\n\n**重构**\n\n选中\n\n```java\nSystem.out.println(\"name:\" + _name);\nSystem.out.println(\"amount\" + amount);\n```\n\n按下上述的快捷键，会弹出下面的对话框\n\n![Extrct Method](http://growth.phodal.com/assets/article/chapter3/extract-method.png)\n\n输入\n\n     printDetails\n\n那么重构就完成了。\n\n**重构之后**\n\nIDE 就可以将方法提出来\n\n```java\npublic class extract {\n    private String _name;\n\n    void printOwing(double amount){\n        printBanner();\n        printDetails(amount);\n    }\n\n    private void printDetails(double amount) {\n        System.out.println(\"name:\" + _name);\n        System.out.println(\"amount\" + amount);\n    }\n\n    private void printBanner() {\n    }\n}\n```\n\n**重构**\n\n还有一种就以 Intellij IDEA 的示例为例，这像是在说其的智能。\n\n```java\npublic class extract {\n    public void method() {\n        int one = 1;\n        int two = 2;\n        int three = one + two;\n        int four = one + three;\n    }\n}\n```\n\n只是这次要选中的只有一行，\n\n```\nint three = one + two;\n```\n\n以便于其的智能，它便很愉快地告诉你它又找到了一个重复\n\n     IDE has detected 1 code fragments in this file that can be replaced with a call to extracted method...\n\n便返回了这样一个结果\n\n```java\npublic class extract {\n\n    public void method() {\n        int one = 1;\n        int two = 2;\n        int three = add(one, two);\n        int four = add(one, three);\n    }\n\n    private int add(int one, int two) {\n        return one + two;\n    }\n\n}\n```\n\n然而我们就可以很愉快地继续和它玩耍了。当然这其中还会有一些更复杂的情形，当学会了这一个剩下的也不难了。\n\n### 内联函数\n\n继续走这重构一书的复习之路，接着便是内联，除了内联变量，当然还有内联函数。\n\n快捷键\n\nMac:  ``alt``+``command``+``N``\n\nWindows/Linux: ``Ctrl``+``Alt``+``N``\n\n鼠标: Refactor | Inline\n\n**重构之前**\n\n```java\npublic class extract {\n\n    public void method() {\n        int one = 1;\n        int two = 2;\n        int three = add(one, two);\n        int four = add(one, three);\n    }\n\n    private int add(int one, int two) {\n        return one + two;\n    }\n\n}\n```\n\n在``add(one,two)``很愉快地按上个快捷键吧，就会弹出\n\n![Inline Method](http://growth.phodal.com/assets/article/chapter3/inline.jpg)\n\n再轻轻地回车，Refactor 就这么结束了。。\n\n**Intellij Idea 内联临时变量**\n\n以书中的代码为例\n\n```java\ndouble basePrice = anOrder.basePrice();\nreturn (basePrice > 1000);\n```\n\n同样的，按下``Command``+``alt``+``N``\n\n```java\nreturn (anOrder.basePrice() > 1000);\n```\n\n对于 python 之类的语言也是如此\n\n```python\ndef inline_method():\n    baseprice = anOrder.basePrice()\n    return baseprice > 1000\n```\n\n### 查询取代临时变量\n\n快捷键\n\nMac:  木有\n\nWindows/Linux:  木有\n\n或者: ``Shift``+``alt``+``command``+``T`` 再选择  ``Replace Temp with Query``\n\n鼠标: **Refactor** | ``Replace Temp with Query``\n\n**重构之前**\n\n过多的临时变量会让我们写出更长的函数，函数不应该太多，以便使功能单一。这也是重构的另外的目的所在，只有函数专注于其功能，才会更容易读懂。\n\n以书中的代码为例\n\n```java\nimport java.lang.System;\n\npublic class replaceTemp {\n    public void count() {\n        double basePrice = _quantity * _itemPrice;\n        if (basePrice > 1000) {\n            return basePrice * 0.95;\n        } else {\n            return basePrice * 0.98;\n        }\n    }\n}\n```\n\n**重构**\n\n选中``basePrice``很愉快地拿鼠标点上面的重构\n\n![Replace Temp With Query](http://growth.phodal.com/assets/article/chapter3/replace.jpg)\n\n便会返回\n\n```java\nimport java.lang.System;\n\npublic class replaceTemp {\n    public void count() {\n        if (basePrice() > 1000) {\n            return basePrice() * 0.95;\n        } else {\n            return basePrice() * 0.98;\n        }\n    }\n\n    private double basePrice() {\n        return _quantity * _itemPrice;\n    }\n}\n```\n\n而实际上我们也可以\n\n1. 选中\n\n        _quantity * _itemPrice\n\n2. 对其进行``Extrace Method``\n\n3. 选择``basePrice``再``Inline Method``\n\n在 Intellij IDEA 的文档中对此是这样的例子\n\n```java\npublic class replaceTemp {\n\n    public void method() {\n        String str = \"str\";\n        String aString = returnString().concat(str);\n        System.out.println(aString);\n    }\n\n}\n```\n\n接着我们选中``aString``，再打开重构菜单，或者\n\n``Command``+``Alt``+``Shift``+``T`` 再选中 Replace Temp with Query\n\n便会有下面的结果:\n\n```java\nimport java.lang.String;\n\npublic class replaceTemp {\n\n    public void method() {\n        String str = \"str\";\n        System.out.println(aString(str));\n    }\n\n    private String aString(String str) {\n        return returnString().concat(str);\n    }\n\n}\n```\n","slug":"3.2.3-intellij-refactor","published":1,"updated":"2016-05-03T12:52:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuf7mpfk000ttsifkwx3qkxk","content":"<p>下面简单地介绍一下，一些可以直接使用 IDE 就能完成的重构。这种重构可以用在日常的工作中，只需要使用 IDE 上的快捷键就可以完成了。</p>\n<h3 id=\"提炼函数\"><a href=\"#提炼函数\" class=\"headerlink\" title=\"提炼函数\"></a>提炼函数</h3><p>Intellij IDEA 带了一些有意思的快捷键，或者说自己之前不在意这些快捷键的存在。重构作为单独的一个菜单，显然也突显了其功能的重要性，说说<strong>提炼函数</strong>，或者说提出方法。</p>\n<p>快捷键</p>\n<p>Mac:  <code>alt</code>+<code>command</code>+<code>M</code></p>\n<p>Windows/Linux: <code>Ctrl</code>+<code>Alt</code>+<code>M</code></p>\n<p>鼠标: Refactor | Extract | Method</p>\n<a id=\"more\"></a>\n<p><strong>重构之前</strong></p>\n<p>以重构一书代码为例，重构之前的代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">extract</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String _name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printOwing</span><span class=\"params\">(<span class=\"keyword\">double</span> amount)</span></span>&#123;</span><br><span class=\"line\">        printBanner();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"name:\"</span> + _name);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"amount\"</span> + amount);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">printBanner</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>重构</strong></p>\n<p>选中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(<span class=\"string\">\"name:\"</span> + _name);</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"amount\"</span> + amount);</span><br></pre></td></tr></table></figure>\n<p>按下上述的快捷键，会弹出下面的对话框</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter3/extract-method.png\" alt=\"Extrct Method\"></p>\n<p>输入</p>\n<pre><code>printDetails\n</code></pre><p>那么重构就完成了。</p>\n<p><strong>重构之后</strong></p>\n<p>IDE 就可以将方法提出来</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">extract</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String _name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printOwing</span><span class=\"params\">(<span class=\"keyword\">double</span> amount)</span></span>&#123;</span><br><span class=\"line\">        printBanner();</span><br><span class=\"line\">        printDetails(amount);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">printDetails</span><span class=\"params\">(<span class=\"keyword\">double</span> amount)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"name:\"</span> + _name);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"amount\"</span> + amount);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">printBanner</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>重构</strong></p>\n<p>还有一种就以 Intellij IDEA 的示例为例，这像是在说其的智能。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">extract</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> one = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> two = <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> three = one + two;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> four = one + three;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>只是这次要选中的只有一行，</p>\n<figure class=\"highlight hsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> three = one + two<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n<p>以便于其的智能，它便很愉快地告诉你它又找到了一个重复</p>\n<pre><code>IDE has detected 1 code fragments in this file that can be replaced with a call to extracted method...\n</code></pre><p>便返回了这样一个结果</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">extract</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> one = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> two = <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> three = add(one, two);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> four = add(one, three);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> one, <span class=\"keyword\">int</span> two)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> one + two;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然而我们就可以很愉快地继续和它玩耍了。当然这其中还会有一些更复杂的情形，当学会了这一个剩下的也不难了。</p>\n<h3 id=\"内联函数\"><a href=\"#内联函数\" class=\"headerlink\" title=\"内联函数\"></a>内联函数</h3><p>继续走这重构一书的复习之路，接着便是内联，除了内联变量，当然还有内联函数。</p>\n<p>快捷键</p>\n<p>Mac:  <code>alt</code>+<code>command</code>+<code>N</code></p>\n<p>Windows/Linux: <code>Ctrl</code>+<code>Alt</code>+<code>N</code></p>\n<p>鼠标: Refactor | Inline</p>\n<p><strong>重构之前</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">extract</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> one = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> two = <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> three = add(one, two);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> four = add(one, three);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> one, <span class=\"keyword\">int</span> two)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> one + two;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在<code>add(one,two)</code>很愉快地按上个快捷键吧，就会弹出</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter3/inline.jpg\" alt=\"Inline Method\"></p>\n<p>再轻轻地回车，Refactor 就这么结束了。。</p>\n<p><strong>Intellij Idea 内联临时变量</strong></p>\n<p>以书中的代码为例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">double</span> basePrice = anOrder.basePrice();</span><br><span class=\"line\"><span class=\"keyword\">return</span> (basePrice &gt; <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n<p>同样的，按下<code>Command</code>+<code>alt</code>+<code>N</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> (anOrder.basePrice() &gt; <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n<p>对于 python 之类的语言也是如此</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">inline_method</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    baseprice = anOrder.basePrice()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> baseprice &gt; <span class=\"number\">1000</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"查询取代临时变量\"><a href=\"#查询取代临时变量\" class=\"headerlink\" title=\"查询取代临时变量\"></a>查询取代临时变量</h3><p>快捷键</p>\n<p>Mac:  木有</p>\n<p>Windows/Linux:  木有</p>\n<p>或者: <code>Shift</code>+<code>alt</code>+<code>command</code>+<code>T</code> 再选择  <code>Replace Temp with Query</code></p>\n<p>鼠标: <strong>Refactor</strong> | <code>Replace Temp with Query</code></p>\n<p><strong>重构之前</strong></p>\n<p>过多的临时变量会让我们写出更长的函数，函数不应该太多，以便使功能单一。这也是重构的另外的目的所在，只有函数专注于其功能，才会更容易读懂。</p>\n<p>以书中的代码为例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.lang.System;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">replaceTemp</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">count</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">double</span> basePrice = _quantity * _itemPrice;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (basePrice &gt; <span class=\"number\">1000</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> basePrice * <span class=\"number\">0.95</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> basePrice * <span class=\"number\">0.98</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>重构</strong></p>\n<p>选中<code>basePrice</code>很愉快地拿鼠标点上面的重构</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter3/replace.jpg\" alt=\"Replace Temp With Query\"></p>\n<p>便会返回</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.lang.System;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">replaceTemp</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">count</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (basePrice() &gt; <span class=\"number\">1000</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> basePrice() * <span class=\"number\">0.95</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> basePrice() * <span class=\"number\">0.98</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">double</span> <span class=\"title\">basePrice</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _quantity * _itemPrice;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>而实际上我们也可以</p>\n<ol>\n<li><p>选中</p>\n<pre><code>_quantity * _itemPrice\n</code></pre></li>\n<li><p>对其进行<code>Extrace Method</code></p>\n</li>\n<li><p>选择<code>basePrice</code>再<code>Inline Method</code></p>\n</li>\n</ol>\n<p>在 Intellij IDEA 的文档中对此是这样的例子</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">replaceTemp</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        String str = <span class=\"string\">\"str\"</span>;</span><br><span class=\"line\">        String aString = returnString().concat(str);</span><br><span class=\"line\">        System.out.println(aString);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接着我们选中<code>aString</code>，再打开重构菜单，或者</p>\n<p><code>Command</code>+<code>Alt</code>+<code>Shift</code>+<code>T</code> 再选中 Replace Temp with Query</p>\n<p>便会有下面的结果:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.lang.String;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">replaceTemp</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        String str = <span class=\"string\">\"str\"</span>;</span><br><span class=\"line\">        System.out.println(aString(str));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">aString</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> returnString().concat(str);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"<p>下面简单地介绍一下，一些可以直接使用 IDE 就能完成的重构。这种重构可以用在日常的工作中，只需要使用 IDE 上的快捷键就可以完成了。</p>\n<h3 id=\"提炼函数\"><a href=\"#提炼函数\" class=\"headerlink\" title=\"提炼函数\"></a>提炼函数</h3><p>Intellij IDEA 带了一些有意思的快捷键，或者说自己之前不在意这些快捷键的存在。重构作为单独的一个菜单，显然也突显了其功能的重要性，说说<strong>提炼函数</strong>，或者说提出方法。</p>\n<p>快捷键</p>\n<p>Mac:  <code>alt</code>+<code>command</code>+<code>M</code></p>\n<p>Windows/Linux: <code>Ctrl</code>+<code>Alt</code>+<code>M</code></p>\n<p>鼠标: Refactor | Extract | Method</p>","more":"<p><strong>重构之前</strong></p>\n<p>以重构一书代码为例，重构之前的代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">extract</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String _name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printOwing</span><span class=\"params\">(<span class=\"keyword\">double</span> amount)</span></span>&#123;</span><br><span class=\"line\">        printBanner();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"name:\"</span> + _name);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"amount\"</span> + amount);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">printBanner</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>重构</strong></p>\n<p>选中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(<span class=\"string\">\"name:\"</span> + _name);</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"amount\"</span> + amount);</span><br></pre></td></tr></table></figure>\n<p>按下上述的快捷键，会弹出下面的对话框</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter3/extract-method.png\" alt=\"Extrct Method\"></p>\n<p>输入</p>\n<pre><code>printDetails\n</code></pre><p>那么重构就完成了。</p>\n<p><strong>重构之后</strong></p>\n<p>IDE 就可以将方法提出来</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">extract</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String _name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printOwing</span><span class=\"params\">(<span class=\"keyword\">double</span> amount)</span></span>&#123;</span><br><span class=\"line\">        printBanner();</span><br><span class=\"line\">        printDetails(amount);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">printDetails</span><span class=\"params\">(<span class=\"keyword\">double</span> amount)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"name:\"</span> + _name);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"amount\"</span> + amount);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">printBanner</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>重构</strong></p>\n<p>还有一种就以 Intellij IDEA 的示例为例，这像是在说其的智能。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">extract</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> one = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> two = <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> three = one + two;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> four = one + three;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>只是这次要选中的只有一行，</p>\n<figure class=\"highlight hsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> three = one + two<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n<p>以便于其的智能，它便很愉快地告诉你它又找到了一个重复</p>\n<pre><code>IDE has detected 1 code fragments in this file that can be replaced with a call to extracted method...\n</code></pre><p>便返回了这样一个结果</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">extract</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> one = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> two = <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> three = add(one, two);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> four = add(one, three);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> one, <span class=\"keyword\">int</span> two)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> one + two;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然而我们就可以很愉快地继续和它玩耍了。当然这其中还会有一些更复杂的情形，当学会了这一个剩下的也不难了。</p>\n<h3 id=\"内联函数\"><a href=\"#内联函数\" class=\"headerlink\" title=\"内联函数\"></a>内联函数</h3><p>继续走这重构一书的复习之路，接着便是内联，除了内联变量，当然还有内联函数。</p>\n<p>快捷键</p>\n<p>Mac:  <code>alt</code>+<code>command</code>+<code>N</code></p>\n<p>Windows/Linux: <code>Ctrl</code>+<code>Alt</code>+<code>N</code></p>\n<p>鼠标: Refactor | Inline</p>\n<p><strong>重构之前</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">extract</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> one = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> two = <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> three = add(one, two);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> four = add(one, three);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> one, <span class=\"keyword\">int</span> two)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> one + two;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在<code>add(one,two)</code>很愉快地按上个快捷键吧，就会弹出</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter3/inline.jpg\" alt=\"Inline Method\"></p>\n<p>再轻轻地回车，Refactor 就这么结束了。。</p>\n<p><strong>Intellij Idea 内联临时变量</strong></p>\n<p>以书中的代码为例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">double</span> basePrice = anOrder.basePrice();</span><br><span class=\"line\"><span class=\"keyword\">return</span> (basePrice &gt; <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n<p>同样的，按下<code>Command</code>+<code>alt</code>+<code>N</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> (anOrder.basePrice() &gt; <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n<p>对于 python 之类的语言也是如此</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">inline_method</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    baseprice = anOrder.basePrice()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> baseprice &gt; <span class=\"number\">1000</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"查询取代临时变量\"><a href=\"#查询取代临时变量\" class=\"headerlink\" title=\"查询取代临时变量\"></a>查询取代临时变量</h3><p>快捷键</p>\n<p>Mac:  木有</p>\n<p>Windows/Linux:  木有</p>\n<p>或者: <code>Shift</code>+<code>alt</code>+<code>command</code>+<code>T</code> 再选择  <code>Replace Temp with Query</code></p>\n<p>鼠标: <strong>Refactor</strong> | <code>Replace Temp with Query</code></p>\n<p><strong>重构之前</strong></p>\n<p>过多的临时变量会让我们写出更长的函数，函数不应该太多，以便使功能单一。这也是重构的另外的目的所在，只有函数专注于其功能，才会更容易读懂。</p>\n<p>以书中的代码为例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.lang.System;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">replaceTemp</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">count</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">double</span> basePrice = _quantity * _itemPrice;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (basePrice &gt; <span class=\"number\">1000</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> basePrice * <span class=\"number\">0.95</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> basePrice * <span class=\"number\">0.98</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>重构</strong></p>\n<p>选中<code>basePrice</code>很愉快地拿鼠标点上面的重构</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter3/replace.jpg\" alt=\"Replace Temp With Query\"></p>\n<p>便会返回</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.lang.System;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">replaceTemp</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">count</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (basePrice() &gt; <span class=\"number\">1000</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> basePrice() * <span class=\"number\">0.95</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> basePrice() * <span class=\"number\">0.98</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">double</span> <span class=\"title\">basePrice</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _quantity * _itemPrice;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>而实际上我们也可以</p>\n<ol>\n<li><p>选中</p>\n<pre><code>_quantity * _itemPrice\n</code></pre></li>\n<li><p>对其进行<code>Extrace Method</code></p>\n</li>\n<li><p>选择<code>basePrice</code>再<code>Inline Method</code></p>\n</li>\n</ol>\n<p>在 Intellij IDEA 的文档中对此是这样的例子</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">replaceTemp</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        String str = <span class=\"string\">\"str\"</span>;</span><br><span class=\"line\">        String aString = returnString().concat(str);</span><br><span class=\"line\">        System.out.println(aString);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接着我们选中<code>aString</code>，再打开重构菜单，或者</p>\n<p><code>Command</code>+<code>Alt</code>+<code>Shift</code>+<code>T</code> 再选中 Replace Temp with Query</p>\n<p>便会有下面的结果:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.lang.String;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">replaceTemp</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        String str = <span class=\"string\">\"str\"</span>;</span><br><span class=\"line\">        System.out.println(aString(str));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">aString</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> returnString().concat(str);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"重构到设计模式","date":"2016-05-04T13:45:08.000Z","_content":"\n\n> 模式和重构之间存在着天然联系，模式是你想到达的目的地，而重构则是从其他地方到达这个目的地的条条道理——Martin Fowler《重构》\n\n### 过度设计与设计模式\n\n过度设计和设计模式是两个很有意思的词语，这取决于我们是不是预先式设计。通过以往的经验我们很容易看到一个环境来识别一个模式。遗憾的是使用设计模式来依赖于我们整个团队的水平。对于了解设计模式的人来说，设计模式就是一种沟通语言。而对于了解一些设计模式的人来说，设计模式就是复杂的代码。\n\n并且在软件迭代的过程中需求总是不断变化的，这就意味着如果我们对我们的代码设计越早，那么在后期失败的概率也就越大。设计会伴随着需求而发生变化，在当时看起来合理的设计，在后期就会因此而花费过多的代价。\n\n而如果我们不进行一些设计，就有可能出现设计不足。这种情况可能出现于没有时间写出更好的代码的项目，在这些项目里由于一些原因出现加班等等的原因，使得我们没有办法写出更好的代码。同时，也有可能是因为参考项目的程序员的设计方面出现不足。\n\n我们没有对设计模式介绍的一个原因是——它需要有大量的编程经验，才可以让我们实现：重构到设计模式。\n","source":"_posts/3.3.0-refactor-to-pattern.md","raw":"title: 重构到设计模式\ndate: 2016-5-4 21:45:08\ntags:\n---\n\n\n> 模式和重构之间存在着天然联系，模式是你想到达的目的地，而重构则是从其他地方到达这个目的地的条条道理——Martin Fowler《重构》\n\n### 过度设计与设计模式\n\n过度设计和设计模式是两个很有意思的词语，这取决于我们是不是预先式设计。通过以往的经验我们很容易看到一个环境来识别一个模式。遗憾的是使用设计模式来依赖于我们整个团队的水平。对于了解设计模式的人来说，设计模式就是一种沟通语言。而对于了解一些设计模式的人来说，设计模式就是复杂的代码。\n\n并且在软件迭代的过程中需求总是不断变化的，这就意味着如果我们对我们的代码设计越早，那么在后期失败的概率也就越大。设计会伴随着需求而发生变化，在当时看起来合理的设计，在后期就会因此而花费过多的代价。\n\n而如果我们不进行一些设计，就有可能出现设计不足。这种情况可能出现于没有时间写出更好的代码的项目，在这些项目里由于一些原因出现加班等等的原因，使得我们没有办法写出更好的代码。同时，也有可能是因为参考项目的程序员的设计方面出现不足。\n\n我们没有对设计模式介绍的一个原因是——它需要有大量的编程经验，才可以让我们实现：重构到设计模式。\n","slug":"3.3.0-refactor-to-pattern","published":1,"updated":"2016-05-04T04:18:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuf7mpfn000utsif0rtn0kzi","content":"<blockquote>\n<p>模式和重构之间存在着天然联系，模式是你想到达的目的地，而重构则是从其他地方到达这个目的地的条条道理——Martin Fowler《重构》</p>\n</blockquote>\n<h3 id=\"过度设计与设计模式\"><a href=\"#过度设计与设计模式\" class=\"headerlink\" title=\"过度设计与设计模式\"></a>过度设计与设计模式</h3><p>过度设计和设计模式是两个很有意思的词语，这取决于我们是不是预先式设计。通过以往的经验我们很容易看到一个环境来识别一个模式。遗憾的是使用设计模式来依赖于我们整个团队的水平。对于了解设计模式的人来说，设计模式就是一种沟通语言。而对于了解一些设计模式的人来说，设计模式就是复杂的代码。</p>\n<p>并且在软件迭代的过程中需求总是不断变化的，这就意味着如果我们对我们的代码设计越早，那么在后期失败的概率也就越大。设计会伴随着需求而发生变化，在当时看起来合理的设计，在后期就会因此而花费过多的代价。</p>\n<p>而如果我们不进行一些设计，就有可能出现设计不足。这种情况可能出现于没有时间写出更好的代码的项目，在这些项目里由于一些原因出现加班等等的原因，使得我们没有办法写出更好的代码。同时，也有可能是因为参考项目的程序员的设计方面出现不足。</p>\n<p>我们没有对设计模式介绍的一个原因是——它需要有大量的编程经验，才可以让我们实现：重构到设计模式。</p>\n","excerpt":"","more":"<blockquote>\n<p>模式和重构之间存在着天然联系，模式是你想到达的目的地，而重构则是从其他地方到达这个目的地的条条道理——Martin Fowler《重构》</p>\n</blockquote>\n<h3 id=\"过度设计与设计模式\"><a href=\"#过度设计与设计模式\" class=\"headerlink\" title=\"过度设计与设计模式\"></a>过度设计与设计模式</h3><p>过度设计和设计模式是两个很有意思的词语，这取决于我们是不是预先式设计。通过以往的经验我们很容易看到一个环境来识别一个模式。遗憾的是使用设计模式来依赖于我们整个团队的水平。对于了解设计模式的人来说，设计模式就是一种沟通语言。而对于了解一些设计模式的人来说，设计模式就是复杂的代码。</p>\n<p>并且在软件迭代的过程中需求总是不断变化的，这就意味着如果我们对我们的代码设计越早，那么在后期失败的概率也就越大。设计会伴随着需求而发生变化，在当时看起来合理的设计，在后期就会因此而花费过多的代价。</p>\n<p>而如果我们不进行一些设计，就有可能出现设计不足。这种情况可能出现于没有时间写出更好的代码的项目，在这些项目里由于一些原因出现加班等等的原因，使得我们没有办法写出更好的代码。同时，也有可能是因为参考项目的程序员的设计方面出现不足。</p>\n<p>我们没有对设计模式介绍的一个原因是——它需要有大量的编程经验，才可以让我们实现：重构到设计模式。</p>\n"},{"title":"上线","date":"2016-05-04T14:45:08.000Z","_content":"\n作为一个开发人员，我们也需要去了解如何配置服务器。不仅仅因为它可以帮助我们更好地理解 Web 开发，而且有时候很多 Bug 都是因为服务器环境引起的——如臭名昭著地编码问题。\n\n - 一些简单的 Ops 技能。\n - 了解服务器的相关软件\n - 搭建运行 Web 应用的服务器\n - 自动化部署应用\n\n为了即时的完成工作，你是不是放弃了很多东西，比如质量? 测试是很重要的一个环节，不仅可以为我们保证代码的质量，而且还可以为我们以后的重构提供基础条件。\n\n作为一个在敏捷团队里工作的开发人员，初次意识到在国内大部分的开发人员是不写测试的时候，我还是有点诧异。\n\n尽管没有写测试可以在初期走得很快，但是在后期就会遇到一堆麻烦事。传统的思维下，我们会认为一个人会在一家公司工作很久。而这件事在最近几年里变化得特别快，特别是在信息技术高速发展的今天。人们可以从不同的地方得到哪里缺人，从一个地方到另外一个地方也变得异常的快，这就意味着人员流动是常态。\n\n而代码尽管还在，但是却会随着人员流动而出现更多的问题。这时如果代码是有有效的测试，那么则可以帮助系统更好地被理解。\n","source":"_posts/4.0.0-golive.md","raw":"title: 上线\ndate: 2016-5-4 22:45:08\ntags:\n---\n\n作为一个开发人员，我们也需要去了解如何配置服务器。不仅仅因为它可以帮助我们更好地理解 Web 开发，而且有时候很多 Bug 都是因为服务器环境引起的——如臭名昭著地编码问题。\n\n - 一些简单的 Ops 技能。\n - 了解服务器的相关软件\n - 搭建运行 Web 应用的服务器\n - 自动化部署应用\n\n为了即时的完成工作，你是不是放弃了很多东西，比如质量? 测试是很重要的一个环节，不仅可以为我们保证代码的质量，而且还可以为我们以后的重构提供基础条件。\n\n作为一个在敏捷团队里工作的开发人员，初次意识到在国内大部分的开发人员是不写测试的时候，我还是有点诧异。\n\n尽管没有写测试可以在初期走得很快，但是在后期就会遇到一堆麻烦事。传统的思维下，我们会认为一个人会在一家公司工作很久。而这件事在最近几年里变化得特别快，特别是在信息技术高速发展的今天。人们可以从不同的地方得到哪里缺人，从一个地方到另外一个地方也变得异常的快，这就意味着人员流动是常态。\n\n而代码尽管还在，但是却会随着人员流动而出现更多的问题。这时如果代码是有有效的测试，那么则可以帮助系统更好地被理解。\n","slug":"4.0.0-golive","published":1,"updated":"2016-05-04T04:20:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuf7mpgp000vtsifwjj65doc","content":"<p>作为一个开发人员，我们也需要去了解如何配置服务器。不仅仅因为它可以帮助我们更好地理解 Web 开发，而且有时候很多 Bug 都是因为服务器环境引起的——如臭名昭著地编码问题。</p>\n<ul>\n<li>一些简单的 Ops 技能。</li>\n<li>了解服务器的相关软件</li>\n<li>搭建运行 Web 应用的服务器</li>\n<li>自动化部署应用</li>\n</ul>\n<p>为了即时的完成工作，你是不是放弃了很多东西，比如质量? 测试是很重要的一个环节，不仅可以为我们保证代码的质量，而且还可以为我们以后的重构提供基础条件。</p>\n<p>作为一个在敏捷团队里工作的开发人员，初次意识到在国内大部分的开发人员是不写测试的时候，我还是有点诧异。</p>\n<p>尽管没有写测试可以在初期走得很快，但是在后期就会遇到一堆麻烦事。传统的思维下，我们会认为一个人会在一家公司工作很久。而这件事在最近几年里变化得特别快，特别是在信息技术高速发展的今天。人们可以从不同的地方得到哪里缺人，从一个地方到另外一个地方也变得异常的快，这就意味着人员流动是常态。</p>\n<p>而代码尽管还在，但是却会随着人员流动而出现更多的问题。这时如果代码是有有效的测试，那么则可以帮助系统更好地被理解。</p>\n","excerpt":"","more":"<p>作为一个开发人员，我们也需要去了解如何配置服务器。不仅仅因为它可以帮助我们更好地理解 Web 开发，而且有时候很多 Bug 都是因为服务器环境引起的——如臭名昭著地编码问题。</p>\n<ul>\n<li>一些简单的 Ops 技能。</li>\n<li>了解服务器的相关软件</li>\n<li>搭建运行 Web 应用的服务器</li>\n<li>自动化部署应用</li>\n</ul>\n<p>为了即时的完成工作，你是不是放弃了很多东西，比如质量? 测试是很重要的一个环节，不仅可以为我们保证代码的质量，而且还可以为我们以后的重构提供基础条件。</p>\n<p>作为一个在敏捷团队里工作的开发人员，初次意识到在国内大部分的开发人员是不写测试的时候，我还是有点诧异。</p>\n<p>尽管没有写测试可以在初期走得很快，但是在后期就会遇到一堆麻烦事。传统的思维下，我们会认为一个人会在一家公司工作很久。而这件事在最近几年里变化得特别快，特别是在信息技术高速发展的今天。人们可以从不同的地方得到哪里缺人，从一个地方到另外一个地方也变得异常的快，这就意味着人员流动是常态。</p>\n<p>而代码尽管还在，但是却会随着人员流动而出现更多的问题。这时如果代码是有有效的测试，那么则可以帮助系统更好地被理解。</p>\n"},{"title":"LNMP 架构","date":"2016-05-05T13:45:08.000Z","_content":"\n> LNMP 是一个基于 CentOS/Debian 编写的 Nginx、PHP、MySQL、phpMyAdmin、eAccelerator 一键安装包。可以在 VPS、独立主机上轻松的安装 LNMP 生产环境。\n\n由于在前面我们已经介绍过了数据库和编程语言，这里我们就只介绍 LN 两项\n\n### GNU/Linux\n\nGNU 工程创始于一九八四年，旨在开发一个完整 GNU 系统。GNU这个名字是“GNU's Not Unix!”的递归首字母缩写词。\"GNU\" 的发音为 g'noo，只有一个音节，发音很像 “grew”，但需要把其中的 r 音替换为 n 音。类 Unix 操作系统是由一系列应用程序、系统库和开发工具构成的 软件集合 , 并加上用于资源分配和硬件管理的内核。\n\nLinux 是一种自由和开放源码的类 UNIX 操作系统内核。目前存在着许多不同的 Linux 发行版，可安装在各种各样的电脑硬件设备，从手机、平板电脑、路由器和影音游戏控制台，到桌上型电脑，大型电脑和超级电脑。Linux 是一个领先的操作系统内核，**世界上运算最快的10台超级电脑运行的都是基于 Linux 内核的操作系统**。\n\nLinux 操作系统也是自由软件和开放源代码发展中最著名的例子。只要遵循 GNU 通用公共许可证,任何人和机构都可以自由地使用 Linux 的所有底层源代码，也可以自由地修改和再发布。**严格来讲，Linux 这个词本身只表示 Linux 内核，但在实际上人们已经习惯了用 Linux 来形容整个基于 Linux 内核，并且使用 GNU 工程各种工具和数据库的操作系统（也被称为 GNU/Linux）**。通常情况下，Linux 被打包成供桌上型电脑和服务器使用的 Linux 发行版本。一些流行的主流 Linux 发行版本，包括 Debian（及其衍生版本 Ubuntu），Fedora 和 openSUSE 等。 Linux 得名于电脑业余爱好者 Linus Torvalds。\n\n<!-- more -->\n\n### HTTP 服务器\n\n>  Web 服务器一般指网站服务器，是指驻留于因特网上某种类型计算机的程序，可以向浏览器等 Web 客户端提供文档，也可以放置网站文件，让全世界浏览；可以放置数据文件，让全世界下载。\n\n目前最主流的三个 Web 服务器是 Apache、Nginx、IIS。\n\n#### Apache\n\nApache 是世界使用排名第一的 Web 服务器软件。它可以运行在几乎所有广泛使用的计算机平台上，由于其跨平台和安全性被广泛使用，是最流行的Web 服务器端软件之一。它快速、可靠并且可通过简单的 API 扩充，将 Perl/Python 等解释器编译到服务器中。\n\n#### Nginx\n\nNginx 是一款轻量级的 Web 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器，并在一个 BSD-like 协议下发行。由俄罗斯的程序设计师 Igor Sysoev 所开发，供俄国大型的入口网站及搜索引擎 Rambler（俄文：Рамблер）使用。其特点是占有内存少，并发能力强，事实上 Nginx 的并发能力确实在同类型的网页服务器中表现较好，中国大陆使用 Nginx 网站用户有：百度、新浪、网易、腾讯等。\n\n#### IIS\n\nInternet Information Services（IIS，互联网信息服务），是由微软公司提供的基于运行 Microsoft Windows 的互联网基本服务。最初是Windows NT 版本的可选包，随后内置在 Windows 2000、Windows XP Professional 和 Windows Server 2003 一起发行，但在 Windows XP Home 版本上并没有 IIS。\n\n#### 代理服务器\n\n> 代理服务器（Proxy Server）是一种重要的服务器安全功能，它的工作主要在开放系统互联(OSI)模型的会话层，从而起到防火墙的作用。代理服务器大多被用来连接 INTERNET（国际互联网）和 Local Area Network（局域网）。\n","source":"_posts/4.2.0-lnmp.md","raw":"title: LNMP 架构\ndate: 2016-5-5 21:45:08\ntags:\n---\n\n> LNMP 是一个基于 CentOS/Debian 编写的 Nginx、PHP、MySQL、phpMyAdmin、eAccelerator 一键安装包。可以在 VPS、独立主机上轻松的安装 LNMP 生产环境。\n\n由于在前面我们已经介绍过了数据库和编程语言，这里我们就只介绍 LN 两项\n\n### GNU/Linux\n\nGNU 工程创始于一九八四年，旨在开发一个完整 GNU 系统。GNU这个名字是“GNU's Not Unix!”的递归首字母缩写词。\"GNU\" 的发音为 g'noo，只有一个音节，发音很像 “grew”，但需要把其中的 r 音替换为 n 音。类 Unix 操作系统是由一系列应用程序、系统库和开发工具构成的 软件集合 , 并加上用于资源分配和硬件管理的内核。\n\nLinux 是一种自由和开放源码的类 UNIX 操作系统内核。目前存在着许多不同的 Linux 发行版，可安装在各种各样的电脑硬件设备，从手机、平板电脑、路由器和影音游戏控制台，到桌上型电脑，大型电脑和超级电脑。Linux 是一个领先的操作系统内核，**世界上运算最快的10台超级电脑运行的都是基于 Linux 内核的操作系统**。\n\nLinux 操作系统也是自由软件和开放源代码发展中最著名的例子。只要遵循 GNU 通用公共许可证,任何人和机构都可以自由地使用 Linux 的所有底层源代码，也可以自由地修改和再发布。**严格来讲，Linux 这个词本身只表示 Linux 内核，但在实际上人们已经习惯了用 Linux 来形容整个基于 Linux 内核，并且使用 GNU 工程各种工具和数据库的操作系统（也被称为 GNU/Linux）**。通常情况下，Linux 被打包成供桌上型电脑和服务器使用的 Linux 发行版本。一些流行的主流 Linux 发行版本，包括 Debian（及其衍生版本 Ubuntu），Fedora 和 openSUSE 等。 Linux 得名于电脑业余爱好者 Linus Torvalds。\n\n<!-- more -->\n\n### HTTP 服务器\n\n>  Web 服务器一般指网站服务器，是指驻留于因特网上某种类型计算机的程序，可以向浏览器等 Web 客户端提供文档，也可以放置网站文件，让全世界浏览；可以放置数据文件，让全世界下载。\n\n目前最主流的三个 Web 服务器是 Apache、Nginx、IIS。\n\n#### Apache\n\nApache 是世界使用排名第一的 Web 服务器软件。它可以运行在几乎所有广泛使用的计算机平台上，由于其跨平台和安全性被广泛使用，是最流行的Web 服务器端软件之一。它快速、可靠并且可通过简单的 API 扩充，将 Perl/Python 等解释器编译到服务器中。\n\n#### Nginx\n\nNginx 是一款轻量级的 Web 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器，并在一个 BSD-like 协议下发行。由俄罗斯的程序设计师 Igor Sysoev 所开发，供俄国大型的入口网站及搜索引擎 Rambler（俄文：Рамблер）使用。其特点是占有内存少，并发能力强，事实上 Nginx 的并发能力确实在同类型的网页服务器中表现较好，中国大陆使用 Nginx 网站用户有：百度、新浪、网易、腾讯等。\n\n#### IIS\n\nInternet Information Services（IIS，互联网信息服务），是由微软公司提供的基于运行 Microsoft Windows 的互联网基本服务。最初是Windows NT 版本的可选包，随后内置在 Windows 2000、Windows XP Professional 和 Windows Server 2003 一起发行，但在 Windows XP Home 版本上并没有 IIS。\n\n#### 代理服务器\n\n> 代理服务器（Proxy Server）是一种重要的服务器安全功能，它的工作主要在开放系统互联(OSI)模型的会话层，从而起到防火墙的作用。代理服务器大多被用来连接 INTERNET（国际互联网）和 Local Area Network（局域网）。\n","slug":"4.2.0-lnmp","published":1,"updated":"2016-05-05T02:08:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuf7mpgs000wtsifgjbw4rb0","content":"<blockquote>\n<p>LNMP 是一个基于 CentOS/Debian 编写的 Nginx、PHP、MySQL、phpMyAdmin、eAccelerator 一键安装包。可以在 VPS、独立主机上轻松的安装 LNMP 生产环境。</p>\n</blockquote>\n<p>由于在前面我们已经介绍过了数据库和编程语言，这里我们就只介绍 LN 两项</p>\n<h3 id=\"GNU-Linux\"><a href=\"#GNU-Linux\" class=\"headerlink\" title=\"GNU/Linux\"></a>GNU/Linux</h3><p>GNU 工程创始于一九八四年，旨在开发一个完整 GNU 系统。GNU这个名字是“GNU’s Not Unix!”的递归首字母缩写词。”GNU” 的发音为 g’noo，只有一个音节，发音很像 “grew”，但需要把其中的 r 音替换为 n 音。类 Unix 操作系统是由一系列应用程序、系统库和开发工具构成的 软件集合 , 并加上用于资源分配和硬件管理的内核。</p>\n<p>Linux 是一种自由和开放源码的类 UNIX 操作系统内核。目前存在着许多不同的 Linux 发行版，可安装在各种各样的电脑硬件设备，从手机、平板电脑、路由器和影音游戏控制台，到桌上型电脑，大型电脑和超级电脑。Linux 是一个领先的操作系统内核，<strong>世界上运算最快的10台超级电脑运行的都是基于 Linux 内核的操作系统</strong>。</p>\n<p>Linux 操作系统也是自由软件和开放源代码发展中最著名的例子。只要遵循 GNU 通用公共许可证,任何人和机构都可以自由地使用 Linux 的所有底层源代码，也可以自由地修改和再发布。<strong>严格来讲，Linux 这个词本身只表示 Linux 内核，但在实际上人们已经习惯了用 Linux 来形容整个基于 Linux 内核，并且使用 GNU 工程各种工具和数据库的操作系统（也被称为 GNU/Linux）</strong>。通常情况下，Linux 被打包成供桌上型电脑和服务器使用的 Linux 发行版本。一些流行的主流 Linux 发行版本，包括 Debian（及其衍生版本 Ubuntu），Fedora 和 openSUSE 等。 Linux 得名于电脑业余爱好者 Linus Torvalds。</p>\n<a id=\"more\"></a>\n<h3 id=\"HTTP-服务器\"><a href=\"#HTTP-服务器\" class=\"headerlink\" title=\"HTTP 服务器\"></a>HTTP 服务器</h3><blockquote>\n<p> Web 服务器一般指网站服务器，是指驻留于因特网上某种类型计算机的程序，可以向浏览器等 Web 客户端提供文档，也可以放置网站文件，让全世界浏览；可以放置数据文件，让全世界下载。</p>\n</blockquote>\n<p>目前最主流的三个 Web 服务器是 Apache、Nginx、IIS。</p>\n<h4 id=\"Apache\"><a href=\"#Apache\" class=\"headerlink\" title=\"Apache\"></a>Apache</h4><p>Apache 是世界使用排名第一的 Web 服务器软件。它可以运行在几乎所有广泛使用的计算机平台上，由于其跨平台和安全性被广泛使用，是最流行的Web 服务器端软件之一。它快速、可靠并且可通过简单的 API 扩充，将 Perl/Python 等解释器编译到服务器中。</p>\n<h4 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h4><p>Nginx 是一款轻量级的 Web 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器，并在一个 BSD-like 协议下发行。由俄罗斯的程序设计师 Igor Sysoev 所开发，供俄国大型的入口网站及搜索引擎 Rambler（俄文：Рамблер）使用。其特点是占有内存少，并发能力强，事实上 Nginx 的并发能力确实在同类型的网页服务器中表现较好，中国大陆使用 Nginx 网站用户有：百度、新浪、网易、腾讯等。</p>\n<h4 id=\"IIS\"><a href=\"#IIS\" class=\"headerlink\" title=\"IIS\"></a>IIS</h4><p>Internet Information Services（IIS，互联网信息服务），是由微软公司提供的基于运行 Microsoft Windows 的互联网基本服务。最初是Windows NT 版本的可选包，随后内置在 Windows 2000、Windows XP Professional 和 Windows Server 2003 一起发行，但在 Windows XP Home 版本上并没有 IIS。</p>\n<h4 id=\"代理服务器\"><a href=\"#代理服务器\" class=\"headerlink\" title=\"代理服务器\"></a>代理服务器</h4><blockquote>\n<p>代理服务器（Proxy Server）是一种重要的服务器安全功能，它的工作主要在开放系统互联(OSI)模型的会话层，从而起到防火墙的作用。代理服务器大多被用来连接 INTERNET（国际互联网）和 Local Area Network（局域网）。</p>\n</blockquote>\n","excerpt":"<blockquote>\n<p>LNMP 是一个基于 CentOS/Debian 编写的 Nginx、PHP、MySQL、phpMyAdmin、eAccelerator 一键安装包。可以在 VPS、独立主机上轻松的安装 LNMP 生产环境。</p>\n</blockquote>\n<p>由于在前面我们已经介绍过了数据库和编程语言，这里我们就只介绍 LN 两项</p>\n<h3 id=\"GNU-Linux\"><a href=\"#GNU-Linux\" class=\"headerlink\" title=\"GNU/Linux\"></a>GNU/Linux</h3><p>GNU 工程创始于一九八四年，旨在开发一个完整 GNU 系统。GNU这个名字是“GNU’s Not Unix!”的递归首字母缩写词。”GNU” 的发音为 g’noo，只有一个音节，发音很像 “grew”，但需要把其中的 r 音替换为 n 音。类 Unix 操作系统是由一系列应用程序、系统库和开发工具构成的 软件集合 , 并加上用于资源分配和硬件管理的内核。</p>\n<p>Linux 是一种自由和开放源码的类 UNIX 操作系统内核。目前存在着许多不同的 Linux 发行版，可安装在各种各样的电脑硬件设备，从手机、平板电脑、路由器和影音游戏控制台，到桌上型电脑，大型电脑和超级电脑。Linux 是一个领先的操作系统内核，<strong>世界上运算最快的10台超级电脑运行的都是基于 Linux 内核的操作系统</strong>。</p>\n<p>Linux 操作系统也是自由软件和开放源代码发展中最著名的例子。只要遵循 GNU 通用公共许可证,任何人和机构都可以自由地使用 Linux 的所有底层源代码，也可以自由地修改和再发布。<strong>严格来讲，Linux 这个词本身只表示 Linux 内核，但在实际上人们已经习惯了用 Linux 来形容整个基于 Linux 内核，并且使用 GNU 工程各种工具和数据库的操作系统（也被称为 GNU/Linux）</strong>。通常情况下，Linux 被打包成供桌上型电脑和服务器使用的 Linux 发行版本。一些流行的主流 Linux 发行版本，包括 Debian（及其衍生版本 Ubuntu），Fedora 和 openSUSE 等。 Linux 得名于电脑业余爱好者 Linus Torvalds。</p>","more":"<h3 id=\"HTTP-服务器\"><a href=\"#HTTP-服务器\" class=\"headerlink\" title=\"HTTP 服务器\"></a>HTTP 服务器</h3><blockquote>\n<p> Web 服务器一般指网站服务器，是指驻留于因特网上某种类型计算机的程序，可以向浏览器等 Web 客户端提供文档，也可以放置网站文件，让全世界浏览；可以放置数据文件，让全世界下载。</p>\n</blockquote>\n<p>目前最主流的三个 Web 服务器是 Apache、Nginx、IIS。</p>\n<h4 id=\"Apache\"><a href=\"#Apache\" class=\"headerlink\" title=\"Apache\"></a>Apache</h4><p>Apache 是世界使用排名第一的 Web 服务器软件。它可以运行在几乎所有广泛使用的计算机平台上，由于其跨平台和安全性被广泛使用，是最流行的Web 服务器端软件之一。它快速、可靠并且可通过简单的 API 扩充，将 Perl/Python 等解释器编译到服务器中。</p>\n<h4 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h4><p>Nginx 是一款轻量级的 Web 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器，并在一个 BSD-like 协议下发行。由俄罗斯的程序设计师 Igor Sysoev 所开发，供俄国大型的入口网站及搜索引擎 Rambler（俄文：Рамблер）使用。其特点是占有内存少，并发能力强，事实上 Nginx 的并发能力确实在同类型的网页服务器中表现较好，中国大陆使用 Nginx 网站用户有：百度、新浪、网易、腾讯等。</p>\n<h4 id=\"IIS\"><a href=\"#IIS\" class=\"headerlink\" title=\"IIS\"></a>IIS</h4><p>Internet Information Services（IIS，互联网信息服务），是由微软公司提供的基于运行 Microsoft Windows 的互联网基本服务。最初是Windows NT 版本的可选包，随后内置在 Windows 2000、Windows XP Professional 和 Windows Server 2003 一起发行，但在 Windows XP Home 版本上并没有 IIS。</p>\n<h4 id=\"代理服务器\"><a href=\"#代理服务器\" class=\"headerlink\" title=\"代理服务器\"></a>代理服务器</h4><blockquote>\n<p>代理服务器（Proxy Server）是一种重要的服务器安全功能，它的工作主要在开放系统互联(OSI)模型的会话层，从而起到防火墙的作用。代理服务器大多被用来连接 INTERNET（国际互联网）和 Local Area Network（局域网）。</p>\n</blockquote>"},{"title":"Web 缓存","date":"2016-05-05T14:45:08.000Z","_content":"\nWeb 缓存是显著提高 Web 站点的性能最有效的方法之一。主要有:\n\n- 数据库端缓存\n- 应用层缓存\n- 前端缓存\n- 客户端缓存\n\n不同的缓存类型适用于不同的环境下使用。\n\n### 数据库端缓存\n\n这个可以用以“空间换时间”来说。比如建一个表来存储另外一个表某个类型的数据的总条数，在每次更新数据的时候同时更新数据表和统计条数的表。在需要获取某个类型的数据的条数的时候，就不需要 select count 去查询，直接查询统计表就可以了，这样可以提高查询的速度和数据库的性能。\n\n<!-- more -->\n\n### 应用层缓存\n\n应用层缓存这块跟开发人员关系最大，也是平时经常接触的。\n\n- 缓存数据库的查询结果，减少数据的压力。这个在大型网站是必须做的。\n- 缓存磁盘文件的数据。比如常用的数据可以放到内存，不用每次都去读取磁盘，特别是密集计算的程序，比如中文分词的词库。\n- 缓存某个耗时的计算操作，比如数据统计。\n\n应用层缓存的架构也可以分几种：\n\n- 嵌入式，也就是缓存和应用在同一个机器。比如单机的文件缓存，java 中用 hashMap 来缓存数据等等。这种缓存速度快，没有网络消耗。\n- 分布式缓存，把缓存的数据独立到不同的机器，通过网络来请求数据，比如常用的 memcache 就是这一类。\n\n分布式缓存一般可以分为几种：\n\n- 按应用切分数据到不同的缓存服务器，这是一种比较简单和实用的方式。\n- 按照某种规则（hash，路由等等）把数据存储到不同的缓存服务器\n- 代理模式，应用在获取数据的时候都由代理透明的处理，缓存机制有代理服务器来处理\n\n### 前端缓存\n\n我们这里说的前端缓存可以理解为一般使用的 cdn 技术，利用 squid 等做前端缓冲技术，主要还是针对静态文件类型，比如图片、css、js、html 等静态文件。\n\n### 客户端缓存\n\n浏览器端的缓存，可以让用户请求一次之后，下一次不在从服务器端请求数据，直接从本地缓存读取，可以减轻服务器负担也可以加快用户的访问速度。\n\n### HTML5 离线缓存\n\napplication cahce 是将大部分图片资源、js、css 等静态资源放在 manifest 文件配置中。当页面打开时通过 manifest 文件来读取本地文件或是请求服务器文件。\n\n离线访问对基于网络的应用而言越来越重要。虽然所有浏览器都有缓存机制，但它们并不可靠，也不一定总能起到预期的作用。HTML5 使用 ApplicationCache 接口可以解决由离线带来的部分难题。前提是你需要访问的 Web 页面至少被在线访问过一次。\n","source":"_posts/4.2.1-cache.md","raw":"title: Web 缓存\ndate: 2016-5-5 22:45:08\ntags:\n---\n\nWeb 缓存是显著提高 Web 站点的性能最有效的方法之一。主要有:\n\n- 数据库端缓存\n- 应用层缓存\n- 前端缓存\n- 客户端缓存\n\n不同的缓存类型适用于不同的环境下使用。\n\n### 数据库端缓存\n\n这个可以用以“空间换时间”来说。比如建一个表来存储另外一个表某个类型的数据的总条数，在每次更新数据的时候同时更新数据表和统计条数的表。在需要获取某个类型的数据的条数的时候，就不需要 select count 去查询，直接查询统计表就可以了，这样可以提高查询的速度和数据库的性能。\n\n<!-- more -->\n\n### 应用层缓存\n\n应用层缓存这块跟开发人员关系最大，也是平时经常接触的。\n\n- 缓存数据库的查询结果，减少数据的压力。这个在大型网站是必须做的。\n- 缓存磁盘文件的数据。比如常用的数据可以放到内存，不用每次都去读取磁盘，特别是密集计算的程序，比如中文分词的词库。\n- 缓存某个耗时的计算操作，比如数据统计。\n\n应用层缓存的架构也可以分几种：\n\n- 嵌入式，也就是缓存和应用在同一个机器。比如单机的文件缓存，java 中用 hashMap 来缓存数据等等。这种缓存速度快，没有网络消耗。\n- 分布式缓存，把缓存的数据独立到不同的机器，通过网络来请求数据，比如常用的 memcache 就是这一类。\n\n分布式缓存一般可以分为几种：\n\n- 按应用切分数据到不同的缓存服务器，这是一种比较简单和实用的方式。\n- 按照某种规则（hash，路由等等）把数据存储到不同的缓存服务器\n- 代理模式，应用在获取数据的时候都由代理透明的处理，缓存机制有代理服务器来处理\n\n### 前端缓存\n\n我们这里说的前端缓存可以理解为一般使用的 cdn 技术，利用 squid 等做前端缓冲技术，主要还是针对静态文件类型，比如图片、css、js、html 等静态文件。\n\n### 客户端缓存\n\n浏览器端的缓存，可以让用户请求一次之后，下一次不在从服务器端请求数据，直接从本地缓存读取，可以减轻服务器负担也可以加快用户的访问速度。\n\n### HTML5 离线缓存\n\napplication cahce 是将大部分图片资源、js、css 等静态资源放在 manifest 文件配置中。当页面打开时通过 manifest 文件来读取本地文件或是请求服务器文件。\n\n离线访问对基于网络的应用而言越来越重要。虽然所有浏览器都有缓存机制，但它们并不可靠，也不一定总能起到预期的作用。HTML5 使用 ApplicationCache 接口可以解决由离线带来的部分难题。前提是你需要访问的 Web 页面至少被在线访问过一次。\n","slug":"4.2.1-cache","published":1,"updated":"2016-05-05T02:10:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuf7mpgu000xtsif6if49eaq","content":"<p>Web 缓存是显著提高 Web 站点的性能最有效的方法之一。主要有:</p>\n<ul>\n<li>数据库端缓存</li>\n<li>应用层缓存</li>\n<li>前端缓存</li>\n<li>客户端缓存</li>\n</ul>\n<p>不同的缓存类型适用于不同的环境下使用。</p>\n<h3 id=\"数据库端缓存\"><a href=\"#数据库端缓存\" class=\"headerlink\" title=\"数据库端缓存\"></a>数据库端缓存</h3><p>这个可以用以“空间换时间”来说。比如建一个表来存储另外一个表某个类型的数据的总条数，在每次更新数据的时候同时更新数据表和统计条数的表。在需要获取某个类型的数据的条数的时候，就不需要 select count 去查询，直接查询统计表就可以了，这样可以提高查询的速度和数据库的性能。</p>\n<a id=\"more\"></a>\n<h3 id=\"应用层缓存\"><a href=\"#应用层缓存\" class=\"headerlink\" title=\"应用层缓存\"></a>应用层缓存</h3><p>应用层缓存这块跟开发人员关系最大，也是平时经常接触的。</p>\n<ul>\n<li>缓存数据库的查询结果，减少数据的压力。这个在大型网站是必须做的。</li>\n<li>缓存磁盘文件的数据。比如常用的数据可以放到内存，不用每次都去读取磁盘，特别是密集计算的程序，比如中文分词的词库。</li>\n<li>缓存某个耗时的计算操作，比如数据统计。</li>\n</ul>\n<p>应用层缓存的架构也可以分几种：</p>\n<ul>\n<li>嵌入式，也就是缓存和应用在同一个机器。比如单机的文件缓存，java 中用 hashMap 来缓存数据等等。这种缓存速度快，没有网络消耗。</li>\n<li>分布式缓存，把缓存的数据独立到不同的机器，通过网络来请求数据，比如常用的 memcache 就是这一类。</li>\n</ul>\n<p>分布式缓存一般可以分为几种：</p>\n<ul>\n<li>按应用切分数据到不同的缓存服务器，这是一种比较简单和实用的方式。</li>\n<li>按照某种规则（hash，路由等等）把数据存储到不同的缓存服务器</li>\n<li>代理模式，应用在获取数据的时候都由代理透明的处理，缓存机制有代理服务器来处理</li>\n</ul>\n<h3 id=\"前端缓存\"><a href=\"#前端缓存\" class=\"headerlink\" title=\"前端缓存\"></a>前端缓存</h3><p>我们这里说的前端缓存可以理解为一般使用的 cdn 技术，利用 squid 等做前端缓冲技术，主要还是针对静态文件类型，比如图片、css、js、html 等静态文件。</p>\n<h3 id=\"客户端缓存\"><a href=\"#客户端缓存\" class=\"headerlink\" title=\"客户端缓存\"></a>客户端缓存</h3><p>浏览器端的缓存，可以让用户请求一次之后，下一次不在从服务器端请求数据，直接从本地缓存读取，可以减轻服务器负担也可以加快用户的访问速度。</p>\n<h3 id=\"HTML5-离线缓存\"><a href=\"#HTML5-离线缓存\" class=\"headerlink\" title=\"HTML5 离线缓存\"></a>HTML5 离线缓存</h3><p>application cahce 是将大部分图片资源、js、css 等静态资源放在 manifest 文件配置中。当页面打开时通过 manifest 文件来读取本地文件或是请求服务器文件。</p>\n<p>离线访问对基于网络的应用而言越来越重要。虽然所有浏览器都有缓存机制，但它们并不可靠，也不一定总能起到预期的作用。HTML5 使用 ApplicationCache 接口可以解决由离线带来的部分难题。前提是你需要访问的 Web 页面至少被在线访问过一次。</p>\n","excerpt":"<p>Web 缓存是显著提高 Web 站点的性能最有效的方法之一。主要有:</p>\n<ul>\n<li>数据库端缓存</li>\n<li>应用层缓存</li>\n<li>前端缓存</li>\n<li>客户端缓存</li>\n</ul>\n<p>不同的缓存类型适用于不同的环境下使用。</p>\n<h3 id=\"数据库端缓存\"><a href=\"#数据库端缓存\" class=\"headerlink\" title=\"数据库端缓存\"></a>数据库端缓存</h3><p>这个可以用以“空间换时间”来说。比如建一个表来存储另外一个表某个类型的数据的总条数，在每次更新数据的时候同时更新数据表和统计条数的表。在需要获取某个类型的数据的条数的时候，就不需要 select count 去查询，直接查询统计表就可以了，这样可以提高查询的速度和数据库的性能。</p>","more":"<h3 id=\"应用层缓存\"><a href=\"#应用层缓存\" class=\"headerlink\" title=\"应用层缓存\"></a>应用层缓存</h3><p>应用层缓存这块跟开发人员关系最大，也是平时经常接触的。</p>\n<ul>\n<li>缓存数据库的查询结果，减少数据的压力。这个在大型网站是必须做的。</li>\n<li>缓存磁盘文件的数据。比如常用的数据可以放到内存，不用每次都去读取磁盘，特别是密集计算的程序，比如中文分词的词库。</li>\n<li>缓存某个耗时的计算操作，比如数据统计。</li>\n</ul>\n<p>应用层缓存的架构也可以分几种：</p>\n<ul>\n<li>嵌入式，也就是缓存和应用在同一个机器。比如单机的文件缓存，java 中用 hashMap 来缓存数据等等。这种缓存速度快，没有网络消耗。</li>\n<li>分布式缓存，把缓存的数据独立到不同的机器，通过网络来请求数据，比如常用的 memcache 就是这一类。</li>\n</ul>\n<p>分布式缓存一般可以分为几种：</p>\n<ul>\n<li>按应用切分数据到不同的缓存服务器，这是一种比较简单和实用的方式。</li>\n<li>按照某种规则（hash，路由等等）把数据存储到不同的缓存服务器</li>\n<li>代理模式，应用在获取数据的时候都由代理透明的处理，缓存机制有代理服务器来处理</li>\n</ul>\n<h3 id=\"前端缓存\"><a href=\"#前端缓存\" class=\"headerlink\" title=\"前端缓存\"></a>前端缓存</h3><p>我们这里说的前端缓存可以理解为一般使用的 cdn 技术，利用 squid 等做前端缓冲技术，主要还是针对静态文件类型，比如图片、css、js、html 等静态文件。</p>\n<h3 id=\"客户端缓存\"><a href=\"#客户端缓存\" class=\"headerlink\" title=\"客户端缓存\"></a>客户端缓存</h3><p>浏览器端的缓存，可以让用户请求一次之后，下一次不在从服务器端请求数据，直接从本地缓存读取，可以减轻服务器负担也可以加快用户的访问速度。</p>\n<h3 id=\"HTML5-离线缓存\"><a href=\"#HTML5-离线缓存\" class=\"headerlink\" title=\"HTML5 离线缓存\"></a>HTML5 离线缓存</h3><p>application cahce 是将大部分图片资源、js、css 等静态资源放在 manifest 文件配置中。当页面打开时通过 manifest 文件来读取本地文件或是请求服务器文件。</p>\n<p>离线访问对基于网络的应用而言越来越重要。虽然所有浏览器都有缓存机制，但它们并不可靠，也不一定总能起到预期的作用。HTML5 使用 ApplicationCache 接口可以解决由离线带来的部分难题。前提是你需要访问的 Web 页面至少被在线访问过一次。</p>"},{"title":"隔离与运行环境","date":"2016-05-04T15:45:08.000Z","_content":"\n为了将我们的应用部署到服务器上，我们需要为其配置一个运行环境。从底层到顶层有这样的运行环境及容器：\n\n1. 隔离硬件：虚拟机\n2. 隔离操作系统：容器虚拟化\n3. 隔离底层：Servlet 容器\n4. 隔离依赖版本：虚拟环境\n5. 隔离运行环境：语言虚拟机\n6. 隔离语言：DSL\n\n实现上这是一个请求的处理过程，一个 HTTP 请求会先到达你的主机。如果你的主机上运行着多个虚拟机实例，那么请求就会来到这个虚拟机上。又或者是如果你是在 Docker 这一类容器里运行你的程序的话，那么也会先到达 Docker。随后这个请求就会交由 HTTP 服务器来处理，如 Apache、Nginx，这些 HTTP 服务器再将这些请求交由对应的应用或脚本来处理。随后将交由语言底层的指令来处理。\n\n![Docker Tomcat](http://growth.phodal.com/assets/article/chapter4/docker-with-tomcat.png)\n\n<!-- more -->\n\n不同的环境有不同的选择，当然也可以结合在一起。不过，从理论上来说在最外层还是应该有一个真机的，但是我想大家都有这个明确的概念，就不多解释了。\n\n### 隔离硬件：虚拟机\n\n在虚拟机技术出现之前，为了运行不同用户的应用程序，人们需要不同的物理机才能实现这样的需求。对于 Web 应用程序来说，有的用户的网站访问量少消耗的系统资源也少，有的用户的网站访问量大消耗的系统资源也多。虽然有不同的服务器类型可以选择，然而对于多数的访问少的用户来说他们需要支付同样的费用。这听上去相当的不合理，并且也浪费了大量的资源。并且对于系统管理员来说，管理这些系统也不是一件容易的事。在过去硬件技术革新特别快，让操作系统运行在不同的机器上也不是一件容易的事。\n\n> 虚拟机（Virtual Machine）指通过软件模拟的具有完整硬件系统功能的、运行在一个完全隔离环境中的完整计算机系统。\n\n这是一个很有意思的技术，它可以让我们在一个主机上同时运行几个不同的操作系统。我们可以为这几个操作系统使用不同的硬件，在这之上的应用可以使用不同的技术栈来运行，并且从理论上互相不影响。其架构如下图所示：\n\n![虚拟机](http://growth.phodal.com/assets/article/chapter4/virtual_machine.png)\n\n借助于虚拟机技术，当我们需要更多的资源的时候，创建一个新的虚拟机就行了。同时，由于这些虚拟机上运行的是同样的操作系统，并且可以使用相同的配置，我们只需要编写一些脚本就可以实现其自动化。当我们的物联机发生问题时，我们也可以很快将虚拟机迁移或恢复到另外的宿主机。\n\n### 隔离操作系统：容器虚拟化\n\n对于大部分的开发团队来说，直接开发基于虚拟机的自动化工具不是一件容易的事，并且他从使用成本上来说比较高。这时候我们就需要一些更轻量级的工具容器——它可以提供轻量级的虚拟化，以便隔离进程和资源，而且不需要提供指令解释机制以及全虚拟化的其他复杂性。并且，它从启动速度上来说更快。\n\n#### LXC\n\n在介绍 Docker 之前，我们还是稍微提一下 LXC。因为在过去我有一些使用 LXC 的经历，让我觉得 LXC 很赞。\n\n> LXC，其名称来自 Linux 软件容器（Linux Containers）的缩写，一种操作系统层虚拟化（Operating system–level virtualization）技术，为 Linux 内核容器功能的一个用户空间接口。它将应用软件系统打包成一个软件容器（Container），内含应用软件本身的代码，以及所需要的操作系统核心和库。通过统一的名字空间和共用 API 来分配不同软件容器的可用硬件资源，创造出应用程序的独立沙箱运行环境，使得 Linux 用户可以容易的创建和管理系统或应用容器。\n\n我们可以将之以上面说到的虚拟机作一个简单的对比，其架构图如下所示：\n\n![LXC vs VM](http://growth.phodal.com/assets/article/chapter4/lxc-vm.jpg)\n\n我们会发现虚拟机中多了一层 Hypervisor——运行在物理服务器和操作系统之间，它可以让多个操作系统和应用共享一套基础物理硬件。这一层级可以协调访问服务器上的所有物理设备和虚拟机，然而由于这一层级的存在，它也将消耗更多的能量。据爱立信研究院和阿尔托大学发表的论文表示：Docker、LXC 与 Xen、KVM 在完成相同的工作时要少消耗10%的能耗。\n\nLXC 主要是利用 cgroups 与 namespace 的功能，来向提供应用软件一个独立的操作系统运行环境。cgroups（即Control Groups）是 Linux 内核提供的一种可以限制、记录、隔离进程组所使用的物理资源的机制。而由 namespace 来责任隔离控制。\n\n与虚拟机相比，LXC 隔离性方面有所不足，这就意味着在实现可移植部署会遇到一些困难。这时候，我们就需要 Docker 来提供一个抽象层，并提供一个管理机制。\n\n#### Docker\n\n> Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。Docker 可以自动化打包和部署任何应用、创建一个轻量级私有 PaaS 云、搭建开发测试环境、部署可扩展的 Web 应用等。\n\n构建出 Docker 的 Container 是一个很有意思的过程。在这一个过程中，首先我们需要一个 base images，这个基础镜像不仅包含了一个基础系统，如 Ubuntu、Debian。他还包含了一系列的模块，如初始化进程、SSH 服务、syslog-ng 等等的一些工具。由上面原内容构建了一个基础镜像，随后的修改都将于这个镜像，我们可以用它生成新的镜像，一层层的往上叠加。而用户的进程运行在 writeable 的 layer 中。\n\n![Docker Container](http://growth.phodal.com/assets/article/chapter4/basic-images.png)\n\n从上图中我们还可以发现一点： Docker 容器是建立在 Aufs 基础上的。AUFS 是一种 Union File System，它可以把不同的目录挂载到同一个虚拟文件系统下。它的目的就是为了实现上图的增量递增的过程，同时又不会影响原有的目录。即如下的流程如下：\n\n![AUFS 层](http://growth.phodal.com/assets/article/chapter4/aufs_layers.jpg)\n\n其增量的过程和我们使用 Git 的过程中有点像，除了在最开始的时候会有一个镜像层。随后我们的修改都可以保存下来，并且当下次我们提交修改的时候，我们也可以在旧有的提交上运行。\n\n因此，Docker 与 LXC 的差距就如下如图所示：\n\n![LXC 与 Docker](http://growth.phodal.com/assets/article/chapter4/lxc-vs-docker.png)\n\nLXC 时每个虚拟机只能是一个虚拟机，而 Docker 则是一系列的虚拟机。\n\n### 隔离底层：Servlet 容器\n\n在上面的例子里我们已经隔离开了操作系统的因素，接着我们还需要解决操作系统、开发环境引起的差异。早期开发 Web 应用时，人们使用 CGI 技术，它可以让一个客户端，从网页浏览器向执行在网络服务器上的程序请求数据。并且 CGI 程序可以用任何脚本语言或者是完全独立编程语言实现，只要这个语言可以在这个系统上运行。而这样的脚本语言在多数情况下是依赖于系统环境的，特别是针对于 C++ 这一类的编译语言来说，在不同的操作系统中都需要重新编译。\n\n而 Java 的 Servlet 则是另外一种有趣的存在，它是一种**独立于平台和协议**的服务器端的 Java 应用程序，可以生成动态的 Web 页面。\n\n#### Tomcat\n\n在开发 Java Web 应用的过程中，我们在开始环境使用 Jetty 来运行我们的服务，而在生产环境使用 Tomcat 来运行。他们都是 Servlet 容器，可以在其上面运行着同一个 Servlet 应用。Servlet 是指由 Java 编写的服务器端程序，它们是为响应 Web 应用程序上下文中的 HTTP 请求而设计的。它是应用服务器中位于组件和平台之间的接口集合。\n\nTomcat 服务器是一个免费的开放源代码的 Web 应用服务器。它运行时占用的系统资源小，扩展性好，支持负载平衡与邮件服务等开发应用系统常用的功能。除此，它还是一个 Servlet 和 JSP 容器，独立的 Servlet 容器是 Tomcat 的默认模式。其架构如下图所示：\n\n![Tomcat架构](http://growth.phodal.com/assets/article/chapter4/tomcat-architecture.png)\n\nServlet 被部署在应用服务器中，并由容器来控制其生命周期。在运行时由 Web 服务器软件处理一般请求，并把 Servlet 调用传递给“容器”来处理。并且 Tomcat 也会负责对一些静态资源的处理。\n\n### 隔离依赖版本：虚拟环境\n\n对于 Java 这一类的编译语言来说，不存在太多语言运行带来的问题。而对于动态语言来说就存在这样的问题，如 Ruby、Python、Node.js 等等，这一个问题主要集中于开发环境。当然如果你在一个服务器上运行着几个不同的应用来说，也会存在这样的问题。这一类的工具在 Python 里有 VirtualEnv，在 Ruby 里有 RVM、Rbenv，在 Node.js 里有 NVM。\n\n下图是使用 VirtualEnv 时的不同几个应用的架构图：\n\n![VirtualEnv](http://growth.phodal.com/assets/article/chapter4/virtualenv.jpg)\n\n如下所示，在不同的虚拟环境里，我们可以使用不同的依赖库。在这上面构建不同的应用，也可以使用不同的 Python 版本来构建系统。通常来说，这一类的工具主要用于本地的开发环境。\n\n### 隔离运行环境：语言虚拟机\n\n最后一个要介绍的可能就是更加抽象的，但是也是更加实用的一个，JVM 就是这方面的一个代表。在我们的编程生涯里，我们很容易就会遇到跨平台问题——即我们在我们的开发机器上开发的软件，在我们的产品环境的机器上就没有办法运行。特别是当我们使用 Mac OS 或者 Windows 机器上开发了我们的应用，然后我们需要在 Linux 系统上运行，就会遇到各种问题。并且当我们使用了一个需要重新编译的库时，这种问题就更加麻烦。\n\n如下图所示的是 JVM 的架构示意图\n\n![JVM](http://growth.phodal.com/assets/article/chapter4/java-virtual-machine.jpg)\n\nJVM 是一种用于计算设备的规范，它是一个虚构出来的计算机，是通过在实际的计算机上仿真模拟各种计算机功能来实现的。它可以实现“编写一次，到处运行”。\n\n换句话来说，它在底层实现了环境隔离，它屏蔽了与具体操作系统平台相关的信息，使得 Java 程序只需生成在 Java 虚拟机上运行的目标代码（字节码），就可以在多种平台上不加修改地运行。\n\n基于此，只要其他编程语言的编译器能生成正确 Java bytecode 文件，这个语言也能实现在 JVM 上运行。如下图所示的是基于 JVM 的 Jython 语言的架构图：\n\n![Jython](http://growth.phodal.com/assets/article/chapter4/jython-arch.jpg)\n\n其底层是基于 JVM，而编写时则是用 Python 语言，并且他可以使用 Java 的模块来编程。\n\n常见拥有同样架构的工具，还有 MySQL，如下图是所示的是 MySQL 的架构图：\n\n![MySQL](http://growth.phodal.com/assets/article/chapter4/mysql-architecture.png)\n\nMySQL 在最顶层提供了一个名为 SQL 的查询语言，这个查询语言只能用于查询数据库，然而它却是一种更高级的用法。它不像通用目的语言那样目标范围涵盖一切软件问题，而是专门针对某一特定问题的计算机语言，即领域特定语言。\n\n### 隔离语言：DSL\n\n这是一门特别有意思也特别值得期待的技术，但是实现它并不是一件容易的事。\n\n作为讨论隔离环境的一部分，我们只看外部 DSL。内部 DSL 与外部 DSL 最大的区别在于：外部 DSL 近似于创建了一种新的语法和语义的全新语言。如下图所示是两中 DSL 的一种对比：\n\n![内部 DSL 和外部 DSL](http://growth.phodal.com/assets/article/chapter4/internal-vs-external.png)\n\n在这样的外部 DSL 里，我们有自己的语法、自己的解析器、类型检测器等等。最简单且最常用的 DSL 就是 Markdown，如下图所示：\n\n![Markdown](http://growth.phodal.com/assets/article/chapter4/markdown.png)\n\n如果我们可以将我们的业务逻辑写成 DSL，那么我们就不需要担心底层语言的变动过多地影响原有的业务逻辑。换句话说，这相当于创建了我们自己的语言隔离环境，我们不需要思考用何种语言来实用我们的业务。\n","source":"_posts/4.1.0-runenv.md","raw":"title: 隔离与运行环境\ndate: 2016-5-4 23:45:08\ntags:\n---\n\n为了将我们的应用部署到服务器上，我们需要为其配置一个运行环境。从底层到顶层有这样的运行环境及容器：\n\n1. 隔离硬件：虚拟机\n2. 隔离操作系统：容器虚拟化\n3. 隔离底层：Servlet 容器\n4. 隔离依赖版本：虚拟环境\n5. 隔离运行环境：语言虚拟机\n6. 隔离语言：DSL\n\n实现上这是一个请求的处理过程，一个 HTTP 请求会先到达你的主机。如果你的主机上运行着多个虚拟机实例，那么请求就会来到这个虚拟机上。又或者是如果你是在 Docker 这一类容器里运行你的程序的话，那么也会先到达 Docker。随后这个请求就会交由 HTTP 服务器来处理，如 Apache、Nginx，这些 HTTP 服务器再将这些请求交由对应的应用或脚本来处理。随后将交由语言底层的指令来处理。\n\n![Docker Tomcat](http://growth.phodal.com/assets/article/chapter4/docker-with-tomcat.png)\n\n<!-- more -->\n\n不同的环境有不同的选择，当然也可以结合在一起。不过，从理论上来说在最外层还是应该有一个真机的，但是我想大家都有这个明确的概念，就不多解释了。\n\n### 隔离硬件：虚拟机\n\n在虚拟机技术出现之前，为了运行不同用户的应用程序，人们需要不同的物理机才能实现这样的需求。对于 Web 应用程序来说，有的用户的网站访问量少消耗的系统资源也少，有的用户的网站访问量大消耗的系统资源也多。虽然有不同的服务器类型可以选择，然而对于多数的访问少的用户来说他们需要支付同样的费用。这听上去相当的不合理，并且也浪费了大量的资源。并且对于系统管理员来说，管理这些系统也不是一件容易的事。在过去硬件技术革新特别快，让操作系统运行在不同的机器上也不是一件容易的事。\n\n> 虚拟机（Virtual Machine）指通过软件模拟的具有完整硬件系统功能的、运行在一个完全隔离环境中的完整计算机系统。\n\n这是一个很有意思的技术，它可以让我们在一个主机上同时运行几个不同的操作系统。我们可以为这几个操作系统使用不同的硬件，在这之上的应用可以使用不同的技术栈来运行，并且从理论上互相不影响。其架构如下图所示：\n\n![虚拟机](http://growth.phodal.com/assets/article/chapter4/virtual_machine.png)\n\n借助于虚拟机技术，当我们需要更多的资源的时候，创建一个新的虚拟机就行了。同时，由于这些虚拟机上运行的是同样的操作系统，并且可以使用相同的配置，我们只需要编写一些脚本就可以实现其自动化。当我们的物联机发生问题时，我们也可以很快将虚拟机迁移或恢复到另外的宿主机。\n\n### 隔离操作系统：容器虚拟化\n\n对于大部分的开发团队来说，直接开发基于虚拟机的自动化工具不是一件容易的事，并且他从使用成本上来说比较高。这时候我们就需要一些更轻量级的工具容器——它可以提供轻量级的虚拟化，以便隔离进程和资源，而且不需要提供指令解释机制以及全虚拟化的其他复杂性。并且，它从启动速度上来说更快。\n\n#### LXC\n\n在介绍 Docker 之前，我们还是稍微提一下 LXC。因为在过去我有一些使用 LXC 的经历，让我觉得 LXC 很赞。\n\n> LXC，其名称来自 Linux 软件容器（Linux Containers）的缩写，一种操作系统层虚拟化（Operating system–level virtualization）技术，为 Linux 内核容器功能的一个用户空间接口。它将应用软件系统打包成一个软件容器（Container），内含应用软件本身的代码，以及所需要的操作系统核心和库。通过统一的名字空间和共用 API 来分配不同软件容器的可用硬件资源，创造出应用程序的独立沙箱运行环境，使得 Linux 用户可以容易的创建和管理系统或应用容器。\n\n我们可以将之以上面说到的虚拟机作一个简单的对比，其架构图如下所示：\n\n![LXC vs VM](http://growth.phodal.com/assets/article/chapter4/lxc-vm.jpg)\n\n我们会发现虚拟机中多了一层 Hypervisor——运行在物理服务器和操作系统之间，它可以让多个操作系统和应用共享一套基础物理硬件。这一层级可以协调访问服务器上的所有物理设备和虚拟机，然而由于这一层级的存在，它也将消耗更多的能量。据爱立信研究院和阿尔托大学发表的论文表示：Docker、LXC 与 Xen、KVM 在完成相同的工作时要少消耗10%的能耗。\n\nLXC 主要是利用 cgroups 与 namespace 的功能，来向提供应用软件一个独立的操作系统运行环境。cgroups（即Control Groups）是 Linux 内核提供的一种可以限制、记录、隔离进程组所使用的物理资源的机制。而由 namespace 来责任隔离控制。\n\n与虚拟机相比，LXC 隔离性方面有所不足，这就意味着在实现可移植部署会遇到一些困难。这时候，我们就需要 Docker 来提供一个抽象层，并提供一个管理机制。\n\n#### Docker\n\n> Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。Docker 可以自动化打包和部署任何应用、创建一个轻量级私有 PaaS 云、搭建开发测试环境、部署可扩展的 Web 应用等。\n\n构建出 Docker 的 Container 是一个很有意思的过程。在这一个过程中，首先我们需要一个 base images，这个基础镜像不仅包含了一个基础系统，如 Ubuntu、Debian。他还包含了一系列的模块，如初始化进程、SSH 服务、syslog-ng 等等的一些工具。由上面原内容构建了一个基础镜像，随后的修改都将于这个镜像，我们可以用它生成新的镜像，一层层的往上叠加。而用户的进程运行在 writeable 的 layer 中。\n\n![Docker Container](http://growth.phodal.com/assets/article/chapter4/basic-images.png)\n\n从上图中我们还可以发现一点： Docker 容器是建立在 Aufs 基础上的。AUFS 是一种 Union File System，它可以把不同的目录挂载到同一个虚拟文件系统下。它的目的就是为了实现上图的增量递增的过程，同时又不会影响原有的目录。即如下的流程如下：\n\n![AUFS 层](http://growth.phodal.com/assets/article/chapter4/aufs_layers.jpg)\n\n其增量的过程和我们使用 Git 的过程中有点像，除了在最开始的时候会有一个镜像层。随后我们的修改都可以保存下来，并且当下次我们提交修改的时候，我们也可以在旧有的提交上运行。\n\n因此，Docker 与 LXC 的差距就如下如图所示：\n\n![LXC 与 Docker](http://growth.phodal.com/assets/article/chapter4/lxc-vs-docker.png)\n\nLXC 时每个虚拟机只能是一个虚拟机，而 Docker 则是一系列的虚拟机。\n\n### 隔离底层：Servlet 容器\n\n在上面的例子里我们已经隔离开了操作系统的因素，接着我们还需要解决操作系统、开发环境引起的差异。早期开发 Web 应用时，人们使用 CGI 技术，它可以让一个客户端，从网页浏览器向执行在网络服务器上的程序请求数据。并且 CGI 程序可以用任何脚本语言或者是完全独立编程语言实现，只要这个语言可以在这个系统上运行。而这样的脚本语言在多数情况下是依赖于系统环境的，特别是针对于 C++ 这一类的编译语言来说，在不同的操作系统中都需要重新编译。\n\n而 Java 的 Servlet 则是另外一种有趣的存在，它是一种**独立于平台和协议**的服务器端的 Java 应用程序，可以生成动态的 Web 页面。\n\n#### Tomcat\n\n在开发 Java Web 应用的过程中，我们在开始环境使用 Jetty 来运行我们的服务，而在生产环境使用 Tomcat 来运行。他们都是 Servlet 容器，可以在其上面运行着同一个 Servlet 应用。Servlet 是指由 Java 编写的服务器端程序，它们是为响应 Web 应用程序上下文中的 HTTP 请求而设计的。它是应用服务器中位于组件和平台之间的接口集合。\n\nTomcat 服务器是一个免费的开放源代码的 Web 应用服务器。它运行时占用的系统资源小，扩展性好，支持负载平衡与邮件服务等开发应用系统常用的功能。除此，它还是一个 Servlet 和 JSP 容器，独立的 Servlet 容器是 Tomcat 的默认模式。其架构如下图所示：\n\n![Tomcat架构](http://growth.phodal.com/assets/article/chapter4/tomcat-architecture.png)\n\nServlet 被部署在应用服务器中，并由容器来控制其生命周期。在运行时由 Web 服务器软件处理一般请求，并把 Servlet 调用传递给“容器”来处理。并且 Tomcat 也会负责对一些静态资源的处理。\n\n### 隔离依赖版本：虚拟环境\n\n对于 Java 这一类的编译语言来说，不存在太多语言运行带来的问题。而对于动态语言来说就存在这样的问题，如 Ruby、Python、Node.js 等等，这一个问题主要集中于开发环境。当然如果你在一个服务器上运行着几个不同的应用来说，也会存在这样的问题。这一类的工具在 Python 里有 VirtualEnv，在 Ruby 里有 RVM、Rbenv，在 Node.js 里有 NVM。\n\n下图是使用 VirtualEnv 时的不同几个应用的架构图：\n\n![VirtualEnv](http://growth.phodal.com/assets/article/chapter4/virtualenv.jpg)\n\n如下所示，在不同的虚拟环境里，我们可以使用不同的依赖库。在这上面构建不同的应用，也可以使用不同的 Python 版本来构建系统。通常来说，这一类的工具主要用于本地的开发环境。\n\n### 隔离运行环境：语言虚拟机\n\n最后一个要介绍的可能就是更加抽象的，但是也是更加实用的一个，JVM 就是这方面的一个代表。在我们的编程生涯里，我们很容易就会遇到跨平台问题——即我们在我们的开发机器上开发的软件，在我们的产品环境的机器上就没有办法运行。特别是当我们使用 Mac OS 或者 Windows 机器上开发了我们的应用，然后我们需要在 Linux 系统上运行，就会遇到各种问题。并且当我们使用了一个需要重新编译的库时，这种问题就更加麻烦。\n\n如下图所示的是 JVM 的架构示意图\n\n![JVM](http://growth.phodal.com/assets/article/chapter4/java-virtual-machine.jpg)\n\nJVM 是一种用于计算设备的规范，它是一个虚构出来的计算机，是通过在实际的计算机上仿真模拟各种计算机功能来实现的。它可以实现“编写一次，到处运行”。\n\n换句话来说，它在底层实现了环境隔离，它屏蔽了与具体操作系统平台相关的信息，使得 Java 程序只需生成在 Java 虚拟机上运行的目标代码（字节码），就可以在多种平台上不加修改地运行。\n\n基于此，只要其他编程语言的编译器能生成正确 Java bytecode 文件，这个语言也能实现在 JVM 上运行。如下图所示的是基于 JVM 的 Jython 语言的架构图：\n\n![Jython](http://growth.phodal.com/assets/article/chapter4/jython-arch.jpg)\n\n其底层是基于 JVM，而编写时则是用 Python 语言，并且他可以使用 Java 的模块来编程。\n\n常见拥有同样架构的工具，还有 MySQL，如下图是所示的是 MySQL 的架构图：\n\n![MySQL](http://growth.phodal.com/assets/article/chapter4/mysql-architecture.png)\n\nMySQL 在最顶层提供了一个名为 SQL 的查询语言，这个查询语言只能用于查询数据库，然而它却是一种更高级的用法。它不像通用目的语言那样目标范围涵盖一切软件问题，而是专门针对某一特定问题的计算机语言，即领域特定语言。\n\n### 隔离语言：DSL\n\n这是一门特别有意思也特别值得期待的技术，但是实现它并不是一件容易的事。\n\n作为讨论隔离环境的一部分，我们只看外部 DSL。内部 DSL 与外部 DSL 最大的区别在于：外部 DSL 近似于创建了一种新的语法和语义的全新语言。如下图所示是两中 DSL 的一种对比：\n\n![内部 DSL 和外部 DSL](http://growth.phodal.com/assets/article/chapter4/internal-vs-external.png)\n\n在这样的外部 DSL 里，我们有自己的语法、自己的解析器、类型检测器等等。最简单且最常用的 DSL 就是 Markdown，如下图所示：\n\n![Markdown](http://growth.phodal.com/assets/article/chapter4/markdown.png)\n\n如果我们可以将我们的业务逻辑写成 DSL，那么我们就不需要担心底层语言的变动过多地影响原有的业务逻辑。换句话说，这相当于创建了我们自己的语言隔离环境，我们不需要思考用何种语言来实用我们的业务。\n","slug":"4.1.0-runenv","published":1,"updated":"2016-05-04T04:26:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuf7mpgx000ytsifgiczok4h","content":"<p>为了将我们的应用部署到服务器上，我们需要为其配置一个运行环境。从底层到顶层有这样的运行环境及容器：</p>\n<ol>\n<li>隔离硬件：虚拟机</li>\n<li>隔离操作系统：容器虚拟化</li>\n<li>隔离底层：Servlet 容器</li>\n<li>隔离依赖版本：虚拟环境</li>\n<li>隔离运行环境：语言虚拟机</li>\n<li>隔离语言：DSL</li>\n</ol>\n<p>实现上这是一个请求的处理过程，一个 HTTP 请求会先到达你的主机。如果你的主机上运行着多个虚拟机实例，那么请求就会来到这个虚拟机上。又或者是如果你是在 Docker 这一类容器里运行你的程序的话，那么也会先到达 Docker。随后这个请求就会交由 HTTP 服务器来处理，如 Apache、Nginx，这些 HTTP 服务器再将这些请求交由对应的应用或脚本来处理。随后将交由语言底层的指令来处理。</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter4/docker-with-tomcat.png\" alt=\"Docker Tomcat\"></p>\n<a id=\"more\"></a>\n<p>不同的环境有不同的选择，当然也可以结合在一起。不过，从理论上来说在最外层还是应该有一个真机的，但是我想大家都有这个明确的概念，就不多解释了。</p>\n<h3 id=\"隔离硬件：虚拟机\"><a href=\"#隔离硬件：虚拟机\" class=\"headerlink\" title=\"隔离硬件：虚拟机\"></a>隔离硬件：虚拟机</h3><p>在虚拟机技术出现之前，为了运行不同用户的应用程序，人们需要不同的物理机才能实现这样的需求。对于 Web 应用程序来说，有的用户的网站访问量少消耗的系统资源也少，有的用户的网站访问量大消耗的系统资源也多。虽然有不同的服务器类型可以选择，然而对于多数的访问少的用户来说他们需要支付同样的费用。这听上去相当的不合理，并且也浪费了大量的资源。并且对于系统管理员来说，管理这些系统也不是一件容易的事。在过去硬件技术革新特别快，让操作系统运行在不同的机器上也不是一件容易的事。</p>\n<blockquote>\n<p>虚拟机（Virtual Machine）指通过软件模拟的具有完整硬件系统功能的、运行在一个完全隔离环境中的完整计算机系统。</p>\n</blockquote>\n<p>这是一个很有意思的技术，它可以让我们在一个主机上同时运行几个不同的操作系统。我们可以为这几个操作系统使用不同的硬件，在这之上的应用可以使用不同的技术栈来运行，并且从理论上互相不影响。其架构如下图所示：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter4/virtual_machine.png\" alt=\"虚拟机\"></p>\n<p>借助于虚拟机技术，当我们需要更多的资源的时候，创建一个新的虚拟机就行了。同时，由于这些虚拟机上运行的是同样的操作系统，并且可以使用相同的配置，我们只需要编写一些脚本就可以实现其自动化。当我们的物联机发生问题时，我们也可以很快将虚拟机迁移或恢复到另外的宿主机。</p>\n<h3 id=\"隔离操作系统：容器虚拟化\"><a href=\"#隔离操作系统：容器虚拟化\" class=\"headerlink\" title=\"隔离操作系统：容器虚拟化\"></a>隔离操作系统：容器虚拟化</h3><p>对于大部分的开发团队来说，直接开发基于虚拟机的自动化工具不是一件容易的事，并且他从使用成本上来说比较高。这时候我们就需要一些更轻量级的工具容器——它可以提供轻量级的虚拟化，以便隔离进程和资源，而且不需要提供指令解释机制以及全虚拟化的其他复杂性。并且，它从启动速度上来说更快。</p>\n<h4 id=\"LXC\"><a href=\"#LXC\" class=\"headerlink\" title=\"LXC\"></a>LXC</h4><p>在介绍 Docker 之前，我们还是稍微提一下 LXC。因为在过去我有一些使用 LXC 的经历，让我觉得 LXC 很赞。</p>\n<blockquote>\n<p>LXC，其名称来自 Linux 软件容器（Linux Containers）的缩写，一种操作系统层虚拟化（Operating system–level virtualization）技术，为 Linux 内核容器功能的一个用户空间接口。它将应用软件系统打包成一个软件容器（Container），内含应用软件本身的代码，以及所需要的操作系统核心和库。通过统一的名字空间和共用 API 来分配不同软件容器的可用硬件资源，创造出应用程序的独立沙箱运行环境，使得 Linux 用户可以容易的创建和管理系统或应用容器。</p>\n</blockquote>\n<p>我们可以将之以上面说到的虚拟机作一个简单的对比，其架构图如下所示：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter4/lxc-vm.jpg\" alt=\"LXC vs VM\"></p>\n<p>我们会发现虚拟机中多了一层 Hypervisor——运行在物理服务器和操作系统之间，它可以让多个操作系统和应用共享一套基础物理硬件。这一层级可以协调访问服务器上的所有物理设备和虚拟机，然而由于这一层级的存在，它也将消耗更多的能量。据爱立信研究院和阿尔托大学发表的论文表示：Docker、LXC 与 Xen、KVM 在完成相同的工作时要少消耗10%的能耗。</p>\n<p>LXC 主要是利用 cgroups 与 namespace 的功能，来向提供应用软件一个独立的操作系统运行环境。cgroups（即Control Groups）是 Linux 内核提供的一种可以限制、记录、隔离进程组所使用的物理资源的机制。而由 namespace 来责任隔离控制。</p>\n<p>与虚拟机相比，LXC 隔离性方面有所不足，这就意味着在实现可移植部署会遇到一些困难。这时候，我们就需要 Docker 来提供一个抽象层，并提供一个管理机制。</p>\n<h4 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h4><blockquote>\n<p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。Docker 可以自动化打包和部署任何应用、创建一个轻量级私有 PaaS 云、搭建开发测试环境、部署可扩展的 Web 应用等。</p>\n</blockquote>\n<p>构建出 Docker 的 Container 是一个很有意思的过程。在这一个过程中，首先我们需要一个 base images，这个基础镜像不仅包含了一个基础系统，如 Ubuntu、Debian。他还包含了一系列的模块，如初始化进程、SSH 服务、syslog-ng 等等的一些工具。由上面原内容构建了一个基础镜像，随后的修改都将于这个镜像，我们可以用它生成新的镜像，一层层的往上叠加。而用户的进程运行在 writeable 的 layer 中。</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter4/basic-images.png\" alt=\"Docker Container\"></p>\n<p>从上图中我们还可以发现一点： Docker 容器是建立在 Aufs 基础上的。AUFS 是一种 Union File System，它可以把不同的目录挂载到同一个虚拟文件系统下。它的目的就是为了实现上图的增量递增的过程，同时又不会影响原有的目录。即如下的流程如下：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter4/aufs_layers.jpg\" alt=\"AUFS 层\"></p>\n<p>其增量的过程和我们使用 Git 的过程中有点像，除了在最开始的时候会有一个镜像层。随后我们的修改都可以保存下来，并且当下次我们提交修改的时候，我们也可以在旧有的提交上运行。</p>\n<p>因此，Docker 与 LXC 的差距就如下如图所示：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter4/lxc-vs-docker.png\" alt=\"LXC 与 Docker\"></p>\n<p>LXC 时每个虚拟机只能是一个虚拟机，而 Docker 则是一系列的虚拟机。</p>\n<h3 id=\"隔离底层：Servlet-容器\"><a href=\"#隔离底层：Servlet-容器\" class=\"headerlink\" title=\"隔离底层：Servlet 容器\"></a>隔离底层：Servlet 容器</h3><p>在上面的例子里我们已经隔离开了操作系统的因素，接着我们还需要解决操作系统、开发环境引起的差异。早期开发 Web 应用时，人们使用 CGI 技术，它可以让一个客户端，从网页浏览器向执行在网络服务器上的程序请求数据。并且 CGI 程序可以用任何脚本语言或者是完全独立编程语言实现，只要这个语言可以在这个系统上运行。而这样的脚本语言在多数情况下是依赖于系统环境的，特别是针对于 C++ 这一类的编译语言来说，在不同的操作系统中都需要重新编译。</p>\n<p>而 Java 的 Servlet 则是另外一种有趣的存在，它是一种<strong>独立于平台和协议</strong>的服务器端的 Java 应用程序，可以生成动态的 Web 页面。</p>\n<h4 id=\"Tomcat\"><a href=\"#Tomcat\" class=\"headerlink\" title=\"Tomcat\"></a>Tomcat</h4><p>在开发 Java Web 应用的过程中，我们在开始环境使用 Jetty 来运行我们的服务，而在生产环境使用 Tomcat 来运行。他们都是 Servlet 容器，可以在其上面运行着同一个 Servlet 应用。Servlet 是指由 Java 编写的服务器端程序，它们是为响应 Web 应用程序上下文中的 HTTP 请求而设计的。它是应用服务器中位于组件和平台之间的接口集合。</p>\n<p>Tomcat 服务器是一个免费的开放源代码的 Web 应用服务器。它运行时占用的系统资源小，扩展性好，支持负载平衡与邮件服务等开发应用系统常用的功能。除此，它还是一个 Servlet 和 JSP 容器，独立的 Servlet 容器是 Tomcat 的默认模式。其架构如下图所示：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter4/tomcat-architecture.png\" alt=\"Tomcat架构\"></p>\n<p>Servlet 被部署在应用服务器中，并由容器来控制其生命周期。在运行时由 Web 服务器软件处理一般请求，并把 Servlet 调用传递给“容器”来处理。并且 Tomcat 也会负责对一些静态资源的处理。</p>\n<h3 id=\"隔离依赖版本：虚拟环境\"><a href=\"#隔离依赖版本：虚拟环境\" class=\"headerlink\" title=\"隔离依赖版本：虚拟环境\"></a>隔离依赖版本：虚拟环境</h3><p>对于 Java 这一类的编译语言来说，不存在太多语言运行带来的问题。而对于动态语言来说就存在这样的问题，如 Ruby、Python、Node.js 等等，这一个问题主要集中于开发环境。当然如果你在一个服务器上运行着几个不同的应用来说，也会存在这样的问题。这一类的工具在 Python 里有 VirtualEnv，在 Ruby 里有 RVM、Rbenv，在 Node.js 里有 NVM。</p>\n<p>下图是使用 VirtualEnv 时的不同几个应用的架构图：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter4/virtualenv.jpg\" alt=\"VirtualEnv\"></p>\n<p>如下所示，在不同的虚拟环境里，我们可以使用不同的依赖库。在这上面构建不同的应用，也可以使用不同的 Python 版本来构建系统。通常来说，这一类的工具主要用于本地的开发环境。</p>\n<h3 id=\"隔离运行环境：语言虚拟机\"><a href=\"#隔离运行环境：语言虚拟机\" class=\"headerlink\" title=\"隔离运行环境：语言虚拟机\"></a>隔离运行环境：语言虚拟机</h3><p>最后一个要介绍的可能就是更加抽象的，但是也是更加实用的一个，JVM 就是这方面的一个代表。在我们的编程生涯里，我们很容易就会遇到跨平台问题——即我们在我们的开发机器上开发的软件，在我们的产品环境的机器上就没有办法运行。特别是当我们使用 Mac OS 或者 Windows 机器上开发了我们的应用，然后我们需要在 Linux 系统上运行，就会遇到各种问题。并且当我们使用了一个需要重新编译的库时，这种问题就更加麻烦。</p>\n<p>如下图所示的是 JVM 的架构示意图</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter4/java-virtual-machine.jpg\" alt=\"JVM\"></p>\n<p>JVM 是一种用于计算设备的规范，它是一个虚构出来的计算机，是通过在实际的计算机上仿真模拟各种计算机功能来实现的。它可以实现“编写一次，到处运行”。</p>\n<p>换句话来说，它在底层实现了环境隔离，它屏蔽了与具体操作系统平台相关的信息，使得 Java 程序只需生成在 Java 虚拟机上运行的目标代码（字节码），就可以在多种平台上不加修改地运行。</p>\n<p>基于此，只要其他编程语言的编译器能生成正确 Java bytecode 文件，这个语言也能实现在 JVM 上运行。如下图所示的是基于 JVM 的 Jython 语言的架构图：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter4/jython-arch.jpg\" alt=\"Jython\"></p>\n<p>其底层是基于 JVM，而编写时则是用 Python 语言，并且他可以使用 Java 的模块来编程。</p>\n<p>常见拥有同样架构的工具，还有 MySQL，如下图是所示的是 MySQL 的架构图：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter4/mysql-architecture.png\" alt=\"MySQL\"></p>\n<p>MySQL 在最顶层提供了一个名为 SQL 的查询语言，这个查询语言只能用于查询数据库，然而它却是一种更高级的用法。它不像通用目的语言那样目标范围涵盖一切软件问题，而是专门针对某一特定问题的计算机语言，即领域特定语言。</p>\n<h3 id=\"隔离语言：DSL\"><a href=\"#隔离语言：DSL\" class=\"headerlink\" title=\"隔离语言：DSL\"></a>隔离语言：DSL</h3><p>这是一门特别有意思也特别值得期待的技术，但是实现它并不是一件容易的事。</p>\n<p>作为讨论隔离环境的一部分，我们只看外部 DSL。内部 DSL 与外部 DSL 最大的区别在于：外部 DSL 近似于创建了一种新的语法和语义的全新语言。如下图所示是两中 DSL 的一种对比：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter4/internal-vs-external.png\" alt=\"内部 DSL 和外部 DSL\"></p>\n<p>在这样的外部 DSL 里，我们有自己的语法、自己的解析器、类型检测器等等。最简单且最常用的 DSL 就是 Markdown，如下图所示：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter4/markdown.png\" alt=\"Markdown\"></p>\n<p>如果我们可以将我们的业务逻辑写成 DSL，那么我们就不需要担心底层语言的变动过多地影响原有的业务逻辑。换句话说，这相当于创建了我们自己的语言隔离环境，我们不需要思考用何种语言来实用我们的业务。</p>\n","excerpt":"<p>为了将我们的应用部署到服务器上，我们需要为其配置一个运行环境。从底层到顶层有这样的运行环境及容器：</p>\n<ol>\n<li>隔离硬件：虚拟机</li>\n<li>隔离操作系统：容器虚拟化</li>\n<li>隔离底层：Servlet 容器</li>\n<li>隔离依赖版本：虚拟环境</li>\n<li>隔离运行环境：语言虚拟机</li>\n<li>隔离语言：DSL</li>\n</ol>\n<p>实现上这是一个请求的处理过程，一个 HTTP 请求会先到达你的主机。如果你的主机上运行着多个虚拟机实例，那么请求就会来到这个虚拟机上。又或者是如果你是在 Docker 这一类容器里运行你的程序的话，那么也会先到达 Docker。随后这个请求就会交由 HTTP 服务器来处理，如 Apache、Nginx，这些 HTTP 服务器再将这些请求交由对应的应用或脚本来处理。随后将交由语言底层的指令来处理。</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter4/docker-with-tomcat.png\" alt=\"Docker Tomcat\"></p>","more":"<p>不同的环境有不同的选择，当然也可以结合在一起。不过，从理论上来说在最外层还是应该有一个真机的，但是我想大家都有这个明确的概念，就不多解释了。</p>\n<h3 id=\"隔离硬件：虚拟机\"><a href=\"#隔离硬件：虚拟机\" class=\"headerlink\" title=\"隔离硬件：虚拟机\"></a>隔离硬件：虚拟机</h3><p>在虚拟机技术出现之前，为了运行不同用户的应用程序，人们需要不同的物理机才能实现这样的需求。对于 Web 应用程序来说，有的用户的网站访问量少消耗的系统资源也少，有的用户的网站访问量大消耗的系统资源也多。虽然有不同的服务器类型可以选择，然而对于多数的访问少的用户来说他们需要支付同样的费用。这听上去相当的不合理，并且也浪费了大量的资源。并且对于系统管理员来说，管理这些系统也不是一件容易的事。在过去硬件技术革新特别快，让操作系统运行在不同的机器上也不是一件容易的事。</p>\n<blockquote>\n<p>虚拟机（Virtual Machine）指通过软件模拟的具有完整硬件系统功能的、运行在一个完全隔离环境中的完整计算机系统。</p>\n</blockquote>\n<p>这是一个很有意思的技术，它可以让我们在一个主机上同时运行几个不同的操作系统。我们可以为这几个操作系统使用不同的硬件，在这之上的应用可以使用不同的技术栈来运行，并且从理论上互相不影响。其架构如下图所示：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter4/virtual_machine.png\" alt=\"虚拟机\"></p>\n<p>借助于虚拟机技术，当我们需要更多的资源的时候，创建一个新的虚拟机就行了。同时，由于这些虚拟机上运行的是同样的操作系统，并且可以使用相同的配置，我们只需要编写一些脚本就可以实现其自动化。当我们的物联机发生问题时，我们也可以很快将虚拟机迁移或恢复到另外的宿主机。</p>\n<h3 id=\"隔离操作系统：容器虚拟化\"><a href=\"#隔离操作系统：容器虚拟化\" class=\"headerlink\" title=\"隔离操作系统：容器虚拟化\"></a>隔离操作系统：容器虚拟化</h3><p>对于大部分的开发团队来说，直接开发基于虚拟机的自动化工具不是一件容易的事，并且他从使用成本上来说比较高。这时候我们就需要一些更轻量级的工具容器——它可以提供轻量级的虚拟化，以便隔离进程和资源，而且不需要提供指令解释机制以及全虚拟化的其他复杂性。并且，它从启动速度上来说更快。</p>\n<h4 id=\"LXC\"><a href=\"#LXC\" class=\"headerlink\" title=\"LXC\"></a>LXC</h4><p>在介绍 Docker 之前，我们还是稍微提一下 LXC。因为在过去我有一些使用 LXC 的经历，让我觉得 LXC 很赞。</p>\n<blockquote>\n<p>LXC，其名称来自 Linux 软件容器（Linux Containers）的缩写，一种操作系统层虚拟化（Operating system–level virtualization）技术，为 Linux 内核容器功能的一个用户空间接口。它将应用软件系统打包成一个软件容器（Container），内含应用软件本身的代码，以及所需要的操作系统核心和库。通过统一的名字空间和共用 API 来分配不同软件容器的可用硬件资源，创造出应用程序的独立沙箱运行环境，使得 Linux 用户可以容易的创建和管理系统或应用容器。</p>\n</blockquote>\n<p>我们可以将之以上面说到的虚拟机作一个简单的对比，其架构图如下所示：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter4/lxc-vm.jpg\" alt=\"LXC vs VM\"></p>\n<p>我们会发现虚拟机中多了一层 Hypervisor——运行在物理服务器和操作系统之间，它可以让多个操作系统和应用共享一套基础物理硬件。这一层级可以协调访问服务器上的所有物理设备和虚拟机，然而由于这一层级的存在，它也将消耗更多的能量。据爱立信研究院和阿尔托大学发表的论文表示：Docker、LXC 与 Xen、KVM 在完成相同的工作时要少消耗10%的能耗。</p>\n<p>LXC 主要是利用 cgroups 与 namespace 的功能，来向提供应用软件一个独立的操作系统运行环境。cgroups（即Control Groups）是 Linux 内核提供的一种可以限制、记录、隔离进程组所使用的物理资源的机制。而由 namespace 来责任隔离控制。</p>\n<p>与虚拟机相比，LXC 隔离性方面有所不足，这就意味着在实现可移植部署会遇到一些困难。这时候，我们就需要 Docker 来提供一个抽象层，并提供一个管理机制。</p>\n<h4 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h4><blockquote>\n<p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。Docker 可以自动化打包和部署任何应用、创建一个轻量级私有 PaaS 云、搭建开发测试环境、部署可扩展的 Web 应用等。</p>\n</blockquote>\n<p>构建出 Docker 的 Container 是一个很有意思的过程。在这一个过程中，首先我们需要一个 base images，这个基础镜像不仅包含了一个基础系统，如 Ubuntu、Debian。他还包含了一系列的模块，如初始化进程、SSH 服务、syslog-ng 等等的一些工具。由上面原内容构建了一个基础镜像，随后的修改都将于这个镜像，我们可以用它生成新的镜像，一层层的往上叠加。而用户的进程运行在 writeable 的 layer 中。</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter4/basic-images.png\" alt=\"Docker Container\"></p>\n<p>从上图中我们还可以发现一点： Docker 容器是建立在 Aufs 基础上的。AUFS 是一种 Union File System，它可以把不同的目录挂载到同一个虚拟文件系统下。它的目的就是为了实现上图的增量递增的过程，同时又不会影响原有的目录。即如下的流程如下：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter4/aufs_layers.jpg\" alt=\"AUFS 层\"></p>\n<p>其增量的过程和我们使用 Git 的过程中有点像，除了在最开始的时候会有一个镜像层。随后我们的修改都可以保存下来，并且当下次我们提交修改的时候，我们也可以在旧有的提交上运行。</p>\n<p>因此，Docker 与 LXC 的差距就如下如图所示：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter4/lxc-vs-docker.png\" alt=\"LXC 与 Docker\"></p>\n<p>LXC 时每个虚拟机只能是一个虚拟机，而 Docker 则是一系列的虚拟机。</p>\n<h3 id=\"隔离底层：Servlet-容器\"><a href=\"#隔离底层：Servlet-容器\" class=\"headerlink\" title=\"隔离底层：Servlet 容器\"></a>隔离底层：Servlet 容器</h3><p>在上面的例子里我们已经隔离开了操作系统的因素，接着我们还需要解决操作系统、开发环境引起的差异。早期开发 Web 应用时，人们使用 CGI 技术，它可以让一个客户端，从网页浏览器向执行在网络服务器上的程序请求数据。并且 CGI 程序可以用任何脚本语言或者是完全独立编程语言实现，只要这个语言可以在这个系统上运行。而这样的脚本语言在多数情况下是依赖于系统环境的，特别是针对于 C++ 这一类的编译语言来说，在不同的操作系统中都需要重新编译。</p>\n<p>而 Java 的 Servlet 则是另外一种有趣的存在，它是一种<strong>独立于平台和协议</strong>的服务器端的 Java 应用程序，可以生成动态的 Web 页面。</p>\n<h4 id=\"Tomcat\"><a href=\"#Tomcat\" class=\"headerlink\" title=\"Tomcat\"></a>Tomcat</h4><p>在开发 Java Web 应用的过程中，我们在开始环境使用 Jetty 来运行我们的服务，而在生产环境使用 Tomcat 来运行。他们都是 Servlet 容器，可以在其上面运行着同一个 Servlet 应用。Servlet 是指由 Java 编写的服务器端程序，它们是为响应 Web 应用程序上下文中的 HTTP 请求而设计的。它是应用服务器中位于组件和平台之间的接口集合。</p>\n<p>Tomcat 服务器是一个免费的开放源代码的 Web 应用服务器。它运行时占用的系统资源小，扩展性好，支持负载平衡与邮件服务等开发应用系统常用的功能。除此，它还是一个 Servlet 和 JSP 容器，独立的 Servlet 容器是 Tomcat 的默认模式。其架构如下图所示：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter4/tomcat-architecture.png\" alt=\"Tomcat架构\"></p>\n<p>Servlet 被部署在应用服务器中，并由容器来控制其生命周期。在运行时由 Web 服务器软件处理一般请求，并把 Servlet 调用传递给“容器”来处理。并且 Tomcat 也会负责对一些静态资源的处理。</p>\n<h3 id=\"隔离依赖版本：虚拟环境\"><a href=\"#隔离依赖版本：虚拟环境\" class=\"headerlink\" title=\"隔离依赖版本：虚拟环境\"></a>隔离依赖版本：虚拟环境</h3><p>对于 Java 这一类的编译语言来说，不存在太多语言运行带来的问题。而对于动态语言来说就存在这样的问题，如 Ruby、Python、Node.js 等等，这一个问题主要集中于开发环境。当然如果你在一个服务器上运行着几个不同的应用来说，也会存在这样的问题。这一类的工具在 Python 里有 VirtualEnv，在 Ruby 里有 RVM、Rbenv，在 Node.js 里有 NVM。</p>\n<p>下图是使用 VirtualEnv 时的不同几个应用的架构图：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter4/virtualenv.jpg\" alt=\"VirtualEnv\"></p>\n<p>如下所示，在不同的虚拟环境里，我们可以使用不同的依赖库。在这上面构建不同的应用，也可以使用不同的 Python 版本来构建系统。通常来说，这一类的工具主要用于本地的开发环境。</p>\n<h3 id=\"隔离运行环境：语言虚拟机\"><a href=\"#隔离运行环境：语言虚拟机\" class=\"headerlink\" title=\"隔离运行环境：语言虚拟机\"></a>隔离运行环境：语言虚拟机</h3><p>最后一个要介绍的可能就是更加抽象的，但是也是更加实用的一个，JVM 就是这方面的一个代表。在我们的编程生涯里，我们很容易就会遇到跨平台问题——即我们在我们的开发机器上开发的软件，在我们的产品环境的机器上就没有办法运行。特别是当我们使用 Mac OS 或者 Windows 机器上开发了我们的应用，然后我们需要在 Linux 系统上运行，就会遇到各种问题。并且当我们使用了一个需要重新编译的库时，这种问题就更加麻烦。</p>\n<p>如下图所示的是 JVM 的架构示意图</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter4/java-virtual-machine.jpg\" alt=\"JVM\"></p>\n<p>JVM 是一种用于计算设备的规范，它是一个虚构出来的计算机，是通过在实际的计算机上仿真模拟各种计算机功能来实现的。它可以实现“编写一次，到处运行”。</p>\n<p>换句话来说，它在底层实现了环境隔离，它屏蔽了与具体操作系统平台相关的信息，使得 Java 程序只需生成在 Java 虚拟机上运行的目标代码（字节码），就可以在多种平台上不加修改地运行。</p>\n<p>基于此，只要其他编程语言的编译器能生成正确 Java bytecode 文件，这个语言也能实现在 JVM 上运行。如下图所示的是基于 JVM 的 Jython 语言的架构图：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter4/jython-arch.jpg\" alt=\"Jython\"></p>\n<p>其底层是基于 JVM，而编写时则是用 Python 语言，并且他可以使用 Java 的模块来编程。</p>\n<p>常见拥有同样架构的工具，还有 MySQL，如下图是所示的是 MySQL 的架构图：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter4/mysql-architecture.png\" alt=\"MySQL\"></p>\n<p>MySQL 在最顶层提供了一个名为 SQL 的查询语言，这个查询语言只能用于查询数据库，然而它却是一种更高级的用法。它不像通用目的语言那样目标范围涵盖一切软件问题，而是专门针对某一特定问题的计算机语言，即领域特定语言。</p>\n<h3 id=\"隔离语言：DSL\"><a href=\"#隔离语言：DSL\" class=\"headerlink\" title=\"隔离语言：DSL\"></a>隔离语言：DSL</h3><p>这是一门特别有意思也特别值得期待的技术，但是实现它并不是一件容易的事。</p>\n<p>作为讨论隔离环境的一部分，我们只看外部 DSL。内部 DSL 与外部 DSL 最大的区别在于：外部 DSL 近似于创建了一种新的语法和语义的全新语言。如下图所示是两中 DSL 的一种对比：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter4/internal-vs-external.png\" alt=\"内部 DSL 和外部 DSL\"></p>\n<p>在这样的外部 DSL 里，我们有自己的语法、自己的解析器、类型检测器等等。最简单且最常用的 DSL 就是 Markdown，如下图所示：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter4/markdown.png\" alt=\"Markdown\"></p>\n<p>如果我们可以将我们的业务逻辑写成 DSL，那么我们就不需要担心底层语言的变动过多地影响原有的业务逻辑。换句话说，这相当于创建了我们自己的语言隔离环境，我们不需要思考用何种语言来实用我们的业务。</p>"},{"title":"可配置","date":"2016-05-05T15:45:08.000Z","_content":"\n让我们写的 Web 应用可配置是一项很有挑战性，也很实用的技能。\n\n起先，我们在本地开发的时候为本地创建了一套环境，也创建了本地的配置。接着我们需要将我们的包部署到测试环境，也生成了测试环境的相应配置。这其中如果有其他的环境，我们也需要创建相应的环境。最后，我们还需要为产品环境创建全新的配置。\n\n下图是 Druapl 框架的部署流:\n\n![Drupal Deployment Flow](http://growth.phodal.com/assets/article/chapter4/deployment-flow.png)\n\n在不同的环境下，他们使用不同的 Content。这些 Content 的内容不仅仅可以是一些系统相当的配置，也可以是一些不同环境下的 UI 等等。而在这其中也会涉及到一些比较复杂的知识，下面只是做一些简单的介绍。\n\n<!-- more -->\n\n### 环境配置\n\n最常见的例子就是我们需要在不同的环境有不同的配置。大原则就是我们不能直接使用产品的环境测试，因此我们就需要为不同的环境配置不同的数据库：\n\n - 开发环境。即开发者用于开发的环境，大部分的数据都是由我们自己注入的，在开发的过程中我们也会添加一些数据。\n - 集成测试环境/测试环境。和开发环境一样，这些数据也是由我们注入的，而这些数据主要是为于测试目的。当我们的应用出现Bug的时候，我们可能就需要添加新的测试及其测试数据。\n - 模拟环境（Stageing)。在软件最终发布前，开发或者设计人员对软件进行调整后可以及时预览改变的测试环境，这个环境更接近于产品最终发布后的运行环境。因此，这个环境的数据一般来说就是产品环境的一些旧数据——可能是几个月前，几年前的数据。\n - 产品环境。即线上环境，都是真实的用户数据。\n\n因此从理论上来说，我们就需要4~5个不同的数据库配置。而这些不同的数据库配置并不代表着他们使用的是相同的数据库。我们可以在本地环境使用 SQLite，而在我们的产品环境使用 MySQL。不过，最好的情况是我们应该使用同一个配置。这样当出现问题的时候，我们也很容易排查、\n\n而除了数据库配置之外，我们还有一些其他配置。因此针对于不同的环境的配置最好独立地写在不同的文件里。并且这些配置最好可以以文件名来区分，如针对于开发环境，就是 ``dev.config.js``，针对于测试环境就是 ``test.config.js``。\n\n因此，为了实现不同的环境使用不同的配置，我们就需要有一个变更控制。如果我们只有相应的配置，而没有对应的运行机制那就有问题了。\n\n### 运行机制\n\n当我们的应用程序在服务器上运行得好好的时候，我们可能就不想因为修改配置而去重启机器，这时候我们就需要配置热加载。即我们修改配置后，不需要重启服务即可以使用新的配置。对应的还有一种，便是我们需要重启机器才能实现配置。\n\n无论是哪种方式都需要修改配置来实现。而在我们使用的过程中热加载可能需要消耗一些系统资源，因为我们的系统需要不断地读取配置的状态并对其进行判断。并且如果我们的应用运行在多个机器上的时候，我们可能需要一个个的上支个性。而如果我们是冷启动的话，我们就可以考虑使用自动部署的方式来完成。\n\n对应的，我们也需要在我们的代码中实现判断这些配置的逻辑。\n\n### 功能开关\n\n当我们上线了我们的新功能的时候，这时候如果有个 Bug，那么我们是下线么？要知道这个版本里面包含了很多的 Bug 修复。如果在这个设计这个新功能的时候，我们有一个可配置和 Toogle，那么我们就不需要下线了。只需要切的这个toggle，就可以解决问题了。\n\n对于有多套环境的开发来说，如果我们针对不同的环境都有不同的配置，那么这个灵活的开发会帮助我们更好的开发。\n\n#### Feature Toggle\n\n它是一种允许控制线上功能开启或者关闭的方式，通常会采取配置文件的方式来控制。其过程如下图所示：\n\n![Feature Toggle](http://growth.phodal.com/assets/article/chapter4/feature-toggle.png)\n\n当我们需要 A 功能的时候，我们就只需要把 A 功能的开关打开。当我们需要 B 功能，而不需要 A 功能的时候，我们就可以把相应的功能关掉。像在 Java 里的 Spring 框架，就可以用 PropertyPlaceHolder 来做相似的事。使用 bean 文件创建一个 properties\n\n```xml\n<util:properties id=\"myProps\" location=\"WEB-INF/config/prop.properties\"/>\n```\n\n然后向注入这个值：\n\n```\n@Value(\"#{myProps['message']}\")\n```\n\n我们就可以直接判断这个值是否是真，从而显示这个内容。\n\n```\n<spring:eval expression=\"@myProps.message\" var=\"messageToggle\"/>\n\n<c:if test=\"${messageToggle eq true}\">\n    message\n</c:if>\n```\n\n这是一种很实用，而且很有趣的技术。\n\n参考书籍：**《配置管理最佳实践》**\n","source":"_posts/4.3.1-configurable.md","raw":"title: 可配置\ndate: 2016-5-5 23:45:08\ntags:\n---\n\n让我们写的 Web 应用可配置是一项很有挑战性，也很实用的技能。\n\n起先，我们在本地开发的时候为本地创建了一套环境，也创建了本地的配置。接着我们需要将我们的包部署到测试环境，也生成了测试环境的相应配置。这其中如果有其他的环境，我们也需要创建相应的环境。最后，我们还需要为产品环境创建全新的配置。\n\n下图是 Druapl 框架的部署流:\n\n![Drupal Deployment Flow](http://growth.phodal.com/assets/article/chapter4/deployment-flow.png)\n\n在不同的环境下，他们使用不同的 Content。这些 Content 的内容不仅仅可以是一些系统相当的配置，也可以是一些不同环境下的 UI 等等。而在这其中也会涉及到一些比较复杂的知识，下面只是做一些简单的介绍。\n\n<!-- more -->\n\n### 环境配置\n\n最常见的例子就是我们需要在不同的环境有不同的配置。大原则就是我们不能直接使用产品的环境测试，因此我们就需要为不同的环境配置不同的数据库：\n\n - 开发环境。即开发者用于开发的环境，大部分的数据都是由我们自己注入的，在开发的过程中我们也会添加一些数据。\n - 集成测试环境/测试环境。和开发环境一样，这些数据也是由我们注入的，而这些数据主要是为于测试目的。当我们的应用出现Bug的时候，我们可能就需要添加新的测试及其测试数据。\n - 模拟环境（Stageing)。在软件最终发布前，开发或者设计人员对软件进行调整后可以及时预览改变的测试环境，这个环境更接近于产品最终发布后的运行环境。因此，这个环境的数据一般来说就是产品环境的一些旧数据——可能是几个月前，几年前的数据。\n - 产品环境。即线上环境，都是真实的用户数据。\n\n因此从理论上来说，我们就需要4~5个不同的数据库配置。而这些不同的数据库配置并不代表着他们使用的是相同的数据库。我们可以在本地环境使用 SQLite，而在我们的产品环境使用 MySQL。不过，最好的情况是我们应该使用同一个配置。这样当出现问题的时候，我们也很容易排查、\n\n而除了数据库配置之外，我们还有一些其他配置。因此针对于不同的环境的配置最好独立地写在不同的文件里。并且这些配置最好可以以文件名来区分，如针对于开发环境，就是 ``dev.config.js``，针对于测试环境就是 ``test.config.js``。\n\n因此，为了实现不同的环境使用不同的配置，我们就需要有一个变更控制。如果我们只有相应的配置，而没有对应的运行机制那就有问题了。\n\n### 运行机制\n\n当我们的应用程序在服务器上运行得好好的时候，我们可能就不想因为修改配置而去重启机器，这时候我们就需要配置热加载。即我们修改配置后，不需要重启服务即可以使用新的配置。对应的还有一种，便是我们需要重启机器才能实现配置。\n\n无论是哪种方式都需要修改配置来实现。而在我们使用的过程中热加载可能需要消耗一些系统资源，因为我们的系统需要不断地读取配置的状态并对其进行判断。并且如果我们的应用运行在多个机器上的时候，我们可能需要一个个的上支个性。而如果我们是冷启动的话，我们就可以考虑使用自动部署的方式来完成。\n\n对应的，我们也需要在我们的代码中实现判断这些配置的逻辑。\n\n### 功能开关\n\n当我们上线了我们的新功能的时候，这时候如果有个 Bug，那么我们是下线么？要知道这个版本里面包含了很多的 Bug 修复。如果在这个设计这个新功能的时候，我们有一个可配置和 Toogle，那么我们就不需要下线了。只需要切的这个toggle，就可以解决问题了。\n\n对于有多套环境的开发来说，如果我们针对不同的环境都有不同的配置，那么这个灵活的开发会帮助我们更好的开发。\n\n#### Feature Toggle\n\n它是一种允许控制线上功能开启或者关闭的方式，通常会采取配置文件的方式来控制。其过程如下图所示：\n\n![Feature Toggle](http://growth.phodal.com/assets/article/chapter4/feature-toggle.png)\n\n当我们需要 A 功能的时候，我们就只需要把 A 功能的开关打开。当我们需要 B 功能，而不需要 A 功能的时候，我们就可以把相应的功能关掉。像在 Java 里的 Spring 框架，就可以用 PropertyPlaceHolder 来做相似的事。使用 bean 文件创建一个 properties\n\n```xml\n<util:properties id=\"myProps\" location=\"WEB-INF/config/prop.properties\"/>\n```\n\n然后向注入这个值：\n\n```\n@Value(\"#{myProps['message']}\")\n```\n\n我们就可以直接判断这个值是否是真，从而显示这个内容。\n\n```\n<spring:eval expression=\"@myProps.message\" var=\"messageToggle\"/>\n\n<c:if test=\"${messageToggle eq true}\">\n    message\n</c:if>\n```\n\n这是一种很实用，而且很有趣的技术。\n\n参考书籍：**《配置管理最佳实践》**\n","slug":"4.3.1-configurable","published":1,"updated":"2016-05-05T02:12:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuf7mph0000ztsif0e0qywv0","content":"<p>让我们写的 Web 应用可配置是一项很有挑战性，也很实用的技能。</p>\n<p>起先，我们在本地开发的时候为本地创建了一套环境，也创建了本地的配置。接着我们需要将我们的包部署到测试环境，也生成了测试环境的相应配置。这其中如果有其他的环境，我们也需要创建相应的环境。最后，我们还需要为产品环境创建全新的配置。</p>\n<p>下图是 Druapl 框架的部署流:</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter4/deployment-flow.png\" alt=\"Drupal Deployment Flow\"></p>\n<p>在不同的环境下，他们使用不同的 Content。这些 Content 的内容不仅仅可以是一些系统相当的配置，也可以是一些不同环境下的 UI 等等。而在这其中也会涉及到一些比较复杂的知识，下面只是做一些简单的介绍。</p>\n<a id=\"more\"></a>\n<h3 id=\"环境配置\"><a href=\"#环境配置\" class=\"headerlink\" title=\"环境配置\"></a>环境配置</h3><p>最常见的例子就是我们需要在不同的环境有不同的配置。大原则就是我们不能直接使用产品的环境测试，因此我们就需要为不同的环境配置不同的数据库：</p>\n<ul>\n<li>开发环境。即开发者用于开发的环境，大部分的数据都是由我们自己注入的，在开发的过程中我们也会添加一些数据。</li>\n<li>集成测试环境/测试环境。和开发环境一样，这些数据也是由我们注入的，而这些数据主要是为于测试目的。当我们的应用出现Bug的时候，我们可能就需要添加新的测试及其测试数据。</li>\n<li>模拟环境（Stageing)。在软件最终发布前，开发或者设计人员对软件进行调整后可以及时预览改变的测试环境，这个环境更接近于产品最终发布后的运行环境。因此，这个环境的数据一般来说就是产品环境的一些旧数据——可能是几个月前，几年前的数据。</li>\n<li>产品环境。即线上环境，都是真实的用户数据。</li>\n</ul>\n<p>因此从理论上来说，我们就需要4~5个不同的数据库配置。而这些不同的数据库配置并不代表着他们使用的是相同的数据库。我们可以在本地环境使用 SQLite，而在我们的产品环境使用 MySQL。不过，最好的情况是我们应该使用同一个配置。这样当出现问题的时候，我们也很容易排查、</p>\n<p>而除了数据库配置之外，我们还有一些其他配置。因此针对于不同的环境的配置最好独立地写在不同的文件里。并且这些配置最好可以以文件名来区分，如针对于开发环境，就是 <code>dev.config.js</code>，针对于测试环境就是 <code>test.config.js</code>。</p>\n<p>因此，为了实现不同的环境使用不同的配置，我们就需要有一个变更控制。如果我们只有相应的配置，而没有对应的运行机制那就有问题了。</p>\n<h3 id=\"运行机制\"><a href=\"#运行机制\" class=\"headerlink\" title=\"运行机制\"></a>运行机制</h3><p>当我们的应用程序在服务器上运行得好好的时候，我们可能就不想因为修改配置而去重启机器，这时候我们就需要配置热加载。即我们修改配置后，不需要重启服务即可以使用新的配置。对应的还有一种，便是我们需要重启机器才能实现配置。</p>\n<p>无论是哪种方式都需要修改配置来实现。而在我们使用的过程中热加载可能需要消耗一些系统资源，因为我们的系统需要不断地读取配置的状态并对其进行判断。并且如果我们的应用运行在多个机器上的时候，我们可能需要一个个的上支个性。而如果我们是冷启动的话，我们就可以考虑使用自动部署的方式来完成。</p>\n<p>对应的，我们也需要在我们的代码中实现判断这些配置的逻辑。</p>\n<h3 id=\"功能开关\"><a href=\"#功能开关\" class=\"headerlink\" title=\"功能开关\"></a>功能开关</h3><p>当我们上线了我们的新功能的时候，这时候如果有个 Bug，那么我们是下线么？要知道这个版本里面包含了很多的 Bug 修复。如果在这个设计这个新功能的时候，我们有一个可配置和 Toogle，那么我们就不需要下线了。只需要切的这个toggle，就可以解决问题了。</p>\n<p>对于有多套环境的开发来说，如果我们针对不同的环境都有不同的配置，那么这个灵活的开发会帮助我们更好的开发。</p>\n<h4 id=\"Feature-Toggle\"><a href=\"#Feature-Toggle\" class=\"headerlink\" title=\"Feature Toggle\"></a>Feature Toggle</h4><p>它是一种允许控制线上功能开启或者关闭的方式，通常会采取配置文件的方式来控制。其过程如下图所示：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter4/feature-toggle.png\" alt=\"Feature Toggle\"></p>\n<p>当我们需要 A 功能的时候，我们就只需要把 A 功能的开关打开。当我们需要 B 功能，而不需要 A 功能的时候，我们就可以把相应的功能关掉。像在 Java 里的 Spring 框架，就可以用 PropertyPlaceHolder 来做相似的事。使用 bean 文件创建一个 properties</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">util:properties</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myProps\"</span> <span class=\"attr\">location</span>=<span class=\"string\">\"WEB-INF/config/prop.properties\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<p>然后向注入这个值：</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Value(<span class=\"string\">\"<span class=\"subst\">#&#123;myProps[<span class=\"string\">'message'</span>]&#125;</span>\"</span>)</span><br></pre></td></tr></table></figure>\n<p>我们就可以直接判断这个值是否是真，从而显示这个内容。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;spring:<span class=\"built_in\">eval</span> expression=<span class=\"string\">\"@myProps.message\"</span> var=<span class=\"string\">\"messageToggle\"</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;c:<span class=\"keyword\">if</span> <span class=\"built_in\">test</span>=<span class=\"string\">\"<span class=\"variable\">$&#123;messageToggle eq true&#125;</span>\"</span>&gt;</span><br><span class=\"line\">    message</span><br><span class=\"line\">&lt;/c:<span class=\"keyword\">if</span>&gt;</span><br></pre></td></tr></table></figure>\n<p>这是一种很实用，而且很有趣的技术。</p>\n<p>参考书籍：<strong>《配置管理最佳实践》</strong></p>\n","excerpt":"<p>让我们写的 Web 应用可配置是一项很有挑战性，也很实用的技能。</p>\n<p>起先，我们在本地开发的时候为本地创建了一套环境，也创建了本地的配置。接着我们需要将我们的包部署到测试环境，也生成了测试环境的相应配置。这其中如果有其他的环境，我们也需要创建相应的环境。最后，我们还需要为产品环境创建全新的配置。</p>\n<p>下图是 Druapl 框架的部署流:</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter4/deployment-flow.png\" alt=\"Drupal Deployment Flow\"></p>\n<p>在不同的环境下，他们使用不同的 Content。这些 Content 的内容不仅仅可以是一些系统相当的配置，也可以是一些不同环境下的 UI 等等。而在这其中也会涉及到一些比较复杂的知识，下面只是做一些简单的介绍。</p>","more":"<h3 id=\"环境配置\"><a href=\"#环境配置\" class=\"headerlink\" title=\"环境配置\"></a>环境配置</h3><p>最常见的例子就是我们需要在不同的环境有不同的配置。大原则就是我们不能直接使用产品的环境测试，因此我们就需要为不同的环境配置不同的数据库：</p>\n<ul>\n<li>开发环境。即开发者用于开发的环境，大部分的数据都是由我们自己注入的，在开发的过程中我们也会添加一些数据。</li>\n<li>集成测试环境/测试环境。和开发环境一样，这些数据也是由我们注入的，而这些数据主要是为于测试目的。当我们的应用出现Bug的时候，我们可能就需要添加新的测试及其测试数据。</li>\n<li>模拟环境（Stageing)。在软件最终发布前，开发或者设计人员对软件进行调整后可以及时预览改变的测试环境，这个环境更接近于产品最终发布后的运行环境。因此，这个环境的数据一般来说就是产品环境的一些旧数据——可能是几个月前，几年前的数据。</li>\n<li>产品环境。即线上环境，都是真实的用户数据。</li>\n</ul>\n<p>因此从理论上来说，我们就需要4~5个不同的数据库配置。而这些不同的数据库配置并不代表着他们使用的是相同的数据库。我们可以在本地环境使用 SQLite，而在我们的产品环境使用 MySQL。不过，最好的情况是我们应该使用同一个配置。这样当出现问题的时候，我们也很容易排查、</p>\n<p>而除了数据库配置之外，我们还有一些其他配置。因此针对于不同的环境的配置最好独立地写在不同的文件里。并且这些配置最好可以以文件名来区分，如针对于开发环境，就是 <code>dev.config.js</code>，针对于测试环境就是 <code>test.config.js</code>。</p>\n<p>因此，为了实现不同的环境使用不同的配置，我们就需要有一个变更控制。如果我们只有相应的配置，而没有对应的运行机制那就有问题了。</p>\n<h3 id=\"运行机制\"><a href=\"#运行机制\" class=\"headerlink\" title=\"运行机制\"></a>运行机制</h3><p>当我们的应用程序在服务器上运行得好好的时候，我们可能就不想因为修改配置而去重启机器，这时候我们就需要配置热加载。即我们修改配置后，不需要重启服务即可以使用新的配置。对应的还有一种，便是我们需要重启机器才能实现配置。</p>\n<p>无论是哪种方式都需要修改配置来实现。而在我们使用的过程中热加载可能需要消耗一些系统资源，因为我们的系统需要不断地读取配置的状态并对其进行判断。并且如果我们的应用运行在多个机器上的时候，我们可能需要一个个的上支个性。而如果我们是冷启动的话，我们就可以考虑使用自动部署的方式来完成。</p>\n<p>对应的，我们也需要在我们的代码中实现判断这些配置的逻辑。</p>\n<h3 id=\"功能开关\"><a href=\"#功能开关\" class=\"headerlink\" title=\"功能开关\"></a>功能开关</h3><p>当我们上线了我们的新功能的时候，这时候如果有个 Bug，那么我们是下线么？要知道这个版本里面包含了很多的 Bug 修复。如果在这个设计这个新功能的时候，我们有一个可配置和 Toogle，那么我们就不需要下线了。只需要切的这个toggle，就可以解决问题了。</p>\n<p>对于有多套环境的开发来说，如果我们针对不同的环境都有不同的配置，那么这个灵活的开发会帮助我们更好的开发。</p>\n<h4 id=\"Feature-Toggle\"><a href=\"#Feature-Toggle\" class=\"headerlink\" title=\"Feature Toggle\"></a>Feature Toggle</h4><p>它是一种允许控制线上功能开启或者关闭的方式，通常会采取配置文件的方式来控制。其过程如下图所示：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter4/feature-toggle.png\" alt=\"Feature Toggle\"></p>\n<p>当我们需要 A 功能的时候，我们就只需要把 A 功能的开关打开。当我们需要 B 功能，而不需要 A 功能的时候，我们就可以把相应的功能关掉。像在 Java 里的 Spring 框架，就可以用 PropertyPlaceHolder 来做相似的事。使用 bean 文件创建一个 properties</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">util:properties</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myProps\"</span> <span class=\"attr\">location</span>=<span class=\"string\">\"WEB-INF/config/prop.properties\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<p>然后向注入这个值：</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Value(<span class=\"string\">\"<span class=\"subst\">#&#123;myProps[<span class=\"string\">'message'</span>]&#125;</span>\"</span>)</span><br></pre></td></tr></table></figure>\n<p>我们就可以直接判断这个值是否是真，从而显示这个内容。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;spring:<span class=\"built_in\">eval</span> expression=<span class=\"string\">\"@myProps.message\"</span> var=<span class=\"string\">\"messageToggle\"</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;c:<span class=\"keyword\">if</span> <span class=\"built_in\">test</span>=<span class=\"string\">\"<span class=\"variable\">$&#123;messageToggle eq true&#125;</span>\"</span>&gt;</span><br><span class=\"line\">    message</span><br><span class=\"line\">&lt;/c:<span class=\"keyword\">if</span>&gt;</span><br></pre></td></tr></table></figure>\n<p>这是一种很实用，而且很有趣的技术。</p>\n<p>参考书籍：<strong>《配置管理最佳实践》</strong></p>"},{"title":"数据分析","date":"2016-05-06T14:45:08.000Z","_content":"\n有时候，对于我们的决定只要有一点点的数据支持就够了。也就是一点点的变化，可能就决定了我们产品的好坏。我们可能会因此而作出一些些改变，这些改变可能会让我们打败巨头。\n\n这一点和 Growth 的构建过程也很相像，在最开始的时候我只是想制定一个成长路线。而后，我发现这好像是一个不错的 idea，我就开始去构建这个 idea。于是它变成了 Growth，这时候我需要依靠什么去分析用户喜欢的功能呢？我没有那么多的精力去和那么多的人沟通，也不能去和那么多的人沟通。\n\n我只能借助 Google Analytics 来收集用户的数据。从这些数据里去学习一些东西，而这些就会变成一个新的想法。新的想法在适当的时候就会变成一个产品，接着我们就开始收集用户数据，然后循环。\n","source":"_posts/5.0.0-data-analytics.md","raw":"title: 数据分析\ndate: 2016-5-6 22:45:08\ntags:\n---\n\n有时候，对于我们的决定只要有一点点的数据支持就够了。也就是一点点的变化，可能就决定了我们产品的好坏。我们可能会因此而作出一些些改变，这些改变可能会让我们打败巨头。\n\n这一点和 Growth 的构建过程也很相像，在最开始的时候我只是想制定一个成长路线。而后，我发现这好像是一个不错的 idea，我就开始去构建这个 idea。于是它变成了 Growth，这时候我需要依靠什么去分析用户喜欢的功能呢？我没有那么多的精力去和那么多的人沟通，也不能去和那么多的人沟通。\n\n我只能借助 Google Analytics 来收集用户的数据。从这些数据里去学习一些东西，而这些就会变成一个新的想法。新的想法在适当的时候就会变成一个产品，接着我们就开始收集用户数据，然后循环。\n","slug":"5.0.0-data-analytics","published":1,"updated":"2016-05-06T01:29:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuf7mph20010tsif9u9dozq6","content":"<p>有时候，对于我们的决定只要有一点点的数据支持就够了。也就是一点点的变化，可能就决定了我们产品的好坏。我们可能会因此而作出一些些改变，这些改变可能会让我们打败巨头。</p>\n<p>这一点和 Growth 的构建过程也很相像，在最开始的时候我只是想制定一个成长路线。而后，我发现这好像是一个不错的 idea，我就开始去构建这个 idea。于是它变成了 Growth，这时候我需要依靠什么去分析用户喜欢的功能呢？我没有那么多的精力去和那么多的人沟通，也不能去和那么多的人沟通。</p>\n<p>我只能借助 Google Analytics 来收集用户的数据。从这些数据里去学习一些东西，而这些就会变成一个新的想法。新的想法在适当的时候就会变成一个产品，接着我们就开始收集用户数据，然后循环。</p>\n","excerpt":"","more":"<p>有时候，对于我们的决定只要有一点点的数据支持就够了。也就是一点点的变化，可能就决定了我们产品的好坏。我们可能会因此而作出一些些改变，这些改变可能会让我们打败巨头。</p>\n<p>这一点和 Growth 的构建过程也很相像，在最开始的时候我只是想制定一个成长路线。而后，我发现这好像是一个不错的 idea，我就开始去构建这个 idea。于是它变成了 Growth，这时候我需要依靠什么去分析用户喜欢的功能呢？我没有那么多的精力去和那么多的人沟通，也不能去和那么多的人沟通。</p>\n<p>我只能借助 Google Analytics 来收集用户的数据。从这些数据里去学习一些东西，而这些就会变成一个新的想法。新的想法在适当的时候就会变成一个产品，接着我们就开始收集用户数据，然后循环。</p>\n"},{"title":"自动化部署","date":"2016-05-06T13:45:08.000Z","_content":"\n优化我们开发流程有一个很重要的步骤就是：让部署自动化。通过部署自动化，我们可以大大缩减我们的开发周期，加快软件交付流程。下图是一个自动化部署的流程图：\n\n![自动化部署](http://growth.phodal.com/assets/article/chapter4/auto-deployment.png)\n\n从下图中我们可以得到下面的五个步骤：\n\n - 获取源码\n - 获取依赖\n - 构建软件包\n - 生成/上传安装包\n - 目标平台安装/配置\n\n这个过程可能和之前的 Web 项目构建过程差不多，然而却多了好几步。\n\n<!-- more -->\n\n在前面的章节里，我们已经使用了版本管理系统来管理我们的源码。因此，在这里对于获取源码的介绍就比较简单了——我们只需要在我们的 CI（持续集成）服务器上使用 ``git clone`` 这一类的方法来获取我们的源码即可。\n\n### 依赖与包仓库\n\n获取完源码后，我们就需要开始下载软件包依赖。无论是 Python、Ruby、Java，还是 JavaScript 都需要这样的一个过程。软件开发已经从大教堂式的开发走向了集市——开源软件改变了这一切。\n\n![大教堂与集市](http://growth.phodal.com/assets/article/chapter4/hierarchy-vs-graph.png)\n\n过去我们需要大系统的内部构建我们使用的依赖，现在我们更多地借助于外部的库来实现这些功能。这也意味着，如果在这一个节点里出现了意外——软件被删除，那么这个系统将陷入瘫痪的状态。如之前在 NPM 圈发生了“一个 17 行的模块引发的血案”——即 left-pad 工具模块被作者从 NPM 上撤下，所有直接或者间接依赖这个模块的 NPM 的软件包都挂掉了。因为我们依赖于公有的包服务，所以系统便严重依赖于外部条件。\n\n这时候一种简单、有效的方案就是搭建自己的包服务。如使用 Java 技术栈的项目，就会使用 Nexus 搭建自己的 Maven 私有服务。我们的软件依赖包将会依赖于我们自己的服务，此时会产生的主要问题可能就是：我们的软件包不是最新的。但是对于追求稳定的项目来说，这个并不是必须的需求，反而这也是一个优势。\n\n### 构建软件包\n\n在一些编译型语言里，在我们运行包测试后，我们将会得到一个软件包。如 Jar 包，它是 Java 中所特有一种压缩文档。Jar 包无法直接安装使用，虽然我们可以直接运行这个 Jar 包，但是我们需要通过一些手段将这个 Jar 包拷贝到我们的服务器上，然后运行。在特定的时候，我们还需要修改配置才能完成我们的工作。\n\n因此，使用 RPM 或者 DEB 包会是一种更好的选择。RPM 全称是 Red Hat Package Manager（Red Hat包管理器），它工作于 Red Hat Linux 以及其它 Linux 和 UNIX 系统，可被任何人使用。如下图是 RPM 包的构建过程：\n\n![RPM Build Process](http://growth.phodal.com/assets/article/chapter4/rpm-deploy.jpg)\n\n要构建一个标准的 RPM 包，我们需要创建 .spec文件，这个文件包含软件打包的全部信息——如包的 Summary、Name、Version、Copyright、Vendor 等等。在产生完这一个配置文件后，执行 rpmbuild 命令，系统会按照步骤生成目标 RPM 包。\n\n### 上传和安装软件包\n\n生成对应的软件包后，我们就可以将其上传到 Koji 上，它是 Fedora 社区的编译系统。如下图所示：\n\n![RPM Build Process](http://growth.phodal.com/assets/article/chapter4/rpm-koji.jpg)\n\n如果我们已经对我们的所有目标操作系统配置过，即配置好了软件源，那么我们就可以直接在我们的服务器上使用包管理工具安装，如``yum install``。\n","source":"_posts/4.4.0-auto-deploy.md","raw":"title: 自动化部署\ndate: 2016-5-6 21:45:08\ntags:\n---\n\n优化我们开发流程有一个很重要的步骤就是：让部署自动化。通过部署自动化，我们可以大大缩减我们的开发周期，加快软件交付流程。下图是一个自动化部署的流程图：\n\n![自动化部署](http://growth.phodal.com/assets/article/chapter4/auto-deployment.png)\n\n从下图中我们可以得到下面的五个步骤：\n\n - 获取源码\n - 获取依赖\n - 构建软件包\n - 生成/上传安装包\n - 目标平台安装/配置\n\n这个过程可能和之前的 Web 项目构建过程差不多，然而却多了好几步。\n\n<!-- more -->\n\n在前面的章节里，我们已经使用了版本管理系统来管理我们的源码。因此，在这里对于获取源码的介绍就比较简单了——我们只需要在我们的 CI（持续集成）服务器上使用 ``git clone`` 这一类的方法来获取我们的源码即可。\n\n### 依赖与包仓库\n\n获取完源码后，我们就需要开始下载软件包依赖。无论是 Python、Ruby、Java，还是 JavaScript 都需要这样的一个过程。软件开发已经从大教堂式的开发走向了集市——开源软件改变了这一切。\n\n![大教堂与集市](http://growth.phodal.com/assets/article/chapter4/hierarchy-vs-graph.png)\n\n过去我们需要大系统的内部构建我们使用的依赖，现在我们更多地借助于外部的库来实现这些功能。这也意味着，如果在这一个节点里出现了意外——软件被删除，那么这个系统将陷入瘫痪的状态。如之前在 NPM 圈发生了“一个 17 行的模块引发的血案”——即 left-pad 工具模块被作者从 NPM 上撤下，所有直接或者间接依赖这个模块的 NPM 的软件包都挂掉了。因为我们依赖于公有的包服务，所以系统便严重依赖于外部条件。\n\n这时候一种简单、有效的方案就是搭建自己的包服务。如使用 Java 技术栈的项目，就会使用 Nexus 搭建自己的 Maven 私有服务。我们的软件依赖包将会依赖于我们自己的服务，此时会产生的主要问题可能就是：我们的软件包不是最新的。但是对于追求稳定的项目来说，这个并不是必须的需求，反而这也是一个优势。\n\n### 构建软件包\n\n在一些编译型语言里，在我们运行包测试后，我们将会得到一个软件包。如 Jar 包，它是 Java 中所特有一种压缩文档。Jar 包无法直接安装使用，虽然我们可以直接运行这个 Jar 包，但是我们需要通过一些手段将这个 Jar 包拷贝到我们的服务器上，然后运行。在特定的时候，我们还需要修改配置才能完成我们的工作。\n\n因此，使用 RPM 或者 DEB 包会是一种更好的选择。RPM 全称是 Red Hat Package Manager（Red Hat包管理器），它工作于 Red Hat Linux 以及其它 Linux 和 UNIX 系统，可被任何人使用。如下图是 RPM 包的构建过程：\n\n![RPM Build Process](http://growth.phodal.com/assets/article/chapter4/rpm-deploy.jpg)\n\n要构建一个标准的 RPM 包，我们需要创建 .spec文件，这个文件包含软件打包的全部信息——如包的 Summary、Name、Version、Copyright、Vendor 等等。在产生完这一个配置文件后，执行 rpmbuild 命令，系统会按照步骤生成目标 RPM 包。\n\n### 上传和安装软件包\n\n生成对应的软件包后，我们就可以将其上传到 Koji 上，它是 Fedora 社区的编译系统。如下图所示：\n\n![RPM Build Process](http://growth.phodal.com/assets/article/chapter4/rpm-koji.jpg)\n\n如果我们已经对我们的所有目标操作系统配置过，即配置好了软件源，那么我们就可以直接在我们的服务器上使用包管理工具安装，如``yum install``。\n","slug":"4.4.0-auto-deploy","published":1,"updated":"2016-05-06T01:27:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuf7mph30011tsif0y4u1hcd","content":"<p>优化我们开发流程有一个很重要的步骤就是：让部署自动化。通过部署自动化，我们可以大大缩减我们的开发周期，加快软件交付流程。下图是一个自动化部署的流程图：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter4/auto-deployment.png\" alt=\"自动化部署\"></p>\n<p>从下图中我们可以得到下面的五个步骤：</p>\n<ul>\n<li>获取源码</li>\n<li>获取依赖</li>\n<li>构建软件包</li>\n<li>生成/上传安装包</li>\n<li>目标平台安装/配置</li>\n</ul>\n<p>这个过程可能和之前的 Web 项目构建过程差不多，然而却多了好几步。</p>\n<a id=\"more\"></a>\n<p>在前面的章节里，我们已经使用了版本管理系统来管理我们的源码。因此，在这里对于获取源码的介绍就比较简单了——我们只需要在我们的 CI（持续集成）服务器上使用 <code>git clone</code> 这一类的方法来获取我们的源码即可。</p>\n<h3 id=\"依赖与包仓库\"><a href=\"#依赖与包仓库\" class=\"headerlink\" title=\"依赖与包仓库\"></a>依赖与包仓库</h3><p>获取完源码后，我们就需要开始下载软件包依赖。无论是 Python、Ruby、Java，还是 JavaScript 都需要这样的一个过程。软件开发已经从大教堂式的开发走向了集市——开源软件改变了这一切。</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter4/hierarchy-vs-graph.png\" alt=\"大教堂与集市\"></p>\n<p>过去我们需要大系统的内部构建我们使用的依赖，现在我们更多地借助于外部的库来实现这些功能。这也意味着，如果在这一个节点里出现了意外——软件被删除，那么这个系统将陷入瘫痪的状态。如之前在 NPM 圈发生了“一个 17 行的模块引发的血案”——即 left-pad 工具模块被作者从 NPM 上撤下，所有直接或者间接依赖这个模块的 NPM 的软件包都挂掉了。因为我们依赖于公有的包服务，所以系统便严重依赖于外部条件。</p>\n<p>这时候一种简单、有效的方案就是搭建自己的包服务。如使用 Java 技术栈的项目，就会使用 Nexus 搭建自己的 Maven 私有服务。我们的软件依赖包将会依赖于我们自己的服务，此时会产生的主要问题可能就是：我们的软件包不是最新的。但是对于追求稳定的项目来说，这个并不是必须的需求，反而这也是一个优势。</p>\n<h3 id=\"构建软件包\"><a href=\"#构建软件包\" class=\"headerlink\" title=\"构建软件包\"></a>构建软件包</h3><p>在一些编译型语言里，在我们运行包测试后，我们将会得到一个软件包。如 Jar 包，它是 Java 中所特有一种压缩文档。Jar 包无法直接安装使用，虽然我们可以直接运行这个 Jar 包，但是我们需要通过一些手段将这个 Jar 包拷贝到我们的服务器上，然后运行。在特定的时候，我们还需要修改配置才能完成我们的工作。</p>\n<p>因此，使用 RPM 或者 DEB 包会是一种更好的选择。RPM 全称是 Red Hat Package Manager（Red Hat包管理器），它工作于 Red Hat Linux 以及其它 Linux 和 UNIX 系统，可被任何人使用。如下图是 RPM 包的构建过程：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter4/rpm-deploy.jpg\" alt=\"RPM Build Process\"></p>\n<p>要构建一个标准的 RPM 包，我们需要创建 .spec文件，这个文件包含软件打包的全部信息——如包的 Summary、Name、Version、Copyright、Vendor 等等。在产生完这一个配置文件后，执行 rpmbuild 命令，系统会按照步骤生成目标 RPM 包。</p>\n<h3 id=\"上传和安装软件包\"><a href=\"#上传和安装软件包\" class=\"headerlink\" title=\"上传和安装软件包\"></a>上传和安装软件包</h3><p>生成对应的软件包后，我们就可以将其上传到 Koji 上，它是 Fedora 社区的编译系统。如下图所示：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter4/rpm-koji.jpg\" alt=\"RPM Build Process\"></p>\n<p>如果我们已经对我们的所有目标操作系统配置过，即配置好了软件源，那么我们就可以直接在我们的服务器上使用包管理工具安装，如<code>yum install</code>。</p>\n","excerpt":"<p>优化我们开发流程有一个很重要的步骤就是：让部署自动化。通过部署自动化，我们可以大大缩减我们的开发周期，加快软件交付流程。下图是一个自动化部署的流程图：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter4/auto-deployment.png\" alt=\"自动化部署\"></p>\n<p>从下图中我们可以得到下面的五个步骤：</p>\n<ul>\n<li>获取源码</li>\n<li>获取依赖</li>\n<li>构建软件包</li>\n<li>生成/上传安装包</li>\n<li>目标平台安装/配置</li>\n</ul>\n<p>这个过程可能和之前的 Web 项目构建过程差不多，然而却多了好几步。</p>","more":"<p>在前面的章节里，我们已经使用了版本管理系统来管理我们的源码。因此，在这里对于获取源码的介绍就比较简单了——我们只需要在我们的 CI（持续集成）服务器上使用 <code>git clone</code> 这一类的方法来获取我们的源码即可。</p>\n<h3 id=\"依赖与包仓库\"><a href=\"#依赖与包仓库\" class=\"headerlink\" title=\"依赖与包仓库\"></a>依赖与包仓库</h3><p>获取完源码后，我们就需要开始下载软件包依赖。无论是 Python、Ruby、Java，还是 JavaScript 都需要这样的一个过程。软件开发已经从大教堂式的开发走向了集市——开源软件改变了这一切。</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter4/hierarchy-vs-graph.png\" alt=\"大教堂与集市\"></p>\n<p>过去我们需要大系统的内部构建我们使用的依赖，现在我们更多地借助于外部的库来实现这些功能。这也意味着，如果在这一个节点里出现了意外——软件被删除，那么这个系统将陷入瘫痪的状态。如之前在 NPM 圈发生了“一个 17 行的模块引发的血案”——即 left-pad 工具模块被作者从 NPM 上撤下，所有直接或者间接依赖这个模块的 NPM 的软件包都挂掉了。因为我们依赖于公有的包服务，所以系统便严重依赖于外部条件。</p>\n<p>这时候一种简单、有效的方案就是搭建自己的包服务。如使用 Java 技术栈的项目，就会使用 Nexus 搭建自己的 Maven 私有服务。我们的软件依赖包将会依赖于我们自己的服务，此时会产生的主要问题可能就是：我们的软件包不是最新的。但是对于追求稳定的项目来说，这个并不是必须的需求，反而这也是一个优势。</p>\n<h3 id=\"构建软件包\"><a href=\"#构建软件包\" class=\"headerlink\" title=\"构建软件包\"></a>构建软件包</h3><p>在一些编译型语言里，在我们运行包测试后，我们将会得到一个软件包。如 Jar 包，它是 Java 中所特有一种压缩文档。Jar 包无法直接安装使用，虽然我们可以直接运行这个 Jar 包，但是我们需要通过一些手段将这个 Jar 包拷贝到我们的服务器上，然后运行。在特定的时候，我们还需要修改配置才能完成我们的工作。</p>\n<p>因此，使用 RPM 或者 DEB 包会是一种更好的选择。RPM 全称是 Red Hat Package Manager（Red Hat包管理器），它工作于 Red Hat Linux 以及其它 Linux 和 UNIX 系统，可被任何人使用。如下图是 RPM 包的构建过程：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter4/rpm-deploy.jpg\" alt=\"RPM Build Process\"></p>\n<p>要构建一个标准的 RPM 包，我们需要创建 .spec文件，这个文件包含软件打包的全部信息——如包的 Summary、Name、Version、Copyright、Vendor 等等。在产生完这一个配置文件后，执行 rpmbuild 命令，系统会按照步骤生成目标 RPM 包。</p>\n<h3 id=\"上传和安装软件包\"><a href=\"#上传和安装软件包\" class=\"headerlink\" title=\"上传和安装软件包\"></a>上传和安装软件包</h3><p>生成对应的软件包后，我们就可以将其上传到 Koji 上，它是 Fedora 社区的编译系统。如下图所示：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter4/rpm-koji.jpg\" alt=\"RPM Build Process\"></p>\n<p>如果我们已经对我们的所有目标操作系统配置过，即配置好了软件源，那么我们就可以直接在我们的服务器上使用包管理工具安装，如<code>yum install</code>。</p>"},{"title":"构建-衡量-学习","date":"2016-05-06T15:45:08.000Z","_content":"\n构建-衡量-学习是在《精益创业》中的一个核心概念，这结合了客户开发、敏捷软件开发方法和精益生产实践。他们是非常重要的一个循环：\n\n![数据分析过程](http://growth.phodal.com/assets/article/chapter5/lean-analytics.png)\n\n这一过程不仅仅可以改进我们的产品，也可以用于初创企业。它并不是独立的一个环节，实现上它应该是一整个环节：我们根据我们的想法去创建我们的产品，在使用产品的过程中我们收集一些数据，再依据这些数据来改进我们的产品。\n\n### 想法-构建\n\n想法实际上便是解决一个痛点的解决方案。如果你和我一样也经常记录自己的想法，你会发现每个月里，你总会跳出一个又一个的想法。正如，我在那篇《[如何去管理你的 Idea](https://www.phodal.com/blog/use-github-manage-idea/)》中说的一样：\n\n> 我们经常说的是我们缺少一个 Idea。过去我也一直觉得我缺少一些 Idea，今天发现并非如此，我们只是缺少记录的手段。\n\n<!-- more -->\n\n我们并不缺少 Idea，我们只是一直没有去记录。随着时间的增长，我发现我的 GitHub 上的 Idea 墙([ideas](https://github.com/phodal/ideas/issues))一直在不断地增加。以至于，我有一个新的 Idea 就是整理这个 Idea 墙。\n\n而作为一个程序员，我们本身就可以具备构建一个系统的能力，只是对于大多数人来说需要多加的练习。有意思的一点是，这里的构建系统与一般的构建系统有一点不太一样的是，我们需要快速地构建出一个 MVP 产品。MVP 简单地来说，就是最小可用的产品。如下图的右边所示：\n\n![MVP](http://growth.phodal.com/assets/article/chapter5/mvp.png)\n\n在每一层级上都实现一定的功能，使得这个系统可用，而非构建一个非常完整的系统。随后，我们就可以寻找一些种子用户来改进我们的产品。\n\n### 产品-衡量\n\n按照上面的步骤，到了这里应该就是客户开发。而如《精益客开发》一书所说，客户开发可以分成五个步骤：\n\n - 形成假设。即我们觉得用\n - 找到可以交谈的潜在客户\n - 提出恰当的问题\n - 从答案中找到有用的信息\n - 弄明白现阶段需要构建什么样的产品来保持下一个学习循环\n\n在整个过程中，我们其实就是在了解我们的客户是谁，以及他们的需求。并且在这个过程中，我们可以为我们的开发确认出清晰的假设，我们可以一点点地打造出用户喜爱的产品。\n\n### 数据-学习\n\n当我们收集到一定的用户数据，如网站、应用的数据，我们就开始去分析数据。如《精益创业》所说，在分析数据之前，我们需要确定我们的增长模型，即：\n\n - 黏着式增长引擎——其重点是让用户成为回头客，即让客户持续使用我们的产品。这就意味着，我们在分析数据和学习的过程中，我们要侧重于关注流失率和使用频率。\n - 病毒式增长引擎——其只做一件事：让名声传播出去。即通过用户间的不断传播来扩散产品，我们需要考虑所谓的**病毒式传播系数**，还有用户之间的特定行为。\n - 付费式增长引擎——赚钱是识别商业模式是否可持续的指标。\n\n 针对不同的增长引擎有不同的学习过程，如媒体网站，我们通过不同的方式来导入流量，这些流量最终会有一些会转化成价值。这些价值会以不同的形式出现，如订阅率、在线参与度、广告营收等等。\n\n 而从这些数据中学习就需要一些特殊的技巧，详情请见下面的参考书籍。\n\n 参考书籍：\n\n  - 《精益数据分析》\n  - 《精益客户开发》\n  - 《精益创业》\n","source":"_posts/5.1.0-lean.md","raw":"title: 构建-衡量-学习\ndate: 2016-5-6 23:45:08\ntags:\n---\n\n构建-衡量-学习是在《精益创业》中的一个核心概念，这结合了客户开发、敏捷软件开发方法和精益生产实践。他们是非常重要的一个循环：\n\n![数据分析过程](http://growth.phodal.com/assets/article/chapter5/lean-analytics.png)\n\n这一过程不仅仅可以改进我们的产品，也可以用于初创企业。它并不是独立的一个环节，实现上它应该是一整个环节：我们根据我们的想法去创建我们的产品，在使用产品的过程中我们收集一些数据，再依据这些数据来改进我们的产品。\n\n### 想法-构建\n\n想法实际上便是解决一个痛点的解决方案。如果你和我一样也经常记录自己的想法，你会发现每个月里，你总会跳出一个又一个的想法。正如，我在那篇《[如何去管理你的 Idea](https://www.phodal.com/blog/use-github-manage-idea/)》中说的一样：\n\n> 我们经常说的是我们缺少一个 Idea。过去我也一直觉得我缺少一些 Idea，今天发现并非如此，我们只是缺少记录的手段。\n\n<!-- more -->\n\n我们并不缺少 Idea，我们只是一直没有去记录。随着时间的增长，我发现我的 GitHub 上的 Idea 墙([ideas](https://github.com/phodal/ideas/issues))一直在不断地增加。以至于，我有一个新的 Idea 就是整理这个 Idea 墙。\n\n而作为一个程序员，我们本身就可以具备构建一个系统的能力，只是对于大多数人来说需要多加的练习。有意思的一点是，这里的构建系统与一般的构建系统有一点不太一样的是，我们需要快速地构建出一个 MVP 产品。MVP 简单地来说，就是最小可用的产品。如下图的右边所示：\n\n![MVP](http://growth.phodal.com/assets/article/chapter5/mvp.png)\n\n在每一层级上都实现一定的功能，使得这个系统可用，而非构建一个非常完整的系统。随后，我们就可以寻找一些种子用户来改进我们的产品。\n\n### 产品-衡量\n\n按照上面的步骤，到了这里应该就是客户开发。而如《精益客开发》一书所说，客户开发可以分成五个步骤：\n\n - 形成假设。即我们觉得用\n - 找到可以交谈的潜在客户\n - 提出恰当的问题\n - 从答案中找到有用的信息\n - 弄明白现阶段需要构建什么样的产品来保持下一个学习循环\n\n在整个过程中，我们其实就是在了解我们的客户是谁，以及他们的需求。并且在这个过程中，我们可以为我们的开发确认出清晰的假设，我们可以一点点地打造出用户喜爱的产品。\n\n### 数据-学习\n\n当我们收集到一定的用户数据，如网站、应用的数据，我们就开始去分析数据。如《精益创业》所说，在分析数据之前，我们需要确定我们的增长模型，即：\n\n - 黏着式增长引擎——其重点是让用户成为回头客，即让客户持续使用我们的产品。这就意味着，我们在分析数据和学习的过程中，我们要侧重于关注流失率和使用频率。\n - 病毒式增长引擎——其只做一件事：让名声传播出去。即通过用户间的不断传播来扩散产品，我们需要考虑所谓的**病毒式传播系数**，还有用户之间的特定行为。\n - 付费式增长引擎——赚钱是识别商业模式是否可持续的指标。\n\n 针对不同的增长引擎有不同的学习过程，如媒体网站，我们通过不同的方式来导入流量，这些流量最终会有一些会转化成价值。这些价值会以不同的形式出现，如订阅率、在线参与度、广告营收等等。\n\n 而从这些数据中学习就需要一些特殊的技巧，详情请见下面的参考书籍。\n\n 参考书籍：\n\n  - 《精益数据分析》\n  - 《精益客户开发》\n  - 《精益创业》\n","slug":"5.1.0-lean","published":1,"updated":"2016-05-06T01:32:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuf7mph50012tsifztj91qpo","content":"<p>构建-衡量-学习是在《精益创业》中的一个核心概念，这结合了客户开发、敏捷软件开发方法和精益生产实践。他们是非常重要的一个循环：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter5/lean-analytics.png\" alt=\"数据分析过程\"></p>\n<p>这一过程不仅仅可以改进我们的产品，也可以用于初创企业。它并不是独立的一个环节，实现上它应该是一整个环节：我们根据我们的想法去创建我们的产品，在使用产品的过程中我们收集一些数据，再依据这些数据来改进我们的产品。</p>\n<h3 id=\"想法-构建\"><a href=\"#想法-构建\" class=\"headerlink\" title=\"想法-构建\"></a>想法-构建</h3><p>想法实际上便是解决一个痛点的解决方案。如果你和我一样也经常记录自己的想法，你会发现每个月里，你总会跳出一个又一个的想法。正如，我在那篇《<a href=\"https://www.phodal.com/blog/use-github-manage-idea/\" target=\"_blank\" rel=\"external\">如何去管理你的 Idea</a>》中说的一样：</p>\n<blockquote>\n<p>我们经常说的是我们缺少一个 Idea。过去我也一直觉得我缺少一些 Idea，今天发现并非如此，我们只是缺少记录的手段。</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>我们并不缺少 Idea，我们只是一直没有去记录。随着时间的增长，我发现我的 GitHub 上的 Idea 墙(<a href=\"https://github.com/phodal/ideas/issues\" target=\"_blank\" rel=\"external\">ideas</a>)一直在不断地增加。以至于，我有一个新的 Idea 就是整理这个 Idea 墙。</p>\n<p>而作为一个程序员，我们本身就可以具备构建一个系统的能力，只是对于大多数人来说需要多加的练习。有意思的一点是，这里的构建系统与一般的构建系统有一点不太一样的是，我们需要快速地构建出一个 MVP 产品。MVP 简单地来说，就是最小可用的产品。如下图的右边所示：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter5/mvp.png\" alt=\"MVP\"></p>\n<p>在每一层级上都实现一定的功能，使得这个系统可用，而非构建一个非常完整的系统。随后，我们就可以寻找一些种子用户来改进我们的产品。</p>\n<h3 id=\"产品-衡量\"><a href=\"#产品-衡量\" class=\"headerlink\" title=\"产品-衡量\"></a>产品-衡量</h3><p>按照上面的步骤，到了这里应该就是客户开发。而如《精益客开发》一书所说，客户开发可以分成五个步骤：</p>\n<ul>\n<li>形成假设。即我们觉得用</li>\n<li>找到可以交谈的潜在客户</li>\n<li>提出恰当的问题</li>\n<li>从答案中找到有用的信息</li>\n<li>弄明白现阶段需要构建什么样的产品来保持下一个学习循环</li>\n</ul>\n<p>在整个过程中，我们其实就是在了解我们的客户是谁，以及他们的需求。并且在这个过程中，我们可以为我们的开发确认出清晰的假设，我们可以一点点地打造出用户喜爱的产品。</p>\n<h3 id=\"数据-学习\"><a href=\"#数据-学习\" class=\"headerlink\" title=\"数据-学习\"></a>数据-学习</h3><p>当我们收集到一定的用户数据，如网站、应用的数据，我们就开始去分析数据。如《精益创业》所说，在分析数据之前，我们需要确定我们的增长模型，即：</p>\n<ul>\n<li>黏着式增长引擎——其重点是让用户成为回头客，即让客户持续使用我们的产品。这就意味着，我们在分析数据和学习的过程中，我们要侧重于关注流失率和使用频率。</li>\n<li>病毒式增长引擎——其只做一件事：让名声传播出去。即通过用户间的不断传播来扩散产品，我们需要考虑所谓的<strong>病毒式传播系数</strong>，还有用户之间的特定行为。</li>\n<li><p>付费式增长引擎——赚钱是识别商业模式是否可持续的指标。</p>\n<p>针对不同的增长引擎有不同的学习过程，如媒体网站，我们通过不同的方式来导入流量，这些流量最终会有一些会转化成价值。这些价值会以不同的形式出现，如订阅率、在线参与度、广告营收等等。</p>\n<p>而从这些数据中学习就需要一些特殊的技巧，详情请见下面的参考书籍。</p>\n<p>参考书籍：</p>\n<ul>\n<li>《精益数据分析》</li>\n<li>《精益客户开发》</li>\n<li>《精益创业》</li>\n</ul>\n</li>\n</ul>\n","excerpt":"<p>构建-衡量-学习是在《精益创业》中的一个核心概念，这结合了客户开发、敏捷软件开发方法和精益生产实践。他们是非常重要的一个循环：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter5/lean-analytics.png\" alt=\"数据分析过程\"></p>\n<p>这一过程不仅仅可以改进我们的产品，也可以用于初创企业。它并不是独立的一个环节，实现上它应该是一整个环节：我们根据我们的想法去创建我们的产品，在使用产品的过程中我们收集一些数据，再依据这些数据来改进我们的产品。</p>\n<h3 id=\"想法-构建\"><a href=\"#想法-构建\" class=\"headerlink\" title=\"想法-构建\"></a>想法-构建</h3><p>想法实际上便是解决一个痛点的解决方案。如果你和我一样也经常记录自己的想法，你会发现每个月里，你总会跳出一个又一个的想法。正如，我在那篇《<a href=\"https://www.phodal.com/blog/use-github-manage-idea/\">如何去管理你的 Idea</a>》中说的一样：</p>\n<blockquote>\n<p>我们经常说的是我们缺少一个 Idea。过去我也一直觉得我缺少一些 Idea，今天发现并非如此，我们只是缺少记录的手段。</p>\n</blockquote>","more":"<p>我们并不缺少 Idea，我们只是一直没有去记录。随着时间的增长，我发现我的 GitHub 上的 Idea 墙(<a href=\"https://github.com/phodal/ideas/issues\">ideas</a>)一直在不断地增加。以至于，我有一个新的 Idea 就是整理这个 Idea 墙。</p>\n<p>而作为一个程序员，我们本身就可以具备构建一个系统的能力，只是对于大多数人来说需要多加的练习。有意思的一点是，这里的构建系统与一般的构建系统有一点不太一样的是，我们需要快速地构建出一个 MVP 产品。MVP 简单地来说，就是最小可用的产品。如下图的右边所示：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter5/mvp.png\" alt=\"MVP\"></p>\n<p>在每一层级上都实现一定的功能，使得这个系统可用，而非构建一个非常完整的系统。随后，我们就可以寻找一些种子用户来改进我们的产品。</p>\n<h3 id=\"产品-衡量\"><a href=\"#产品-衡量\" class=\"headerlink\" title=\"产品-衡量\"></a>产品-衡量</h3><p>按照上面的步骤，到了这里应该就是客户开发。而如《精益客开发》一书所说，客户开发可以分成五个步骤：</p>\n<ul>\n<li>形成假设。即我们觉得用</li>\n<li>找到可以交谈的潜在客户</li>\n<li>提出恰当的问题</li>\n<li>从答案中找到有用的信息</li>\n<li>弄明白现阶段需要构建什么样的产品来保持下一个学习循环</li>\n</ul>\n<p>在整个过程中，我们其实就是在了解我们的客户是谁，以及他们的需求。并且在这个过程中，我们可以为我们的开发确认出清晰的假设，我们可以一点点地打造出用户喜爱的产品。</p>\n<h3 id=\"数据-学习\"><a href=\"#数据-学习\" class=\"headerlink\" title=\"数据-学习\"></a>数据-学习</h3><p>当我们收集到一定的用户数据，如网站、应用的数据，我们就开始去分析数据。如《精益创业》所说，在分析数据之前，我们需要确定我们的增长模型，即：</p>\n<ul>\n<li>黏着式增长引擎——其重点是让用户成为回头客，即让客户持续使用我们的产品。这就意味着，我们在分析数据和学习的过程中，我们要侧重于关注流失率和使用频率。</li>\n<li>病毒式增长引擎——其只做一件事：让名声传播出去。即通过用户间的不断传播来扩散产品，我们需要考虑所谓的<strong>病毒式传播系数</strong>，还有用户之间的特定行为。</li>\n<li><p>付费式增长引擎——赚钱是识别商业模式是否可持续的指标。</p>\n<p>针对不同的增长引擎有不同的学习过程，如媒体网站，我们通过不同的方式来导入流量，这些流量最终会有一些会转化成价值。这些价值会以不同的形式出现，如订阅率、在线参与度、广告营收等等。</p>\n<p>而从这些数据中学习就需要一些特殊的技巧，详情请见下面的参考书籍。</p>\n<p>参考书籍：</p>\n<ul>\n<li>《精益数据分析》</li>\n<li>《精益客户开发》</li>\n<li>《精益创业》</li>\n</ul>\n</li>\n</ul>"},{"title":"数据分析","date":"2016-05-07T13:45:08.000Z","_content":"\n数据分析是一个很有意思的过程，我们可以简单地将这个过程分成四个步骤：\n\n - 识别需求\n - 收集数据\n - 分析数据\n - 展示数据\n\n值得注意的是：在分析数据的过程中，需要不同的人员来参与，需要跨域多个领域的知识点——分析、设计、开发、商业和研究等领域。因此，在这样的领域里，回归敏捷也是一种不错的选择（源于：《敏捷数据科学》）：\n\n - 通才高于专长\n - 小团队高于大团队\n - 使用高阶工具和平台：云计算、分布式系统、PaaS\n - 持续、迭代地分享工作成果，即使这些工作未完成\n\n<!-- more -->\n\n### 识别需求\n\n在我们开始分析数据之前，我们需要明确一下，我们的问题是什么？即，我们到底要干嘛，我们想要的内容是什么。\n\n> 识别信息需求是确保数据分析过程有效性的首要条件，可以为收集数据、分析数据提供清晰的目标。\n\n当我们想要提到我们的网站在不同的地区的速度时，我们就需要去探索我们的用户主要是在哪些地区。即，现在这是我们的需求。我们已经有了这样的一个明确的目标，下面要做起来就很轻松了。\n\n### 收集数据\n\n那么现在新的问题来了，我们的数据要从哪里来？\n\n对于大部分的网站来说，都会有访问日志。但是这些访问日志只能显示某个 IP 进入了某个页面，并不人详细地介绍这个用户在这个页面待了多久，做了什么事。这时候，这些数据就需要依赖于类似于 Google Analytics 这样的工具来统计网站的流量。还有类似于New Relic这样的工具来统计用户的一些行为。\n\n在一些以科学研究为目的的数据收集中，我们可以从一些公开的数据中获取这些资料。\n\n而在一些特殊的情况里，我们就需要通过爬虫来完成这样的工作。\n\n### 分析数据\n\n现在，我们终于可以真正的去分析数据了——我的意思是，我们要开始写代码了。从海量的数据中过滤出我们想要的数据，并通过算法来对其进行分析。\n\n一般来说，我们都利用现有的工具来完成大部分的工作。要使用哪一类工具，取决于我们如要分析的数据的数量级了。如果只是一般的数量级，我们可以考虑用 R 语言、Python、Octave 等单机工具来完成。如果是大量的数据，那么我们就需要考虑用 Hadoop、Spark 来完成这个级别的工作。\n\n而一般来说，这个过程可能是要经过一系列的工具才能完成。如在之前我在分析我的博客的日志时(1G左右)，我用 Hadoop + Apache Pig + Jython 来将日志中的 IP 转换为 GEO 信息，再将 GEO 信息存储到 ElasticSearch 中。随后，我们就可以用 AMap、leaflet 这一类 GEO 库将这些点放置到地图上。\n\n### 展示数据\n\n现在，终于来到我最喜欢的环节了，也是最有意思，但是却又最难的环节。\n\n我们过滤后我们的数据，得到我们想要的内容后，我们就要去考虑如何可视化我们的数据。在我熟悉的 Web GIS领域里，我可以可视化出我过滤后的那些数据。但是对于我不熟悉的领域，要可视化这些数据不是一件容易的事。在少数情况下，我们才能使用现有的工具完成需求，多数情况下，我们也需要写相当的代码才能将数据最后可视化出来。\n\n而在以什么形式来展示我们的数据时，又是一个问题。如一般的数据结果，我们到底是使用柱形图、条形图、折线图和面积图中的哪一种？这依赖于我们有一些 UX 方面的经验。\n\n参考来源: **精益数据分析**。\n","source":"_posts/5.1.1-da.md","raw":"title: 数据分析\ndate: 2016-5-7 21:45:08\ntags:\n---\n\n数据分析是一个很有意思的过程，我们可以简单地将这个过程分成四个步骤：\n\n - 识别需求\n - 收集数据\n - 分析数据\n - 展示数据\n\n值得注意的是：在分析数据的过程中，需要不同的人员来参与，需要跨域多个领域的知识点——分析、设计、开发、商业和研究等领域。因此，在这样的领域里，回归敏捷也是一种不错的选择（源于：《敏捷数据科学》）：\n\n - 通才高于专长\n - 小团队高于大团队\n - 使用高阶工具和平台：云计算、分布式系统、PaaS\n - 持续、迭代地分享工作成果，即使这些工作未完成\n\n<!-- more -->\n\n### 识别需求\n\n在我们开始分析数据之前，我们需要明确一下，我们的问题是什么？即，我们到底要干嘛，我们想要的内容是什么。\n\n> 识别信息需求是确保数据分析过程有效性的首要条件，可以为收集数据、分析数据提供清晰的目标。\n\n当我们想要提到我们的网站在不同的地区的速度时，我们就需要去探索我们的用户主要是在哪些地区。即，现在这是我们的需求。我们已经有了这样的一个明确的目标，下面要做起来就很轻松了。\n\n### 收集数据\n\n那么现在新的问题来了，我们的数据要从哪里来？\n\n对于大部分的网站来说，都会有访问日志。但是这些访问日志只能显示某个 IP 进入了某个页面，并不人详细地介绍这个用户在这个页面待了多久，做了什么事。这时候，这些数据就需要依赖于类似于 Google Analytics 这样的工具来统计网站的流量。还有类似于New Relic这样的工具来统计用户的一些行为。\n\n在一些以科学研究为目的的数据收集中，我们可以从一些公开的数据中获取这些资料。\n\n而在一些特殊的情况里，我们就需要通过爬虫来完成这样的工作。\n\n### 分析数据\n\n现在，我们终于可以真正的去分析数据了——我的意思是，我们要开始写代码了。从海量的数据中过滤出我们想要的数据，并通过算法来对其进行分析。\n\n一般来说，我们都利用现有的工具来完成大部分的工作。要使用哪一类工具，取决于我们如要分析的数据的数量级了。如果只是一般的数量级，我们可以考虑用 R 语言、Python、Octave 等单机工具来完成。如果是大量的数据，那么我们就需要考虑用 Hadoop、Spark 来完成这个级别的工作。\n\n而一般来说，这个过程可能是要经过一系列的工具才能完成。如在之前我在分析我的博客的日志时(1G左右)，我用 Hadoop + Apache Pig + Jython 来将日志中的 IP 转换为 GEO 信息，再将 GEO 信息存储到 ElasticSearch 中。随后，我们就可以用 AMap、leaflet 这一类 GEO 库将这些点放置到地图上。\n\n### 展示数据\n\n现在，终于来到我最喜欢的环节了，也是最有意思，但是却又最难的环节。\n\n我们过滤后我们的数据，得到我们想要的内容后，我们就要去考虑如何可视化我们的数据。在我熟悉的 Web GIS领域里，我可以可视化出我过滤后的那些数据。但是对于我不熟悉的领域，要可视化这些数据不是一件容易的事。在少数情况下，我们才能使用现有的工具完成需求，多数情况下，我们也需要写相当的代码才能将数据最后可视化出来。\n\n而在以什么形式来展示我们的数据时，又是一个问题。如一般的数据结果，我们到底是使用柱形图、条形图、折线图和面积图中的哪一种？这依赖于我们有一些 UX 方面的经验。\n\n参考来源: **精益数据分析**。\n","slug":"5.1.1-da","published":1,"updated":"2016-05-07T07:23:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuf7mpp30013tsiftjupdtr7","content":"<p>数据分析是一个很有意思的过程，我们可以简单地将这个过程分成四个步骤：</p>\n<ul>\n<li>识别需求</li>\n<li>收集数据</li>\n<li>分析数据</li>\n<li>展示数据</li>\n</ul>\n<p>值得注意的是：在分析数据的过程中，需要不同的人员来参与，需要跨域多个领域的知识点——分析、设计、开发、商业和研究等领域。因此，在这样的领域里，回归敏捷也是一种不错的选择（源于：《敏捷数据科学》）：</p>\n<ul>\n<li>通才高于专长</li>\n<li>小团队高于大团队</li>\n<li>使用高阶工具和平台：云计算、分布式系统、PaaS</li>\n<li>持续、迭代地分享工作成果，即使这些工作未完成</li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"识别需求\"><a href=\"#识别需求\" class=\"headerlink\" title=\"识别需求\"></a>识别需求</h3><p>在我们开始分析数据之前，我们需要明确一下，我们的问题是什么？即，我们到底要干嘛，我们想要的内容是什么。</p>\n<blockquote>\n<p>识别信息需求是确保数据分析过程有效性的首要条件，可以为收集数据、分析数据提供清晰的目标。</p>\n</blockquote>\n<p>当我们想要提到我们的网站在不同的地区的速度时，我们就需要去探索我们的用户主要是在哪些地区。即，现在这是我们的需求。我们已经有了这样的一个明确的目标，下面要做起来就很轻松了。</p>\n<h3 id=\"收集数据\"><a href=\"#收集数据\" class=\"headerlink\" title=\"收集数据\"></a>收集数据</h3><p>那么现在新的问题来了，我们的数据要从哪里来？</p>\n<p>对于大部分的网站来说，都会有访问日志。但是这些访问日志只能显示某个 IP 进入了某个页面，并不人详细地介绍这个用户在这个页面待了多久，做了什么事。这时候，这些数据就需要依赖于类似于 Google Analytics 这样的工具来统计网站的流量。还有类似于New Relic这样的工具来统计用户的一些行为。</p>\n<p>在一些以科学研究为目的的数据收集中，我们可以从一些公开的数据中获取这些资料。</p>\n<p>而在一些特殊的情况里，我们就需要通过爬虫来完成这样的工作。</p>\n<h3 id=\"分析数据\"><a href=\"#分析数据\" class=\"headerlink\" title=\"分析数据\"></a>分析数据</h3><p>现在，我们终于可以真正的去分析数据了——我的意思是，我们要开始写代码了。从海量的数据中过滤出我们想要的数据，并通过算法来对其进行分析。</p>\n<p>一般来说，我们都利用现有的工具来完成大部分的工作。要使用哪一类工具，取决于我们如要分析的数据的数量级了。如果只是一般的数量级，我们可以考虑用 R 语言、Python、Octave 等单机工具来完成。如果是大量的数据，那么我们就需要考虑用 Hadoop、Spark 来完成这个级别的工作。</p>\n<p>而一般来说，这个过程可能是要经过一系列的工具才能完成。如在之前我在分析我的博客的日志时(1G左右)，我用 Hadoop + Apache Pig + Jython 来将日志中的 IP 转换为 GEO 信息，再将 GEO 信息存储到 ElasticSearch 中。随后，我们就可以用 AMap、leaflet 这一类 GEO 库将这些点放置到地图上。</p>\n<h3 id=\"展示数据\"><a href=\"#展示数据\" class=\"headerlink\" title=\"展示数据\"></a>展示数据</h3><p>现在，终于来到我最喜欢的环节了，也是最有意思，但是却又最难的环节。</p>\n<p>我们过滤后我们的数据，得到我们想要的内容后，我们就要去考虑如何可视化我们的数据。在我熟悉的 Web GIS领域里，我可以可视化出我过滤后的那些数据。但是对于我不熟悉的领域，要可视化这些数据不是一件容易的事。在少数情况下，我们才能使用现有的工具完成需求，多数情况下，我们也需要写相当的代码才能将数据最后可视化出来。</p>\n<p>而在以什么形式来展示我们的数据时，又是一个问题。如一般的数据结果，我们到底是使用柱形图、条形图、折线图和面积图中的哪一种？这依赖于我们有一些 UX 方面的经验。</p>\n<p>参考来源: <strong>精益数据分析</strong>。</p>\n","excerpt":"<p>数据分析是一个很有意思的过程，我们可以简单地将这个过程分成四个步骤：</p>\n<ul>\n<li>识别需求</li>\n<li>收集数据</li>\n<li>分析数据</li>\n<li>展示数据</li>\n</ul>\n<p>值得注意的是：在分析数据的过程中，需要不同的人员来参与，需要跨域多个领域的知识点——分析、设计、开发、商业和研究等领域。因此，在这样的领域里，回归敏捷也是一种不错的选择（源于：《敏捷数据科学》）：</p>\n<ul>\n<li>通才高于专长</li>\n<li>小团队高于大团队</li>\n<li>使用高阶工具和平台：云计算、分布式系统、PaaS</li>\n<li>持续、迭代地分享工作成果，即使这些工作未完成</li>\n</ul>","more":"<h3 id=\"识别需求\"><a href=\"#识别需求\" class=\"headerlink\" title=\"识别需求\"></a>识别需求</h3><p>在我们开始分析数据之前，我们需要明确一下，我们的问题是什么？即，我们到底要干嘛，我们想要的内容是什么。</p>\n<blockquote>\n<p>识别信息需求是确保数据分析过程有效性的首要条件，可以为收集数据、分析数据提供清晰的目标。</p>\n</blockquote>\n<p>当我们想要提到我们的网站在不同的地区的速度时，我们就需要去探索我们的用户主要是在哪些地区。即，现在这是我们的需求。我们已经有了这样的一个明确的目标，下面要做起来就很轻松了。</p>\n<h3 id=\"收集数据\"><a href=\"#收集数据\" class=\"headerlink\" title=\"收集数据\"></a>收集数据</h3><p>那么现在新的问题来了，我们的数据要从哪里来？</p>\n<p>对于大部分的网站来说，都会有访问日志。但是这些访问日志只能显示某个 IP 进入了某个页面，并不人详细地介绍这个用户在这个页面待了多久，做了什么事。这时候，这些数据就需要依赖于类似于 Google Analytics 这样的工具来统计网站的流量。还有类似于New Relic这样的工具来统计用户的一些行为。</p>\n<p>在一些以科学研究为目的的数据收集中，我们可以从一些公开的数据中获取这些资料。</p>\n<p>而在一些特殊的情况里，我们就需要通过爬虫来完成这样的工作。</p>\n<h3 id=\"分析数据\"><a href=\"#分析数据\" class=\"headerlink\" title=\"分析数据\"></a>分析数据</h3><p>现在，我们终于可以真正的去分析数据了——我的意思是，我们要开始写代码了。从海量的数据中过滤出我们想要的数据，并通过算法来对其进行分析。</p>\n<p>一般来说，我们都利用现有的工具来完成大部分的工作。要使用哪一类工具，取决于我们如要分析的数据的数量级了。如果只是一般的数量级，我们可以考虑用 R 语言、Python、Octave 等单机工具来完成。如果是大量的数据，那么我们就需要考虑用 Hadoop、Spark 来完成这个级别的工作。</p>\n<p>而一般来说，这个过程可能是要经过一系列的工具才能完成。如在之前我在分析我的博客的日志时(1G左右)，我用 Hadoop + Apache Pig + Jython 来将日志中的 IP 转换为 GEO 信息，再将 GEO 信息存储到 ElasticSearch 中。随后，我们就可以用 AMap、leaflet 这一类 GEO 库将这些点放置到地图上。</p>\n<h3 id=\"展示数据\"><a href=\"#展示数据\" class=\"headerlink\" title=\"展示数据\"></a>展示数据</h3><p>现在，终于来到我最喜欢的环节了，也是最有意思，但是却又最难的环节。</p>\n<p>我们过滤后我们的数据，得到我们想要的内容后，我们就要去考虑如何可视化我们的数据。在我熟悉的 Web GIS领域里，我可以可视化出我过滤后的那些数据。但是对于我不熟悉的领域，要可视化这些数据不是一件容易的事。在少数情况下，我们才能使用现有的工具完成需求，多数情况下，我们也需要写相当的代码才能将数据最后可视化出来。</p>\n<p>而在以什么形式来展示我们的数据时，又是一个问题。如一般的数据结果，我们到底是使用柱形图、条形图、折线图和面积图中的哪一种？这依赖于我们有一些 UX 方面的经验。</p>\n<p>参考来源: <strong>精益数据分析</strong>。</p>"},{"title":"UX 入门","date":"2016-05-08T14:45:08.000Z","_content":"\n用户体验设计（英语：User Experience Design），是以用户为中心的一种设计手段，以用户需求为目标而进行的设计。设计过程注重以用户为中心，用户体验的概念从开发的最早期就开始进入整个流程，并贯穿始终。其目的就是保证：\n\n- 对用户体验有正确的预估\n- 认识用户的真实期望和目的\n- 在功能核心还能够以低廉成本加以修改的时候对设计进行修正\n- 保证功能核心同人机界面之间的协调工作，减少 BUG。\n\n关于 UX 的定义我觉得在知乎上的回答似乎太简单了，于是在网上寻寻觅觅终于找到了一个比较接近于答案的回答。原文是在: [Defining UX](http://deviseconsulting.com/defining-ux/)，这又是一篇不是翻译的翻译。\n\n<!-- more -->\n\n### 什么是 UX\n\n用户体验设计（英语：User Experience Design），是以用户为中心的一种设计手段，以用户需求为目标而进行的设计。设计过程注重以用户为中心，用户体验的概念从开发的最早期就开始进入整个流程，并贯穿始终。其目的就是保证：\n\n - 对用户体验有正确的预估\n - 认识用户的真实期望和目的\n - 在功能核心还能够以低廉成本加以修改的时候对设计进行修正\n - 保证功能核心同人机界面之间的协调工作，减少BUG。\n\n**UX 需要什么**\n\n从下图中我们可以看到一些 UX 所需要的知识体系：\n\n![UX](http://growth.phodal.com/assets/article/chapter5/ux_design.jpg)\n\n即\n\n - 信息构架\n - 构架\n - 工业设计\n - 人为因素  (人因学)\n - 声音设计 (网页设计中比较少)\n - 人机交互\n - 可视化设计\n - 内容 (文字,视频,声音)\n\n交互设计便是``用户体验设计的重点``。我们再来看看另外的这张图片\n\n![Fields Of User Experience Design](http://growth.phodal.com/assets/article/chapter5/ux-field.jpg)\n\n### 什么是简单？\n\n一个好的软件应该是简单的，并且是令人愉快的。\n\n在不同的 UX 书籍里，似乎就会说到【简约至上】。简单就是“单纯清楚、不复杂”。而这里的简单并不仅仅只是不复杂那么简单。对于一个软件来说，简单实际上是你一下子就能找到你想要的东西，如：\n\n![Search Phodal](http://growth.phodal.com/assets/article/chapter5/search-phodal.jpg)\n\n而我们并不可能在一开始就得到这样的结果，这需要一个复杂的过程。而在这个过程开始之前，我们一定要知道的一点是：我们的用户到底需要什么?\n\n如果我们无法知道这一点，而只是一直在假想客户需要什么，那么这会变成一条死路。\n\n接着在找寻的过程中，发现了一个有意思的图，即精益画布：\n\n![Lean](http://growth.phodal.com/assets/article/chapter5/lean.jpg)\n\n首先，我们需要知道几个用户而存在的问题——即客户最需要解决的三个问题。并且针对三个问题提出对应的解决方案，这也就是产品的主要功能。\n\n那么，这两点结合起来对于用户来说就是简单——这个软件能解决客户存在的主要问题。\n\n如果我们可以完成这部分功能的话，那么这就算得上是一个有用的软件。\n\n### 进阶\n\n而实际上有用则是位于用户体验的最底层，如下图所示：\n\n![UX](http://growth.phodal.com/assets/article/chapter5/layer.jpg)\n\n这时候就需要尽量往可用靠拢。怎样对两者进行一个简单的划分？\n\n下图就是实用的软件：\n\n![IE Alert](http://growth.phodal.com/assets/article/chapter5/ie-alert.jpg)\n\n而下图就便好一点了：\n\n![jQuery Popup](http://growth.phodal.com/assets/article/chapter5/popup.jpg)\n\n要达到可用的级别，并不是一件困难的事：**遵循现有软件的模式**。\n\n换句话说，这时候你需要的是一本 **Cookbook**。这本 **Cookbook** 上面就会列出诸多现有的设计模式，只需要参考便使用就差不多了。\n\n同样的，我便尝试用《移动应用 UI 设计模式》一本书对我原有的软件进行了一些设计，发现它真的可以达到这样的地步。\n\n而这也类似于在编程中的设计模式，遵循模式可以创造出不错的软件。\n\n### 用户体验要素\n\n尽管对于这方面没有非常好的认识，但是还是让我们来看看我们现在可以到哪种程度。如在一开始所说的，我们需要满足用户的需求，这就是我们的目标：\n\n![用户体验要素](http://growth.phodal.com/assets/article/chapter5/ux-elements.png)\n\n而在最上面的视觉设计则需要更专业的人来设计。\n\n**参考目录**\n\n - 《怦然心动——情感化设计交互指南》\n - 《用户体验要素》\n - 《移动应用UI设计模式》\n","source":"_posts/5.4.0-first-ux.md","raw":"title: UX 入门\ndate: 2016-5-8 22:45:08\ntags:\n---\n\n用户体验设计（英语：User Experience Design），是以用户为中心的一种设计手段，以用户需求为目标而进行的设计。设计过程注重以用户为中心，用户体验的概念从开发的最早期就开始进入整个流程，并贯穿始终。其目的就是保证：\n\n- 对用户体验有正确的预估\n- 认识用户的真实期望和目的\n- 在功能核心还能够以低廉成本加以修改的时候对设计进行修正\n- 保证功能核心同人机界面之间的协调工作，减少 BUG。\n\n关于 UX 的定义我觉得在知乎上的回答似乎太简单了，于是在网上寻寻觅觅终于找到了一个比较接近于答案的回答。原文是在: [Defining UX](http://deviseconsulting.com/defining-ux/)，这又是一篇不是翻译的翻译。\n\n<!-- more -->\n\n### 什么是 UX\n\n用户体验设计（英语：User Experience Design），是以用户为中心的一种设计手段，以用户需求为目标而进行的设计。设计过程注重以用户为中心，用户体验的概念从开发的最早期就开始进入整个流程，并贯穿始终。其目的就是保证：\n\n - 对用户体验有正确的预估\n - 认识用户的真实期望和目的\n - 在功能核心还能够以低廉成本加以修改的时候对设计进行修正\n - 保证功能核心同人机界面之间的协调工作，减少BUG。\n\n**UX 需要什么**\n\n从下图中我们可以看到一些 UX 所需要的知识体系：\n\n![UX](http://growth.phodal.com/assets/article/chapter5/ux_design.jpg)\n\n即\n\n - 信息构架\n - 构架\n - 工业设计\n - 人为因素  (人因学)\n - 声音设计 (网页设计中比较少)\n - 人机交互\n - 可视化设计\n - 内容 (文字,视频,声音)\n\n交互设计便是``用户体验设计的重点``。我们再来看看另外的这张图片\n\n![Fields Of User Experience Design](http://growth.phodal.com/assets/article/chapter5/ux-field.jpg)\n\n### 什么是简单？\n\n一个好的软件应该是简单的，并且是令人愉快的。\n\n在不同的 UX 书籍里，似乎就会说到【简约至上】。简单就是“单纯清楚、不复杂”。而这里的简单并不仅仅只是不复杂那么简单。对于一个软件来说，简单实际上是你一下子就能找到你想要的东西，如：\n\n![Search Phodal](http://growth.phodal.com/assets/article/chapter5/search-phodal.jpg)\n\n而我们并不可能在一开始就得到这样的结果，这需要一个复杂的过程。而在这个过程开始之前，我们一定要知道的一点是：我们的用户到底需要什么?\n\n如果我们无法知道这一点，而只是一直在假想客户需要什么，那么这会变成一条死路。\n\n接着在找寻的过程中，发现了一个有意思的图，即精益画布：\n\n![Lean](http://growth.phodal.com/assets/article/chapter5/lean.jpg)\n\n首先，我们需要知道几个用户而存在的问题——即客户最需要解决的三个问题。并且针对三个问题提出对应的解决方案，这也就是产品的主要功能。\n\n那么，这两点结合起来对于用户来说就是简单——这个软件能解决客户存在的主要问题。\n\n如果我们可以完成这部分功能的话，那么这就算得上是一个有用的软件。\n\n### 进阶\n\n而实际上有用则是位于用户体验的最底层，如下图所示：\n\n![UX](http://growth.phodal.com/assets/article/chapter5/layer.jpg)\n\n这时候就需要尽量往可用靠拢。怎样对两者进行一个简单的划分？\n\n下图就是实用的软件：\n\n![IE Alert](http://growth.phodal.com/assets/article/chapter5/ie-alert.jpg)\n\n而下图就便好一点了：\n\n![jQuery Popup](http://growth.phodal.com/assets/article/chapter5/popup.jpg)\n\n要达到可用的级别，并不是一件困难的事：**遵循现有软件的模式**。\n\n换句话说，这时候你需要的是一本 **Cookbook**。这本 **Cookbook** 上面就会列出诸多现有的设计模式，只需要参考便使用就差不多了。\n\n同样的，我便尝试用《移动应用 UI 设计模式》一本书对我原有的软件进行了一些设计，发现它真的可以达到这样的地步。\n\n而这也类似于在编程中的设计模式，遵循模式可以创造出不错的软件。\n\n### 用户体验要素\n\n尽管对于这方面没有非常好的认识，但是还是让我们来看看我们现在可以到哪种程度。如在一开始所说的，我们需要满足用户的需求，这就是我们的目标：\n\n![用户体验要素](http://growth.phodal.com/assets/article/chapter5/ux-elements.png)\n\n而在最上面的视觉设计则需要更专业的人来设计。\n\n**参考目录**\n\n - 《怦然心动——情感化设计交互指南》\n - 《用户体验要素》\n - 《移动应用UI设计模式》\n","slug":"5.4.0-first-ux","published":1,"updated":"2016-05-08T04:36:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuf7mpp70014tsifw7k4szwy","content":"<p>用户体验设计（英语：User Experience Design），是以用户为中心的一种设计手段，以用户需求为目标而进行的设计。设计过程注重以用户为中心，用户体验的概念从开发的最早期就开始进入整个流程，并贯穿始终。其目的就是保证：</p>\n<ul>\n<li>对用户体验有正确的预估</li>\n<li>认识用户的真实期望和目的</li>\n<li>在功能核心还能够以低廉成本加以修改的时候对设计进行修正</li>\n<li>保证功能核心同人机界面之间的协调工作，减少 BUG。</li>\n</ul>\n<p>关于 UX 的定义我觉得在知乎上的回答似乎太简单了，于是在网上寻寻觅觅终于找到了一个比较接近于答案的回答。原文是在: <a href=\"http://deviseconsulting.com/defining-ux/\" target=\"_blank\" rel=\"external\">Defining UX</a>，这又是一篇不是翻译的翻译。</p>\n<a id=\"more\"></a>\n<h3 id=\"什么是-UX\"><a href=\"#什么是-UX\" class=\"headerlink\" title=\"什么是 UX\"></a>什么是 UX</h3><p>用户体验设计（英语：User Experience Design），是以用户为中心的一种设计手段，以用户需求为目标而进行的设计。设计过程注重以用户为中心，用户体验的概念从开发的最早期就开始进入整个流程，并贯穿始终。其目的就是保证：</p>\n<ul>\n<li>对用户体验有正确的预估</li>\n<li>认识用户的真实期望和目的</li>\n<li>在功能核心还能够以低廉成本加以修改的时候对设计进行修正</li>\n<li>保证功能核心同人机界面之间的协调工作，减少BUG。</li>\n</ul>\n<p><strong>UX 需要什么</strong></p>\n<p>从下图中我们可以看到一些 UX 所需要的知识体系：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter5/ux_design.jpg\" alt=\"UX\"></p>\n<p>即</p>\n<ul>\n<li>信息构架</li>\n<li>构架</li>\n<li>工业设计</li>\n<li>人为因素  (人因学)</li>\n<li>声音设计 (网页设计中比较少)</li>\n<li>人机交互</li>\n<li>可视化设计</li>\n<li>内容 (文字,视频,声音)</li>\n</ul>\n<p>交互设计便是<code>用户体验设计的重点</code>。我们再来看看另外的这张图片</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter5/ux-field.jpg\" alt=\"Fields Of User Experience Design\"></p>\n<h3 id=\"什么是简单？\"><a href=\"#什么是简单？\" class=\"headerlink\" title=\"什么是简单？\"></a>什么是简单？</h3><p>一个好的软件应该是简单的，并且是令人愉快的。</p>\n<p>在不同的 UX 书籍里，似乎就会说到【简约至上】。简单就是“单纯清楚、不复杂”。而这里的简单并不仅仅只是不复杂那么简单。对于一个软件来说，简单实际上是你一下子就能找到你想要的东西，如：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter5/search-phodal.jpg\" alt=\"Search Phodal\"></p>\n<p>而我们并不可能在一开始就得到这样的结果，这需要一个复杂的过程。而在这个过程开始之前，我们一定要知道的一点是：我们的用户到底需要什么?</p>\n<p>如果我们无法知道这一点，而只是一直在假想客户需要什么，那么这会变成一条死路。</p>\n<p>接着在找寻的过程中，发现了一个有意思的图，即精益画布：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter5/lean.jpg\" alt=\"Lean\"></p>\n<p>首先，我们需要知道几个用户而存在的问题——即客户最需要解决的三个问题。并且针对三个问题提出对应的解决方案，这也就是产品的主要功能。</p>\n<p>那么，这两点结合起来对于用户来说就是简单——这个软件能解决客户存在的主要问题。</p>\n<p>如果我们可以完成这部分功能的话，那么这就算得上是一个有用的软件。</p>\n<h3 id=\"进阶\"><a href=\"#进阶\" class=\"headerlink\" title=\"进阶\"></a>进阶</h3><p>而实际上有用则是位于用户体验的最底层，如下图所示：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter5/layer.jpg\" alt=\"UX\"></p>\n<p>这时候就需要尽量往可用靠拢。怎样对两者进行一个简单的划分？</p>\n<p>下图就是实用的软件：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter5/ie-alert.jpg\" alt=\"IE Alert\"></p>\n<p>而下图就便好一点了：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter5/popup.jpg\" alt=\"jQuery Popup\"></p>\n<p>要达到可用的级别，并不是一件困难的事：<strong>遵循现有软件的模式</strong>。</p>\n<p>换句话说，这时候你需要的是一本 <strong>Cookbook</strong>。这本 <strong>Cookbook</strong> 上面就会列出诸多现有的设计模式，只需要参考便使用就差不多了。</p>\n<p>同样的，我便尝试用《移动应用 UI 设计模式》一本书对我原有的软件进行了一些设计，发现它真的可以达到这样的地步。</p>\n<p>而这也类似于在编程中的设计模式，遵循模式可以创造出不错的软件。</p>\n<h3 id=\"用户体验要素\"><a href=\"#用户体验要素\" class=\"headerlink\" title=\"用户体验要素\"></a>用户体验要素</h3><p>尽管对于这方面没有非常好的认识，但是还是让我们来看看我们现在可以到哪种程度。如在一开始所说的，我们需要满足用户的需求，这就是我们的目标：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter5/ux-elements.png\" alt=\"用户体验要素\"></p>\n<p>而在最上面的视觉设计则需要更专业的人来设计。</p>\n<p><strong>参考目录</strong></p>\n<ul>\n<li>《怦然心动——情感化设计交互指南》</li>\n<li>《用户体验要素》</li>\n<li>《移动应用UI设计模式》</li>\n</ul>\n","excerpt":"<p>用户体验设计（英语：User Experience Design），是以用户为中心的一种设计手段，以用户需求为目标而进行的设计。设计过程注重以用户为中心，用户体验的概念从开发的最早期就开始进入整个流程，并贯穿始终。其目的就是保证：</p>\n<ul>\n<li>对用户体验有正确的预估</li>\n<li>认识用户的真实期望和目的</li>\n<li>在功能核心还能够以低廉成本加以修改的时候对设计进行修正</li>\n<li>保证功能核心同人机界面之间的协调工作，减少 BUG。</li>\n</ul>\n<p>关于 UX 的定义我觉得在知乎上的回答似乎太简单了，于是在网上寻寻觅觅终于找到了一个比较接近于答案的回答。原文是在: <a href=\"http://deviseconsulting.com/defining-ux/\">Defining UX</a>，这又是一篇不是翻译的翻译。</p>","more":"<h3 id=\"什么是-UX\"><a href=\"#什么是-UX\" class=\"headerlink\" title=\"什么是 UX\"></a>什么是 UX</h3><p>用户体验设计（英语：User Experience Design），是以用户为中心的一种设计手段，以用户需求为目标而进行的设计。设计过程注重以用户为中心，用户体验的概念从开发的最早期就开始进入整个流程，并贯穿始终。其目的就是保证：</p>\n<ul>\n<li>对用户体验有正确的预估</li>\n<li>认识用户的真实期望和目的</li>\n<li>在功能核心还能够以低廉成本加以修改的时候对设计进行修正</li>\n<li>保证功能核心同人机界面之间的协调工作，减少BUG。</li>\n</ul>\n<p><strong>UX 需要什么</strong></p>\n<p>从下图中我们可以看到一些 UX 所需要的知识体系：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter5/ux_design.jpg\" alt=\"UX\"></p>\n<p>即</p>\n<ul>\n<li>信息构架</li>\n<li>构架</li>\n<li>工业设计</li>\n<li>人为因素  (人因学)</li>\n<li>声音设计 (网页设计中比较少)</li>\n<li>人机交互</li>\n<li>可视化设计</li>\n<li>内容 (文字,视频,声音)</li>\n</ul>\n<p>交互设计便是<code>用户体验设计的重点</code>。我们再来看看另外的这张图片</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter5/ux-field.jpg\" alt=\"Fields Of User Experience Design\"></p>\n<h3 id=\"什么是简单？\"><a href=\"#什么是简单？\" class=\"headerlink\" title=\"什么是简单？\"></a>什么是简单？</h3><p>一个好的软件应该是简单的，并且是令人愉快的。</p>\n<p>在不同的 UX 书籍里，似乎就会说到【简约至上】。简单就是“单纯清楚、不复杂”。而这里的简单并不仅仅只是不复杂那么简单。对于一个软件来说，简单实际上是你一下子就能找到你想要的东西，如：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter5/search-phodal.jpg\" alt=\"Search Phodal\"></p>\n<p>而我们并不可能在一开始就得到这样的结果，这需要一个复杂的过程。而在这个过程开始之前，我们一定要知道的一点是：我们的用户到底需要什么?</p>\n<p>如果我们无法知道这一点，而只是一直在假想客户需要什么，那么这会变成一条死路。</p>\n<p>接着在找寻的过程中，发现了一个有意思的图，即精益画布：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter5/lean.jpg\" alt=\"Lean\"></p>\n<p>首先，我们需要知道几个用户而存在的问题——即客户最需要解决的三个问题。并且针对三个问题提出对应的解决方案，这也就是产品的主要功能。</p>\n<p>那么，这两点结合起来对于用户来说就是简单——这个软件能解决客户存在的主要问题。</p>\n<p>如果我们可以完成这部分功能的话，那么这就算得上是一个有用的软件。</p>\n<h3 id=\"进阶\"><a href=\"#进阶\" class=\"headerlink\" title=\"进阶\"></a>进阶</h3><p>而实际上有用则是位于用户体验的最底层，如下图所示：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter5/layer.jpg\" alt=\"UX\"></p>\n<p>这时候就需要尽量往可用靠拢。怎样对两者进行一个简单的划分？</p>\n<p>下图就是实用的软件：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter5/ie-alert.jpg\" alt=\"IE Alert\"></p>\n<p>而下图就便好一点了：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter5/popup.jpg\" alt=\"jQuery Popup\"></p>\n<p>要达到可用的级别，并不是一件困难的事：<strong>遵循现有软件的模式</strong>。</p>\n<p>换句话说，这时候你需要的是一本 <strong>Cookbook</strong>。这本 <strong>Cookbook</strong> 上面就会列出诸多现有的设计模式，只需要参考便使用就差不多了。</p>\n<p>同样的，我便尝试用《移动应用 UI 设计模式》一本书对我原有的软件进行了一些设计，发现它真的可以达到这样的地步。</p>\n<p>而这也类似于在编程中的设计模式，遵循模式可以创造出不错的软件。</p>\n<h3 id=\"用户体验要素\"><a href=\"#用户体验要素\" class=\"headerlink\" title=\"用户体验要素\"></a>用户体验要素</h3><p>尽管对于这方面没有非常好的认识，但是还是让我们来看看我们现在可以到哪种程度。如在一开始所说的，我们需要满足用户的需求，这就是我们的目标：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter5/ux-elements.png\" alt=\"用户体验要素\"></p>\n<p>而在最上面的视觉设计则需要更专业的人来设计。</p>\n<p><strong>参考目录</strong></p>\n<ul>\n<li>《怦然心动——情感化设计交互指南》</li>\n<li>《用户体验要素》</li>\n<li>《移动应用UI设计模式》</li>\n</ul>"},{"title":"认知设计","date":"2016-05-08T15:45:08.000Z","_content":"\n第一次意识到这本书很有用的时候，是我在策划一个视频。第二次，则是我在计划写一本书的时候。\n\n### 流\n\n在《认知设计》一书中，提到了下面的学习体验，即\"流\" (Flow)。而在我们学习的过程中，我们也会有类似的学习过程。\n\n![Learn Design](http://growth.phodal.com/assets/article/chapter5/learn-design.png)\n\n如在早期我学习 Emacs 和 GNU/Linux 的时候，也曾经放弃过，虽然在当时我已经读过 Linux 内核。然而，在应用之前进行理论学习并没有卵用。\n\n<!-- more -->\n\n通常我们会有类似于下面的学习体验，对于一本书来说有下面的体验似乎也是一件很不错的事:\n\n1. 在最开始学习的时候，我们需要一点理论基础，以及我们需要学点什么。\n2. 然后，我们需要构建一个简单可用的系统，以获取信心。如果我们在这一步没有想象中，那么简单，那么我们可能会放弃学习。或者等到某个时期成熟的时刻，如在我开始学习《设计模式》的时候，那么本书的高度太高了。直到有一天，我了解到了一本叫《Head First 设计模式》的书，才重新把 GoF 的书看了一遍，发现其实也没有想象中的难。\n3. 接着在我完成了某个功能之后，那么我可能继续学习某个理论，用于支撑我的下一步计划。\n4. 在那之后，我觉得这一步可能也不是那么难，因为已经有了前面的基础。如果在一步失败的时候，那么我们可能会继续寻找某些可靠的方案，又或者是理论支撑。\n5. 。。。\n6. 直到有一天，我们来到了一个瓶颈的前面，现有的方案已经不满足我们的需求。对于这个问题，我们可能已经没有一个更好的解决方案。于是，我们可能就需要创建一个轮子，只是在这时，我们不知道怎样去造轮子。\n7. 于是我们开始学习造轮子。\n8. ....\n\n只有当我们保持一个学习的过程，才会让我们在这一步步的计划中不会退缩，也不能退缩。\n","source":"_posts/5.4.1-learn-design.md","raw":"title: 认知设计\ndate: 2016-5-8 23:45:08\ntags:\n---\n\n第一次意识到这本书很有用的时候，是我在策划一个视频。第二次，则是我在计划写一本书的时候。\n\n### 流\n\n在《认知设计》一书中，提到了下面的学习体验，即\"流\" (Flow)。而在我们学习的过程中，我们也会有类似的学习过程。\n\n![Learn Design](http://growth.phodal.com/assets/article/chapter5/learn-design.png)\n\n如在早期我学习 Emacs 和 GNU/Linux 的时候，也曾经放弃过，虽然在当时我已经读过 Linux 内核。然而，在应用之前进行理论学习并没有卵用。\n\n<!-- more -->\n\n通常我们会有类似于下面的学习体验，对于一本书来说有下面的体验似乎也是一件很不错的事:\n\n1. 在最开始学习的时候，我们需要一点理论基础，以及我们需要学点什么。\n2. 然后，我们需要构建一个简单可用的系统，以获取信心。如果我们在这一步没有想象中，那么简单，那么我们可能会放弃学习。或者等到某个时期成熟的时刻，如在我开始学习《设计模式》的时候，那么本书的高度太高了。直到有一天，我了解到了一本叫《Head First 设计模式》的书，才重新把 GoF 的书看了一遍，发现其实也没有想象中的难。\n3. 接着在我完成了某个功能之后，那么我可能继续学习某个理论，用于支撑我的下一步计划。\n4. 在那之后，我觉得这一步可能也不是那么难，因为已经有了前面的基础。如果在一步失败的时候，那么我们可能会继续寻找某些可靠的方案，又或者是理论支撑。\n5. 。。。\n6. 直到有一天，我们来到了一个瓶颈的前面，现有的方案已经不满足我们的需求。对于这个问题，我们可能已经没有一个更好的解决方案。于是，我们可能就需要创建一个轮子，只是在这时，我们不知道怎样去造轮子。\n7. 于是我们开始学习造轮子。\n8. ....\n\n只有当我们保持一个学习的过程，才会让我们在这一步步的计划中不会退缩，也不能退缩。\n","slug":"5.4.1-learn-design","published":1,"updated":"2016-05-08T04:37:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuf7mppj0015tsif2fvfk85s","content":"<p>第一次意识到这本书很有用的时候，是我在策划一个视频。第二次，则是我在计划写一本书的时候。</p>\n<h3 id=\"流\"><a href=\"#流\" class=\"headerlink\" title=\"流\"></a>流</h3><p>在《认知设计》一书中，提到了下面的学习体验，即”流” (Flow)。而在我们学习的过程中，我们也会有类似的学习过程。</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter5/learn-design.png\" alt=\"Learn Design\"></p>\n<p>如在早期我学习 Emacs 和 GNU/Linux 的时候，也曾经放弃过，虽然在当时我已经读过 Linux 内核。然而，在应用之前进行理论学习并没有卵用。</p>\n<a id=\"more\"></a>\n<p>通常我们会有类似于下面的学习体验，对于一本书来说有下面的体验似乎也是一件很不错的事:</p>\n<ol>\n<li>在最开始学习的时候，我们需要一点理论基础，以及我们需要学点什么。</li>\n<li>然后，我们需要构建一个简单可用的系统，以获取信心。如果我们在这一步没有想象中，那么简单，那么我们可能会放弃学习。或者等到某个时期成熟的时刻，如在我开始学习《设计模式》的时候，那么本书的高度太高了。直到有一天，我了解到了一本叫《Head First 设计模式》的书，才重新把 GoF 的书看了一遍，发现其实也没有想象中的难。</li>\n<li>接着在我完成了某个功能之后，那么我可能继续学习某个理论，用于支撑我的下一步计划。</li>\n<li>在那之后，我觉得这一步可能也不是那么难，因为已经有了前面的基础。如果在一步失败的时候，那么我们可能会继续寻找某些可靠的方案，又或者是理论支撑。</li>\n<li>。。。</li>\n<li>直到有一天，我们来到了一个瓶颈的前面，现有的方案已经不满足我们的需求。对于这个问题，我们可能已经没有一个更好的解决方案。于是，我们可能就需要创建一个轮子，只是在这时，我们不知道怎样去造轮子。</li>\n<li>于是我们开始学习造轮子。</li>\n<li>….</li>\n</ol>\n<p>只有当我们保持一个学习的过程，才会让我们在这一步步的计划中不会退缩，也不能退缩。</p>\n","excerpt":"<p>第一次意识到这本书很有用的时候，是我在策划一个视频。第二次，则是我在计划写一本书的时候。</p>\n<h3 id=\"流\"><a href=\"#流\" class=\"headerlink\" title=\"流\"></a>流</h3><p>在《认知设计》一书中，提到了下面的学习体验，即”流” (Flow)。而在我们学习的过程中，我们也会有类似的学习过程。</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter5/learn-design.png\" alt=\"Learn Design\"></p>\n<p>如在早期我学习 Emacs 和 GNU/Linux 的时候，也曾经放弃过，虽然在当时我已经读过 Linux 内核。然而，在应用之前进行理论学习并没有卵用。</p>","more":"<p>通常我们会有类似于下面的学习体验，对于一本书来说有下面的体验似乎也是一件很不错的事:</p>\n<ol>\n<li>在最开始学习的时候，我们需要一点理论基础，以及我们需要学点什么。</li>\n<li>然后，我们需要构建一个简单可用的系统，以获取信心。如果我们在这一步没有想象中，那么简单，那么我们可能会放弃学习。或者等到某个时期成熟的时刻，如在我开始学习《设计模式》的时候，那么本书的高度太高了。直到有一天，我了解到了一本叫《Head First 设计模式》的书，才重新把 GoF 的书看了一遍，发现其实也没有想象中的难。</li>\n<li>接着在我完成了某个功能之后，那么我可能继续学习某个理论，用于支撑我的下一步计划。</li>\n<li>在那之后，我觉得这一步可能也不是那么难，因为已经有了前面的基础。如果在一步失败的时候，那么我们可能会继续寻找某些可靠的方案，又或者是理论支撑。</li>\n<li>。。。</li>\n<li>直到有一天，我们来到了一个瓶颈的前面，现有的方案已经不满足我们的需求。对于这个问题，我们可能已经没有一个更好的解决方案。于是，我们可能就需要创建一个轮子，只是在这时，我们不知道怎样去造轮子。</li>\n<li>于是我们开始学习造轮子。</li>\n<li>….</li>\n</ol>\n<p>只有当我们保持一个学习的过程，才会让我们在这一步步的计划中不会退缩，也不能退缩。</p>"},{"title":"持续集成","date":"2016-05-09T13:45:08.000Z","_content":"\n更关注代码质量。持续集成是为了确保随着需求变化而变化的代码，在实现功能的同时，质量不受影响。因此，在每一次构建后会运行单元测试，保证代码级的质量。单元测试会针对每一个特定的输入去判断和观察输出的结果，而单元测试的粒度则用来平衡持续集成的质量和速度。\n\n持续集成的核心价值在于[^CI]：\n\n1. 持续集成中的任何一个环节都是自动完成的，无需太多的人工干预，有利于减少重复过程以节省时间、费用和工作量；\n2. 持续集成保障了每个时间点上团队成员提交的代码是能成功集成的。换言之，任何时间点都能第一时间发现软件的集成问题，使任意时间发布可部署的软件成为了可能；\n3. 持续集成还能利于软件本身的发展趋势，这点在需求不明确或是频繁性变更的情景中尤其重要，持续集成的质量能帮助团队进行有效决策，同时建立团队对开发产品的信心。\n\n### 持续集成系统\n\n在前面的内容里，我们已经介绍了持续集成的各项基础设施——如使用版本管理、编写测试、自动化部署。要构建这样的一个持续集成系统需要下面的内容：\n\n - 支持自动构建\n - 源码服务器\n - 持续集成服务器\n\n<!-- more -->\n\n我们已经实现了前两点，针对于第三点——持续集成服务器，我们可以以 Jenkins 为例做一些简单的说明。它是一种基于 Java 开发的持续集成工具，并提供了用于监控持续重复工作的软件平台。\n\n它可以让整个开发流程到部署都实现自动化。由于每个功能可以一点点的加在 build 中，那么这样就能保证每次的新 build 可以交付新的功能。同时，我们可以根据用户的反馈情况及时调整开发方向，降低项目风险。\n\n### 持续集成流程\n\n我们就可以对这个工作流展开进入介绍。持续集成重要就是要保证整个过程是**可持续**的。如下图是一个持续集成的工作流：\n\n![CI Workflow](http://growth.phodal.com/assets/article/chapter6/ci.jpg)\n\n不同的开发者在自己的机器上开发功能代码。在完成一定的本地提交后，这些代码将会提交给源代码控制服务器。不过，在那之前我们应该在本地跑测试来减少持续集成失败的情况。接着，我们的CI会定时去获取源码服务器是否有代码修改。如果有代码修改，那么我们的集成服务器将会获取这些代码。然后，构建这个项目，运行测试，再输出返回结果。最后，我们可以开发一些小工具来提醒用户 CI 是否运行成功。\n\n如果这个过程中，我们我们的 CI 运行失败的话，那么我们就不能再提交新的代码——除了修复 CI 的代码外。持续集成变红不能过夜，要么快速解决，要么回退。\n\n在这个过程中，有两点值得注意，一个是小步前进，一个是迟早反馈。\n\n#### 小步前进\n\n小步前进是一系列步骤的集合，其目的是：集成越早问题越小。即当我们的代码越早的提交到源码服务器，那么其他人就可以尽可能早的和我们的代码集成到一起。这也意味着，每天结束时，我们在本地的修改要尽可能小，并且这些修改还要保证不会破坏持续集成。\n\n我们需要频繁地在本地提交我们的代码，编写独立的测试——如果我们在最后才编写测试，这会拖慢整个流程，它使得我们不能尽可能早的提交代码。\n\n#### 尽早反馈\n\n> 反馈越早，那么问题越小。\n\n无论是精益还是敏捷都在强调一点——尽早反馈，反馈对于提高敏捷开发流程效力非常重要。从日常的：\n\n - Code Review\n - 静态代码分析\n - 自动集成测试\n - 自动验收测试\n - 高频率发布\n\n我们都在做尽可能小的反馈，这些实践对于我们完成一个好的持续集成来说是非常重要的基础。\n\n参考资料：\n\n -《持续交付：发布可靠软件的系统方法》\n\n[^CI]: [基于 Jenkins 快速搭建持续集成环境](https://www.ibm.com/developerworks/cn/java/j-lo-jenkins/)\n","source":"_posts/6.1.1-ci.md","raw":"title: 持续集成\ndate: 2016-5-9 21:45:08\ntags:\n---\n\n更关注代码质量。持续集成是为了确保随着需求变化而变化的代码，在实现功能的同时，质量不受影响。因此，在每一次构建后会运行单元测试，保证代码级的质量。单元测试会针对每一个特定的输入去判断和观察输出的结果，而单元测试的粒度则用来平衡持续集成的质量和速度。\n\n持续集成的核心价值在于[^CI]：\n\n1. 持续集成中的任何一个环节都是自动完成的，无需太多的人工干预，有利于减少重复过程以节省时间、费用和工作量；\n2. 持续集成保障了每个时间点上团队成员提交的代码是能成功集成的。换言之，任何时间点都能第一时间发现软件的集成问题，使任意时间发布可部署的软件成为了可能；\n3. 持续集成还能利于软件本身的发展趋势，这点在需求不明确或是频繁性变更的情景中尤其重要，持续集成的质量能帮助团队进行有效决策，同时建立团队对开发产品的信心。\n\n### 持续集成系统\n\n在前面的内容里，我们已经介绍了持续集成的各项基础设施——如使用版本管理、编写测试、自动化部署。要构建这样的一个持续集成系统需要下面的内容：\n\n - 支持自动构建\n - 源码服务器\n - 持续集成服务器\n\n<!-- more -->\n\n我们已经实现了前两点，针对于第三点——持续集成服务器，我们可以以 Jenkins 为例做一些简单的说明。它是一种基于 Java 开发的持续集成工具，并提供了用于监控持续重复工作的软件平台。\n\n它可以让整个开发流程到部署都实现自动化。由于每个功能可以一点点的加在 build 中，那么这样就能保证每次的新 build 可以交付新的功能。同时，我们可以根据用户的反馈情况及时调整开发方向，降低项目风险。\n\n### 持续集成流程\n\n我们就可以对这个工作流展开进入介绍。持续集成重要就是要保证整个过程是**可持续**的。如下图是一个持续集成的工作流：\n\n![CI Workflow](http://growth.phodal.com/assets/article/chapter6/ci.jpg)\n\n不同的开发者在自己的机器上开发功能代码。在完成一定的本地提交后，这些代码将会提交给源代码控制服务器。不过，在那之前我们应该在本地跑测试来减少持续集成失败的情况。接着，我们的CI会定时去获取源码服务器是否有代码修改。如果有代码修改，那么我们的集成服务器将会获取这些代码。然后，构建这个项目，运行测试，再输出返回结果。最后，我们可以开发一些小工具来提醒用户 CI 是否运行成功。\n\n如果这个过程中，我们我们的 CI 运行失败的话，那么我们就不能再提交新的代码——除了修复 CI 的代码外。持续集成变红不能过夜，要么快速解决，要么回退。\n\n在这个过程中，有两点值得注意，一个是小步前进，一个是迟早反馈。\n\n#### 小步前进\n\n小步前进是一系列步骤的集合，其目的是：集成越早问题越小。即当我们的代码越早的提交到源码服务器，那么其他人就可以尽可能早的和我们的代码集成到一起。这也意味着，每天结束时，我们在本地的修改要尽可能小，并且这些修改还要保证不会破坏持续集成。\n\n我们需要频繁地在本地提交我们的代码，编写独立的测试——如果我们在最后才编写测试，这会拖慢整个流程，它使得我们不能尽可能早的提交代码。\n\n#### 尽早反馈\n\n> 反馈越早，那么问题越小。\n\n无论是精益还是敏捷都在强调一点——尽早反馈，反馈对于提高敏捷开发流程效力非常重要。从日常的：\n\n - Code Review\n - 静态代码分析\n - 自动集成测试\n - 自动验收测试\n - 高频率发布\n\n我们都在做尽可能小的反馈，这些实践对于我们完成一个好的持续集成来说是非常重要的基础。\n\n参考资料：\n\n -《持续交付：发布可靠软件的系统方法》\n\n[^CI]: [基于 Jenkins 快速搭建持续集成环境](https://www.ibm.com/developerworks/cn/java/j-lo-jenkins/)\n","slug":"6.1.1-ci","published":1,"updated":"2016-05-09T03:41:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuf7mppp0016tsif2aikxs5r","content":"<p>更关注代码质量。持续集成是为了确保随着需求变化而变化的代码，在实现功能的同时，质量不受影响。因此，在每一次构建后会运行单元测试，保证代码级的质量。单元测试会针对每一个特定的输入去判断和观察输出的结果，而单元测试的粒度则用来平衡持续集成的质量和速度。</p>\n<p>持续集成的核心价值在于[^CI]：</p>\n<ol>\n<li>持续集成中的任何一个环节都是自动完成的，无需太多的人工干预，有利于减少重复过程以节省时间、费用和工作量；</li>\n<li>持续集成保障了每个时间点上团队成员提交的代码是能成功集成的。换言之，任何时间点都能第一时间发现软件的集成问题，使任意时间发布可部署的软件成为了可能；</li>\n<li>持续集成还能利于软件本身的发展趋势，这点在需求不明确或是频繁性变更的情景中尤其重要，持续集成的质量能帮助团队进行有效决策，同时建立团队对开发产品的信心。</li>\n</ol>\n<h3 id=\"持续集成系统\"><a href=\"#持续集成系统\" class=\"headerlink\" title=\"持续集成系统\"></a>持续集成系统</h3><p>在前面的内容里，我们已经介绍了持续集成的各项基础设施——如使用版本管理、编写测试、自动化部署。要构建这样的一个持续集成系统需要下面的内容：</p>\n<ul>\n<li>支持自动构建</li>\n<li>源码服务器</li>\n<li>持续集成服务器</li>\n</ul>\n<a id=\"more\"></a>\n<p>我们已经实现了前两点，针对于第三点——持续集成服务器，我们可以以 Jenkins 为例做一些简单的说明。它是一种基于 Java 开发的持续集成工具，并提供了用于监控持续重复工作的软件平台。</p>\n<p>它可以让整个开发流程到部署都实现自动化。由于每个功能可以一点点的加在 build 中，那么这样就能保证每次的新 build 可以交付新的功能。同时，我们可以根据用户的反馈情况及时调整开发方向，降低项目风险。</p>\n<h3 id=\"持续集成流程\"><a href=\"#持续集成流程\" class=\"headerlink\" title=\"持续集成流程\"></a>持续集成流程</h3><p>我们就可以对这个工作流展开进入介绍。持续集成重要就是要保证整个过程是<strong>可持续</strong>的。如下图是一个持续集成的工作流：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter6/ci.jpg\" alt=\"CI Workflow\"></p>\n<p>不同的开发者在自己的机器上开发功能代码。在完成一定的本地提交后，这些代码将会提交给源代码控制服务器。不过，在那之前我们应该在本地跑测试来减少持续集成失败的情况。接着，我们的CI会定时去获取源码服务器是否有代码修改。如果有代码修改，那么我们的集成服务器将会获取这些代码。然后，构建这个项目，运行测试，再输出返回结果。最后，我们可以开发一些小工具来提醒用户 CI 是否运行成功。</p>\n<p>如果这个过程中，我们我们的 CI 运行失败的话，那么我们就不能再提交新的代码——除了修复 CI 的代码外。持续集成变红不能过夜，要么快速解决，要么回退。</p>\n<p>在这个过程中，有两点值得注意，一个是小步前进，一个是迟早反馈。</p>\n<h4 id=\"小步前进\"><a href=\"#小步前进\" class=\"headerlink\" title=\"小步前进\"></a>小步前进</h4><p>小步前进是一系列步骤的集合，其目的是：集成越早问题越小。即当我们的代码越早的提交到源码服务器，那么其他人就可以尽可能早的和我们的代码集成到一起。这也意味着，每天结束时，我们在本地的修改要尽可能小，并且这些修改还要保证不会破坏持续集成。</p>\n<p>我们需要频繁地在本地提交我们的代码，编写独立的测试——如果我们在最后才编写测试，这会拖慢整个流程，它使得我们不能尽可能早的提交代码。</p>\n<h4 id=\"尽早反馈\"><a href=\"#尽早反馈\" class=\"headerlink\" title=\"尽早反馈\"></a>尽早反馈</h4><blockquote>\n<p>反馈越早，那么问题越小。</p>\n</blockquote>\n<p>无论是精益还是敏捷都在强调一点——尽早反馈，反馈对于提高敏捷开发流程效力非常重要。从日常的：</p>\n<ul>\n<li>Code Review</li>\n<li>静态代码分析</li>\n<li>自动集成测试</li>\n<li>自动验收测试</li>\n<li>高频率发布</li>\n</ul>\n<p>我们都在做尽可能小的反馈，这些实践对于我们完成一个好的持续集成来说是非常重要的基础。</p>\n<p>参考资料：</p>\n<p> -《持续交付：发布可靠软件的系统方法》</p>\n<p>[^CI]: <a href=\"https://www.ibm.com/developerworks/cn/java/j-lo-jenkins/\" target=\"_blank\" rel=\"external\">基于 Jenkins 快速搭建持续集成环境</a></p>\n","excerpt":"<p>更关注代码质量。持续集成是为了确保随着需求变化而变化的代码，在实现功能的同时，质量不受影响。因此，在每一次构建后会运行单元测试，保证代码级的质量。单元测试会针对每一个特定的输入去判断和观察输出的结果，而单元测试的粒度则用来平衡持续集成的质量和速度。</p>\n<p>持续集成的核心价值在于[^CI]：</p>\n<ol>\n<li>持续集成中的任何一个环节都是自动完成的，无需太多的人工干预，有利于减少重复过程以节省时间、费用和工作量；</li>\n<li>持续集成保障了每个时间点上团队成员提交的代码是能成功集成的。换言之，任何时间点都能第一时间发现软件的集成问题，使任意时间发布可部署的软件成为了可能；</li>\n<li>持续集成还能利于软件本身的发展趋势，这点在需求不明确或是频繁性变更的情景中尤其重要，持续集成的质量能帮助团队进行有效决策，同时建立团队对开发产品的信心。</li>\n</ol>\n<h3 id=\"持续集成系统\"><a href=\"#持续集成系统\" class=\"headerlink\" title=\"持续集成系统\"></a>持续集成系统</h3><p>在前面的内容里，我们已经介绍了持续集成的各项基础设施——如使用版本管理、编写测试、自动化部署。要构建这样的一个持续集成系统需要下面的内容：</p>\n<ul>\n<li>支持自动构建</li>\n<li>源码服务器</li>\n<li>持续集成服务器</li>\n</ul>","more":"<p>我们已经实现了前两点，针对于第三点——持续集成服务器，我们可以以 Jenkins 为例做一些简单的说明。它是一种基于 Java 开发的持续集成工具，并提供了用于监控持续重复工作的软件平台。</p>\n<p>它可以让整个开发流程到部署都实现自动化。由于每个功能可以一点点的加在 build 中，那么这样就能保证每次的新 build 可以交付新的功能。同时，我们可以根据用户的反馈情况及时调整开发方向，降低项目风险。</p>\n<h3 id=\"持续集成流程\"><a href=\"#持续集成流程\" class=\"headerlink\" title=\"持续集成流程\"></a>持续集成流程</h3><p>我们就可以对这个工作流展开进入介绍。持续集成重要就是要保证整个过程是<strong>可持续</strong>的。如下图是一个持续集成的工作流：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter6/ci.jpg\" alt=\"CI Workflow\"></p>\n<p>不同的开发者在自己的机器上开发功能代码。在完成一定的本地提交后，这些代码将会提交给源代码控制服务器。不过，在那之前我们应该在本地跑测试来减少持续集成失败的情况。接着，我们的CI会定时去获取源码服务器是否有代码修改。如果有代码修改，那么我们的集成服务器将会获取这些代码。然后，构建这个项目，运行测试，再输出返回结果。最后，我们可以开发一些小工具来提醒用户 CI 是否运行成功。</p>\n<p>如果这个过程中，我们我们的 CI 运行失败的话，那么我们就不能再提交新的代码——除了修复 CI 的代码外。持续集成变红不能过夜，要么快速解决，要么回退。</p>\n<p>在这个过程中，有两点值得注意，一个是小步前进，一个是迟早反馈。</p>\n<h4 id=\"小步前进\"><a href=\"#小步前进\" class=\"headerlink\" title=\"小步前进\"></a>小步前进</h4><p>小步前进是一系列步骤的集合，其目的是：集成越早问题越小。即当我们的代码越早的提交到源码服务器，那么其他人就可以尽可能早的和我们的代码集成到一起。这也意味着，每天结束时，我们在本地的修改要尽可能小，并且这些修改还要保证不会破坏持续集成。</p>\n<p>我们需要频繁地在本地提交我们的代码，编写独立的测试——如果我们在最后才编写测试，这会拖慢整个流程，它使得我们不能尽可能早的提交代码。</p>\n<h4 id=\"尽早反馈\"><a href=\"#尽早反馈\" class=\"headerlink\" title=\"尽早反馈\"></a>尽早反馈</h4><blockquote>\n<p>反馈越早，那么问题越小。</p>\n</blockquote>\n<p>无论是精益还是敏捷都在强调一点——尽早反馈，反馈对于提高敏捷开发流程效力非常重要。从日常的：</p>\n<ul>\n<li>Code Review</li>\n<li>静态代码分析</li>\n<li>自动集成测试</li>\n<li>自动验收测试</li>\n<li>高频率发布</li>\n</ul>\n<p>我们都在做尽可能小的反馈，这些实践对于我们完成一个好的持续集成来说是非常重要的基础。</p>\n<p>参考资料：</p>\n<p> -《持续交付：发布可靠软件的系统方法》</p>\n<p>[^CI]: <a href=\"https://www.ibm.com/developerworks/cn/java/j-lo-jenkins/\">基于 Jenkins 快速搭建持续集成环境</a></p>"},{"title":"遗留系统与修改代码","date":"2016-05-10T13:45:08.000Z","_content":"\n尽管维基百科上对遗留系统的定义是:\n\n> 一种旧的方法、旧的技术、旧的计算机系统或应用程序。\n\n但是实际上，当你看到某个网站宣称用新的框架来替换旧的框架的时候，你应该知晓他们原有的系统是遗留系统。人们已经不想在上面工作了，很多代码也不知道是干什么的，也没有人想去深究——毕竟不是自己的代码。判断是否是遗留代码的条件很简单，维护成本是否比开发成本高很多。\n\n - 几乎无法维护\n - 代码遗失\n - 逻辑不清\n - 没有文档或者不够详细、看不懂\n - 关键点遗失\n\n<!-- more -->\n\n在维护这一类系统的过程中，我们可能会遇到一些原因来修改代码。如《修改代码的艺术》的一书中所说，修改软件有四大原因：\n\n - 增加特性\n - 修复 Bug\n - 改善设计\n - 优化\n\n当我们修改代码之后，我们将继续引进新的 Bug。\n\n\n参考阅读\n\n -《修改代码的艺术》\n","source":"_posts/7.0.0-legacy-system.md","raw":"title: 遗留系统与修改代码\ndate: 2016-5-10 21:45:08\ntags:\n---\n\n尽管维基百科上对遗留系统的定义是:\n\n> 一种旧的方法、旧的技术、旧的计算机系统或应用程序。\n\n但是实际上，当你看到某个网站宣称用新的框架来替换旧的框架的时候，你应该知晓他们原有的系统是遗留系统。人们已经不想在上面工作了，很多代码也不知道是干什么的，也没有人想去深究——毕竟不是自己的代码。判断是否是遗留代码的条件很简单，维护成本是否比开发成本高很多。\n\n - 几乎无法维护\n - 代码遗失\n - 逻辑不清\n - 没有文档或者不够详细、看不懂\n - 关键点遗失\n\n<!-- more -->\n\n在维护这一类系统的过程中，我们可能会遇到一些原因来修改代码。如《修改代码的艺术》的一书中所说，修改软件有四大原因：\n\n - 增加特性\n - 修复 Bug\n - 改善设计\n - 优化\n\n当我们修改代码之后，我们将继续引进新的 Bug。\n\n\n参考阅读\n\n -《修改代码的艺术》\n","slug":"7.0.0-legacy-system","published":1,"updated":"2016-05-10T02:38:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuf7mpps0017tsif3klsc550","content":"<p>尽管维基百科上对遗留系统的定义是:</p>\n<blockquote>\n<p>一种旧的方法、旧的技术、旧的计算机系统或应用程序。</p>\n</blockquote>\n<p>但是实际上，当你看到某个网站宣称用新的框架来替换旧的框架的时候，你应该知晓他们原有的系统是遗留系统。人们已经不想在上面工作了，很多代码也不知道是干什么的，也没有人想去深究——毕竟不是自己的代码。判断是否是遗留代码的条件很简单，维护成本是否比开发成本高很多。</p>\n<ul>\n<li>几乎无法维护</li>\n<li>代码遗失</li>\n<li>逻辑不清</li>\n<li>没有文档或者不够详细、看不懂</li>\n<li>关键点遗失</li>\n</ul>\n<a id=\"more\"></a>\n<p>在维护这一类系统的过程中，我们可能会遇到一些原因来修改代码。如《修改代码的艺术》的一书中所说，修改软件有四大原因：</p>\n<ul>\n<li>增加特性</li>\n<li>修复 Bug</li>\n<li>改善设计</li>\n<li>优化</li>\n</ul>\n<p>当我们修改代码之后，我们将继续引进新的 Bug。</p>\n<p>参考阅读</p>\n<p> -《修改代码的艺术》</p>\n","excerpt":"<p>尽管维基百科上对遗留系统的定义是:</p>\n<blockquote>\n<p>一种旧的方法、旧的技术、旧的计算机系统或应用程序。</p>\n</blockquote>\n<p>但是实际上，当你看到某个网站宣称用新的框架来替换旧的框架的时候，你应该知晓他们原有的系统是遗留系统。人们已经不想在上面工作了，很多代码也不知道是干什么的，也没有人想去深究——毕竟不是自己的代码。判断是否是遗留代码的条件很简单，维护成本是否比开发成本高很多。</p>\n<ul>\n<li>几乎无法维护</li>\n<li>代码遗失</li>\n<li>逻辑不清</li>\n<li>没有文档或者不够详细、看不懂</li>\n<li>关键点遗失</li>\n</ul>","more":"<p>在维护这一类系统的过程中，我们可能会遇到一些原因来修改代码。如《修改代码的艺术》的一书中所说，修改软件有四大原因：</p>\n<ul>\n<li>增加特性</li>\n<li>修复 Bug</li>\n<li>改善设计</li>\n<li>优化</li>\n</ul>\n<p>当我们修改代码之后，我们将继续引进新的 Bug。</p>\n<p>参考阅读</p>\n<p> -《修改代码的艺术》</p>"},{"title":"遗留代码","date":"2016-05-10T14:45:08.000Z","_content":"\n我们生活息息相关的很多软件里满是错误、脆弱，并且难以扩展，这就是我们说的“遗留代码”。\n\n相信你也经常看到某某网站的高架构之路，会发现其中一个很有趣的过程就是他们会把之前的架构抛弃掉。接着，他们又做了一个这样的系统，然后过些年这个系统又被重做了。究其原因，会发现这个架构是在几年前设计的。在几年前，他是非常好的架构。但是随着时间的演变，他还是几年前的架构。这是为什么呢？\n\n### 遗留代码\n\n什么是遗留代码？\n\n> 没有自动化测试的代码就是遗留代码，不管它是十年前写的，还是昨天写的。\n\n从一个新手程序员到一个老鸟，我们的编程水平都在不断增加。但是我们过去写的代码一直都在那里，但是我们一直都没有足够的勇气去动他们。因为我们知道如果我们一不小心改错了什么，就会导致一些意外的 Bug。这些 Bug 可能会对我们的编程生涯造成一些影响。\n\n<!-- more -->\n\n而我们不知道这样做的后果，是因为我们没有对原来的代码进行测试。如果我们的代码都是经过测试的，那么我们在修改中出的错，都会在测试中加以体现。长此以往，没有人敢去修改这些代码。\n\n既然他在旧的系统中工作得很好，那么我们就没有理由去修改他们。当有新的需求出现时，我们就可以重新设计一个新的系统。\n","source":"_posts/7.1.1-legacy-code.md","raw":"title: 遗留代码\ndate: 2016-5-10 22:45:08\ntags:\n---\n\n我们生活息息相关的很多软件里满是错误、脆弱，并且难以扩展，这就是我们说的“遗留代码”。\n\n相信你也经常看到某某网站的高架构之路，会发现其中一个很有趣的过程就是他们会把之前的架构抛弃掉。接着，他们又做了一个这样的系统，然后过些年这个系统又被重做了。究其原因，会发现这个架构是在几年前设计的。在几年前，他是非常好的架构。但是随着时间的演变，他还是几年前的架构。这是为什么呢？\n\n### 遗留代码\n\n什么是遗留代码？\n\n> 没有自动化测试的代码就是遗留代码，不管它是十年前写的，还是昨天写的。\n\n从一个新手程序员到一个老鸟，我们的编程水平都在不断增加。但是我们过去写的代码一直都在那里，但是我们一直都没有足够的勇气去动他们。因为我们知道如果我们一不小心改错了什么，就会导致一些意外的 Bug。这些 Bug 可能会对我们的编程生涯造成一些影响。\n\n<!-- more -->\n\n而我们不知道这样做的后果，是因为我们没有对原来的代码进行测试。如果我们的代码都是经过测试的，那么我们在修改中出的错，都会在测试中加以体现。长此以往，没有人敢去修改这些代码。\n\n既然他在旧的系统中工作得很好，那么我们就没有理由去修改他们。当有新的需求出现时，我们就可以重新设计一个新的系统。\n","slug":"7.1.1-legacy-code","published":1,"updated":"2016-05-10T02:40:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuf7mppu0018tsifgrm3ggur","content":"<p>我们生活息息相关的很多软件里满是错误、脆弱，并且难以扩展，这就是我们说的“遗留代码”。</p>\n<p>相信你也经常看到某某网站的高架构之路，会发现其中一个很有趣的过程就是他们会把之前的架构抛弃掉。接着，他们又做了一个这样的系统，然后过些年这个系统又被重做了。究其原因，会发现这个架构是在几年前设计的。在几年前，他是非常好的架构。但是随着时间的演变，他还是几年前的架构。这是为什么呢？</p>\n<h3 id=\"遗留代码\"><a href=\"#遗留代码\" class=\"headerlink\" title=\"遗留代码\"></a>遗留代码</h3><p>什么是遗留代码？</p>\n<blockquote>\n<p>没有自动化测试的代码就是遗留代码，不管它是十年前写的，还是昨天写的。</p>\n</blockquote>\n<p>从一个新手程序员到一个老鸟，我们的编程水平都在不断增加。但是我们过去写的代码一直都在那里，但是我们一直都没有足够的勇气去动他们。因为我们知道如果我们一不小心改错了什么，就会导致一些意外的 Bug。这些 Bug 可能会对我们的编程生涯造成一些影响。</p>\n<a id=\"more\"></a>\n<p>而我们不知道这样做的后果，是因为我们没有对原来的代码进行测试。如果我们的代码都是经过测试的，那么我们在修改中出的错，都会在测试中加以体现。长此以往，没有人敢去修改这些代码。</p>\n<p>既然他在旧的系统中工作得很好，那么我们就没有理由去修改他们。当有新的需求出现时，我们就可以重新设计一个新的系统。</p>\n","excerpt":"<p>我们生活息息相关的很多软件里满是错误、脆弱，并且难以扩展，这就是我们说的“遗留代码”。</p>\n<p>相信你也经常看到某某网站的高架构之路，会发现其中一个很有趣的过程就是他们会把之前的架构抛弃掉。接着，他们又做了一个这样的系统，然后过些年这个系统又被重做了。究其原因，会发现这个架构是在几年前设计的。在几年前，他是非常好的架构。但是随着时间的演变，他还是几年前的架构。这是为什么呢？</p>\n<h3 id=\"遗留代码\"><a href=\"#遗留代码\" class=\"headerlink\" title=\"遗留代码\"></a>遗留代码</h3><p>什么是遗留代码？</p>\n<blockquote>\n<p>没有自动化测试的代码就是遗留代码，不管它是十年前写的，还是昨天写的。</p>\n</blockquote>\n<p>从一个新手程序员到一个老鸟，我们的编程水平都在不断增加。但是我们过去写的代码一直都在那里，但是我们一直都没有足够的勇气去动他们。因为我们知道如果我们一不小心改错了什么，就会导致一些意外的 Bug。这些 Bug 可能会对我们的编程生涯造成一些影响。</p>","more":"<p>而我们不知道这样做的后果，是因为我们没有对原来的代码进行测试。如果我们的代码都是经过测试的，那么我们在修改中出的错，都会在测试中加以体现。长此以往，没有人敢去修改这些代码。</p>\n<p>既然他在旧的系统中工作得很好，那么我们就没有理由去修改他们。当有新的需求出现时，我们就可以重新设计一个新的系统。</p>"},{"title":"如何修改遗留代码","date":"2016-05-10T15:45:08.000Z","_content":"\n> 即使是最训练有素的开发团队，也不能保证始终编写出清晰高效的代码。\n\n然而，如果我们不去尝试做一些改变，这些代码就会遗留下去——成为遗留代码，再次重构掉。即使说，重构系统是不可避免的一个过程，但是在这个过程中要是能抽象中领域特定的代码、语言也是件不错的事。\n\n### 修改遗留代码\n\nSo，如何开始修改代码？如《修改代码的艺术》一书所说，应该是下面的五个步骤：\n\n1. 代码修改点\n2. 找到测试点\n3. 打破依赖\n4. 编写测试\n5. 修改并重构\n\n<!-- more -->\n\n在有测试的情况下重构现有的代码才是安全的。而这些测试用例也是功能的体现，功能首先要得到保证了，然后才能保证一切都可以正常。不过，我更喜欢以下面三点概括他们：\n\n - 守: 找到测试点。守，即保证原有的功能是正确的。在这基础上，我们需要添加测试\n - 破: 打破依赖。会导致遗留代码的一个原因还有，原有代码的耦合度比较高。因此，我们需要去打破这些耦合，重新构建依赖。\n - 离: 修改并重构。\n\n不过，我想你只要有前面的那些步骤。你为什么还需要看这一章的内容呢？\n\n参考书籍： \n\n - **《修改代码的艺术》**\n - **《持续交付指南：修改代码的9条最佳实践》**\n","source":"_posts/7.1.2-change-code.md","raw":"title: 如何修改遗留代码\ndate: 2016-5-10 23:45:08\ntags:\n---\n\n> 即使是最训练有素的开发团队，也不能保证始终编写出清晰高效的代码。\n\n然而，如果我们不去尝试做一些改变，这些代码就会遗留下去——成为遗留代码，再次重构掉。即使说，重构系统是不可避免的一个过程，但是在这个过程中要是能抽象中领域特定的代码、语言也是件不错的事。\n\n### 修改遗留代码\n\nSo，如何开始修改代码？如《修改代码的艺术》一书所说，应该是下面的五个步骤：\n\n1. 代码修改点\n2. 找到测试点\n3. 打破依赖\n4. 编写测试\n5. 修改并重构\n\n<!-- more -->\n\n在有测试的情况下重构现有的代码才是安全的。而这些测试用例也是功能的体现，功能首先要得到保证了，然后才能保证一切都可以正常。不过，我更喜欢以下面三点概括他们：\n\n - 守: 找到测试点。守，即保证原有的功能是正确的。在这基础上，我们需要添加测试\n - 破: 打破依赖。会导致遗留代码的一个原因还有，原有代码的耦合度比较高。因此，我们需要去打破这些耦合，重新构建依赖。\n - 离: 修改并重构。\n\n不过，我想你只要有前面的那些步骤。你为什么还需要看这一章的内容呢？\n\n参考书籍： \n\n - **《修改代码的艺术》**\n - **《持续交付指南：修改代码的9条最佳实践》**\n","slug":"7.1.2-change-code","published":1,"updated":"2016-05-10T02:40:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuf7mppy0019tsiftvauk19s","content":"<blockquote>\n<p>即使是最训练有素的开发团队，也不能保证始终编写出清晰高效的代码。</p>\n</blockquote>\n<p>然而，如果我们不去尝试做一些改变，这些代码就会遗留下去——成为遗留代码，再次重构掉。即使说，重构系统是不可避免的一个过程，但是在这个过程中要是能抽象中领域特定的代码、语言也是件不错的事。</p>\n<h3 id=\"修改遗留代码\"><a href=\"#修改遗留代码\" class=\"headerlink\" title=\"修改遗留代码\"></a>修改遗留代码</h3><p>So，如何开始修改代码？如《修改代码的艺术》一书所说，应该是下面的五个步骤：</p>\n<ol>\n<li>代码修改点</li>\n<li>找到测试点</li>\n<li>打破依赖</li>\n<li>编写测试</li>\n<li>修改并重构</li>\n</ol>\n<a id=\"more\"></a>\n<p>在有测试的情况下重构现有的代码才是安全的。而这些测试用例也是功能的体现，功能首先要得到保证了，然后才能保证一切都可以正常。不过，我更喜欢以下面三点概括他们：</p>\n<ul>\n<li>守: 找到测试点。守，即保证原有的功能是正确的。在这基础上，我们需要添加测试</li>\n<li>破: 打破依赖。会导致遗留代码的一个原因还有，原有代码的耦合度比较高。因此，我们需要去打破这些耦合，重新构建依赖。</li>\n<li>离: 修改并重构。</li>\n</ul>\n<p>不过，我想你只要有前面的那些步骤。你为什么还需要看这一章的内容呢？</p>\n<p>参考书籍： </p>\n<ul>\n<li><strong>《修改代码的艺术》</strong></li>\n<li><strong>《持续交付指南：修改代码的9条最佳实践》</strong></li>\n</ul>\n","excerpt":"<blockquote>\n<p>即使是最训练有素的开发团队，也不能保证始终编写出清晰高效的代码。</p>\n</blockquote>\n<p>然而，如果我们不去尝试做一些改变，这些代码就会遗留下去——成为遗留代码，再次重构掉。即使说，重构系统是不可避免的一个过程，但是在这个过程中要是能抽象中领域特定的代码、语言也是件不错的事。</p>\n<h3 id=\"修改遗留代码\"><a href=\"#修改遗留代码\" class=\"headerlink\" title=\"修改遗留代码\"></a>修改遗留代码</h3><p>So，如何开始修改代码？如《修改代码的艺术》一书所说，应该是下面的五个步骤：</p>\n<ol>\n<li>代码修改点</li>\n<li>找到测试点</li>\n<li>打破依赖</li>\n<li>编写测试</li>\n<li>修改并重构</li>\n</ol>","more":"<p>在有测试的情况下重构现有的代码才是安全的。而这些测试用例也是功能的体现，功能首先要得到保证了，然后才能保证一切都可以正常。不过，我更喜欢以下面三点概括他们：</p>\n<ul>\n<li>守: 找到测试点。守，即保证原有的功能是正确的。在这基础上，我们需要添加测试</li>\n<li>破: 打破依赖。会导致遗留代码的一个原因还有，原有代码的耦合度比较高。因此，我们需要去打破这些耦合，重新构建依赖。</li>\n<li>离: 修改并重构。</li>\n</ul>\n<p>不过，我想你只要有前面的那些步骤。你为什么还需要看这一章的内容呢？</p>\n<p>参考书籍： </p>\n<ul>\n<li><strong>《修改代码的艺术》</strong></li>\n<li><strong>《持续交付指南：修改代码的9条最佳实践》</strong></li>\n</ul>"},{"title":"网站重构","date":"2016-05-11T13:45:08.000Z","_content":"\n> 网站重构应包含结构、行为、表现三层次的分离以及优化，行内分工优化，以及以技术与数据、人文为主导的交互优化等。\n\n从我所了解到的网站重构，它大概可以分为下面的几类：\n\n1. 速度优化\n2. 功能加强\n3. 模块重构\n\n下面就我们来看这三类的网站重构\n\n<!-- more -->\n\n### 速度优化\n\n通常来说对于速度的优化也包含在重构中\n\n - 压缩 JS、CSS、image 等前端资源\n - 程序的性能优化(如数据读写)\n - 采用 CDN 来加速资源加载\n - 对于 JS DOM 的优化\n - HTTP 服务器的文件缓存\n\n如对于压缩前端资源这一类的重构，不仅仅需要从代码层级来解决问题，也可以借由服务器缓存来解决问题。在这时候就需要去判断应该由哪个层级来做这样的事情——如果一件事可以简单地由机器来解决，但是由人来解决需要花费大量的时间，这时就应该交由机器来解决。而如果由人来解决是一个长期受期，并且成本比较低的事，那么就应该由人来解决。如我们只需要在我们的构建脚本中引入 minify 库就可以解决的事，那么应该交由人来做。\n\n如，采用 CDN、HTTP 服务器的文件缓存这一类应该交由机器来做。\n\n同时像程序性能优化、JS DOM 优化都应交由人来解决的事。特别是像程序性能优化，从长期来看可能是一件长期受益的事。当且仅当，我们遇到性能问题时，我们重构这部分代码才可能带来优势。如果我们的网站的访问量不是特别大，那么优化可能就是徒劳的。但是这种优化对于个人的成长还是挺有帮助的。\n\n### 功能加强\n\n一般来说功能加强，应该是由于需求的变动才引起对系统的重构需求：\n\n - 解耦复杂的模块 -> 微服务\n - 对缓存进行优化\n - 针对于内容创建或预留 API\n - 需要添加新的 API\n - 用新的语言、框架代替旧的框架(如 Scala, Node.js, React)\n\n### 模块重构\n\n深层次的网站重构应该考虑的方面\n\n - 减少代码间的耦合\n - 让代码保持弹性\n - 严格按规范编写代码\n - 设计可扩展的 API\n - 代替旧有的框架、语言\n - 增强用户体验\n","source":"_posts/7.2.1-refactor2.md","raw":"title: 网站重构\ndate: 2016-5-11 21:45:08\ntags:\n---\n\n> 网站重构应包含结构、行为、表现三层次的分离以及优化，行内分工优化，以及以技术与数据、人文为主导的交互优化等。\n\n从我所了解到的网站重构，它大概可以分为下面的几类：\n\n1. 速度优化\n2. 功能加强\n3. 模块重构\n\n下面就我们来看这三类的网站重构\n\n<!-- more -->\n\n### 速度优化\n\n通常来说对于速度的优化也包含在重构中\n\n - 压缩 JS、CSS、image 等前端资源\n - 程序的性能优化(如数据读写)\n - 采用 CDN 来加速资源加载\n - 对于 JS DOM 的优化\n - HTTP 服务器的文件缓存\n\n如对于压缩前端资源这一类的重构，不仅仅需要从代码层级来解决问题，也可以借由服务器缓存来解决问题。在这时候就需要去判断应该由哪个层级来做这样的事情——如果一件事可以简单地由机器来解决，但是由人来解决需要花费大量的时间，这时就应该交由机器来解决。而如果由人来解决是一个长期受期，并且成本比较低的事，那么就应该由人来解决。如我们只需要在我们的构建脚本中引入 minify 库就可以解决的事，那么应该交由人来做。\n\n如，采用 CDN、HTTP 服务器的文件缓存这一类应该交由机器来做。\n\n同时像程序性能优化、JS DOM 优化都应交由人来解决的事。特别是像程序性能优化，从长期来看可能是一件长期受益的事。当且仅当，我们遇到性能问题时，我们重构这部分代码才可能带来优势。如果我们的网站的访问量不是特别大，那么优化可能就是徒劳的。但是这种优化对于个人的成长还是挺有帮助的。\n\n### 功能加强\n\n一般来说功能加强，应该是由于需求的变动才引起对系统的重构需求：\n\n - 解耦复杂的模块 -> 微服务\n - 对缓存进行优化\n - 针对于内容创建或预留 API\n - 需要添加新的 API\n - 用新的语言、框架代替旧的框架(如 Scala, Node.js, React)\n\n### 模块重构\n\n深层次的网站重构应该考虑的方面\n\n - 减少代码间的耦合\n - 让代码保持弹性\n - 严格按规范编写代码\n - 设计可扩展的 API\n - 代替旧有的框架、语言\n - 增强用户体验\n","slug":"7.2.1-refactor2","published":1,"updated":"2016-05-11T02:23:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuf7mpq6001atsifj6o2ktf7","content":"<blockquote>\n<p>网站重构应包含结构、行为、表现三层次的分离以及优化，行内分工优化，以及以技术与数据、人文为主导的交互优化等。</p>\n</blockquote>\n<p>从我所了解到的网站重构，它大概可以分为下面的几类：</p>\n<ol>\n<li>速度优化</li>\n<li>功能加强</li>\n<li>模块重构</li>\n</ol>\n<p>下面就我们来看这三类的网站重构</p>\n<a id=\"more\"></a>\n<h3 id=\"速度优化\"><a href=\"#速度优化\" class=\"headerlink\" title=\"速度优化\"></a>速度优化</h3><p>通常来说对于速度的优化也包含在重构中</p>\n<ul>\n<li>压缩 JS、CSS、image 等前端资源</li>\n<li>程序的性能优化(如数据读写)</li>\n<li>采用 CDN 来加速资源加载</li>\n<li>对于 JS DOM 的优化</li>\n<li>HTTP 服务器的文件缓存</li>\n</ul>\n<p>如对于压缩前端资源这一类的重构，不仅仅需要从代码层级来解决问题，也可以借由服务器缓存来解决问题。在这时候就需要去判断应该由哪个层级来做这样的事情——如果一件事可以简单地由机器来解决，但是由人来解决需要花费大量的时间，这时就应该交由机器来解决。而如果由人来解决是一个长期受期，并且成本比较低的事，那么就应该由人来解决。如我们只需要在我们的构建脚本中引入 minify 库就可以解决的事，那么应该交由人来做。</p>\n<p>如，采用 CDN、HTTP 服务器的文件缓存这一类应该交由机器来做。</p>\n<p>同时像程序性能优化、JS DOM 优化都应交由人来解决的事。特别是像程序性能优化，从长期来看可能是一件长期受益的事。当且仅当，我们遇到性能问题时，我们重构这部分代码才可能带来优势。如果我们的网站的访问量不是特别大，那么优化可能就是徒劳的。但是这种优化对于个人的成长还是挺有帮助的。</p>\n<h3 id=\"功能加强\"><a href=\"#功能加强\" class=\"headerlink\" title=\"功能加强\"></a>功能加强</h3><p>一般来说功能加强，应该是由于需求的变动才引起对系统的重构需求：</p>\n<ul>\n<li>解耦复杂的模块 -&gt; 微服务</li>\n<li>对缓存进行优化</li>\n<li>针对于内容创建或预留 API</li>\n<li>需要添加新的 API</li>\n<li>用新的语言、框架代替旧的框架(如 Scala, Node.js, React)</li>\n</ul>\n<h3 id=\"模块重构\"><a href=\"#模块重构\" class=\"headerlink\" title=\"模块重构\"></a>模块重构</h3><p>深层次的网站重构应该考虑的方面</p>\n<ul>\n<li>减少代码间的耦合</li>\n<li>让代码保持弹性</li>\n<li>严格按规范编写代码</li>\n<li>设计可扩展的 API</li>\n<li>代替旧有的框架、语言</li>\n<li>增强用户体验</li>\n</ul>\n","excerpt":"<blockquote>\n<p>网站重构应包含结构、行为、表现三层次的分离以及优化，行内分工优化，以及以技术与数据、人文为主导的交互优化等。</p>\n</blockquote>\n<p>从我所了解到的网站重构，它大概可以分为下面的几类：</p>\n<ol>\n<li>速度优化</li>\n<li>功能加强</li>\n<li>模块重构</li>\n</ol>\n<p>下面就我们来看这三类的网站重构</p>","more":"<h3 id=\"速度优化\"><a href=\"#速度优化\" class=\"headerlink\" title=\"速度优化\"></a>速度优化</h3><p>通常来说对于速度的优化也包含在重构中</p>\n<ul>\n<li>压缩 JS、CSS、image 等前端资源</li>\n<li>程序的性能优化(如数据读写)</li>\n<li>采用 CDN 来加速资源加载</li>\n<li>对于 JS DOM 的优化</li>\n<li>HTTP 服务器的文件缓存</li>\n</ul>\n<p>如对于压缩前端资源这一类的重构，不仅仅需要从代码层级来解决问题，也可以借由服务器缓存来解决问题。在这时候就需要去判断应该由哪个层级来做这样的事情——如果一件事可以简单地由机器来解决，但是由人来解决需要花费大量的时间，这时就应该交由机器来解决。而如果由人来解决是一个长期受期，并且成本比较低的事，那么就应该由人来解决。如我们只需要在我们的构建脚本中引入 minify 库就可以解决的事，那么应该交由人来做。</p>\n<p>如，采用 CDN、HTTP 服务器的文件缓存这一类应该交由机器来做。</p>\n<p>同时像程序性能优化、JS DOM 优化都应交由人来解决的事。特别是像程序性能优化，从长期来看可能是一件长期受益的事。当且仅当，我们遇到性能问题时，我们重构这部分代码才可能带来优势。如果我们的网站的访问量不是特别大，那么优化可能就是徒劳的。但是这种优化对于个人的成长还是挺有帮助的。</p>\n<h3 id=\"功能加强\"><a href=\"#功能加强\" class=\"headerlink\" title=\"功能加强\"></a>功能加强</h3><p>一般来说功能加强，应该是由于需求的变动才引起对系统的重构需求：</p>\n<ul>\n<li>解耦复杂的模块 -&gt; 微服务</li>\n<li>对缓存进行优化</li>\n<li>针对于内容创建或预留 API</li>\n<li>需要添加新的 API</li>\n<li>用新的语言、框架代替旧的框架(如 Scala, Node.js, React)</li>\n</ul>\n<h3 id=\"模块重构\"><a href=\"#模块重构\" class=\"headerlink\" title=\"模块重构\"></a>模块重构</h3><p>深层次的网站重构应该考虑的方面</p>\n<ul>\n<li>减少代码间的耦合</li>\n<li>让代码保持弹性</li>\n<li>严格按规范编写代码</li>\n<li>设计可扩展的 API</li>\n<li>代替旧有的框架、语言</li>\n<li>增强用户体验</li>\n</ul>"},{"title":"持续学习","date":"2016-05-09T15:45:08.000Z","_content":"\n如果说``持续交付则是一种对卓越的追求``,那么``持续学习应该就是追求软件卓越``。\n如果说``持续集成是一种软件开发实践``,那么对于技术人员来说——``持续写作应该就是持续学习的实践``\n\n生活总会遇到压力，来自工作上的也好，来自对于技术上的兴趣也罢，我们需要持续来断地学习。没有一直能立于不败的方法，在传说中的武林上也是如此。\n\n对于持续学习来说，通常会有以下的\n\n - 阅读\n - 编程\n - 写作\n\n有意思的是持续学习有额外的好处便是\n\n - 持续学习可以降低危机感\n\n<!-- more -->\n\n### 持续阅读\n\n看过如此多的金庸、古龙小说我们都会发现有那么多的人都在追求武功上的卓越，有的走火入魔了，有的铤而走险杀人放火，暂且不讨论这些。我们简单的以大部分的主角为例，大部分的主角自小就练得一手好武艺，少部分除外，而他们通过会比前辈厉害，只是因为我们看了前人的说，现在也是如此。\n\n**20 年前要建一个淘宝怕是没有两三个月十几个是不行的，但是今天要建出原来淘宝的模样，也许一个人单枪匹马一两天就能搞定了，还能上线。**\n\n有意思的是武林小说的武林秘籍少之又少，正常情况下能学到的或许就是教科书上的种种。而现在，如果我们要学习 ``UX`` 的话，我们很容易可以从亚马逊上拿到一个书单，又或者是某个博客里面列举出来的:《用户体验要素》、《交互设计沉思录》、《怦然心动——情感化交互设计指南》等等。\n\n我们可以更加方便快捷地获取我们所需要的知识从书上、网上等等。\n\n``阅读更多的书籍是持续学习的基础。``\n\n总会听到有些人在工作之余看了更多的书，在某种情况下来说是有意义的。我们需要不断地去阅读。\n\n### 持续编程\n\n编程算是一个开发人员工作时一直在做的，而对于工作之后来说，到底还会有多少人继续编程就是一个有意思的问题。\n\n对于一个有兴趣的程序员来说，工作和兴趣都是分开的，可以将工作视之为无味的东西，但是休息时间呢？可以用来创造自己觉得有意义的东西，可以用来认识更多志同道合的人，对于不满现状的人更是如此，或许为自己创造了更多的机会。\n\n如果工作之后编程，不应该是为了工作而编程，应该为了兴趣而编程，或者其他。如果没有时间，是不是因为加班了，对于刚开始养家糊口来说加班是没有办法的，但是如果不是的话，又没时间，是不是……\n\n### 持续写作\n\n对于一个技能人员来说，写作可能不是一件有意思的事，但是也不是一件很难的事，没有必要将大量的文字用文本表示。写给其他技术人员看的，有时候更多的是代码、思路、图。写作对于学习的意思怕是有一大把，写作是最好的输入，也是最好的输出。你需要为你的这篇文章\n\n - 去参考更多的资料\n - 更深入的学习\n - 更多的时间付出\n\n然而这些都是有价值的，你也许可以从中得到\n\n - 一份工作\n - 一些志同道合的朋友\n - 一个博客\n - 一种习惯\n - 还有人生\n - 或许还能写书。\n\n对于我来说，更多的是对于``读者``和 ``SEO`` 的兴趣，SEO 是一门艺术。\n","source":"_posts/6.3.0-cl.md","raw":"title: 持续学习\ndate: 2016-5-9 23:45:08\ntags:\n---\n\n如果说``持续交付则是一种对卓越的追求``,那么``持续学习应该就是追求软件卓越``。\n如果说``持续集成是一种软件开发实践``,那么对于技术人员来说——``持续写作应该就是持续学习的实践``\n\n生活总会遇到压力，来自工作上的也好，来自对于技术上的兴趣也罢，我们需要持续来断地学习。没有一直能立于不败的方法，在传说中的武林上也是如此。\n\n对于持续学习来说，通常会有以下的\n\n - 阅读\n - 编程\n - 写作\n\n有意思的是持续学习有额外的好处便是\n\n - 持续学习可以降低危机感\n\n<!-- more -->\n\n### 持续阅读\n\n看过如此多的金庸、古龙小说我们都会发现有那么多的人都在追求武功上的卓越，有的走火入魔了，有的铤而走险杀人放火，暂且不讨论这些。我们简单的以大部分的主角为例，大部分的主角自小就练得一手好武艺，少部分除外，而他们通过会比前辈厉害，只是因为我们看了前人的说，现在也是如此。\n\n**20 年前要建一个淘宝怕是没有两三个月十几个是不行的，但是今天要建出原来淘宝的模样，也许一个人单枪匹马一两天就能搞定了，还能上线。**\n\n有意思的是武林小说的武林秘籍少之又少，正常情况下能学到的或许就是教科书上的种种。而现在，如果我们要学习 ``UX`` 的话，我们很容易可以从亚马逊上拿到一个书单，又或者是某个博客里面列举出来的:《用户体验要素》、《交互设计沉思录》、《怦然心动——情感化交互设计指南》等等。\n\n我们可以更加方便快捷地获取我们所需要的知识从书上、网上等等。\n\n``阅读更多的书籍是持续学习的基础。``\n\n总会听到有些人在工作之余看了更多的书，在某种情况下来说是有意义的。我们需要不断地去阅读。\n\n### 持续编程\n\n编程算是一个开发人员工作时一直在做的，而对于工作之后来说，到底还会有多少人继续编程就是一个有意思的问题。\n\n对于一个有兴趣的程序员来说，工作和兴趣都是分开的，可以将工作视之为无味的东西，但是休息时间呢？可以用来创造自己觉得有意义的东西，可以用来认识更多志同道合的人，对于不满现状的人更是如此，或许为自己创造了更多的机会。\n\n如果工作之后编程，不应该是为了工作而编程，应该为了兴趣而编程，或者其他。如果没有时间，是不是因为加班了，对于刚开始养家糊口来说加班是没有办法的，但是如果不是的话，又没时间，是不是……\n\n### 持续写作\n\n对于一个技能人员来说，写作可能不是一件有意思的事，但是也不是一件很难的事，没有必要将大量的文字用文本表示。写给其他技术人员看的，有时候更多的是代码、思路、图。写作对于学习的意思怕是有一大把，写作是最好的输入，也是最好的输出。你需要为你的这篇文章\n\n - 去参考更多的资料\n - 更深入的学习\n - 更多的时间付出\n\n然而这些都是有价值的，你也许可以从中得到\n\n - 一份工作\n - 一些志同道合的朋友\n - 一个博客\n - 一种习惯\n - 还有人生\n - 或许还能写书。\n\n对于我来说，更多的是对于``读者``和 ``SEO`` 的兴趣，SEO 是一门艺术。\n","slug":"6.3.0-cl","published":1,"updated":"2016-05-09T03:45:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuf7mpqa001btsifxvwnigmq","content":"<p>如果说<code>持续交付则是一种对卓越的追求</code>,那么<code>持续学习应该就是追求软件卓越</code>。<br>如果说<code>持续集成是一种软件开发实践</code>,那么对于技术人员来说——<code>持续写作应该就是持续学习的实践</code></p>\n<p>生活总会遇到压力，来自工作上的也好，来自对于技术上的兴趣也罢，我们需要持续来断地学习。没有一直能立于不败的方法，在传说中的武林上也是如此。</p>\n<p>对于持续学习来说，通常会有以下的</p>\n<ul>\n<li>阅读</li>\n<li>编程</li>\n<li>写作</li>\n</ul>\n<p>有意思的是持续学习有额外的好处便是</p>\n<ul>\n<li>持续学习可以降低危机感</li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"持续阅读\"><a href=\"#持续阅读\" class=\"headerlink\" title=\"持续阅读\"></a>持续阅读</h3><p>看过如此多的金庸、古龙小说我们都会发现有那么多的人都在追求武功上的卓越，有的走火入魔了，有的铤而走险杀人放火，暂且不讨论这些。我们简单的以大部分的主角为例，大部分的主角自小就练得一手好武艺，少部分除外，而他们通过会比前辈厉害，只是因为我们看了前人的说，现在也是如此。</p>\n<p><strong>20 年前要建一个淘宝怕是没有两三个月十几个是不行的，但是今天要建出原来淘宝的模样，也许一个人单枪匹马一两天就能搞定了，还能上线。</strong></p>\n<p>有意思的是武林小说的武林秘籍少之又少，正常情况下能学到的或许就是教科书上的种种。而现在，如果我们要学习 <code>UX</code> 的话，我们很容易可以从亚马逊上拿到一个书单，又或者是某个博客里面列举出来的:《用户体验要素》、《交互设计沉思录》、《怦然心动——情感化交互设计指南》等等。</p>\n<p>我们可以更加方便快捷地获取我们所需要的知识从书上、网上等等。</p>\n<p><code>阅读更多的书籍是持续学习的基础。</code></p>\n<p>总会听到有些人在工作之余看了更多的书，在某种情况下来说是有意义的。我们需要不断地去阅读。</p>\n<h3 id=\"持续编程\"><a href=\"#持续编程\" class=\"headerlink\" title=\"持续编程\"></a>持续编程</h3><p>编程算是一个开发人员工作时一直在做的，而对于工作之后来说，到底还会有多少人继续编程就是一个有意思的问题。</p>\n<p>对于一个有兴趣的程序员来说，工作和兴趣都是分开的，可以将工作视之为无味的东西，但是休息时间呢？可以用来创造自己觉得有意义的东西，可以用来认识更多志同道合的人，对于不满现状的人更是如此，或许为自己创造了更多的机会。</p>\n<p>如果工作之后编程，不应该是为了工作而编程，应该为了兴趣而编程，或者其他。如果没有时间，是不是因为加班了，对于刚开始养家糊口来说加班是没有办法的，但是如果不是的话，又没时间，是不是……</p>\n<h3 id=\"持续写作\"><a href=\"#持续写作\" class=\"headerlink\" title=\"持续写作\"></a>持续写作</h3><p>对于一个技能人员来说，写作可能不是一件有意思的事，但是也不是一件很难的事，没有必要将大量的文字用文本表示。写给其他技术人员看的，有时候更多的是代码、思路、图。写作对于学习的意思怕是有一大把，写作是最好的输入，也是最好的输出。你需要为你的这篇文章</p>\n<ul>\n<li>去参考更多的资料</li>\n<li>更深入的学习</li>\n<li>更多的时间付出</li>\n</ul>\n<p>然而这些都是有价值的，你也许可以从中得到</p>\n<ul>\n<li>一份工作</li>\n<li>一些志同道合的朋友</li>\n<li>一个博客</li>\n<li>一种习惯</li>\n<li>还有人生</li>\n<li>或许还能写书。</li>\n</ul>\n<p>对于我来说，更多的是对于<code>读者</code>和 <code>SEO</code> 的兴趣，SEO 是一门艺术。</p>\n","excerpt":"<p>如果说<code>持续交付则是一种对卓越的追求</code>,那么<code>持续学习应该就是追求软件卓越</code>。<br>如果说<code>持续集成是一种软件开发实践</code>,那么对于技术人员来说——<code>持续写作应该就是持续学习的实践</code></p>\n<p>生活总会遇到压力，来自工作上的也好，来自对于技术上的兴趣也罢，我们需要持续来断地学习。没有一直能立于不败的方法，在传说中的武林上也是如此。</p>\n<p>对于持续学习来说，通常会有以下的</p>\n<ul>\n<li>阅读</li>\n<li>编程</li>\n<li>写作</li>\n</ul>\n<p>有意思的是持续学习有额外的好处便是</p>\n<ul>\n<li>持续学习可以降低危机感</li>\n</ul>","more":"<h3 id=\"持续阅读\"><a href=\"#持续阅读\" class=\"headerlink\" title=\"持续阅读\"></a>持续阅读</h3><p>看过如此多的金庸、古龙小说我们都会发现有那么多的人都在追求武功上的卓越，有的走火入魔了，有的铤而走险杀人放火，暂且不讨论这些。我们简单的以大部分的主角为例，大部分的主角自小就练得一手好武艺，少部分除外，而他们通过会比前辈厉害，只是因为我们看了前人的说，现在也是如此。</p>\n<p><strong>20 年前要建一个淘宝怕是没有两三个月十几个是不行的，但是今天要建出原来淘宝的模样，也许一个人单枪匹马一两天就能搞定了，还能上线。</strong></p>\n<p>有意思的是武林小说的武林秘籍少之又少，正常情况下能学到的或许就是教科书上的种种。而现在，如果我们要学习 <code>UX</code> 的话，我们很容易可以从亚马逊上拿到一个书单，又或者是某个博客里面列举出来的:《用户体验要素》、《交互设计沉思录》、《怦然心动——情感化交互设计指南》等等。</p>\n<p>我们可以更加方便快捷地获取我们所需要的知识从书上、网上等等。</p>\n<p><code>阅读更多的书籍是持续学习的基础。</code></p>\n<p>总会听到有些人在工作之余看了更多的书，在某种情况下来说是有意义的。我们需要不断地去阅读。</p>\n<h3 id=\"持续编程\"><a href=\"#持续编程\" class=\"headerlink\" title=\"持续编程\"></a>持续编程</h3><p>编程算是一个开发人员工作时一直在做的，而对于工作之后来说，到底还会有多少人继续编程就是一个有意思的问题。</p>\n<p>对于一个有兴趣的程序员来说，工作和兴趣都是分开的，可以将工作视之为无味的东西，但是休息时间呢？可以用来创造自己觉得有意义的东西，可以用来认识更多志同道合的人，对于不满现状的人更是如此，或许为自己创造了更多的机会。</p>\n<p>如果工作之后编程，不应该是为了工作而编程，应该为了兴趣而编程，或者其他。如果没有时间，是不是因为加班了，对于刚开始养家糊口来说加班是没有办法的，但是如果不是的话，又没时间，是不是……</p>\n<h3 id=\"持续写作\"><a href=\"#持续写作\" class=\"headerlink\" title=\"持续写作\"></a>持续写作</h3><p>对于一个技能人员来说，写作可能不是一件有意思的事，但是也不是一件很难的事，没有必要将大量的文字用文本表示。写给其他技术人员看的，有时候更多的是代码、思路、图。写作对于学习的意思怕是有一大把，写作是最好的输入，也是最好的输出。你需要为你的这篇文章</p>\n<ul>\n<li>去参考更多的资料</li>\n<li>更深入的学习</li>\n<li>更多的时间付出</li>\n</ul>\n<p>然而这些都是有价值的，你也许可以从中得到</p>\n<ul>\n<li>一份工作</li>\n<li>一些志同道合的朋友</li>\n<li>一个博客</li>\n<li>一种习惯</li>\n<li>还有人生</li>\n<li>或许还能写书。</li>\n</ul>\n<p>对于我来说，更多的是对于<code>读者</code>和 <code>SEO</code> 的兴趣，SEO 是一门艺术。</p>"},{"title":"Retro","date":"2016-05-11T14:45:08.000Z","_content":"\nRetro，又可以称为回顾，它的目的是对团队的激励、改进。它的模式的特点就是让我们更关注于 Less Well，即不好的地方。当我们无法变得更好的时候，它可以帮助我们反观团队自身，即不要让现状变得更差，避免让破窗效应[^破窗]难以发生。\n\n在敏捷团队里，Retro 通常会发生一个迭代的结束与下一个迭代的开始之间，这看上去就是我们的除旧迎新。相信很多人都会对自我进行总结，随后改进。而 Retro 便是对团队进行改进，即发生了一些什么不好的事，而这些事可以变好，那么我们就应该对此进行改进。\n\nRetro 是以整个团队为核心去考虑问题的，通常来说没有理由以个人为对象。因为敏捷回顾有一个最高指导原则，即：\n\n> 无论我们发现了什么，考虑到当时的已知情况、个人的技术水平和能力、可用的资源，以及手上的状况，我们理解并坚信：每个人对自己的工作都已全力以赴。\n\n下面就让我们来看看在一个团队里是如何 Retro 的。\n\n<!-- more -->\n\n### Retro 的过程\n\n它不仅仅可以帮助我们发现团队里的问题，也可以集思广益的寻找出一些合适的解决方案。Retro 的过程和我们之前说的数据分析是差不多的，如下图所示：\n\n![Retro 流程](http://growth.phodal.com/assets/article/chapter8/retro-feature.jpg)\n\n即：\n\n1. 设定会议目标。在会议最开始的时候我们就应该对会议的内容达成一种共识，我们要回顾的主题是啥，我们要回顾哪些内容。如果是一般性的迭代 Retro，那么我们的会议主题就很明显了。如果是针对某一个特定项目的 Retro，那么主题也很明显。\n2. Retro 的回顾。即回顾上一个 Retro 会议的 Action 情况，并进行一个简单的小结。\n3. 收集数据。收集数据需要依赖于我们收集数据的模式，要下面将会说到的四种基本维度，或者是雷达图等等。不同的收集数据的形式有不同的特别，团队里的每个人都应该好好去参与。\n4. 激发灵感。当我们寻找到团队中一个值得去庆祝的事，或者一个出了问题的事，我们就应该对这个问题进行讨论。并且对其展开了解、调查，让大家进一步看到问题，看到问题的根源。\n5. 决定做什么。现在我们已经做了一系列的事，最重要的来了，就是决定我们去做什么。我们应该对之前的问题做出怎样的改进。\n6. 总结和收尾。记录会议成果，更新文档等等。\n\n### 三个维度\n\n以我们为例，我们以下面的三个维度去进行 Retro:\n\n1. Well.\n2. Less Well.\n3. Suggestion\n\n当然最后还会有一个Action：\n\n1. Action\n\n该模式的特点是会让我们更多的关注 Less Well，关注我们做的不好的那些。\n\n![Retro](http://growth.phodal.com/assets/article/chapter8/happy-retro.jpg)\n\n**Well**。我们在 Well 里记录一些让我们开心的事，如最近天气好、迭代及时完成、没有加班等等，这些事从理论上来说应该继续保持（KEEP）下去。\n\n**Less Well**。关注于在这个迭代的过程中，发生了一些什么不愉快的事。一般来说，我们就会对 Less Well 加以细致的讨论，找出问题的根源，并试图找到一个解决方案。换句话来说，就是改变（CHANGE)。\n\n**Suggestion/Puzzle**。如果我们可以直接找到一些建议，那么我们就可以直接提出来。并且如果我们对当前团队里的一些事情，有一些困惑那么也应该及早的提出来。\n\n**Action**。当我们对一些事情有定论的时候，我们就会提出相应的 Action。这些 Action 应该有相应的人去执行，并且由团队来追踪。\n\n[^破窗]: 以一幢有少许破窗的建筑为例，如果那些窗不被修理好，可能将会有破坏者破坏更多的窗户。最终他们甚至会闯入建筑内，如果发现无人居住，也许就在那里定居或者纵火。又或想像一条人行道有些许纸屑，如果无人清理，不久后就会有更多垃圾，最终人们会视为理所当然地将垃圾顺手丢弃在地上。因此破窗理论强调着力打击轻微罪行有助减少更严重罪案，应该以零容忍的态度面对罪案。\n","source":"_posts/8.1.2-retro.md","raw":"title: Retro\ndate: 2016-5-11 22:45:08\ntags:\n---\n\nRetro，又可以称为回顾，它的目的是对团队的激励、改进。它的模式的特点就是让我们更关注于 Less Well，即不好的地方。当我们无法变得更好的时候，它可以帮助我们反观团队自身，即不要让现状变得更差，避免让破窗效应[^破窗]难以发生。\n\n在敏捷团队里，Retro 通常会发生一个迭代的结束与下一个迭代的开始之间，这看上去就是我们的除旧迎新。相信很多人都会对自我进行总结，随后改进。而 Retro 便是对团队进行改进，即发生了一些什么不好的事，而这些事可以变好，那么我们就应该对此进行改进。\n\nRetro 是以整个团队为核心去考虑问题的，通常来说没有理由以个人为对象。因为敏捷回顾有一个最高指导原则，即：\n\n> 无论我们发现了什么，考虑到当时的已知情况、个人的技术水平和能力、可用的资源，以及手上的状况，我们理解并坚信：每个人对自己的工作都已全力以赴。\n\n下面就让我们来看看在一个团队里是如何 Retro 的。\n\n<!-- more -->\n\n### Retro 的过程\n\n它不仅仅可以帮助我们发现团队里的问题，也可以集思广益的寻找出一些合适的解决方案。Retro 的过程和我们之前说的数据分析是差不多的，如下图所示：\n\n![Retro 流程](http://growth.phodal.com/assets/article/chapter8/retro-feature.jpg)\n\n即：\n\n1. 设定会议目标。在会议最开始的时候我们就应该对会议的内容达成一种共识，我们要回顾的主题是啥，我们要回顾哪些内容。如果是一般性的迭代 Retro，那么我们的会议主题就很明显了。如果是针对某一个特定项目的 Retro，那么主题也很明显。\n2. Retro 的回顾。即回顾上一个 Retro 会议的 Action 情况，并进行一个简单的小结。\n3. 收集数据。收集数据需要依赖于我们收集数据的模式，要下面将会说到的四种基本维度，或者是雷达图等等。不同的收集数据的形式有不同的特别，团队里的每个人都应该好好去参与。\n4. 激发灵感。当我们寻找到团队中一个值得去庆祝的事，或者一个出了问题的事，我们就应该对这个问题进行讨论。并且对其展开了解、调查，让大家进一步看到问题，看到问题的根源。\n5. 决定做什么。现在我们已经做了一系列的事，最重要的来了，就是决定我们去做什么。我们应该对之前的问题做出怎样的改进。\n6. 总结和收尾。记录会议成果，更新文档等等。\n\n### 三个维度\n\n以我们为例，我们以下面的三个维度去进行 Retro:\n\n1. Well.\n2. Less Well.\n3. Suggestion\n\n当然最后还会有一个Action：\n\n1. Action\n\n该模式的特点是会让我们更多的关注 Less Well，关注我们做的不好的那些。\n\n![Retro](http://growth.phodal.com/assets/article/chapter8/happy-retro.jpg)\n\n**Well**。我们在 Well 里记录一些让我们开心的事，如最近天气好、迭代及时完成、没有加班等等，这些事从理论上来说应该继续保持（KEEP）下去。\n\n**Less Well**。关注于在这个迭代的过程中，发生了一些什么不愉快的事。一般来说，我们就会对 Less Well 加以细致的讨论，找出问题的根源，并试图找到一个解决方案。换句话来说，就是改变（CHANGE)。\n\n**Suggestion/Puzzle**。如果我们可以直接找到一些建议，那么我们就可以直接提出来。并且如果我们对当前团队里的一些事情，有一些困惑那么也应该及早的提出来。\n\n**Action**。当我们对一些事情有定论的时候，我们就会提出相应的 Action。这些 Action 应该有相应的人去执行，并且由团队来追踪。\n\n[^破窗]: 以一幢有少许破窗的建筑为例，如果那些窗不被修理好，可能将会有破坏者破坏更多的窗户。最终他们甚至会闯入建筑内，如果发现无人居住，也许就在那里定居或者纵火。又或想像一条人行道有些许纸屑，如果无人清理，不久后就会有更多垃圾，最终人们会视为理所当然地将垃圾顺手丢弃在地上。因此破窗理论强调着力打击轻微罪行有助减少更严重罪案，应该以零容忍的态度面对罪案。\n","slug":"8.1.2-retro","published":1,"updated":"2016-05-11T02:30:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuf7mpqc001ctsifmqevtcqj","content":"<p>Retro，又可以称为回顾，它的目的是对团队的激励、改进。它的模式的特点就是让我们更关注于 Less Well，即不好的地方。当我们无法变得更好的时候，它可以帮助我们反观团队自身，即不要让现状变得更差，避免让破窗效应<a href=\"以一幢有少许破窗的建筑为例，如果那些窗不被修理好，可能将会有破坏者破坏更多的窗户。最终他们甚至会闯入建筑内，如果发现无人居住，也许就在那里定居或者纵火。又或想像一条人行道有些许纸屑，如果无人清理，不久后就会有更多垃圾，最终人们会视为理所当然地将垃圾顺手丢弃在地上。因此破窗理论强调着力打击轻微罪行有助减少更严重罪案，应该以零容忍的态度面对罪案。\">^破窗</a>难以发生。</p>\n<p>在敏捷团队里，Retro 通常会发生一个迭代的结束与下一个迭代的开始之间，这看上去就是我们的除旧迎新。相信很多人都会对自我进行总结，随后改进。而 Retro 便是对团队进行改进，即发生了一些什么不好的事，而这些事可以变好，那么我们就应该对此进行改进。</p>\n<p>Retro 是以整个团队为核心去考虑问题的，通常来说没有理由以个人为对象。因为敏捷回顾有一个最高指导原则，即：</p>\n<blockquote>\n<p>无论我们发现了什么，考虑到当时的已知情况、个人的技术水平和能力、可用的资源，以及手上的状况，我们理解并坚信：每个人对自己的工作都已全力以赴。</p>\n</blockquote>\n<p>下面就让我们来看看在一个团队里是如何 Retro 的。</p>\n<a id=\"more\"></a>\n<h3 id=\"Retro-的过程\"><a href=\"#Retro-的过程\" class=\"headerlink\" title=\"Retro 的过程\"></a>Retro 的过程</h3><p>它不仅仅可以帮助我们发现团队里的问题，也可以集思广益的寻找出一些合适的解决方案。Retro 的过程和我们之前说的数据分析是差不多的，如下图所示：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter8/retro-feature.jpg\" alt=\"Retro 流程\"></p>\n<p>即：</p>\n<ol>\n<li>设定会议目标。在会议最开始的时候我们就应该对会议的内容达成一种共识，我们要回顾的主题是啥，我们要回顾哪些内容。如果是一般性的迭代 Retro，那么我们的会议主题就很明显了。如果是针对某一个特定项目的 Retro，那么主题也很明显。</li>\n<li>Retro 的回顾。即回顾上一个 Retro 会议的 Action 情况，并进行一个简单的小结。</li>\n<li>收集数据。收集数据需要依赖于我们收集数据的模式，要下面将会说到的四种基本维度，或者是雷达图等等。不同的收集数据的形式有不同的特别，团队里的每个人都应该好好去参与。</li>\n<li>激发灵感。当我们寻找到团队中一个值得去庆祝的事，或者一个出了问题的事，我们就应该对这个问题进行讨论。并且对其展开了解、调查，让大家进一步看到问题，看到问题的根源。</li>\n<li>决定做什么。现在我们已经做了一系列的事，最重要的来了，就是决定我们去做什么。我们应该对之前的问题做出怎样的改进。</li>\n<li>总结和收尾。记录会议成果，更新文档等等。</li>\n</ol>\n<h3 id=\"三个维度\"><a href=\"#三个维度\" class=\"headerlink\" title=\"三个维度\"></a>三个维度</h3><p>以我们为例，我们以下面的三个维度去进行 Retro:</p>\n<ol>\n<li>Well.</li>\n<li>Less Well.</li>\n<li>Suggestion</li>\n</ol>\n<p>当然最后还会有一个Action：</p>\n<ol>\n<li>Action</li>\n</ol>\n<p>该模式的特点是会让我们更多的关注 Less Well，关注我们做的不好的那些。</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter8/happy-retro.jpg\" alt=\"Retro\"></p>\n<p><strong>Well</strong>。我们在 Well 里记录一些让我们开心的事，如最近天气好、迭代及时完成、没有加班等等，这些事从理论上来说应该继续保持（KEEP）下去。</p>\n<p><strong>Less Well</strong>。关注于在这个迭代的过程中，发生了一些什么不愉快的事。一般来说，我们就会对 Less Well 加以细致的讨论，找出问题的根源，并试图找到一个解决方案。换句话来说，就是改变（CHANGE)。</p>\n<p><strong>Suggestion/Puzzle</strong>。如果我们可以直接找到一些建议，那么我们就可以直接提出来。并且如果我们对当前团队里的一些事情，有一些困惑那么也应该及早的提出来。</p>\n<p><strong>Action</strong>。当我们对一些事情有定论的时候，我们就会提出相应的 Action。这些 Action 应该有相应的人去执行，并且由团队来追踪。</p>\n","excerpt":"<p>Retro，又可以称为回顾，它的目的是对团队的激励、改进。它的模式的特点就是让我们更关注于 Less Well，即不好的地方。当我们无法变得更好的时候，它可以帮助我们反观团队自身，即不要让现状变得更差，避免让破窗效应<a href=\"以一幢有少许破窗的建筑为例，如果那些窗不被修理好，可能将会有破坏者破坏更多的窗户。最终他们甚至会闯入建筑内，如果发现无人居住，也许就在那里定居或者纵火。又或想像一条人行道有些许纸屑，如果无人清理，不久后就会有更多垃圾，最终人们会视为理所当然地将垃圾顺手丢弃在地上。因此破窗理论强调着力打击轻微罪行有助减少更严重罪案，应该以零容忍的态度面对罪案。\">^破窗</a>难以发生。</p>\n<p>在敏捷团队里，Retro 通常会发生一个迭代的结束与下一个迭代的开始之间，这看上去就是我们的除旧迎新。相信很多人都会对自我进行总结，随后改进。而 Retro 便是对团队进行改进，即发生了一些什么不好的事，而这些事可以变好，那么我们就应该对此进行改进。</p>\n<p>Retro 是以整个团队为核心去考虑问题的，通常来说没有理由以个人为对象。因为敏捷回顾有一个最高指导原则，即：</p>\n<blockquote>\n<p>无论我们发现了什么，考虑到当时的已知情况、个人的技术水平和能力、可用的资源，以及手上的状况，我们理解并坚信：每个人对自己的工作都已全力以赴。</p>\n</blockquote>\n<p>下面就让我们来看看在一个团队里是如何 Retro 的。</p>","more":"<h3 id=\"Retro-的过程\"><a href=\"#Retro-的过程\" class=\"headerlink\" title=\"Retro 的过程\"></a>Retro 的过程</h3><p>它不仅仅可以帮助我们发现团队里的问题，也可以集思广益的寻找出一些合适的解决方案。Retro 的过程和我们之前说的数据分析是差不多的，如下图所示：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter8/retro-feature.jpg\" alt=\"Retro 流程\"></p>\n<p>即：</p>\n<ol>\n<li>设定会议目标。在会议最开始的时候我们就应该对会议的内容达成一种共识，我们要回顾的主题是啥，我们要回顾哪些内容。如果是一般性的迭代 Retro，那么我们的会议主题就很明显了。如果是针对某一个特定项目的 Retro，那么主题也很明显。</li>\n<li>Retro 的回顾。即回顾上一个 Retro 会议的 Action 情况，并进行一个简单的小结。</li>\n<li>收集数据。收集数据需要依赖于我们收集数据的模式，要下面将会说到的四种基本维度，或者是雷达图等等。不同的收集数据的形式有不同的特别，团队里的每个人都应该好好去参与。</li>\n<li>激发灵感。当我们寻找到团队中一个值得去庆祝的事，或者一个出了问题的事，我们就应该对这个问题进行讨论。并且对其展开了解、调查，让大家进一步看到问题，看到问题的根源。</li>\n<li>决定做什么。现在我们已经做了一系列的事，最重要的来了，就是决定我们去做什么。我们应该对之前的问题做出怎样的改进。</li>\n<li>总结和收尾。记录会议成果，更新文档等等。</li>\n</ol>\n<h3 id=\"三个维度\"><a href=\"#三个维度\" class=\"headerlink\" title=\"三个维度\"></a>三个维度</h3><p>以我们为例，我们以下面的三个维度去进行 Retro:</p>\n<ol>\n<li>Well.</li>\n<li>Less Well.</li>\n<li>Suggestion</li>\n</ol>\n<p>当然最后还会有一个Action：</p>\n<ol>\n<li>Action</li>\n</ol>\n<p>该模式的特点是会让我们更多的关注 Less Well，关注我们做的不好的那些。</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter8/happy-retro.jpg\" alt=\"Retro\"></p>\n<p><strong>Well</strong>。我们在 Well 里记录一些让我们开心的事，如最近天气好、迭代及时完成、没有加班等等，这些事从理论上来说应该继续保持（KEEP）下去。</p>\n<p><strong>Less Well</strong>。关注于在这个迭代的过程中，发生了一些什么不愉快的事。一般来说，我们就会对 Less Well 加以细致的讨论，找出问题的根源，并试图找到一个解决方案。换句话来说，就是改变（CHANGE)。</p>\n<p><strong>Suggestion/Puzzle</strong>。如果我们可以直接找到一些建议，那么我们就可以直接提出来。并且如果我们对当前团队里的一些事情，有一些困惑那么也应该及早的提出来。</p>\n<p><strong>Action</strong>。当我们对一些事情有定论的时候，我们就会提出相应的 Action。这些 Action 应该有相应的人去执行，并且由团队来追踪。</p>"},{"title":"浮现式设计","date":"2016-05-12T13:45:08.000Z","_content":"\n设计模式不是一开始就有的，好的软件也不是一开始就设计成现在这样的，好的设计亦是如此。\n\n导致我们重构现有系统的原因有很多，但是多数是因为原来的代码变得越来越不可读，并且重构的风险太大了。在实现业务逻辑的时候，我们快速地用代码实现，没有测试，没有好的设计。\n\n而下图算是最近两年来想要的一个答案：\n\n![浮现式设计](http://growth.phodal.com/assets/article/chapter8/emergent-design.jpg)\n\n浮现式设计是一种敏捷技术，强调在开发过程中不断演进。软件本身就不应该是一开始就设计好的，他需要经历一个演化的过程。\n\n<!-- more -->\n\n### 意图导向\n\n就和 Growth 一样在最开始的时候，我不知道我想要的是怎样的——我只有一个想法以及一些相对应的实践。接着我便动手开始做了，这是我的风格。不得不说这是结果导向编程，也是大部分软件开发采用的方法。\n\n所以在一开始的时候，我们就有了下面的代码：\n\n```javascript\nif (rating) {\n    $scope.showSkillMap = true;\n    skillFlareChild[skill.text] = [rating];\n\n    $scope.ratings = $scope.ratings + rating;\n    if (rating >= 0) {\n      $scope.learnedSkills.push({\n        skill: skill.text,\n        rating: rating\n      });\n    }\n\n    if ($scope.ratings > 250) {\n      $scope.isInfinite = true;\n    }\n  }\n```\n\n代码在不经意间充斥着各种 Code Smell:\n\n1. Magic Number\n2. 超长的类\n3. 等等\n\n### 重构\n\n还好我们在一开始的时候写了一些测试，这让我们可以有足够的可能性来重构代码，而使得其不至于变成遗留代码。而这也是我们推崇的一些基本实践：\n\n> 红 -> 绿 -> 重构\n\n测试是系统不至于腐烂的一个后勤保障，除此我们还需要保持对于 Code Smell 的嗅觉。如上代码：\n\n```javascript\nif ($scope.ratings > 250) {\n  $scope.isInfinite = true;\n}\n```\n\n上面代码中的“250”指的到底是？这样的数字怎么能保证别人一看代码就知道250到底是什么？\n\n如下的代码就好一些：\n\n```javascript\nvar MAX_SKILL_POINTS = 250;\nif ($scope.ratings > MAX_SKILL_POINTS) {\n  $scope.isInfinite = true;\n}\n```\n\n而在最开始的时候我们想不到这样的结果。最初我们的第一直觉都是一样的，然而只要我们保持着对 Code Smell 的警惕，情况就会发生更多的变化。\n\n重构是区分普通程序员和专业程序员的一个门槛，而这也是练习得来的一个结果。\n\n### 模式与演进\n\n如果你还懂得一些设计模式，那么想来，软件开发这件事就变得非常简单——我们只需要理解好需求即可。\n\n从一开始就使用模式，要么你是专家，要么你是在自寻苦恼。模式更多的是一些实现的总结，对于多数的实现来说，他们有着诸多的相似之处，他们可以使用相同的模式。\n\n而在需求变化的过程中，一个设计的模式本身也是在不断的改变。如果我们还固执于原有的模式，那么我们就会犯下一个又一个的错误。\n\n在适当的时候改变原有的模式，进行一些演进变显得更有意义一些。如果我们不能在适当的时候引进一些新的技术来，那么旧有的技术就会不断累积。这些技术债就会不断往下叠加，那么这个系统将会接近于崩塌。而我们在一开始所设定的一些业务逻辑，也会随着系统而逝去，这个公司似乎也要到尽头了。\n\n而如果我们可以不断地演进系统——抽象服务、拆分模块等等。业务在技术不断演进地过程中，得以保留下来。\n","source":"_posts/8.2.1-emergent-design.md","raw":"title: 浮现式设计\ndate: 2016-5-12 21:45:08\ntags:\n---\n\n设计模式不是一开始就有的，好的软件也不是一开始就设计成现在这样的，好的设计亦是如此。\n\n导致我们重构现有系统的原因有很多，但是多数是因为原来的代码变得越来越不可读，并且重构的风险太大了。在实现业务逻辑的时候，我们快速地用代码实现，没有测试，没有好的设计。\n\n而下图算是最近两年来想要的一个答案：\n\n![浮现式设计](http://growth.phodal.com/assets/article/chapter8/emergent-design.jpg)\n\n浮现式设计是一种敏捷技术，强调在开发过程中不断演进。软件本身就不应该是一开始就设计好的，他需要经历一个演化的过程。\n\n<!-- more -->\n\n### 意图导向\n\n就和 Growth 一样在最开始的时候，我不知道我想要的是怎样的——我只有一个想法以及一些相对应的实践。接着我便动手开始做了，这是我的风格。不得不说这是结果导向编程，也是大部分软件开发采用的方法。\n\n所以在一开始的时候，我们就有了下面的代码：\n\n```javascript\nif (rating) {\n    $scope.showSkillMap = true;\n    skillFlareChild[skill.text] = [rating];\n\n    $scope.ratings = $scope.ratings + rating;\n    if (rating >= 0) {\n      $scope.learnedSkills.push({\n        skill: skill.text,\n        rating: rating\n      });\n    }\n\n    if ($scope.ratings > 250) {\n      $scope.isInfinite = true;\n    }\n  }\n```\n\n代码在不经意间充斥着各种 Code Smell:\n\n1. Magic Number\n2. 超长的类\n3. 等等\n\n### 重构\n\n还好我们在一开始的时候写了一些测试，这让我们可以有足够的可能性来重构代码，而使得其不至于变成遗留代码。而这也是我们推崇的一些基本实践：\n\n> 红 -> 绿 -> 重构\n\n测试是系统不至于腐烂的一个后勤保障，除此我们还需要保持对于 Code Smell 的嗅觉。如上代码：\n\n```javascript\nif ($scope.ratings > 250) {\n  $scope.isInfinite = true;\n}\n```\n\n上面代码中的“250”指的到底是？这样的数字怎么能保证别人一看代码就知道250到底是什么？\n\n如下的代码就好一些：\n\n```javascript\nvar MAX_SKILL_POINTS = 250;\nif ($scope.ratings > MAX_SKILL_POINTS) {\n  $scope.isInfinite = true;\n}\n```\n\n而在最开始的时候我们想不到这样的结果。最初我们的第一直觉都是一样的，然而只要我们保持着对 Code Smell 的警惕，情况就会发生更多的变化。\n\n重构是区分普通程序员和专业程序员的一个门槛，而这也是练习得来的一个结果。\n\n### 模式与演进\n\n如果你还懂得一些设计模式，那么想来，软件开发这件事就变得非常简单——我们只需要理解好需求即可。\n\n从一开始就使用模式，要么你是专家，要么你是在自寻苦恼。模式更多的是一些实现的总结，对于多数的实现来说，他们有着诸多的相似之处，他们可以使用相同的模式。\n\n而在需求变化的过程中，一个设计的模式本身也是在不断的改变。如果我们还固执于原有的模式，那么我们就会犯下一个又一个的错误。\n\n在适当的时候改变原有的模式，进行一些演进变显得更有意义一些。如果我们不能在适当的时候引进一些新的技术来，那么旧有的技术就会不断累积。这些技术债就会不断往下叠加，那么这个系统将会接近于崩塌。而我们在一开始所设定的一些业务逻辑，也会随着系统而逝去，这个公司似乎也要到尽头了。\n\n而如果我们可以不断地演进系统——抽象服务、拆分模块等等。业务在技术不断演进地过程中，得以保留下来。\n","slug":"8.2.1-emergent-design","published":1,"updated":"2016-05-12T01:40:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuf7mpqe001dtsif9qlvr6vl","content":"<p>设计模式不是一开始就有的，好的软件也不是一开始就设计成现在这样的，好的设计亦是如此。</p>\n<p>导致我们重构现有系统的原因有很多，但是多数是因为原来的代码变得越来越不可读，并且重构的风险太大了。在实现业务逻辑的时候，我们快速地用代码实现，没有测试，没有好的设计。</p>\n<p>而下图算是最近两年来想要的一个答案：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter8/emergent-design.jpg\" alt=\"浮现式设计\"></p>\n<p>浮现式设计是一种敏捷技术，强调在开发过程中不断演进。软件本身就不应该是一开始就设计好的，他需要经历一个演化的过程。</p>\n<a id=\"more\"></a>\n<h3 id=\"意图导向\"><a href=\"#意图导向\" class=\"headerlink\" title=\"意图导向\"></a>意图导向</h3><p>就和 Growth 一样在最开始的时候，我不知道我想要的是怎样的——我只有一个想法以及一些相对应的实践。接着我便动手开始做了，这是我的风格。不得不说这是结果导向编程，也是大部分软件开发采用的方法。</p>\n<p>所以在一开始的时候，我们就有了下面的代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (rating) &#123;</span><br><span class=\"line\">    $scope.showSkillMap = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    skillFlareChild[skill.text] = [rating];</span><br><span class=\"line\"></span><br><span class=\"line\">    $scope.ratings = $scope.ratings + rating;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rating &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      $scope.learnedSkills.push(&#123;</span><br><span class=\"line\">        skill: skill.text,</span><br><span class=\"line\">        rating: rating</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($scope.ratings &gt; <span class=\"number\">250</span>) &#123;</span><br><span class=\"line\">      $scope.isInfinite = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>代码在不经意间充斥着各种 Code Smell:</p>\n<ol>\n<li>Magic Number</li>\n<li>超长的类</li>\n<li>等等</li>\n</ol>\n<h3 id=\"重构\"><a href=\"#重构\" class=\"headerlink\" title=\"重构\"></a>重构</h3><p>还好我们在一开始的时候写了一些测试，这让我们可以有足够的可能性来重构代码，而使得其不至于变成遗留代码。而这也是我们推崇的一些基本实践：</p>\n<blockquote>\n<p>红 -&gt; 绿 -&gt; 重构</p>\n</blockquote>\n<p>测试是系统不至于腐烂的一个后勤保障，除此我们还需要保持对于 Code Smell 的嗅觉。如上代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ($scope.ratings &gt; <span class=\"number\">250</span>) &#123;</span><br><span class=\"line\">  $scope.isInfinite = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码中的“250”指的到底是？这样的数字怎么能保证别人一看代码就知道250到底是什么？</p>\n<p>如下的代码就好一些：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MAX_SKILL_POINTS = <span class=\"number\">250</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> ($scope.ratings &gt; MAX_SKILL_POINTS) &#123;</span><br><span class=\"line\">  $scope.isInfinite = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>而在最开始的时候我们想不到这样的结果。最初我们的第一直觉都是一样的，然而只要我们保持着对 Code Smell 的警惕，情况就会发生更多的变化。</p>\n<p>重构是区分普通程序员和专业程序员的一个门槛，而这也是练习得来的一个结果。</p>\n<h3 id=\"模式与演进\"><a href=\"#模式与演进\" class=\"headerlink\" title=\"模式与演进\"></a>模式与演进</h3><p>如果你还懂得一些设计模式，那么想来，软件开发这件事就变得非常简单——我们只需要理解好需求即可。</p>\n<p>从一开始就使用模式，要么你是专家，要么你是在自寻苦恼。模式更多的是一些实现的总结，对于多数的实现来说，他们有着诸多的相似之处，他们可以使用相同的模式。</p>\n<p>而在需求变化的过程中，一个设计的模式本身也是在不断的改变。如果我们还固执于原有的模式，那么我们就会犯下一个又一个的错误。</p>\n<p>在适当的时候改变原有的模式，进行一些演进变显得更有意义一些。如果我们不能在适当的时候引进一些新的技术来，那么旧有的技术就会不断累积。这些技术债就会不断往下叠加，那么这个系统将会接近于崩塌。而我们在一开始所设定的一些业务逻辑，也会随着系统而逝去，这个公司似乎也要到尽头了。</p>\n<p>而如果我们可以不断地演进系统——抽象服务、拆分模块等等。业务在技术不断演进地过程中，得以保留下来。</p>\n","excerpt":"<p>设计模式不是一开始就有的，好的软件也不是一开始就设计成现在这样的，好的设计亦是如此。</p>\n<p>导致我们重构现有系统的原因有很多，但是多数是因为原来的代码变得越来越不可读，并且重构的风险太大了。在实现业务逻辑的时候，我们快速地用代码实现，没有测试，没有好的设计。</p>\n<p>而下图算是最近两年来想要的一个答案：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter8/emergent-design.jpg\" alt=\"浮现式设计\"></p>\n<p>浮现式设计是一种敏捷技术，强调在开发过程中不断演进。软件本身就不应该是一开始就设计好的，他需要经历一个演化的过程。</p>","more":"<h3 id=\"意图导向\"><a href=\"#意图导向\" class=\"headerlink\" title=\"意图导向\"></a>意图导向</h3><p>就和 Growth 一样在最开始的时候，我不知道我想要的是怎样的——我只有一个想法以及一些相对应的实践。接着我便动手开始做了，这是我的风格。不得不说这是结果导向编程，也是大部分软件开发采用的方法。</p>\n<p>所以在一开始的时候，我们就有了下面的代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (rating) &#123;</span><br><span class=\"line\">    $scope.showSkillMap = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    skillFlareChild[skill.text] = [rating];</span><br><span class=\"line\"></span><br><span class=\"line\">    $scope.ratings = $scope.ratings + rating;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rating &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      $scope.learnedSkills.push(&#123;</span><br><span class=\"line\">        skill: skill.text,</span><br><span class=\"line\">        rating: rating</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($scope.ratings &gt; <span class=\"number\">250</span>) &#123;</span><br><span class=\"line\">      $scope.isInfinite = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>代码在不经意间充斥着各种 Code Smell:</p>\n<ol>\n<li>Magic Number</li>\n<li>超长的类</li>\n<li>等等</li>\n</ol>\n<h3 id=\"重构\"><a href=\"#重构\" class=\"headerlink\" title=\"重构\"></a>重构</h3><p>还好我们在一开始的时候写了一些测试，这让我们可以有足够的可能性来重构代码，而使得其不至于变成遗留代码。而这也是我们推崇的一些基本实践：</p>\n<blockquote>\n<p>红 -&gt; 绿 -&gt; 重构</p>\n</blockquote>\n<p>测试是系统不至于腐烂的一个后勤保障，除此我们还需要保持对于 Code Smell 的嗅觉。如上代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ($scope.ratings &gt; <span class=\"number\">250</span>) &#123;</span><br><span class=\"line\">  $scope.isInfinite = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码中的“250”指的到底是？这样的数字怎么能保证别人一看代码就知道250到底是什么？</p>\n<p>如下的代码就好一些：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MAX_SKILL_POINTS = <span class=\"number\">250</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> ($scope.ratings &gt; MAX_SKILL_POINTS) &#123;</span><br><span class=\"line\">  $scope.isInfinite = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>而在最开始的时候我们想不到这样的结果。最初我们的第一直觉都是一样的，然而只要我们保持着对 Code Smell 的警惕，情况就会发生更多的变化。</p>\n<p>重构是区分普通程序员和专业程序员的一个门槛，而这也是练习得来的一个结果。</p>\n<h3 id=\"模式与演进\"><a href=\"#模式与演进\" class=\"headerlink\" title=\"模式与演进\"></a>模式与演进</h3><p>如果你还懂得一些设计模式，那么想来，软件开发这件事就变得非常简单——我们只需要理解好需求即可。</p>\n<p>从一开始就使用模式，要么你是专家，要么你是在自寻苦恼。模式更多的是一些实现的总结，对于多数的实现来说，他们有着诸多的相似之处，他们可以使用相同的模式。</p>\n<p>而在需求变化的过程中，一个设计的模式本身也是在不断的改变。如果我们还固执于原有的模式，那么我们就会犯下一个又一个的错误。</p>\n<p>在适当的时候改变原有的模式，进行一些演进变显得更有意义一些。如果我们不能在适当的时候引进一些新的技术来，那么旧有的技术就会不断累积。这些技术债就会不断往下叠加，那么这个系统将会接近于崩塌。而我们在一开始所设定的一些业务逻辑，也会随着系统而逝去，这个公司似乎也要到尽头了。</p>\n<p>而如果我们可以不断地演进系统——抽象服务、拆分模块等等。业务在技术不断演进地过程中，得以保留下来。</p>"},{"title":"每个人都是架构师","date":"2016-05-12T14:45:08.000Z","_content":"\n每一个程序员都是架构师。平时在我们工作的时候，架构师这个 Title 都被那些非常有经历的开发人员占据着。然而，如果你喜欢刷刷 Github，喜欢做一些有意思的东西，那么你也将是一个架构师。\n\n### 如何构建一个博客系统\n\n#### 如果你需要帮人搭建一个博客你先会想到什么？\n\n先问一个问题，如果要让你搭建一个博客你会想到什么技术解决方案？\n\n1. 静态博客（类似于 GitHub Page）\n2. 动态博客（可以在线更新，如 WordPress）\n3. 半动态的静态博客（可以动态更新，但是依赖于后台构建系统）\n4. 使用第三方博客\n\n<!-- more -->\n\n这只是基本的骨架。因此如果只有这点需求，我们无法规划出整体的方案。现在我们又多了一点需求，我们要求是独立的博客，这样我们就把第4个方案去掉了。但是就现在的过程来说，我们还是有三个方案。\n\n接着，我们就需要看看 Ta 需要怎样的博客，以及他有怎样的更新频率？以及他所能接受的价格？\n\n先说说价格——从价格上来说，静态博客是最便宜的，可以使用 AWS S3 或者国内的云存储等等。从费用上来说，一个月只需要几块钱，并且快速稳定，可以接受大量的流量访问。而动态博客就贵了很多倍——我们需要一直开着这个服务器，并且如果用户的数量比较大，我们就需要考虑使用缓存。用户数量再增加，我们就需要更多地服务器了。而对于半动态的静态博客来说，需要有一个 Hook 检测文章的修改，这样的 Hook 可以是一个客户端。当修改发生的时候，运行服务器，随后生成静态网页。最后，这个网页接部署到静态服务器上。\n\n从操作难度上来说，动态博客是最简单的，静态博客紧随其后，半动态的静态博客是最难的。\n\n整的性价比考虑如下：\n\n x  |动态博客  | 静态博客 | 半动态的静态博客\n------|--------|---------|-------\n价格 | 几十到几百元 | 几元 | 依赖于更新频率 几元~几十元\n难度 | 容易   | 稍有难度 | 难度稍大\n运维 | 不容易 |容易  | 容易\n数据存储 | 数据库 | 无 | 基于 git 的数据库\n\n现在，我们已经达到了一定的共识。现在，我们已经有了几个方案可以提用户选择。而这时，我们并不了解进一步的需求，只能等下面的结果。\n\n客户需要可以看到文章的修改变化，这时就去除了静态博客。现在还有第1和第3种方案可以选，考虑到第3种方案实现难度比较大，不易短期内实现。并且第3种方案可以依赖于第1种方案，就采取了动态博客的方案。\n\n但是，问题实现上才刚刚开始。\n\n#### 我们使用怎样的技术？\n\n作为一个团队，我们需要优先考虑这个问题。使用怎样的技术解决方案？而这是一个更复杂的问题，这取决于我们团队的技术组成，以及未来的团队组成。\n\n如果在现有的系统中，我们使用的是 Java 语言。并不意味着，每个人都喜欢使用 Java 语言。因为随着团队的变动，做这个技术决定的那些人有可能已经不在这个团队里。并且即使那些人还在，也不意味着我们喜欢在未来使用这个语言。当时的技术决策都是在当时的环境下产生的，在现在看来很扯的技术决策，有可能在当时是最好的技术决策。\n\n对于一个优秀的团队来说，不存在一个人对所有的技术栈都擅长的情况——除非这个团队所从事的范围比较小。在一个复杂的系统里，每个人都负责系统的相应的一部分。尽管到目前为止并没有好的机会去构建自己的团队，但是也希望总有一天有这样的机会。在这样的团队里，只需要有一个人负责整个系统的架构。其中的人可以在自己擅长的层级里构建自己的架构。因此，让我们再回到我们的博客中去，现在我们已经决定使用动态的博客。然后呢？\n\n作为一个博客我们至少有前后台，这样我们可能就需要两个开发人员。\n\n![前后台](http://growth.phodal.com/assets/article/chapter8/blog-basic.png)\n\n（PS：当然，我们也可以使用 React，但是在这里先让我们忽略掉这个框架，紧耦合会削弱系统的健壮性。）\n\n接着，作为一个前端开发人员，我们还需要考虑的两个问题是：\n\n1. **我们的博客系统是否是单页面应用？**。\n2. **要不要做成响应式设计**。\n\n第二个问题不需要和后台开发人员做沟通就可以做决定了。而第一个问题，我们则需要和后台开发人员做决定。单页面应用的天然优势就是：由于系统本身是解耦的，他与后台模板系统脱离。这样在我们更换前端或者后台的时候，我们都不需要去考虑使用何种技术——因为我们使用 API 作为接口。现在，我们决定做成单页面应用，那么我们就需要定义一个 API。而在这时，我们就可以决定在前台使用何种框架： AngularJS、Backbone、Vue.js、jQuery，接着我们的架构可以进一步完善：\n\n![含前端的架构](http://growth.phodal.com/assets/article/chapter8/blog-with-frontend.png)\n\n在这时，后台人员也可以自由地选择自己的框架、语言。后台开发人员只需要关注于生成一个 RESTful API 即可，而他也需要一个好的 Model 层来与数据库交付。\n\n![含前端后台的架构](http://growth.phodal.com/assets/article/chapter8/blog-with-fe-be.png)\n\n现在，我们似乎已经完成了大部分的工作？我们还需要：\n\n1. 部署到何处操作系统\n2. 使用何处数据库\n3. 如何部署\n4. 如何去分析数据\n5. 如何做测试\n6. 。。。\n\n相信看完之前的章节，你也有了一定的经验了，你也可以成为一个架构师了。\n\n### 相关阅读资料\n\n -《程序员必读之软件架构》\n","source":"_posts/8.3.0-architecture.md","raw":"title: 每个人都是架构师\ndate: 2016-5-12 22:45:08\ntags:\n---\n\n每一个程序员都是架构师。平时在我们工作的时候，架构师这个 Title 都被那些非常有经历的开发人员占据着。然而，如果你喜欢刷刷 Github，喜欢做一些有意思的东西，那么你也将是一个架构师。\n\n### 如何构建一个博客系统\n\n#### 如果你需要帮人搭建一个博客你先会想到什么？\n\n先问一个问题，如果要让你搭建一个博客你会想到什么技术解决方案？\n\n1. 静态博客（类似于 GitHub Page）\n2. 动态博客（可以在线更新，如 WordPress）\n3. 半动态的静态博客（可以动态更新，但是依赖于后台构建系统）\n4. 使用第三方博客\n\n<!-- more -->\n\n这只是基本的骨架。因此如果只有这点需求，我们无法规划出整体的方案。现在我们又多了一点需求，我们要求是独立的博客，这样我们就把第4个方案去掉了。但是就现在的过程来说，我们还是有三个方案。\n\n接着，我们就需要看看 Ta 需要怎样的博客，以及他有怎样的更新频率？以及他所能接受的价格？\n\n先说说价格——从价格上来说，静态博客是最便宜的，可以使用 AWS S3 或者国内的云存储等等。从费用上来说，一个月只需要几块钱，并且快速稳定，可以接受大量的流量访问。而动态博客就贵了很多倍——我们需要一直开着这个服务器，并且如果用户的数量比较大，我们就需要考虑使用缓存。用户数量再增加，我们就需要更多地服务器了。而对于半动态的静态博客来说，需要有一个 Hook 检测文章的修改，这样的 Hook 可以是一个客户端。当修改发生的时候，运行服务器，随后生成静态网页。最后，这个网页接部署到静态服务器上。\n\n从操作难度上来说，动态博客是最简单的，静态博客紧随其后，半动态的静态博客是最难的。\n\n整的性价比考虑如下：\n\n x  |动态博客  | 静态博客 | 半动态的静态博客\n------|--------|---------|-------\n价格 | 几十到几百元 | 几元 | 依赖于更新频率 几元~几十元\n难度 | 容易   | 稍有难度 | 难度稍大\n运维 | 不容易 |容易  | 容易\n数据存储 | 数据库 | 无 | 基于 git 的数据库\n\n现在，我们已经达到了一定的共识。现在，我们已经有了几个方案可以提用户选择。而这时，我们并不了解进一步的需求，只能等下面的结果。\n\n客户需要可以看到文章的修改变化，这时就去除了静态博客。现在还有第1和第3种方案可以选，考虑到第3种方案实现难度比较大，不易短期内实现。并且第3种方案可以依赖于第1种方案，就采取了动态博客的方案。\n\n但是，问题实现上才刚刚开始。\n\n#### 我们使用怎样的技术？\n\n作为一个团队，我们需要优先考虑这个问题。使用怎样的技术解决方案？而这是一个更复杂的问题，这取决于我们团队的技术组成，以及未来的团队组成。\n\n如果在现有的系统中，我们使用的是 Java 语言。并不意味着，每个人都喜欢使用 Java 语言。因为随着团队的变动，做这个技术决定的那些人有可能已经不在这个团队里。并且即使那些人还在，也不意味着我们喜欢在未来使用这个语言。当时的技术决策都是在当时的环境下产生的，在现在看来很扯的技术决策，有可能在当时是最好的技术决策。\n\n对于一个优秀的团队来说，不存在一个人对所有的技术栈都擅长的情况——除非这个团队所从事的范围比较小。在一个复杂的系统里，每个人都负责系统的相应的一部分。尽管到目前为止并没有好的机会去构建自己的团队，但是也希望总有一天有这样的机会。在这样的团队里，只需要有一个人负责整个系统的架构。其中的人可以在自己擅长的层级里构建自己的架构。因此，让我们再回到我们的博客中去，现在我们已经决定使用动态的博客。然后呢？\n\n作为一个博客我们至少有前后台，这样我们可能就需要两个开发人员。\n\n![前后台](http://growth.phodal.com/assets/article/chapter8/blog-basic.png)\n\n（PS：当然，我们也可以使用 React，但是在这里先让我们忽略掉这个框架，紧耦合会削弱系统的健壮性。）\n\n接着，作为一个前端开发人员，我们还需要考虑的两个问题是：\n\n1. **我们的博客系统是否是单页面应用？**。\n2. **要不要做成响应式设计**。\n\n第二个问题不需要和后台开发人员做沟通就可以做决定了。而第一个问题，我们则需要和后台开发人员做决定。单页面应用的天然优势就是：由于系统本身是解耦的，他与后台模板系统脱离。这样在我们更换前端或者后台的时候，我们都不需要去考虑使用何种技术——因为我们使用 API 作为接口。现在，我们决定做成单页面应用，那么我们就需要定义一个 API。而在这时，我们就可以决定在前台使用何种框架： AngularJS、Backbone、Vue.js、jQuery，接着我们的架构可以进一步完善：\n\n![含前端的架构](http://growth.phodal.com/assets/article/chapter8/blog-with-frontend.png)\n\n在这时，后台人员也可以自由地选择自己的框架、语言。后台开发人员只需要关注于生成一个 RESTful API 即可，而他也需要一个好的 Model 层来与数据库交付。\n\n![含前端后台的架构](http://growth.phodal.com/assets/article/chapter8/blog-with-fe-be.png)\n\n现在，我们似乎已经完成了大部分的工作？我们还需要：\n\n1. 部署到何处操作系统\n2. 使用何处数据库\n3. 如何部署\n4. 如何去分析数据\n5. 如何做测试\n6. 。。。\n\n相信看完之前的章节，你也有了一定的经验了，你也可以成为一个架构师了。\n\n### 相关阅读资料\n\n -《程序员必读之软件架构》\n","slug":"8.3.0-architecture","published":1,"updated":"2016-05-12T01:42:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuf7mpqf001etsif1fem8fir","content":"<p>每一个程序员都是架构师。平时在我们工作的时候，架构师这个 Title 都被那些非常有经历的开发人员占据着。然而，如果你喜欢刷刷 Github，喜欢做一些有意思的东西，那么你也将是一个架构师。</p>\n<h3 id=\"如何构建一个博客系统\"><a href=\"#如何构建一个博客系统\" class=\"headerlink\" title=\"如何构建一个博客系统\"></a>如何构建一个博客系统</h3><h4 id=\"如果你需要帮人搭建一个博客你先会想到什么？\"><a href=\"#如果你需要帮人搭建一个博客你先会想到什么？\" class=\"headerlink\" title=\"如果你需要帮人搭建一个博客你先会想到什么？\"></a>如果你需要帮人搭建一个博客你先会想到什么？</h4><p>先问一个问题，如果要让你搭建一个博客你会想到什么技术解决方案？</p>\n<ol>\n<li>静态博客（类似于 GitHub Page）</li>\n<li>动态博客（可以在线更新，如 WordPress）</li>\n<li>半动态的静态博客（可以动态更新，但是依赖于后台构建系统）</li>\n<li>使用第三方博客</li>\n</ol>\n<a id=\"more\"></a>\n<p>这只是基本的骨架。因此如果只有这点需求，我们无法规划出整体的方案。现在我们又多了一点需求，我们要求是独立的博客，这样我们就把第4个方案去掉了。但是就现在的过程来说，我们还是有三个方案。</p>\n<p>接着，我们就需要看看 Ta 需要怎样的博客，以及他有怎样的更新频率？以及他所能接受的价格？</p>\n<p>先说说价格——从价格上来说，静态博客是最便宜的，可以使用 AWS S3 或者国内的云存储等等。从费用上来说，一个月只需要几块钱，并且快速稳定，可以接受大量的流量访问。而动态博客就贵了很多倍——我们需要一直开着这个服务器，并且如果用户的数量比较大，我们就需要考虑使用缓存。用户数量再增加，我们就需要更多地服务器了。而对于半动态的静态博客来说，需要有一个 Hook 检测文章的修改，这样的 Hook 可以是一个客户端。当修改发生的时候，运行服务器，随后生成静态网页。最后，这个网页接部署到静态服务器上。</p>\n<p>从操作难度上来说，动态博客是最简单的，静态博客紧随其后，半动态的静态博客是最难的。</p>\n<p>整的性价比考虑如下：</p>\n<table>\n<thead>\n<tr>\n<th>x</th>\n<th>动态博客</th>\n<th>静态博客</th>\n<th>半动态的静态博客</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>价格</td>\n<td>几十到几百元</td>\n<td>几元</td>\n<td>依赖于更新频率 几元~几十元</td>\n</tr>\n<tr>\n<td>难度</td>\n<td>容易</td>\n<td>稍有难度</td>\n<td>难度稍大</td>\n</tr>\n<tr>\n<td>运维</td>\n<td>不容易</td>\n<td>容易</td>\n<td>容易</td>\n</tr>\n<tr>\n<td>数据存储</td>\n<td>数据库</td>\n<td>无</td>\n<td>基于 git 的数据库</td>\n</tr>\n</tbody>\n</table>\n<p>现在，我们已经达到了一定的共识。现在，我们已经有了几个方案可以提用户选择。而这时，我们并不了解进一步的需求，只能等下面的结果。</p>\n<p>客户需要可以看到文章的修改变化，这时就去除了静态博客。现在还有第1和第3种方案可以选，考虑到第3种方案实现难度比较大，不易短期内实现。并且第3种方案可以依赖于第1种方案，就采取了动态博客的方案。</p>\n<p>但是，问题实现上才刚刚开始。</p>\n<h4 id=\"我们使用怎样的技术？\"><a href=\"#我们使用怎样的技术？\" class=\"headerlink\" title=\"我们使用怎样的技术？\"></a>我们使用怎样的技术？</h4><p>作为一个团队，我们需要优先考虑这个问题。使用怎样的技术解决方案？而这是一个更复杂的问题，这取决于我们团队的技术组成，以及未来的团队组成。</p>\n<p>如果在现有的系统中，我们使用的是 Java 语言。并不意味着，每个人都喜欢使用 Java 语言。因为随着团队的变动，做这个技术决定的那些人有可能已经不在这个团队里。并且即使那些人还在，也不意味着我们喜欢在未来使用这个语言。当时的技术决策都是在当时的环境下产生的，在现在看来很扯的技术决策，有可能在当时是最好的技术决策。</p>\n<p>对于一个优秀的团队来说，不存在一个人对所有的技术栈都擅长的情况——除非这个团队所从事的范围比较小。在一个复杂的系统里，每个人都负责系统的相应的一部分。尽管到目前为止并没有好的机会去构建自己的团队，但是也希望总有一天有这样的机会。在这样的团队里，只需要有一个人负责整个系统的架构。其中的人可以在自己擅长的层级里构建自己的架构。因此，让我们再回到我们的博客中去，现在我们已经决定使用动态的博客。然后呢？</p>\n<p>作为一个博客我们至少有前后台，这样我们可能就需要两个开发人员。</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter8/blog-basic.png\" alt=\"前后台\"></p>\n<p>（PS：当然，我们也可以使用 React，但是在这里先让我们忽略掉这个框架，紧耦合会削弱系统的健壮性。）</p>\n<p>接着，作为一个前端开发人员，我们还需要考虑的两个问题是：</p>\n<ol>\n<li><strong>我们的博客系统是否是单页面应用？</strong>。</li>\n<li><strong>要不要做成响应式设计</strong>。</li>\n</ol>\n<p>第二个问题不需要和后台开发人员做沟通就可以做决定了。而第一个问题，我们则需要和后台开发人员做决定。单页面应用的天然优势就是：由于系统本身是解耦的，他与后台模板系统脱离。这样在我们更换前端或者后台的时候，我们都不需要去考虑使用何种技术——因为我们使用 API 作为接口。现在，我们决定做成单页面应用，那么我们就需要定义一个 API。而在这时，我们就可以决定在前台使用何种框架： AngularJS、Backbone、Vue.js、jQuery，接着我们的架构可以进一步完善：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter8/blog-with-frontend.png\" alt=\"含前端的架构\"></p>\n<p>在这时，后台人员也可以自由地选择自己的框架、语言。后台开发人员只需要关注于生成一个 RESTful API 即可，而他也需要一个好的 Model 层来与数据库交付。</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter8/blog-with-fe-be.png\" alt=\"含前端后台的架构\"></p>\n<p>现在，我们似乎已经完成了大部分的工作？我们还需要：</p>\n<ol>\n<li>部署到何处操作系统</li>\n<li>使用何处数据库</li>\n<li>如何部署</li>\n<li>如何去分析数据</li>\n<li>如何做测试</li>\n<li>。。。</li>\n</ol>\n<p>相信看完之前的章节，你也有了一定的经验了，你也可以成为一个架构师了。</p>\n<h3 id=\"相关阅读资料\"><a href=\"#相关阅读资料\" class=\"headerlink\" title=\"相关阅读资料\"></a>相关阅读资料</h3><p> -《程序员必读之软件架构》</p>\n","excerpt":"<p>每一个程序员都是架构师。平时在我们工作的时候，架构师这个 Title 都被那些非常有经历的开发人员占据着。然而，如果你喜欢刷刷 Github，喜欢做一些有意思的东西，那么你也将是一个架构师。</p>\n<h3 id=\"如何构建一个博客系统\"><a href=\"#如何构建一个博客系统\" class=\"headerlink\" title=\"如何构建一个博客系统\"></a>如何构建一个博客系统</h3><h4 id=\"如果你需要帮人搭建一个博客你先会想到什么？\"><a href=\"#如果你需要帮人搭建一个博客你先会想到什么？\" class=\"headerlink\" title=\"如果你需要帮人搭建一个博客你先会想到什么？\"></a>如果你需要帮人搭建一个博客你先会想到什么？</h4><p>先问一个问题，如果要让你搭建一个博客你会想到什么技术解决方案？</p>\n<ol>\n<li>静态博客（类似于 GitHub Page）</li>\n<li>动态博客（可以在线更新，如 WordPress）</li>\n<li>半动态的静态博客（可以动态更新，但是依赖于后台构建系统）</li>\n<li>使用第三方博客</li>\n</ol>","more":"<p>这只是基本的骨架。因此如果只有这点需求，我们无法规划出整体的方案。现在我们又多了一点需求，我们要求是独立的博客，这样我们就把第4个方案去掉了。但是就现在的过程来说，我们还是有三个方案。</p>\n<p>接着，我们就需要看看 Ta 需要怎样的博客，以及他有怎样的更新频率？以及他所能接受的价格？</p>\n<p>先说说价格——从价格上来说，静态博客是最便宜的，可以使用 AWS S3 或者国内的云存储等等。从费用上来说，一个月只需要几块钱，并且快速稳定，可以接受大量的流量访问。而动态博客就贵了很多倍——我们需要一直开着这个服务器，并且如果用户的数量比较大，我们就需要考虑使用缓存。用户数量再增加，我们就需要更多地服务器了。而对于半动态的静态博客来说，需要有一个 Hook 检测文章的修改，这样的 Hook 可以是一个客户端。当修改发生的时候，运行服务器，随后生成静态网页。最后，这个网页接部署到静态服务器上。</p>\n<p>从操作难度上来说，动态博客是最简单的，静态博客紧随其后，半动态的静态博客是最难的。</p>\n<p>整的性价比考虑如下：</p>\n<table>\n<thead>\n<tr>\n<th>x</th>\n<th>动态博客</th>\n<th>静态博客</th>\n<th>半动态的静态博客</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>价格</td>\n<td>几十到几百元</td>\n<td>几元</td>\n<td>依赖于更新频率 几元~几十元</td>\n</tr>\n<tr>\n<td>难度</td>\n<td>容易</td>\n<td>稍有难度</td>\n<td>难度稍大</td>\n</tr>\n<tr>\n<td>运维</td>\n<td>不容易</td>\n<td>容易</td>\n<td>容易</td>\n</tr>\n<tr>\n<td>数据存储</td>\n<td>数据库</td>\n<td>无</td>\n<td>基于 git 的数据库</td>\n</tr>\n</tbody>\n</table>\n<p>现在，我们已经达到了一定的共识。现在，我们已经有了几个方案可以提用户选择。而这时，我们并不了解进一步的需求，只能等下面的结果。</p>\n<p>客户需要可以看到文章的修改变化，这时就去除了静态博客。现在还有第1和第3种方案可以选，考虑到第3种方案实现难度比较大，不易短期内实现。并且第3种方案可以依赖于第1种方案，就采取了动态博客的方案。</p>\n<p>但是，问题实现上才刚刚开始。</p>\n<h4 id=\"我们使用怎样的技术？\"><a href=\"#我们使用怎样的技术？\" class=\"headerlink\" title=\"我们使用怎样的技术？\"></a>我们使用怎样的技术？</h4><p>作为一个团队，我们需要优先考虑这个问题。使用怎样的技术解决方案？而这是一个更复杂的问题，这取决于我们团队的技术组成，以及未来的团队组成。</p>\n<p>如果在现有的系统中，我们使用的是 Java 语言。并不意味着，每个人都喜欢使用 Java 语言。因为随着团队的变动，做这个技术决定的那些人有可能已经不在这个团队里。并且即使那些人还在，也不意味着我们喜欢在未来使用这个语言。当时的技术决策都是在当时的环境下产生的，在现在看来很扯的技术决策，有可能在当时是最好的技术决策。</p>\n<p>对于一个优秀的团队来说，不存在一个人对所有的技术栈都擅长的情况——除非这个团队所从事的范围比较小。在一个复杂的系统里，每个人都负责系统的相应的一部分。尽管到目前为止并没有好的机会去构建自己的团队，但是也希望总有一天有这样的机会。在这样的团队里，只需要有一个人负责整个系统的架构。其中的人可以在自己擅长的层级里构建自己的架构。因此，让我们再回到我们的博客中去，现在我们已经决定使用动态的博客。然后呢？</p>\n<p>作为一个博客我们至少有前后台，这样我们可能就需要两个开发人员。</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter8/blog-basic.png\" alt=\"前后台\"></p>\n<p>（PS：当然，我们也可以使用 React，但是在这里先让我们忽略掉这个框架，紧耦合会削弱系统的健壮性。）</p>\n<p>接着，作为一个前端开发人员，我们还需要考虑的两个问题是：</p>\n<ol>\n<li><strong>我们的博客系统是否是单页面应用？</strong>。</li>\n<li><strong>要不要做成响应式设计</strong>。</li>\n</ol>\n<p>第二个问题不需要和后台开发人员做沟通就可以做决定了。而第一个问题，我们则需要和后台开发人员做决定。单页面应用的天然优势就是：由于系统本身是解耦的，他与后台模板系统脱离。这样在我们更换前端或者后台的时候，我们都不需要去考虑使用何种技术——因为我们使用 API 作为接口。现在，我们决定做成单页面应用，那么我们就需要定义一个 API。而在这时，我们就可以决定在前台使用何种框架： AngularJS、Backbone、Vue.js、jQuery，接着我们的架构可以进一步完善：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter8/blog-with-frontend.png\" alt=\"含前端的架构\"></p>\n<p>在这时，后台人员也可以自由地选择自己的框架、语言。后台开发人员只需要关注于生成一个 RESTful API 即可，而他也需要一个好的 Model 层来与数据库交付。</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter8/blog-with-fe-be.png\" alt=\"含前端后台的架构\"></p>\n<p>现在，我们似乎已经完成了大部分的工作？我们还需要：</p>\n<ol>\n<li>部署到何处操作系统</li>\n<li>使用何处数据库</li>\n<li>如何部署</li>\n<li>如何去分析数据</li>\n<li>如何做测试</li>\n<li>。。。</li>\n</ol>\n<p>相信看完之前的章节，你也有了一定的经验了，你也可以成为一个架构师了。</p>\n<h3 id=\"相关阅读资料\"><a href=\"#相关阅读资料\" class=\"headerlink\" title=\"相关阅读资料\"></a>相关阅读资料</h3><p> -《程序员必读之软件架构》</p>"},{"title":"架构解耦","date":"2016-05-12T15:45:08.000Z","_content":"\n解耦是一件很有意思的过程，它也能反应架构的变迁。\n\n### 从 MVC 与微服务\n\n在我初识架构是什么的时候，我看到了 MVC 模式架构。这种模式是基于分层的结构，要理解起逻辑也很简单。这个模式如下图所示：\n\n![Spring MVC](http://growth.phodal.com/assets/article/chapter8/spring-mvc.png)\n\n由我们的 Front controller 来处理由客户端（浏览器）发过来的请求，实际上这里的 Front controller 是 DispatcherServlet。 DispatcherServlet 负责将请求派发到特定的 handler，接着交由对应的Controller来处理这个请求。依据请求的内容，Controller 将创建相应 model。随后这个 model 将传到前端框架中渲染，最后再返回给浏览器。\n\n但是这样的架构充满了太多的问题，如 view 与 controller 的紧密耦合、controller 粒度难以把控的问题等等。\n\n<!-- more -->\n\n#### Django MTV\n\n我使用 Django 差不多有四年了，主要是用在我的博客上。与 MVC 模式一对比，我发现 Django 在分层上还是很有鲜明特性的：\n\n![Django MTV架构](http://growth.phodal.com/assets/article/chapter8/django-mtv.png)\n\n在 Django 中没有 Controller 的概念，Controller 做的事都交由 URL Dispatcher，而这是一个高级的 URL Dispatcher。它使用正则表达式匹配 URL，然后调用合适的 Python 函数。然后这个函数就交由相应的 View 层来处理，而这个 View 层则是处理业务逻辑的地方。处理完后，Model 将传到 Template 层来处理。\n\n对比如下图如示：\n\n传统的MVC架构 | Django 架构\n----------------------|-----------\nModel      | Model(Data Access Logic)\nView       |Template(Presentation Logic)\nView       | View(Business Logic)\nController | Django itself\n\n从上面的对比中，我们可以发现 Django 把 View 分层了。以 Django 对于 MVC 的解释来说，视图用来描述要展现给用户的数据。 而在 ROR 等其他的 MVC 框架中，控制器负责决定向用户展现哪些数据，而视图决定如何展现数据。\n\n联想起我最近在学的 Scala 中的 Play 框架，我发现了其中诸多的相似之处：\n\n![Play 框架异步请求](http://growth.phodal.com/assets/article/chapter8/playarchtectureasyncrequest.png)\n\n虽然在 Play 中，也有 Controller 的概念。但是对于 URL 的处理先交给了 Routes 来处理，随后再交给 Controller 中的函数来处理。\n\n不过与一般 MVC 架构的最大不同之处，怕是在于 Django 的 APP 架构。Django 中有一个名为 APP 的概念，它是实现某种功能的Web 应用程序。如果我们要设计一个博客系统的话，那么在这个项目中，Blogpost 是一个 APP、评论是一个 APP、用户管理是一个 APP等等。每个 APP 之中，都会有自己的 Model、View 和 Controller。其架构如下图所示：\n\n![Django APP 架构](http://growth.phodal.com/assets/article/chapter8/django_app_arch.jpg)\n\n当我们需要创建一个新的功能的时候，我们只需要创建一个新的 APP 即可——为这个 APP 配置新的 URL、创建新的 Model 以及新的 View。如果功能上没有与原来的代码重复的话，那么这就是一个独立的 APP，并且我们可以将这个 APP 的代码 Copy/Paste 到一个新的项目中，并且不需要做修改。\n\n与一般的 MVC 架构相比，我们会发现我们细化了这些业务逻辑原来的三层结构，会随着 APP 的数量发生变化。如果我们有三个 APP 的话，那么我们相当于有3*三层，但是他不是等于九层。这样做可以从代码上直接减少逻辑的思考，让我们可以更加集中注意力于业务实现，同时也利于我们后期维护。\n\n虽是如此，后来我意识到了这样的架构并没有太多的先进之处。而这实际上是一个美好但是不现实的东西，因为我们还是使用同一个数据库。\n\n#### 微服务与 Reactive\n\n在微服务架构中，它提倡将单一应用程序划分成一组小的服务，这些服务之间互相协调、互相配合。每个服务运行在其独立的进程中，服务与服务间采用轻量级的通信机制互相沟通。每个服务都应该有自己独立的数据库来存储数据。\n\n![分散数据](http://growth.phodal.com/assets/article/chapter8/decentralised-data.png)\n\nDjango 从某种意义上有点接近微服务的概念，只是实际上并没有。因为它没有实现 Play 框架的异步请求机制。抱句话来说，应用很容易就会在调用 JDBC、Streaming API、HTTP 请求等一系列的请求中发生阻塞。\n\n这些服务都是独立的，对于服务的请求也是独立的。使用微服务来构建的应用，不会因为一个服务的瘫痪让整个系统瘫痪。最后，这一个个的微服务将合并成这个系统。\n\n![Combined List](http://growth.phodal.com/assets/article/chapter8/combinedlist.png)\n\n我们将我们后台的服务变成微服务的架构，在我们的前台使用 Reactive 编程，这样我们就可以结合两者的优势，解耦出更好的架构模式。然而，这其中还有一个让人不爽的问题，即数据库。如果我们使用多个数据库，那么维护成本也随着上升。而如果我们可以在后台使用类似于微服务的 Django MTV 架构，并且它可以支持异步请求的话，并在前台使用 Reactive 来编程，是不是就会更爽一点？\n\n### CQRS\n\n对于复杂的系统来说，上面的做法做确实很不错。但是对于一个简单地系统来说，这样做是不是玩过火了？如果我们要设计一个博客系统的话，那么我们是不是可以考虑将 Write/Read 分离就可以了？\n\n> 命令和查询责任分离 Command Query Responsibility Segregation（CQRS）是一种将系统的读写操作分离为两种独立模型的架构模式。\n\n#### CQS\n\n对于这个架构的深入思考是起源于之前在理解 DDD。据说在 DDD 领域中被广泛使用。理解 CQRS 可以用分离 Model 和 API 集合来处理读取和写入请求开始，即 CQS（Command Query Separation，命令查询分离）模式。CQS 模式最早由软件大师Bertrand Meyer（Eiffel语言之父，面向对象开-闭原则 OCP 提出者）提出。他认为，对象的行为仅有两种：命令和查询。\n\n这个类型的架构如下图所示：\n\n![CQS Basic](http://growth.phodal.com/assets/article/chapter8/cqrs-2.png)\n\n> 除了编写优化的查询类型，它可以让我们轻松换 API 的一部分读一些缓存机制，甚至移动读取 API 的请求到另一台服务器。\n\n对于读取和写入相差不多的应用来说，这种架构看起来还是不错的。而这种架构还存在一个瓶颈问题，使用同一个 RDBMS。对于写入多、读取少的应用来说，这种架构还是存在着不合理性。\n\n为了解决这个问题，人们自然是使用缓存来解决这个问题了。我们在我们的应用服务外有一个 HTTP 服务器，而在 HTTP 服务器之外有一个缓存服务器，用于缓存用户常驻的一些资源。如下图所示：\n\n![带缓存的 Web 架构](http://growth.phodal.com/assets/article/chapter8/cache-website-blog.png)\n\n而实际上这样的服务器可能是多余的——我们为什么不直接生成HTML就好了？\n\n#### 编辑-发布分离\n\n或许你听过 Martin Folwer 提出的编辑-发布分享式架构：即文章在编辑时是一个形式，而发表时是另一个形式，比如用 Markdown 编辑，而用 HTML 发表。\n\n![编辑-发布分离](http://growth.phodal.com/assets/article/chapter8/edit-pub.jpg)\n\n而最典型的应用就是流行于 GitHub 的 Hexo、Jekyll 框架之类的静态网站。如下图所示的是 Hexo 的工作流：\n\n![Hexo 站点工作流](http://growth.phodal.com/assets/article/chapter8/hexo-workflow.png)\n\n我们在本地生成我们的项目，然后可以创建一个新的博客、开始编写内容等等。接着，我们可以在本地运行起这个服务，除了查看博客的内容，还可以修改样式等等。完成上面的工作后，我们就可以生成静态内容，然后部署我们的应用到GitHub Page上。这一切看上去都完美，我们有两个不同的数据源——一个是 md 格式的文本，一个是最后生成的 HTML。它们已经实现了读写/分离：\n\n![CQRS 进阶](http://growth.phodal.com/assets/article/chapter8/cqrs-separate-storage.png)\n\n但是作为一个前端开发人员，没有 JSON，用不了 Ajax 请求，我怎么把我的博客做成一个单页面应用？\n\n#### 编辑-发布-开发分离\n\n因为我们需要交我们的博客转为 JSON，而不是一个 hexo 之类的格式。有了这些 JSON 文件的存在，我们就可以把 Git 当成一个 NoSQL 数据库。同时这些 JSON 文件也可以直接当成 API 来\n\n![Git As NoSQL DB](http://growth.phodal.com/assets/article/chapter8/git-internals-commits.png)\n\n其次，这些博客还需要 hexo 一样生成 HTML。\n\n并且，开发人员在开发的时候不会影响到编辑的使用，于是就有了下面的架构：\n\n![基于 Git 的编辑-发布分离](http://growth.phodal.com/assets/article/chapter8/travis-edit-publish-code.png)\n\n在这其中我们有两种不同的数据形式，即存储着 Markdown 数据的 JSON 文件和最后生成的 HTML。\n\n对博客数量不是很大的网站，或者说一般的网站来说，用上面的技术都不是问题。然而有大量数据的网站怎么办？使用 EventBus：\n\n![CQRS 和 EventBus](http://growth.phodal.com/assets/article/chapter8/cqrs-arch.png)\n\n在我之前玩的一个 Demo 中，使用 Python 中的 Scrapy 爬虫来抓取现有的动态网站，并将其变成静态网站部署到 AWS S3上。\n\n但是上面仅仅只是实现了文章的显示，我们还存在一些问题：\n\n1. 搜索功能\n2. AutoComplete\n\n等等的这些服务是没有用静态 API 来实现的。\n\n### CQRS 结合微服务\n\n既然可以有这么多分法，并且我们都已经准备好分他们了。那么分了之后，我们就可以把他们都合到一起了。\n\n#### Nginx as Dispatcher\n\n最常见的解耦应用的方式中，就有一种是基于 Nginx 来分发 URL 请求。在这种情况下，对于 API 的使用者，或者最终用户来说，他们都是同一个 API。只是在后台里，这个 API 已经是不同的几个 API 组成，如下图所示：\n\n![Nginx 解耦微服务](http://growth.phodal.com/assets/article/chapter8/nginx-microservices.png)\n\n客户端的请求来到 API Gateway，根据不同的请求类型，这些 URL 被分发到不同的 Service，如 Review Service、Order Service 等等。\n\n对于我们想要设计的系统来说也是如此，我们可以通过这个 Dispatcher 来解耦我们的服务。\n\n#### CQRS 结合微服务\n\n现在，我们想要的系统的雏形已经出现了。\n\n从源头上来说，我们把能缓存的内容变成了静态的 HTML，通过 CDN 来分发。并且，我们还可以将把不同的服务独立出来。\n\n从实现上来说，我们将博客的数据变成了两部分： 一个以 Git + JSON 格式存在的 API，它除了可以用于生成 HTML，另外一部分作为 API 来使用。\n\n![CQRS 结合微服务](http://growth.phodal.com/assets/article/chapter8/dispatcher-services.png)\n\n最后，我们可以通过上面说到的 Nginx 或者 Apache 来当这里的 Request Dispatcher。\n","source":"_posts/8.3.1-seperate.md","raw":"title: 架构解耦\ndate: 2016-5-12 23:45:08\ntags:\n---\n\n解耦是一件很有意思的过程，它也能反应架构的变迁。\n\n### 从 MVC 与微服务\n\n在我初识架构是什么的时候，我看到了 MVC 模式架构。这种模式是基于分层的结构，要理解起逻辑也很简单。这个模式如下图所示：\n\n![Spring MVC](http://growth.phodal.com/assets/article/chapter8/spring-mvc.png)\n\n由我们的 Front controller 来处理由客户端（浏览器）发过来的请求，实际上这里的 Front controller 是 DispatcherServlet。 DispatcherServlet 负责将请求派发到特定的 handler，接着交由对应的Controller来处理这个请求。依据请求的内容，Controller 将创建相应 model。随后这个 model 将传到前端框架中渲染，最后再返回给浏览器。\n\n但是这样的架构充满了太多的问题，如 view 与 controller 的紧密耦合、controller 粒度难以把控的问题等等。\n\n<!-- more -->\n\n#### Django MTV\n\n我使用 Django 差不多有四年了，主要是用在我的博客上。与 MVC 模式一对比，我发现 Django 在分层上还是很有鲜明特性的：\n\n![Django MTV架构](http://growth.phodal.com/assets/article/chapter8/django-mtv.png)\n\n在 Django 中没有 Controller 的概念，Controller 做的事都交由 URL Dispatcher，而这是一个高级的 URL Dispatcher。它使用正则表达式匹配 URL，然后调用合适的 Python 函数。然后这个函数就交由相应的 View 层来处理，而这个 View 层则是处理业务逻辑的地方。处理完后，Model 将传到 Template 层来处理。\n\n对比如下图如示：\n\n传统的MVC架构 | Django 架构\n----------------------|-----------\nModel      | Model(Data Access Logic)\nView       |Template(Presentation Logic)\nView       | View(Business Logic)\nController | Django itself\n\n从上面的对比中，我们可以发现 Django 把 View 分层了。以 Django 对于 MVC 的解释来说，视图用来描述要展现给用户的数据。 而在 ROR 等其他的 MVC 框架中，控制器负责决定向用户展现哪些数据，而视图决定如何展现数据。\n\n联想起我最近在学的 Scala 中的 Play 框架，我发现了其中诸多的相似之处：\n\n![Play 框架异步请求](http://growth.phodal.com/assets/article/chapter8/playarchtectureasyncrequest.png)\n\n虽然在 Play 中，也有 Controller 的概念。但是对于 URL 的处理先交给了 Routes 来处理，随后再交给 Controller 中的函数来处理。\n\n不过与一般 MVC 架构的最大不同之处，怕是在于 Django 的 APP 架构。Django 中有一个名为 APP 的概念，它是实现某种功能的Web 应用程序。如果我们要设计一个博客系统的话，那么在这个项目中，Blogpost 是一个 APP、评论是一个 APP、用户管理是一个 APP等等。每个 APP 之中，都会有自己的 Model、View 和 Controller。其架构如下图所示：\n\n![Django APP 架构](http://growth.phodal.com/assets/article/chapter8/django_app_arch.jpg)\n\n当我们需要创建一个新的功能的时候，我们只需要创建一个新的 APP 即可——为这个 APP 配置新的 URL、创建新的 Model 以及新的 View。如果功能上没有与原来的代码重复的话，那么这就是一个独立的 APP，并且我们可以将这个 APP 的代码 Copy/Paste 到一个新的项目中，并且不需要做修改。\n\n与一般的 MVC 架构相比，我们会发现我们细化了这些业务逻辑原来的三层结构，会随着 APP 的数量发生变化。如果我们有三个 APP 的话，那么我们相当于有3*三层，但是他不是等于九层。这样做可以从代码上直接减少逻辑的思考，让我们可以更加集中注意力于业务实现，同时也利于我们后期维护。\n\n虽是如此，后来我意识到了这样的架构并没有太多的先进之处。而这实际上是一个美好但是不现实的东西，因为我们还是使用同一个数据库。\n\n#### 微服务与 Reactive\n\n在微服务架构中，它提倡将单一应用程序划分成一组小的服务，这些服务之间互相协调、互相配合。每个服务运行在其独立的进程中，服务与服务间采用轻量级的通信机制互相沟通。每个服务都应该有自己独立的数据库来存储数据。\n\n![分散数据](http://growth.phodal.com/assets/article/chapter8/decentralised-data.png)\n\nDjango 从某种意义上有点接近微服务的概念，只是实际上并没有。因为它没有实现 Play 框架的异步请求机制。抱句话来说，应用很容易就会在调用 JDBC、Streaming API、HTTP 请求等一系列的请求中发生阻塞。\n\n这些服务都是独立的，对于服务的请求也是独立的。使用微服务来构建的应用，不会因为一个服务的瘫痪让整个系统瘫痪。最后，这一个个的微服务将合并成这个系统。\n\n![Combined List](http://growth.phodal.com/assets/article/chapter8/combinedlist.png)\n\n我们将我们后台的服务变成微服务的架构，在我们的前台使用 Reactive 编程，这样我们就可以结合两者的优势，解耦出更好的架构模式。然而，这其中还有一个让人不爽的问题，即数据库。如果我们使用多个数据库，那么维护成本也随着上升。而如果我们可以在后台使用类似于微服务的 Django MTV 架构，并且它可以支持异步请求的话，并在前台使用 Reactive 来编程，是不是就会更爽一点？\n\n### CQRS\n\n对于复杂的系统来说，上面的做法做确实很不错。但是对于一个简单地系统来说，这样做是不是玩过火了？如果我们要设计一个博客系统的话，那么我们是不是可以考虑将 Write/Read 分离就可以了？\n\n> 命令和查询责任分离 Command Query Responsibility Segregation（CQRS）是一种将系统的读写操作分离为两种独立模型的架构模式。\n\n#### CQS\n\n对于这个架构的深入思考是起源于之前在理解 DDD。据说在 DDD 领域中被广泛使用。理解 CQRS 可以用分离 Model 和 API 集合来处理读取和写入请求开始，即 CQS（Command Query Separation，命令查询分离）模式。CQS 模式最早由软件大师Bertrand Meyer（Eiffel语言之父，面向对象开-闭原则 OCP 提出者）提出。他认为，对象的行为仅有两种：命令和查询。\n\n这个类型的架构如下图所示：\n\n![CQS Basic](http://growth.phodal.com/assets/article/chapter8/cqrs-2.png)\n\n> 除了编写优化的查询类型，它可以让我们轻松换 API 的一部分读一些缓存机制，甚至移动读取 API 的请求到另一台服务器。\n\n对于读取和写入相差不多的应用来说，这种架构看起来还是不错的。而这种架构还存在一个瓶颈问题，使用同一个 RDBMS。对于写入多、读取少的应用来说，这种架构还是存在着不合理性。\n\n为了解决这个问题，人们自然是使用缓存来解决这个问题了。我们在我们的应用服务外有一个 HTTP 服务器，而在 HTTP 服务器之外有一个缓存服务器，用于缓存用户常驻的一些资源。如下图所示：\n\n![带缓存的 Web 架构](http://growth.phodal.com/assets/article/chapter8/cache-website-blog.png)\n\n而实际上这样的服务器可能是多余的——我们为什么不直接生成HTML就好了？\n\n#### 编辑-发布分离\n\n或许你听过 Martin Folwer 提出的编辑-发布分享式架构：即文章在编辑时是一个形式，而发表时是另一个形式，比如用 Markdown 编辑，而用 HTML 发表。\n\n![编辑-发布分离](http://growth.phodal.com/assets/article/chapter8/edit-pub.jpg)\n\n而最典型的应用就是流行于 GitHub 的 Hexo、Jekyll 框架之类的静态网站。如下图所示的是 Hexo 的工作流：\n\n![Hexo 站点工作流](http://growth.phodal.com/assets/article/chapter8/hexo-workflow.png)\n\n我们在本地生成我们的项目，然后可以创建一个新的博客、开始编写内容等等。接着，我们可以在本地运行起这个服务，除了查看博客的内容，还可以修改样式等等。完成上面的工作后，我们就可以生成静态内容，然后部署我们的应用到GitHub Page上。这一切看上去都完美，我们有两个不同的数据源——一个是 md 格式的文本，一个是最后生成的 HTML。它们已经实现了读写/分离：\n\n![CQRS 进阶](http://growth.phodal.com/assets/article/chapter8/cqrs-separate-storage.png)\n\n但是作为一个前端开发人员，没有 JSON，用不了 Ajax 请求，我怎么把我的博客做成一个单页面应用？\n\n#### 编辑-发布-开发分离\n\n因为我们需要交我们的博客转为 JSON，而不是一个 hexo 之类的格式。有了这些 JSON 文件的存在，我们就可以把 Git 当成一个 NoSQL 数据库。同时这些 JSON 文件也可以直接当成 API 来\n\n![Git As NoSQL DB](http://growth.phodal.com/assets/article/chapter8/git-internals-commits.png)\n\n其次，这些博客还需要 hexo 一样生成 HTML。\n\n并且，开发人员在开发的时候不会影响到编辑的使用，于是就有了下面的架构：\n\n![基于 Git 的编辑-发布分离](http://growth.phodal.com/assets/article/chapter8/travis-edit-publish-code.png)\n\n在这其中我们有两种不同的数据形式，即存储着 Markdown 数据的 JSON 文件和最后生成的 HTML。\n\n对博客数量不是很大的网站，或者说一般的网站来说，用上面的技术都不是问题。然而有大量数据的网站怎么办？使用 EventBus：\n\n![CQRS 和 EventBus](http://growth.phodal.com/assets/article/chapter8/cqrs-arch.png)\n\n在我之前玩的一个 Demo 中，使用 Python 中的 Scrapy 爬虫来抓取现有的动态网站，并将其变成静态网站部署到 AWS S3上。\n\n但是上面仅仅只是实现了文章的显示，我们还存在一些问题：\n\n1. 搜索功能\n2. AutoComplete\n\n等等的这些服务是没有用静态 API 来实现的。\n\n### CQRS 结合微服务\n\n既然可以有这么多分法，并且我们都已经准备好分他们了。那么分了之后，我们就可以把他们都合到一起了。\n\n#### Nginx as Dispatcher\n\n最常见的解耦应用的方式中，就有一种是基于 Nginx 来分发 URL 请求。在这种情况下，对于 API 的使用者，或者最终用户来说，他们都是同一个 API。只是在后台里，这个 API 已经是不同的几个 API 组成，如下图所示：\n\n![Nginx 解耦微服务](http://growth.phodal.com/assets/article/chapter8/nginx-microservices.png)\n\n客户端的请求来到 API Gateway，根据不同的请求类型，这些 URL 被分发到不同的 Service，如 Review Service、Order Service 等等。\n\n对于我们想要设计的系统来说也是如此，我们可以通过这个 Dispatcher 来解耦我们的服务。\n\n#### CQRS 结合微服务\n\n现在，我们想要的系统的雏形已经出现了。\n\n从源头上来说，我们把能缓存的内容变成了静态的 HTML，通过 CDN 来分发。并且，我们还可以将把不同的服务独立出来。\n\n从实现上来说，我们将博客的数据变成了两部分： 一个以 Git + JSON 格式存在的 API，它除了可以用于生成 HTML，另外一部分作为 API 来使用。\n\n![CQRS 结合微服务](http://growth.phodal.com/assets/article/chapter8/dispatcher-services.png)\n\n最后，我们可以通过上面说到的 Nginx 或者 Apache 来当这里的 Request Dispatcher。\n","slug":"8.3.1-seperate","published":1,"updated":"2016-05-12T01:45:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuf7mpqh001ftsifho1tmakc","content":"<p>解耦是一件很有意思的过程，它也能反应架构的变迁。</p>\n<h3 id=\"从-MVC-与微服务\"><a href=\"#从-MVC-与微服务\" class=\"headerlink\" title=\"从 MVC 与微服务\"></a>从 MVC 与微服务</h3><p>在我初识架构是什么的时候，我看到了 MVC 模式架构。这种模式是基于分层的结构，要理解起逻辑也很简单。这个模式如下图所示：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter8/spring-mvc.png\" alt=\"Spring MVC\"></p>\n<p>由我们的 Front controller 来处理由客户端（浏览器）发过来的请求，实际上这里的 Front controller 是 DispatcherServlet。 DispatcherServlet 负责将请求派发到特定的 handler，接着交由对应的Controller来处理这个请求。依据请求的内容，Controller 将创建相应 model。随后这个 model 将传到前端框架中渲染，最后再返回给浏览器。</p>\n<p>但是这样的架构充满了太多的问题，如 view 与 controller 的紧密耦合、controller 粒度难以把控的问题等等。</p>\n<a id=\"more\"></a>\n<h4 id=\"Django-MTV\"><a href=\"#Django-MTV\" class=\"headerlink\" title=\"Django MTV\"></a>Django MTV</h4><p>我使用 Django 差不多有四年了，主要是用在我的博客上。与 MVC 模式一对比，我发现 Django 在分层上还是很有鲜明特性的：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter8/django-mtv.png\" alt=\"Django MTV架构\"></p>\n<p>在 Django 中没有 Controller 的概念，Controller 做的事都交由 URL Dispatcher，而这是一个高级的 URL Dispatcher。它使用正则表达式匹配 URL，然后调用合适的 Python 函数。然后这个函数就交由相应的 View 层来处理，而这个 View 层则是处理业务逻辑的地方。处理完后，Model 将传到 Template 层来处理。</p>\n<p>对比如下图如示：</p>\n<table>\n<thead>\n<tr>\n<th>传统的MVC架构</th>\n<th>Django 架构</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Model</td>\n<td>Model(Data Access Logic)</td>\n</tr>\n<tr>\n<td>View</td>\n<td>Template(Presentation Logic)</td>\n</tr>\n<tr>\n<td>View</td>\n<td>View(Business Logic)</td>\n</tr>\n<tr>\n<td>Controller</td>\n<td>Django itself</td>\n</tr>\n</tbody>\n</table>\n<p>从上面的对比中，我们可以发现 Django 把 View 分层了。以 Django 对于 MVC 的解释来说，视图用来描述要展现给用户的数据。 而在 ROR 等其他的 MVC 框架中，控制器负责决定向用户展现哪些数据，而视图决定如何展现数据。</p>\n<p>联想起我最近在学的 Scala 中的 Play 框架，我发现了其中诸多的相似之处：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter8/playarchtectureasyncrequest.png\" alt=\"Play 框架异步请求\"></p>\n<p>虽然在 Play 中，也有 Controller 的概念。但是对于 URL 的处理先交给了 Routes 来处理，随后再交给 Controller 中的函数来处理。</p>\n<p>不过与一般 MVC 架构的最大不同之处，怕是在于 Django 的 APP 架构。Django 中有一个名为 APP 的概念，它是实现某种功能的Web 应用程序。如果我们要设计一个博客系统的话，那么在这个项目中，Blogpost 是一个 APP、评论是一个 APP、用户管理是一个 APP等等。每个 APP 之中，都会有自己的 Model、View 和 Controller。其架构如下图所示：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter8/django_app_arch.jpg\" alt=\"Django APP 架构\"></p>\n<p>当我们需要创建一个新的功能的时候，我们只需要创建一个新的 APP 即可——为这个 APP 配置新的 URL、创建新的 Model 以及新的 View。如果功能上没有与原来的代码重复的话，那么这就是一个独立的 APP，并且我们可以将这个 APP 的代码 Copy/Paste 到一个新的项目中，并且不需要做修改。</p>\n<p>与一般的 MVC 架构相比，我们会发现我们细化了这些业务逻辑原来的三层结构，会随着 APP 的数量发生变化。如果我们有三个 APP 的话，那么我们相当于有3*三层，但是他不是等于九层。这样做可以从代码上直接减少逻辑的思考，让我们可以更加集中注意力于业务实现，同时也利于我们后期维护。</p>\n<p>虽是如此，后来我意识到了这样的架构并没有太多的先进之处。而这实际上是一个美好但是不现实的东西，因为我们还是使用同一个数据库。</p>\n<h4 id=\"微服务与-Reactive\"><a href=\"#微服务与-Reactive\" class=\"headerlink\" title=\"微服务与 Reactive\"></a>微服务与 Reactive</h4><p>在微服务架构中，它提倡将单一应用程序划分成一组小的服务，这些服务之间互相协调、互相配合。每个服务运行在其独立的进程中，服务与服务间采用轻量级的通信机制互相沟通。每个服务都应该有自己独立的数据库来存储数据。</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter8/decentralised-data.png\" alt=\"分散数据\"></p>\n<p>Django 从某种意义上有点接近微服务的概念，只是实际上并没有。因为它没有实现 Play 框架的异步请求机制。抱句话来说，应用很容易就会在调用 JDBC、Streaming API、HTTP 请求等一系列的请求中发生阻塞。</p>\n<p>这些服务都是独立的，对于服务的请求也是独立的。使用微服务来构建的应用，不会因为一个服务的瘫痪让整个系统瘫痪。最后，这一个个的微服务将合并成这个系统。</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter8/combinedlist.png\" alt=\"Combined List\"></p>\n<p>我们将我们后台的服务变成微服务的架构，在我们的前台使用 Reactive 编程，这样我们就可以结合两者的优势，解耦出更好的架构模式。然而，这其中还有一个让人不爽的问题，即数据库。如果我们使用多个数据库，那么维护成本也随着上升。而如果我们可以在后台使用类似于微服务的 Django MTV 架构，并且它可以支持异步请求的话，并在前台使用 Reactive 来编程，是不是就会更爽一点？</p>\n<h3 id=\"CQRS\"><a href=\"#CQRS\" class=\"headerlink\" title=\"CQRS\"></a>CQRS</h3><p>对于复杂的系统来说，上面的做法做确实很不错。但是对于一个简单地系统来说，这样做是不是玩过火了？如果我们要设计一个博客系统的话，那么我们是不是可以考虑将 Write/Read 分离就可以了？</p>\n<blockquote>\n<p>命令和查询责任分离 Command Query Responsibility Segregation（CQRS）是一种将系统的读写操作分离为两种独立模型的架构模式。</p>\n</blockquote>\n<h4 id=\"CQS\"><a href=\"#CQS\" class=\"headerlink\" title=\"CQS\"></a>CQS</h4><p>对于这个架构的深入思考是起源于之前在理解 DDD。据说在 DDD 领域中被广泛使用。理解 CQRS 可以用分离 Model 和 API 集合来处理读取和写入请求开始，即 CQS（Command Query Separation，命令查询分离）模式。CQS 模式最早由软件大师Bertrand Meyer（Eiffel语言之父，面向对象开-闭原则 OCP 提出者）提出。他认为，对象的行为仅有两种：命令和查询。</p>\n<p>这个类型的架构如下图所示：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter8/cqrs-2.png\" alt=\"CQS Basic\"></p>\n<blockquote>\n<p>除了编写优化的查询类型，它可以让我们轻松换 API 的一部分读一些缓存机制，甚至移动读取 API 的请求到另一台服务器。</p>\n</blockquote>\n<p>对于读取和写入相差不多的应用来说，这种架构看起来还是不错的。而这种架构还存在一个瓶颈问题，使用同一个 RDBMS。对于写入多、读取少的应用来说，这种架构还是存在着不合理性。</p>\n<p>为了解决这个问题，人们自然是使用缓存来解决这个问题了。我们在我们的应用服务外有一个 HTTP 服务器，而在 HTTP 服务器之外有一个缓存服务器，用于缓存用户常驻的一些资源。如下图所示：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter8/cache-website-blog.png\" alt=\"带缓存的 Web 架构\"></p>\n<p>而实际上这样的服务器可能是多余的——我们为什么不直接生成HTML就好了？</p>\n<h4 id=\"编辑-发布分离\"><a href=\"#编辑-发布分离\" class=\"headerlink\" title=\"编辑-发布分离\"></a>编辑-发布分离</h4><p>或许你听过 Martin Folwer 提出的编辑-发布分享式架构：即文章在编辑时是一个形式，而发表时是另一个形式，比如用 Markdown 编辑，而用 HTML 发表。</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter8/edit-pub.jpg\" alt=\"编辑-发布分离\"></p>\n<p>而最典型的应用就是流行于 GitHub 的 Hexo、Jekyll 框架之类的静态网站。如下图所示的是 Hexo 的工作流：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter8/hexo-workflow.png\" alt=\"Hexo 站点工作流\"></p>\n<p>我们在本地生成我们的项目，然后可以创建一个新的博客、开始编写内容等等。接着，我们可以在本地运行起这个服务，除了查看博客的内容，还可以修改样式等等。完成上面的工作后，我们就可以生成静态内容，然后部署我们的应用到GitHub Page上。这一切看上去都完美，我们有两个不同的数据源——一个是 md 格式的文本，一个是最后生成的 HTML。它们已经实现了读写/分离：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter8/cqrs-separate-storage.png\" alt=\"CQRS 进阶\"></p>\n<p>但是作为一个前端开发人员，没有 JSON，用不了 Ajax 请求，我怎么把我的博客做成一个单页面应用？</p>\n<h4 id=\"编辑-发布-开发分离\"><a href=\"#编辑-发布-开发分离\" class=\"headerlink\" title=\"编辑-发布-开发分离\"></a>编辑-发布-开发分离</h4><p>因为我们需要交我们的博客转为 JSON，而不是一个 hexo 之类的格式。有了这些 JSON 文件的存在，我们就可以把 Git 当成一个 NoSQL 数据库。同时这些 JSON 文件也可以直接当成 API 来</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter8/git-internals-commits.png\" alt=\"Git As NoSQL DB\"></p>\n<p>其次，这些博客还需要 hexo 一样生成 HTML。</p>\n<p>并且，开发人员在开发的时候不会影响到编辑的使用，于是就有了下面的架构：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter8/travis-edit-publish-code.png\" alt=\"基于 Git 的编辑-发布分离\"></p>\n<p>在这其中我们有两种不同的数据形式，即存储着 Markdown 数据的 JSON 文件和最后生成的 HTML。</p>\n<p>对博客数量不是很大的网站，或者说一般的网站来说，用上面的技术都不是问题。然而有大量数据的网站怎么办？使用 EventBus：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter8/cqrs-arch.png\" alt=\"CQRS 和 EventBus\"></p>\n<p>在我之前玩的一个 Demo 中，使用 Python 中的 Scrapy 爬虫来抓取现有的动态网站，并将其变成静态网站部署到 AWS S3上。</p>\n<p>但是上面仅仅只是实现了文章的显示，我们还存在一些问题：</p>\n<ol>\n<li>搜索功能</li>\n<li>AutoComplete</li>\n</ol>\n<p>等等的这些服务是没有用静态 API 来实现的。</p>\n<h3 id=\"CQRS-结合微服务\"><a href=\"#CQRS-结合微服务\" class=\"headerlink\" title=\"CQRS 结合微服务\"></a>CQRS 结合微服务</h3><p>既然可以有这么多分法，并且我们都已经准备好分他们了。那么分了之后，我们就可以把他们都合到一起了。</p>\n<h4 id=\"Nginx-as-Dispatcher\"><a href=\"#Nginx-as-Dispatcher\" class=\"headerlink\" title=\"Nginx as Dispatcher\"></a>Nginx as Dispatcher</h4><p>最常见的解耦应用的方式中，就有一种是基于 Nginx 来分发 URL 请求。在这种情况下，对于 API 的使用者，或者最终用户来说，他们都是同一个 API。只是在后台里，这个 API 已经是不同的几个 API 组成，如下图所示：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter8/nginx-microservices.png\" alt=\"Nginx 解耦微服务\"></p>\n<p>客户端的请求来到 API Gateway，根据不同的请求类型，这些 URL 被分发到不同的 Service，如 Review Service、Order Service 等等。</p>\n<p>对于我们想要设计的系统来说也是如此，我们可以通过这个 Dispatcher 来解耦我们的服务。</p>\n<h4 id=\"CQRS-结合微服务-1\"><a href=\"#CQRS-结合微服务-1\" class=\"headerlink\" title=\"CQRS 结合微服务\"></a>CQRS 结合微服务</h4><p>现在，我们想要的系统的雏形已经出现了。</p>\n<p>从源头上来说，我们把能缓存的内容变成了静态的 HTML，通过 CDN 来分发。并且，我们还可以将把不同的服务独立出来。</p>\n<p>从实现上来说，我们将博客的数据变成了两部分： 一个以 Git + JSON 格式存在的 API，它除了可以用于生成 HTML，另外一部分作为 API 来使用。</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter8/dispatcher-services.png\" alt=\"CQRS 结合微服务\"></p>\n<p>最后，我们可以通过上面说到的 Nginx 或者 Apache 来当这里的 Request Dispatcher。</p>\n","excerpt":"<p>解耦是一件很有意思的过程，它也能反应架构的变迁。</p>\n<h3 id=\"从-MVC-与微服务\"><a href=\"#从-MVC-与微服务\" class=\"headerlink\" title=\"从 MVC 与微服务\"></a>从 MVC 与微服务</h3><p>在我初识架构是什么的时候，我看到了 MVC 模式架构。这种模式是基于分层的结构，要理解起逻辑也很简单。这个模式如下图所示：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter8/spring-mvc.png\" alt=\"Spring MVC\"></p>\n<p>由我们的 Front controller 来处理由客户端（浏览器）发过来的请求，实际上这里的 Front controller 是 DispatcherServlet。 DispatcherServlet 负责将请求派发到特定的 handler，接着交由对应的Controller来处理这个请求。依据请求的内容，Controller 将创建相应 model。随后这个 model 将传到前端框架中渲染，最后再返回给浏览器。</p>\n<p>但是这样的架构充满了太多的问题，如 view 与 controller 的紧密耦合、controller 粒度难以把控的问题等等。</p>","more":"<h4 id=\"Django-MTV\"><a href=\"#Django-MTV\" class=\"headerlink\" title=\"Django MTV\"></a>Django MTV</h4><p>我使用 Django 差不多有四年了，主要是用在我的博客上。与 MVC 模式一对比，我发现 Django 在分层上还是很有鲜明特性的：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter8/django-mtv.png\" alt=\"Django MTV架构\"></p>\n<p>在 Django 中没有 Controller 的概念，Controller 做的事都交由 URL Dispatcher，而这是一个高级的 URL Dispatcher。它使用正则表达式匹配 URL，然后调用合适的 Python 函数。然后这个函数就交由相应的 View 层来处理，而这个 View 层则是处理业务逻辑的地方。处理完后，Model 将传到 Template 层来处理。</p>\n<p>对比如下图如示：</p>\n<table>\n<thead>\n<tr>\n<th>传统的MVC架构</th>\n<th>Django 架构</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Model</td>\n<td>Model(Data Access Logic)</td>\n</tr>\n<tr>\n<td>View</td>\n<td>Template(Presentation Logic)</td>\n</tr>\n<tr>\n<td>View</td>\n<td>View(Business Logic)</td>\n</tr>\n<tr>\n<td>Controller</td>\n<td>Django itself</td>\n</tr>\n</tbody>\n</table>\n<p>从上面的对比中，我们可以发现 Django 把 View 分层了。以 Django 对于 MVC 的解释来说，视图用来描述要展现给用户的数据。 而在 ROR 等其他的 MVC 框架中，控制器负责决定向用户展现哪些数据，而视图决定如何展现数据。</p>\n<p>联想起我最近在学的 Scala 中的 Play 框架，我发现了其中诸多的相似之处：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter8/playarchtectureasyncrequest.png\" alt=\"Play 框架异步请求\"></p>\n<p>虽然在 Play 中，也有 Controller 的概念。但是对于 URL 的处理先交给了 Routes 来处理，随后再交给 Controller 中的函数来处理。</p>\n<p>不过与一般 MVC 架构的最大不同之处，怕是在于 Django 的 APP 架构。Django 中有一个名为 APP 的概念，它是实现某种功能的Web 应用程序。如果我们要设计一个博客系统的话，那么在这个项目中，Blogpost 是一个 APP、评论是一个 APP、用户管理是一个 APP等等。每个 APP 之中，都会有自己的 Model、View 和 Controller。其架构如下图所示：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter8/django_app_arch.jpg\" alt=\"Django APP 架构\"></p>\n<p>当我们需要创建一个新的功能的时候，我们只需要创建一个新的 APP 即可——为这个 APP 配置新的 URL、创建新的 Model 以及新的 View。如果功能上没有与原来的代码重复的话，那么这就是一个独立的 APP，并且我们可以将这个 APP 的代码 Copy/Paste 到一个新的项目中，并且不需要做修改。</p>\n<p>与一般的 MVC 架构相比，我们会发现我们细化了这些业务逻辑原来的三层结构，会随着 APP 的数量发生变化。如果我们有三个 APP 的话，那么我们相当于有3*三层，但是他不是等于九层。这样做可以从代码上直接减少逻辑的思考，让我们可以更加集中注意力于业务实现，同时也利于我们后期维护。</p>\n<p>虽是如此，后来我意识到了这样的架构并没有太多的先进之处。而这实际上是一个美好但是不现实的东西，因为我们还是使用同一个数据库。</p>\n<h4 id=\"微服务与-Reactive\"><a href=\"#微服务与-Reactive\" class=\"headerlink\" title=\"微服务与 Reactive\"></a>微服务与 Reactive</h4><p>在微服务架构中，它提倡将单一应用程序划分成一组小的服务，这些服务之间互相协调、互相配合。每个服务运行在其独立的进程中，服务与服务间采用轻量级的通信机制互相沟通。每个服务都应该有自己独立的数据库来存储数据。</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter8/decentralised-data.png\" alt=\"分散数据\"></p>\n<p>Django 从某种意义上有点接近微服务的概念，只是实际上并没有。因为它没有实现 Play 框架的异步请求机制。抱句话来说，应用很容易就会在调用 JDBC、Streaming API、HTTP 请求等一系列的请求中发生阻塞。</p>\n<p>这些服务都是独立的，对于服务的请求也是独立的。使用微服务来构建的应用，不会因为一个服务的瘫痪让整个系统瘫痪。最后，这一个个的微服务将合并成这个系统。</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter8/combinedlist.png\" alt=\"Combined List\"></p>\n<p>我们将我们后台的服务变成微服务的架构，在我们的前台使用 Reactive 编程，这样我们就可以结合两者的优势，解耦出更好的架构模式。然而，这其中还有一个让人不爽的问题，即数据库。如果我们使用多个数据库，那么维护成本也随着上升。而如果我们可以在后台使用类似于微服务的 Django MTV 架构，并且它可以支持异步请求的话，并在前台使用 Reactive 来编程，是不是就会更爽一点？</p>\n<h3 id=\"CQRS\"><a href=\"#CQRS\" class=\"headerlink\" title=\"CQRS\"></a>CQRS</h3><p>对于复杂的系统来说，上面的做法做确实很不错。但是对于一个简单地系统来说，这样做是不是玩过火了？如果我们要设计一个博客系统的话，那么我们是不是可以考虑将 Write/Read 分离就可以了？</p>\n<blockquote>\n<p>命令和查询责任分离 Command Query Responsibility Segregation（CQRS）是一种将系统的读写操作分离为两种独立模型的架构模式。</p>\n</blockquote>\n<h4 id=\"CQS\"><a href=\"#CQS\" class=\"headerlink\" title=\"CQS\"></a>CQS</h4><p>对于这个架构的深入思考是起源于之前在理解 DDD。据说在 DDD 领域中被广泛使用。理解 CQRS 可以用分离 Model 和 API 集合来处理读取和写入请求开始，即 CQS（Command Query Separation，命令查询分离）模式。CQS 模式最早由软件大师Bertrand Meyer（Eiffel语言之父，面向对象开-闭原则 OCP 提出者）提出。他认为，对象的行为仅有两种：命令和查询。</p>\n<p>这个类型的架构如下图所示：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter8/cqrs-2.png\" alt=\"CQS Basic\"></p>\n<blockquote>\n<p>除了编写优化的查询类型，它可以让我们轻松换 API 的一部分读一些缓存机制，甚至移动读取 API 的请求到另一台服务器。</p>\n</blockquote>\n<p>对于读取和写入相差不多的应用来说，这种架构看起来还是不错的。而这种架构还存在一个瓶颈问题，使用同一个 RDBMS。对于写入多、读取少的应用来说，这种架构还是存在着不合理性。</p>\n<p>为了解决这个问题，人们自然是使用缓存来解决这个问题了。我们在我们的应用服务外有一个 HTTP 服务器，而在 HTTP 服务器之外有一个缓存服务器，用于缓存用户常驻的一些资源。如下图所示：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter8/cache-website-blog.png\" alt=\"带缓存的 Web 架构\"></p>\n<p>而实际上这样的服务器可能是多余的——我们为什么不直接生成HTML就好了？</p>\n<h4 id=\"编辑-发布分离\"><a href=\"#编辑-发布分离\" class=\"headerlink\" title=\"编辑-发布分离\"></a>编辑-发布分离</h4><p>或许你听过 Martin Folwer 提出的编辑-发布分享式架构：即文章在编辑时是一个形式，而发表时是另一个形式，比如用 Markdown 编辑，而用 HTML 发表。</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter8/edit-pub.jpg\" alt=\"编辑-发布分离\"></p>\n<p>而最典型的应用就是流行于 GitHub 的 Hexo、Jekyll 框架之类的静态网站。如下图所示的是 Hexo 的工作流：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter8/hexo-workflow.png\" alt=\"Hexo 站点工作流\"></p>\n<p>我们在本地生成我们的项目，然后可以创建一个新的博客、开始编写内容等等。接着，我们可以在本地运行起这个服务，除了查看博客的内容，还可以修改样式等等。完成上面的工作后，我们就可以生成静态内容，然后部署我们的应用到GitHub Page上。这一切看上去都完美，我们有两个不同的数据源——一个是 md 格式的文本，一个是最后生成的 HTML。它们已经实现了读写/分离：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter8/cqrs-separate-storage.png\" alt=\"CQRS 进阶\"></p>\n<p>但是作为一个前端开发人员，没有 JSON，用不了 Ajax 请求，我怎么把我的博客做成一个单页面应用？</p>\n<h4 id=\"编辑-发布-开发分离\"><a href=\"#编辑-发布-开发分离\" class=\"headerlink\" title=\"编辑-发布-开发分离\"></a>编辑-发布-开发分离</h4><p>因为我们需要交我们的博客转为 JSON，而不是一个 hexo 之类的格式。有了这些 JSON 文件的存在，我们就可以把 Git 当成一个 NoSQL 数据库。同时这些 JSON 文件也可以直接当成 API 来</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter8/git-internals-commits.png\" alt=\"Git As NoSQL DB\"></p>\n<p>其次，这些博客还需要 hexo 一样生成 HTML。</p>\n<p>并且，开发人员在开发的时候不会影响到编辑的使用，于是就有了下面的架构：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter8/travis-edit-publish-code.png\" alt=\"基于 Git 的编辑-发布分离\"></p>\n<p>在这其中我们有两种不同的数据形式，即存储着 Markdown 数据的 JSON 文件和最后生成的 HTML。</p>\n<p>对博客数量不是很大的网站，或者说一般的网站来说，用上面的技术都不是问题。然而有大量数据的网站怎么办？使用 EventBus：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter8/cqrs-arch.png\" alt=\"CQRS 和 EventBus\"></p>\n<p>在我之前玩的一个 Demo 中，使用 Python 中的 Scrapy 爬虫来抓取现有的动态网站，并将其变成静态网站部署到 AWS S3上。</p>\n<p>但是上面仅仅只是实现了文章的显示，我们还存在一些问题：</p>\n<ol>\n<li>搜索功能</li>\n<li>AutoComplete</li>\n</ol>\n<p>等等的这些服务是没有用静态 API 来实现的。</p>\n<h3 id=\"CQRS-结合微服务\"><a href=\"#CQRS-结合微服务\" class=\"headerlink\" title=\"CQRS 结合微服务\"></a>CQRS 结合微服务</h3><p>既然可以有这么多分法，并且我们都已经准备好分他们了。那么分了之后，我们就可以把他们都合到一起了。</p>\n<h4 id=\"Nginx-as-Dispatcher\"><a href=\"#Nginx-as-Dispatcher\" class=\"headerlink\" title=\"Nginx as Dispatcher\"></a>Nginx as Dispatcher</h4><p>最常见的解耦应用的方式中，就有一种是基于 Nginx 来分发 URL 请求。在这种情况下，对于 API 的使用者，或者最终用户来说，他们都是同一个 API。只是在后台里，这个 API 已经是不同的几个 API 组成，如下图所示：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter8/nginx-microservices.png\" alt=\"Nginx 解耦微服务\"></p>\n<p>客户端的请求来到 API Gateway，根据不同的请求类型，这些 URL 被分发到不同的 Service，如 Review Service、Order Service 等等。</p>\n<p>对于我们想要设计的系统来说也是如此，我们可以通过这个 Dispatcher 来解耦我们的服务。</p>\n<h4 id=\"CQRS-结合微服务-1\"><a href=\"#CQRS-结合微服务-1\" class=\"headerlink\" title=\"CQRS 结合微服务\"></a>CQRS 结合微服务</h4><p>现在，我们想要的系统的雏形已经出现了。</p>\n<p>从源头上来说，我们把能缓存的内容变成了静态的 HTML，通过 CDN 来分发。并且，我们还可以将把不同的服务独立出来。</p>\n<p>从实现上来说，我们将博客的数据变成了两部分： 一个以 Git + JSON 格式存在的 API，它除了可以用于生成 HTML，另外一部分作为 API 来使用。</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter8/dispatcher-services.png\" alt=\"CQRS 结合微服务\"></p>\n<p>最后，我们可以通过上面说到的 Nginx 或者 Apache 来当这里的 Request Dispatcher。</p>"},{"title":"架构模式","date":"2016-05-11T15:45:08.000Z","_content":"\n> 模式就是最好的架构。\n\n### 架构的产生\n\n在我开始接触架构设计的时候，我买了几本书然后我就开始学习了。我发现在这些书中都出现了一些相似的东西，如基本的分层设计、Pipe and Filters 模式、MVC 模式。然后，我开始意料到这些模式本身就是最好的架构。\n\nMVC 模式本身也是接于分层而设计的，如下图是 Spring MVC 的请求处理过程：\n\n![Spring MVC](http://growth.phodal.com/assets/article/chapter8/spring-mvc.png)\n\n而这个框架只是框架本身的架构，这一类也是我们预先设计好的框架。\n\n<!-- more -->\n\n在框架之上，我们会有自己本身的业务所带来的模式。如下图是我的网上搜罗到的一个简单的发送邮件的架构：\n\n![发送邮件中的 Pipe and Filters 模式](http://growth.phodal.com/assets/article/chapter8/basic-paf.png)\n\n这样的模式则是由业务发展的过程中演进出来的。\n\n### 预设计式架构\n\n在我们日常使用的框架多数是预先设计的构架，因为这个架构本身的目标是明确的。系统会围绕一定的架构去构建，并且在这个过程中架构会帮助我们更好地理解系统。如下图所示的是 Emacs 的架构：\n\n![Emacs 架构](http://growth.phodal.com/assets/article/chapter8/emacs-architecture.png)\n\n它采用的是交互式应用程序员应用广泛的模型-视图-控制器模式。\n\n无论是瀑布式开发——设计好系统的框架，然后对系统的每个部分进行独立的完善和设计，最后系统再集成到一起。还是敏捷式开发——先做出 MVP，再一步步完善。他们都需要一定的预先式设计，只是传统的开发模式让两者看上去是等同的。\n\n在过去由于 IT 技术变革小，新技术产生的速率也比较低，预先设计系统的架构是一种很不错的选择。然而，技术的发展趋势是越来越快，现有的设计往往在很短的一些时间里就需要推倒重来。\n\n### 演进式架构：拥抱变化\n\n演进式架构则是我们日常工作的业务代码库演进出来的。由于业务本身在不断发展，我们不断地演进系统的架构。也就是这样模式下产生的架构系统会更加稳定，也更加优美。仅仅依赖于事先的设计，而不考虑架构在后期业务中的变化是一种不可取的设计模式。\n\n这不并意味着不采用预先式设计，而是不一味着去靠原先系统的架构。\n","source":"_posts/8.2.0-arch-pattern.md","raw":"title: 架构模式\ndate: 2016-5-11 23:45:08\ntags:\n---\n\n> 模式就是最好的架构。\n\n### 架构的产生\n\n在我开始接触架构设计的时候，我买了几本书然后我就开始学习了。我发现在这些书中都出现了一些相似的东西，如基本的分层设计、Pipe and Filters 模式、MVC 模式。然后，我开始意料到这些模式本身就是最好的架构。\n\nMVC 模式本身也是接于分层而设计的，如下图是 Spring MVC 的请求处理过程：\n\n![Spring MVC](http://growth.phodal.com/assets/article/chapter8/spring-mvc.png)\n\n而这个框架只是框架本身的架构，这一类也是我们预先设计好的框架。\n\n<!-- more -->\n\n在框架之上，我们会有自己本身的业务所带来的模式。如下图是我的网上搜罗到的一个简单的发送邮件的架构：\n\n![发送邮件中的 Pipe and Filters 模式](http://growth.phodal.com/assets/article/chapter8/basic-paf.png)\n\n这样的模式则是由业务发展的过程中演进出来的。\n\n### 预设计式架构\n\n在我们日常使用的框架多数是预先设计的构架，因为这个架构本身的目标是明确的。系统会围绕一定的架构去构建，并且在这个过程中架构会帮助我们更好地理解系统。如下图所示的是 Emacs 的架构：\n\n![Emacs 架构](http://growth.phodal.com/assets/article/chapter8/emacs-architecture.png)\n\n它采用的是交互式应用程序员应用广泛的模型-视图-控制器模式。\n\n无论是瀑布式开发——设计好系统的框架，然后对系统的每个部分进行独立的完善和设计，最后系统再集成到一起。还是敏捷式开发——先做出 MVP，再一步步完善。他们都需要一定的预先式设计，只是传统的开发模式让两者看上去是等同的。\n\n在过去由于 IT 技术变革小，新技术产生的速率也比较低，预先设计系统的架构是一种很不错的选择。然而，技术的发展趋势是越来越快，现有的设计往往在很短的一些时间里就需要推倒重来。\n\n### 演进式架构：拥抱变化\n\n演进式架构则是我们日常工作的业务代码库演进出来的。由于业务本身在不断发展，我们不断地演进系统的架构。也就是这样模式下产生的架构系统会更加稳定，也更加优美。仅仅依赖于事先的设计，而不考虑架构在后期业务中的变化是一种不可取的设计模式。\n\n这不并意味着不采用预先式设计，而是不一味着去靠原先系统的架构。\n","slug":"8.2.0-arch-pattern","published":1,"updated":"2016-05-11T02:30:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuf7mpqj001gtsiffw2gq3og","content":"<blockquote>\n<p>模式就是最好的架构。</p>\n</blockquote>\n<h3 id=\"架构的产生\"><a href=\"#架构的产生\" class=\"headerlink\" title=\"架构的产生\"></a>架构的产生</h3><p>在我开始接触架构设计的时候，我买了几本书然后我就开始学习了。我发现在这些书中都出现了一些相似的东西，如基本的分层设计、Pipe and Filters 模式、MVC 模式。然后，我开始意料到这些模式本身就是最好的架构。</p>\n<p>MVC 模式本身也是接于分层而设计的，如下图是 Spring MVC 的请求处理过程：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter8/spring-mvc.png\" alt=\"Spring MVC\"></p>\n<p>而这个框架只是框架本身的架构，这一类也是我们预先设计好的框架。</p>\n<a id=\"more\"></a>\n<p>在框架之上，我们会有自己本身的业务所带来的模式。如下图是我的网上搜罗到的一个简单的发送邮件的架构：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter8/basic-paf.png\" alt=\"发送邮件中的 Pipe and Filters 模式\"></p>\n<p>这样的模式则是由业务发展的过程中演进出来的。</p>\n<h3 id=\"预设计式架构\"><a href=\"#预设计式架构\" class=\"headerlink\" title=\"预设计式架构\"></a>预设计式架构</h3><p>在我们日常使用的框架多数是预先设计的构架，因为这个架构本身的目标是明确的。系统会围绕一定的架构去构建，并且在这个过程中架构会帮助我们更好地理解系统。如下图所示的是 Emacs 的架构：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter8/emacs-architecture.png\" alt=\"Emacs 架构\"></p>\n<p>它采用的是交互式应用程序员应用广泛的模型-视图-控制器模式。</p>\n<p>无论是瀑布式开发——设计好系统的框架，然后对系统的每个部分进行独立的完善和设计，最后系统再集成到一起。还是敏捷式开发——先做出 MVP，再一步步完善。他们都需要一定的预先式设计，只是传统的开发模式让两者看上去是等同的。</p>\n<p>在过去由于 IT 技术变革小，新技术产生的速率也比较低，预先设计系统的架构是一种很不错的选择。然而，技术的发展趋势是越来越快，现有的设计往往在很短的一些时间里就需要推倒重来。</p>\n<h3 id=\"演进式架构：拥抱变化\"><a href=\"#演进式架构：拥抱变化\" class=\"headerlink\" title=\"演进式架构：拥抱变化\"></a>演进式架构：拥抱变化</h3><p>演进式架构则是我们日常工作的业务代码库演进出来的。由于业务本身在不断发展，我们不断地演进系统的架构。也就是这样模式下产生的架构系统会更加稳定，也更加优美。仅仅依赖于事先的设计，而不考虑架构在后期业务中的变化是一种不可取的设计模式。</p>\n<p>这不并意味着不采用预先式设计，而是不一味着去靠原先系统的架构。</p>\n","excerpt":"<blockquote>\n<p>模式就是最好的架构。</p>\n</blockquote>\n<h3 id=\"架构的产生\"><a href=\"#架构的产生\" class=\"headerlink\" title=\"架构的产生\"></a>架构的产生</h3><p>在我开始接触架构设计的时候，我买了几本书然后我就开始学习了。我发现在这些书中都出现了一些相似的东西，如基本的分层设计、Pipe and Filters 模式、MVC 模式。然后，我开始意料到这些模式本身就是最好的架构。</p>\n<p>MVC 模式本身也是接于分层而设计的，如下图是 Spring MVC 的请求处理过程：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter8/spring-mvc.png\" alt=\"Spring MVC\"></p>\n<p>而这个框架只是框架本身的架构，这一类也是我们预先设计好的框架。</p>","more":"<p>在框架之上，我们会有自己本身的业务所带来的模式。如下图是我的网上搜罗到的一个简单的发送邮件的架构：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter8/basic-paf.png\" alt=\"发送邮件中的 Pipe and Filters 模式\"></p>\n<p>这样的模式则是由业务发展的过程中演进出来的。</p>\n<h3 id=\"预设计式架构\"><a href=\"#预设计式架构\" class=\"headerlink\" title=\"预设计式架构\"></a>预设计式架构</h3><p>在我们日常使用的框架多数是预先设计的构架，因为这个架构本身的目标是明确的。系统会围绕一定的架构去构建，并且在这个过程中架构会帮助我们更好地理解系统。如下图所示的是 Emacs 的架构：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter8/emacs-architecture.png\" alt=\"Emacs 架构\"></p>\n<p>它采用的是交互式应用程序员应用广泛的模型-视图-控制器模式。</p>\n<p>无论是瀑布式开发——设计好系统的框架，然后对系统的每个部分进行独立的完善和设计，最后系统再集成到一起。还是敏捷式开发——先做出 MVP，再一步步完善。他们都需要一定的预先式设计，只是传统的开发模式让两者看上去是等同的。</p>\n<p>在过去由于 IT 技术变革小，新技术产生的速率也比较低，预先设计系统的架构是一种很不错的选择。然而，技术的发展趋势是越来越快，现有的设计往往在很短的一些时间里就需要推倒重来。</p>\n<h3 id=\"演进式架构：拥抱变化\"><a href=\"#演进式架构：拥抱变化\" class=\"headerlink\" title=\"演进式架构：拥抱变化\"></a>演进式架构：拥抱变化</h3><p>演进式架构则是我们日常工作的业务代码库演进出来的。由于业务本身在不断发展，我们不断地演进系统的架构。也就是这样模式下产生的架构系统会更加稳定，也更加优美。仅仅依赖于事先的设计，而不考虑架构在后期业务中的变化是一种不可取的设计模式。</p>\n<p>这不并意味着不采用预先式设计，而是不一味着去靠原先系统的架构。</p>"},{"title":"网站性能","date":"2016-05-07T15:45:08.000Z","_content":"\n网站性能直接影响到了网站的响应时间、吞吐量等等，也是运维、开发一系列技术的体现。\n\n### 网站性能监测\n\n网站性能监测\n\n> 网站可用性是网站性能监测的重要指标之一，表示在一段时间内，网站处于“正常状态”的机率。\n\n - DNS 解析\n - 内存、硬盘等等\n - 网页打开速度\n\n<!-- more -->\n\n#### 应用性能指数\n\n> Apdex 联盟，一个由众多网络分析技术公司和测量工业组成的联盟组织，它们联合起来开发了“应用性能指数”即“Apdex”(Application Performance Index)，用一句话来概括，Apdex 是用户对应用性能满意度的量化值。它提供了一个统一的测量和报告用户体验的方法，第一次把最终用户的体验和应用性能联系在了一起。\n\n任务响应时间定义为：当用户操作（鼠标点击、输入、回车）开始到系统（客户机、网络、服务器）响应从而用户能继续这个过程所经过的时间。这些等待时间定义了应用程序的“响应度”。该指数是基于应用程序响应度的三个方面：\n\n - 满意:用户充分工作。这就是目标时间（T秒），即在此时间里用户的工作没有因应用程序的响应时间而受阻，如3秒。\n - 容忍:用户感觉到响应滞后，响应时间大于 T，但能继续这个过程，如3～12秒。\n - 挫折:响应时间大于 F 秒的性能是不能接受的，用户可能放弃这个过程。F 等于 T×4，在本例子中为12秒。\n\n\n### 网站性能\n\n针对网站性能优化领域，网上已经有相当多的总结，这里只罗列一些常见（我用过）的策略。\n\n#### 减少 HTTP 请求\n\n从网上查找的情况分类来看，有下面的一些情况：\n\n - 合并 JavaScript 和 CSS。只是这种方式需要好好评估，因为合并过多的 JavaScript，可能会导致 JavaScript 文件过大。一个大的文件将增加 Load时间，导致不好的用户体验。\n - CSS Sprites。即将一个页面涉及到的所有零星图片都包含到一张大图中去。值得注意的是，像 Logo 这一类文件将不要加到里面去了。\n - 拆分初始化负载。将页面加载时需要的一堆 JavaScript 文件，分成两部分：渲染页面所必需的和其他的。页面初始化时，只加载必须的，其余的等会加载。\n - 划分主域。将资源划分的请求划分到几个不同的域上，来加速资源请求。\n\n对于我这样的懒人来说，我使用 Google 出品的 [PageSpeed](https://developers.google.com/speed/pagespeed/?hl=zh-CN)。它主要的功能是针对前端页面而进行服务器端的优化，对前端设计人员来说，可以省去优化 css、js 以及图片的过程。它可以对 CSS 和 JavaScript 压缩、合并、级联、内联，生成一个新的 Script 和 CSS 文件 。还有图像优化：剥离元数据、动态调整，重新压缩，如针对 Chrome 浏览器生成 WebP 文件。还可以推迟图像和 JavaScript 加载。\n\n#### 页面内部优化\n\nHTML 页面内的优化的目的便是：**尽快渲染出页面**。常见的优化策略便是：\n\n - 将 CSS 放在顶部，即早点渲染出页面及其样式。\n - 将 JavaScript 放在底部。如果有后台渲染机制，那么就应该将 JS 放到页面底部来加速页面加载。如果是单页面应用，那么这个 JS 就应该在页面顶部。\n - 压缩 HTML。在我们写模板的过程中，一些判断可能会导致页面有过多的空格。压缩这些 HTML，可以稍微提高一下页面速度。\n\n这里的大部分内容都应该通过修改代码来完成。\n\n#### 启用缓存\n\n前面的缓存一节里，我们说过了一些缓存的策略，我们再稍微提一下。\n\n - 后台优化，如数据库端缓存\n - 启用页面缓存，即应用层缓存\n\n#### 减少下载量\n\n简单地来说，就是减少对服务器的请求：\n\n - 使用 CDN\n - 使用外部 JavaScript 和 CSS\n - 缓存：使用 gzip 压缩、添加 Expires 头、配置 ETag、使 AjaX 可缓存\n\n#### 网络连接上的优化\n\n主要就是对域名到服务器进行优化，因此从方法上有：\n\n - DNS 域名解析加速\n - 减少 DNS 查找\n","source":"_posts/5.2.0-performance.md","raw":"title: 网站性能\ndate: 2016-5-7 23:45:08\ntags:\n---\n\n网站性能直接影响到了网站的响应时间、吞吐量等等，也是运维、开发一系列技术的体现。\n\n### 网站性能监测\n\n网站性能监测\n\n> 网站可用性是网站性能监测的重要指标之一，表示在一段时间内，网站处于“正常状态”的机率。\n\n - DNS 解析\n - 内存、硬盘等等\n - 网页打开速度\n\n<!-- more -->\n\n#### 应用性能指数\n\n> Apdex 联盟，一个由众多网络分析技术公司和测量工业组成的联盟组织，它们联合起来开发了“应用性能指数”即“Apdex”(Application Performance Index)，用一句话来概括，Apdex 是用户对应用性能满意度的量化值。它提供了一个统一的测量和报告用户体验的方法，第一次把最终用户的体验和应用性能联系在了一起。\n\n任务响应时间定义为：当用户操作（鼠标点击、输入、回车）开始到系统（客户机、网络、服务器）响应从而用户能继续这个过程所经过的时间。这些等待时间定义了应用程序的“响应度”。该指数是基于应用程序响应度的三个方面：\n\n - 满意:用户充分工作。这就是目标时间（T秒），即在此时间里用户的工作没有因应用程序的响应时间而受阻，如3秒。\n - 容忍:用户感觉到响应滞后，响应时间大于 T，但能继续这个过程，如3～12秒。\n - 挫折:响应时间大于 F 秒的性能是不能接受的，用户可能放弃这个过程。F 等于 T×4，在本例子中为12秒。\n\n\n### 网站性能\n\n针对网站性能优化领域，网上已经有相当多的总结，这里只罗列一些常见（我用过）的策略。\n\n#### 减少 HTTP 请求\n\n从网上查找的情况分类来看，有下面的一些情况：\n\n - 合并 JavaScript 和 CSS。只是这种方式需要好好评估，因为合并过多的 JavaScript，可能会导致 JavaScript 文件过大。一个大的文件将增加 Load时间，导致不好的用户体验。\n - CSS Sprites。即将一个页面涉及到的所有零星图片都包含到一张大图中去。值得注意的是，像 Logo 这一类文件将不要加到里面去了。\n - 拆分初始化负载。将页面加载时需要的一堆 JavaScript 文件，分成两部分：渲染页面所必需的和其他的。页面初始化时，只加载必须的，其余的等会加载。\n - 划分主域。将资源划分的请求划分到几个不同的域上，来加速资源请求。\n\n对于我这样的懒人来说，我使用 Google 出品的 [PageSpeed](https://developers.google.com/speed/pagespeed/?hl=zh-CN)。它主要的功能是针对前端页面而进行服务器端的优化，对前端设计人员来说，可以省去优化 css、js 以及图片的过程。它可以对 CSS 和 JavaScript 压缩、合并、级联、内联，生成一个新的 Script 和 CSS 文件 。还有图像优化：剥离元数据、动态调整，重新压缩，如针对 Chrome 浏览器生成 WebP 文件。还可以推迟图像和 JavaScript 加载。\n\n#### 页面内部优化\n\nHTML 页面内的优化的目的便是：**尽快渲染出页面**。常见的优化策略便是：\n\n - 将 CSS 放在顶部，即早点渲染出页面及其样式。\n - 将 JavaScript 放在底部。如果有后台渲染机制，那么就应该将 JS 放到页面底部来加速页面加载。如果是单页面应用，那么这个 JS 就应该在页面顶部。\n - 压缩 HTML。在我们写模板的过程中，一些判断可能会导致页面有过多的空格。压缩这些 HTML，可以稍微提高一下页面速度。\n\n这里的大部分内容都应该通过修改代码来完成。\n\n#### 启用缓存\n\n前面的缓存一节里，我们说过了一些缓存的策略，我们再稍微提一下。\n\n - 后台优化，如数据库端缓存\n - 启用页面缓存，即应用层缓存\n\n#### 减少下载量\n\n简单地来说，就是减少对服务器的请求：\n\n - 使用 CDN\n - 使用外部 JavaScript 和 CSS\n - 缓存：使用 gzip 压缩、添加 Expires 头、配置 ETag、使 AjaX 可缓存\n\n#### 网络连接上的优化\n\n主要就是对域名到服务器进行优化，因此从方法上有：\n\n - DNS 域名解析加速\n - 减少 DNS 查找\n","slug":"5.2.0-performance","published":1,"updated":"2016-05-07T07:27:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuf7mpqk001htsift1ns8bsy","content":"<p>网站性能直接影响到了网站的响应时间、吞吐量等等，也是运维、开发一系列技术的体现。</p>\n<h3 id=\"网站性能监测\"><a href=\"#网站性能监测\" class=\"headerlink\" title=\"网站性能监测\"></a>网站性能监测</h3><p>网站性能监测</p>\n<blockquote>\n<p>网站可用性是网站性能监测的重要指标之一，表示在一段时间内，网站处于“正常状态”的机率。</p>\n</blockquote>\n<ul>\n<li>DNS 解析</li>\n<li>内存、硬盘等等</li>\n<li>网页打开速度</li>\n</ul>\n<a id=\"more\"></a>\n<h4 id=\"应用性能指数\"><a href=\"#应用性能指数\" class=\"headerlink\" title=\"应用性能指数\"></a>应用性能指数</h4><blockquote>\n<p>Apdex 联盟，一个由众多网络分析技术公司和测量工业组成的联盟组织，它们联合起来开发了“应用性能指数”即“Apdex”(Application Performance Index)，用一句话来概括，Apdex 是用户对应用性能满意度的量化值。它提供了一个统一的测量和报告用户体验的方法，第一次把最终用户的体验和应用性能联系在了一起。</p>\n</blockquote>\n<p>任务响应时间定义为：当用户操作（鼠标点击、输入、回车）开始到系统（客户机、网络、服务器）响应从而用户能继续这个过程所经过的时间。这些等待时间定义了应用程序的“响应度”。该指数是基于应用程序响应度的三个方面：</p>\n<ul>\n<li>满意:用户充分工作。这就是目标时间（T秒），即在此时间里用户的工作没有因应用程序的响应时间而受阻，如3秒。</li>\n<li>容忍:用户感觉到响应滞后，响应时间大于 T，但能继续这个过程，如3～12秒。</li>\n<li>挫折:响应时间大于 F 秒的性能是不能接受的，用户可能放弃这个过程。F 等于 T×4，在本例子中为12秒。</li>\n</ul>\n<h3 id=\"网站性能\"><a href=\"#网站性能\" class=\"headerlink\" title=\"网站性能\"></a>网站性能</h3><p>针对网站性能优化领域，网上已经有相当多的总结，这里只罗列一些常见（我用过）的策略。</p>\n<h4 id=\"减少-HTTP-请求\"><a href=\"#减少-HTTP-请求\" class=\"headerlink\" title=\"减少 HTTP 请求\"></a>减少 HTTP 请求</h4><p>从网上查找的情况分类来看，有下面的一些情况：</p>\n<ul>\n<li>合并 JavaScript 和 CSS。只是这种方式需要好好评估，因为合并过多的 JavaScript，可能会导致 JavaScript 文件过大。一个大的文件将增加 Load时间，导致不好的用户体验。</li>\n<li>CSS Sprites。即将一个页面涉及到的所有零星图片都包含到一张大图中去。值得注意的是，像 Logo 这一类文件将不要加到里面去了。</li>\n<li>拆分初始化负载。将页面加载时需要的一堆 JavaScript 文件，分成两部分：渲染页面所必需的和其他的。页面初始化时，只加载必须的，其余的等会加载。</li>\n<li>划分主域。将资源划分的请求划分到几个不同的域上，来加速资源请求。</li>\n</ul>\n<p>对于我这样的懒人来说，我使用 Google 出品的 <a href=\"https://developers.google.com/speed/pagespeed/?hl=zh-CN\" target=\"_blank\" rel=\"external\">PageSpeed</a>。它主要的功能是针对前端页面而进行服务器端的优化，对前端设计人员来说，可以省去优化 css、js 以及图片的过程。它可以对 CSS 和 JavaScript 压缩、合并、级联、内联，生成一个新的 Script 和 CSS 文件 。还有图像优化：剥离元数据、动态调整，重新压缩，如针对 Chrome 浏览器生成 WebP 文件。还可以推迟图像和 JavaScript 加载。</p>\n<h4 id=\"页面内部优化\"><a href=\"#页面内部优化\" class=\"headerlink\" title=\"页面内部优化\"></a>页面内部优化</h4><p>HTML 页面内的优化的目的便是：<strong>尽快渲染出页面</strong>。常见的优化策略便是：</p>\n<ul>\n<li>将 CSS 放在顶部，即早点渲染出页面及其样式。</li>\n<li>将 JavaScript 放在底部。如果有后台渲染机制，那么就应该将 JS 放到页面底部来加速页面加载。如果是单页面应用，那么这个 JS 就应该在页面顶部。</li>\n<li>压缩 HTML。在我们写模板的过程中，一些判断可能会导致页面有过多的空格。压缩这些 HTML，可以稍微提高一下页面速度。</li>\n</ul>\n<p>这里的大部分内容都应该通过修改代码来完成。</p>\n<h4 id=\"启用缓存\"><a href=\"#启用缓存\" class=\"headerlink\" title=\"启用缓存\"></a>启用缓存</h4><p>前面的缓存一节里，我们说过了一些缓存的策略，我们再稍微提一下。</p>\n<ul>\n<li>后台优化，如数据库端缓存</li>\n<li>启用页面缓存，即应用层缓存</li>\n</ul>\n<h4 id=\"减少下载量\"><a href=\"#减少下载量\" class=\"headerlink\" title=\"减少下载量\"></a>减少下载量</h4><p>简单地来说，就是减少对服务器的请求：</p>\n<ul>\n<li>使用 CDN</li>\n<li>使用外部 JavaScript 和 CSS</li>\n<li>缓存：使用 gzip 压缩、添加 Expires 头、配置 ETag、使 AjaX 可缓存</li>\n</ul>\n<h4 id=\"网络连接上的优化\"><a href=\"#网络连接上的优化\" class=\"headerlink\" title=\"网络连接上的优化\"></a>网络连接上的优化</h4><p>主要就是对域名到服务器进行优化，因此从方法上有：</p>\n<ul>\n<li>DNS 域名解析加速</li>\n<li>减少 DNS 查找</li>\n</ul>\n","excerpt":"<p>网站性能直接影响到了网站的响应时间、吞吐量等等，也是运维、开发一系列技术的体现。</p>\n<h3 id=\"网站性能监测\"><a href=\"#网站性能监测\" class=\"headerlink\" title=\"网站性能监测\"></a>网站性能监测</h3><p>网站性能监测</p>\n<blockquote>\n<p>网站可用性是网站性能监测的重要指标之一，表示在一段时间内，网站处于“正常状态”的机率。</p>\n</blockquote>\n<ul>\n<li>DNS 解析</li>\n<li>内存、硬盘等等</li>\n<li>网页打开速度</li>\n</ul>","more":"<h4 id=\"应用性能指数\"><a href=\"#应用性能指数\" class=\"headerlink\" title=\"应用性能指数\"></a>应用性能指数</h4><blockquote>\n<p>Apdex 联盟，一个由众多网络分析技术公司和测量工业组成的联盟组织，它们联合起来开发了“应用性能指数”即“Apdex”(Application Performance Index)，用一句话来概括，Apdex 是用户对应用性能满意度的量化值。它提供了一个统一的测量和报告用户体验的方法，第一次把最终用户的体验和应用性能联系在了一起。</p>\n</blockquote>\n<p>任务响应时间定义为：当用户操作（鼠标点击、输入、回车）开始到系统（客户机、网络、服务器）响应从而用户能继续这个过程所经过的时间。这些等待时间定义了应用程序的“响应度”。该指数是基于应用程序响应度的三个方面：</p>\n<ul>\n<li>满意:用户充分工作。这就是目标时间（T秒），即在此时间里用户的工作没有因应用程序的响应时间而受阻，如3秒。</li>\n<li>容忍:用户感觉到响应滞后，响应时间大于 T，但能继续这个过程，如3～12秒。</li>\n<li>挫折:响应时间大于 F 秒的性能是不能接受的，用户可能放弃这个过程。F 等于 T×4，在本例子中为12秒。</li>\n</ul>\n<h3 id=\"网站性能\"><a href=\"#网站性能\" class=\"headerlink\" title=\"网站性能\"></a>网站性能</h3><p>针对网站性能优化领域，网上已经有相当多的总结，这里只罗列一些常见（我用过）的策略。</p>\n<h4 id=\"减少-HTTP-请求\"><a href=\"#减少-HTTP-请求\" class=\"headerlink\" title=\"减少 HTTP 请求\"></a>减少 HTTP 请求</h4><p>从网上查找的情况分类来看，有下面的一些情况：</p>\n<ul>\n<li>合并 JavaScript 和 CSS。只是这种方式需要好好评估，因为合并过多的 JavaScript，可能会导致 JavaScript 文件过大。一个大的文件将增加 Load时间，导致不好的用户体验。</li>\n<li>CSS Sprites。即将一个页面涉及到的所有零星图片都包含到一张大图中去。值得注意的是，像 Logo 这一类文件将不要加到里面去了。</li>\n<li>拆分初始化负载。将页面加载时需要的一堆 JavaScript 文件，分成两部分：渲染页面所必需的和其他的。页面初始化时，只加载必须的，其余的等会加载。</li>\n<li>划分主域。将资源划分的请求划分到几个不同的域上，来加速资源请求。</li>\n</ul>\n<p>对于我这样的懒人来说，我使用 Google 出品的 <a href=\"https://developers.google.com/speed/pagespeed/?hl=zh-CN\">PageSpeed</a>。它主要的功能是针对前端页面而进行服务器端的优化，对前端设计人员来说，可以省去优化 css、js 以及图片的过程。它可以对 CSS 和 JavaScript 压缩、合并、级联、内联，生成一个新的 Script 和 CSS 文件 。还有图像优化：剥离元数据、动态调整，重新压缩，如针对 Chrome 浏览器生成 WebP 文件。还可以推迟图像和 JavaScript 加载。</p>\n<h4 id=\"页面内部优化\"><a href=\"#页面内部优化\" class=\"headerlink\" title=\"页面内部优化\"></a>页面内部优化</h4><p>HTML 页面内的优化的目的便是：<strong>尽快渲染出页面</strong>。常见的优化策略便是：</p>\n<ul>\n<li>将 CSS 放在顶部，即早点渲染出页面及其样式。</li>\n<li>将 JavaScript 放在底部。如果有后台渲染机制，那么就应该将 JS 放到页面底部来加速页面加载。如果是单页面应用，那么这个 JS 就应该在页面顶部。</li>\n<li>压缩 HTML。在我们写模板的过程中，一些判断可能会导致页面有过多的空格。压缩这些 HTML，可以稍微提高一下页面速度。</li>\n</ul>\n<p>这里的大部分内容都应该通过修改代码来完成。</p>\n<h4 id=\"启用缓存\"><a href=\"#启用缓存\" class=\"headerlink\" title=\"启用缓存\"></a>启用缓存</h4><p>前面的缓存一节里，我们说过了一些缓存的策略，我们再稍微提一下。</p>\n<ul>\n<li>后台优化，如数据库端缓存</li>\n<li>启用页面缓存，即应用层缓存</li>\n</ul>\n<h4 id=\"减少下载量\"><a href=\"#减少下载量\" class=\"headerlink\" title=\"减少下载量\"></a>减少下载量</h4><p>简单地来说，就是减少对服务器的请求：</p>\n<ul>\n<li>使用 CDN</li>\n<li>使用外部 JavaScript 和 CSS</li>\n<li>缓存：使用 gzip 压缩、添加 Expires 头、配置 ETag、使 AjaX 可缓存</li>\n</ul>\n<h4 id=\"网络连接上的优化\"><a href=\"#网络连接上的优化\" class=\"headerlink\" title=\"网络连接上的优化\"></a>网络连接上的优化</h4><p>主要就是对域名到服务器进行优化，因此从方法上有：</p>\n<ul>\n<li>DNS 域名解析加速</li>\n<li>减少 DNS 查找</li>\n</ul>"},{"title":"SEO","date":"2016-05-08T13:45:08.000Z","_content":"\n> 这是一个老的，有些过时纸，但非常平易近人，甚至在我们中间的非白皮书的读者图标微笑什么每个程序员都应该知道的关于搜索引擎优化和他们绝对概念的解释更详细，我只提一笔带过。\n\n**搜索时发生什么了?**\n\n - 用户输入查询内容\n - 查询处理以及分词技术\n - 确定搜索意图及返回相关、新鲜的内容\n\n![search-engine-arch](http://growth.phodal.com/assets/article/chapter5/search-engine-arch.jpg)\n\n**为什么需要 SEO?**\n\n这是一个有趣的问题，答案总会来源于``为网站带来更多的流量``。\n\n<!-- more -->\n\n### 爬虫与索引\n\n我们先看看来自谷歌的爬虫工作的一点内容\n\n> 抓取是 Googlebot 发现新网页并更新这些网页以将网页添加到 Google 索引中的过程。\n\n> 我们使用许多计算机来获取（或\"抓取\"）网站上的大量网页。执行获取任务的程序叫做 Googlebot（也被称为漫游器或信息采集软件）。Googlebot 使用算法来进行抓取：计算机程序会确定要抓取的网站、抓取频率以及从每个网站中获取的网页数量。\n\n> Google 的抓取过程是根据网页网址的列表进行的，该列表是在之前进行的抓取过程中形成的，且随着网站管理员所提供的站点地图数据不断进行扩充。Googlebot 在访问每个网站时，会检测每个网页上的链接，并将这些链接添加到它要抓取的网页列表中。新建立的网站、对现有网站所进行的更改以及无效链接都会被记录下来，并用于更新 Google 索引。\n\n也就是如原文所说:\n\n> 谷歌的爬虫(又或者说蛛蛛)能够抓取你整个网站索引的所有页。\n\n**为什么谷歌上可以搜索整个互联网的内容**？因为，他解析并存储了。而更有意思的是，他会为同样的内容建立一个索引或者说分类，按照一定的相关性，针对于某个关键词的内容。\n\nPageRank 对于一个网站来说是相当重要的，只是这个相比也比较复杂。包括其他网站链接向你的网站，以及流量，当然还有域名等等。\n\n### 什么样的网站需要 SEO？\n\n下图是我的博客的流量来源\n\n![What Site Need SEO](http://growth.phodal.com/assets/article/chapter5/my-website-seo.jpg)\n\n正常情况下除了像``腾讯``这类的``QQ空间``自我封闭的网站外都需要 SEO，或者不希望泄露一些用户隐私如``Facebook``、``人人``等等。\n\n\n - 如果你和我的网站一样需要靠搜索带来流量\n - 如果你只有很少的用户访问，却有很多的内容。\n - 如果你是为一个公司、企业工作为以带来业务。\n - 。。。\n\n\n**SEO 与编程的不同之处?**\n\nSEO 与编程的最大不同之处在于: **编程的核心是技术，SEO 的核心是内容**。\n\n内容才是 SEO 最重要的组成部分，这也就是腾讯复制不了的东西。\n\n### SEO 基础知识\n\n**确保网站是可以被索引的**\n\n一些常见的页面不能被访问的原因\n\n - 隐藏在需要提交的表格中的链接\n - 不能解析的 JavaScript 脚本中的链接\n - Flash、Java 和其他插件中的链接\n - PowerPoint 和 PDF 文件中的链接\n - 指向被 meta Robtots 标签、rel=\"NoFollow\" 和 robots.txt 屏蔽的页面的链接\n - 页面上有上几百个链接\n - frame（框架结构）和 iframe 里的链接\n\n对于现在的网站来还有下面的原因，通过来说是因为内容是动态生成的，而不是静态的\n\n - 网站通过 WebSocket 的方法渲染内容\n - 使用诸如 Mustache 之类的 JS 模板引擎\n\n**什么样的网页可以被索引**\n\n - 确保页面可以在没有 JavaScript 下能被渲染。对于现在 JavaScript 语言的使用越来越多的情况下，在使用 JS 模板引擎的时候也应该注意这样的问题。\n - 在用户禁用了 JavaScript 的情况下，保证所有的链接和页面是可以访问的。\n - 确保爬虫可以看到所有的内容。那些用 JS 动态加载出来的对于爬虫来说是不友好的\n - 使用描述性的锚文本的网页\n - 限制的页面上的链接数量。除去一些分类网站、导航网站之类有固定流量，要不容易被认为垃圾网站。\n - 确保页面能被索引。有一指向它的 URL\n - URL 应该遵循最佳实践。如 blog/how-to-driver 有更好的可读性\n\n**在正确的地方使用正确的关键词**\n\n - 把关键词放 URL 中\n - 关键词应该是页面的标签\n - 带有 H1 标签\n - 图片文件名、ALT 属性带有关键词。\n - 页面文字\n - 加粗文字\n - Descripiton 标签\n\n\n### 内容\n\n对于技术博客而言，内容才是最需要考虑的因素。\n\n可以考虑一下这篇文章，虽然其主题是以 SEO 为主\n[用户体验与网站内容](http://www.phodal.com/blog/user-experience-writing-web-content/)\n\n不可忽略的一些因素是内容才是最优质的部分，没有内容一切 SEO 都是无意义的。\n\n#### 复制内容问题\n\n一个以用户角度考虑的问题: **用户需要看到多元化的搜索结果**\n\n所以对于搜索引擎来说，复制带来的结果：\n\n - 搜索引擎爬虫对每个网站都有设定的爬行预算，每一次爬行都只能爬行 trpgr 页面数\n - 连向复制内容页面的链接也浪费了它们的链接权重。\n - 没有一个搜索引擎详细解释他们的算法怎样选择显示页面的哪个版本。\n\n于是上文说到的作者给了下面的这些建议:\n\n > 避免从网上复制的内容（除非你有很多其他的内容汇总，以使它看起来不同 - 我们做头条，对我们的产品页面的新闻片段的方式） 。这当然强烈适用于在自己的网站页面以及。内容重复可以混淆搜索引擎哪些页面是权威（它也可能会导致罚款，如果你只是复制粘贴别人的内容也行） ，然后你可以有你自己的网页互相竞争排名！\n\n > 如果你必须有重复的内容，利用相对=规范，让搜索引擎知道哪个 URL 是一个他们应该被视为权威。但是，如果你的页面是另一个在网络上找到一个副本？那么开始想出一些策略来增加更多的文字和信息来区分你的网页，因为这样重复的内容是决不可能得到好的排名。\n\n——待续。\n\n#### 保持更新\n\n谷歌对于一个一直在更新的博客来说会有一个好的排名，当然只是相对的。\n\n对于一个技术博客作者来说，一直更新的好处不仅可以让我们不断地学习更多的内容。也可以保持一个良好的习惯，而对于企业来说更是如此。如果我们每天去更新我们的博客，那么搜索引擎对于我们网站的收录也会变得越来越加频繁。那么，对于我们的排名及点击量来说也算是一个好事，当我们可以获得足够的排名靠前时，我们的 PR 值也在不断地提高。\n\n更多内容可以参考:[Google Fresh Factor](http://www.seomoz.org/blog/google-fresh-factor)\n\n#### 网站速度\n\n> 谷歌曾表示在他们的算法页面加载速度问题，所以一定要确保你已经调整您的网站，都服从最佳做法，以使事情迅速\n\n过去的一个月里，我试着提高自己的网站的速度，有一个相对好的速度，但是受限于``域名解析速度``以及 ``VPS``。\n\n[网站速度分析与 traceroute\n](http://www.phodal.com/blog/use-traceroute-analyse-person-homepage-speed/)\n\n[UX 与网站速度优化——博客速度优化小记\n](http://www.phodal.com/blog/ux-and-improve-website-load-speed/)\n\n[Nginx ngx_pagespeed nginx 前端优化模块编译](http://www.phodal.com/blog/nginx-with-ngx-pagespeed-module-improve-website-cache/)\n\n#### 保持耐心\n\n> 这是有道理的，如果你在需要的谷歌机器人抓取更新的页面，然后处理每一个页面，并更新与新内容对应的索引的时间因素。\n\n> 而这可能是相当长一段时间，当你正在处理的内容 PB 级。\n\nSEO 是一个长期的过程，很少有网站可以在短期内有一个很好的位置，除非是一个热门的网站，然而在它被发现之前也会一个过程。\n\n#### 链接\n\n在某种意义上，这个是提高 PR 值，及网站流量的另外一个核心，除了内容以外的核心。\n\n - 链接建设是 SEO 的基础部分。除非你有一个异常强大的品牌，不需要干什么就能吸引到链接。\n - 链接建设永不停止。这是不间断营销网站的过程\n\n关于链接的内容有太多，而且当前没有一个好的方法获取链接虽然在我的网站已经有了\n\nLinks to Your Site\n\nTotal links\n\n``5,880``\n\n> 同时寻求更多的链接是更有利更相关的链接可以帮助一样多。如果你有你的内容的分销合作伙伴，或者你建立一个小工具，或其他任何人都会把链接回你的网站在网络上 - 你可以通过确保各个环节都有最佳的关键字锚文本大大提高链路的相关性。您还应该确保所有链接到您的网站指向你的主域（ http://www.yourdomain.com ，像 http://widget.yourdomain.com 不是一个子域） 。另外，你要尽可能多的联系，以包含适当的替代文字。你的想法。\n\n> 另外，也许不太明显的方式，建立链接（或者至少流量）是使用社交媒体 - 所以设置你的 Facebook ，Twitter 和谷歌，每当你有新的链接一定要分享。这些通道也可以作为一个有效的渠道，推动更多的流量到您的网站。\n\n由社交渠道带来的流量在现在已经越来越重要了，对于一些以内容为主导的网站，而且处于发展初期，可以迅速带来流量。一些更简单的办法就是交换链接，总之这个话题有些沉重，可能会带来一些负面的影响，如黑帽 SEO。。。。\n\n**参考来源**:\n\n《SEO 艺术》(The Art of SEO)\n","source":"_posts/5.3.0-seo.md","raw":"title: SEO\ndate: 2016-5-8 21:45:08\ntags:\n---\n\n> 这是一个老的，有些过时纸，但非常平易近人，甚至在我们中间的非白皮书的读者图标微笑什么每个程序员都应该知道的关于搜索引擎优化和他们绝对概念的解释更详细，我只提一笔带过。\n\n**搜索时发生什么了?**\n\n - 用户输入查询内容\n - 查询处理以及分词技术\n - 确定搜索意图及返回相关、新鲜的内容\n\n![search-engine-arch](http://growth.phodal.com/assets/article/chapter5/search-engine-arch.jpg)\n\n**为什么需要 SEO?**\n\n这是一个有趣的问题，答案总会来源于``为网站带来更多的流量``。\n\n<!-- more -->\n\n### 爬虫与索引\n\n我们先看看来自谷歌的爬虫工作的一点内容\n\n> 抓取是 Googlebot 发现新网页并更新这些网页以将网页添加到 Google 索引中的过程。\n\n> 我们使用许多计算机来获取（或\"抓取\"）网站上的大量网页。执行获取任务的程序叫做 Googlebot（也被称为漫游器或信息采集软件）。Googlebot 使用算法来进行抓取：计算机程序会确定要抓取的网站、抓取频率以及从每个网站中获取的网页数量。\n\n> Google 的抓取过程是根据网页网址的列表进行的，该列表是在之前进行的抓取过程中形成的，且随着网站管理员所提供的站点地图数据不断进行扩充。Googlebot 在访问每个网站时，会检测每个网页上的链接，并将这些链接添加到它要抓取的网页列表中。新建立的网站、对现有网站所进行的更改以及无效链接都会被记录下来，并用于更新 Google 索引。\n\n也就是如原文所说:\n\n> 谷歌的爬虫(又或者说蛛蛛)能够抓取你整个网站索引的所有页。\n\n**为什么谷歌上可以搜索整个互联网的内容**？因为，他解析并存储了。而更有意思的是，他会为同样的内容建立一个索引或者说分类，按照一定的相关性，针对于某个关键词的内容。\n\nPageRank 对于一个网站来说是相当重要的，只是这个相比也比较复杂。包括其他网站链接向你的网站，以及流量，当然还有域名等等。\n\n### 什么样的网站需要 SEO？\n\n下图是我的博客的流量来源\n\n![What Site Need SEO](http://growth.phodal.com/assets/article/chapter5/my-website-seo.jpg)\n\n正常情况下除了像``腾讯``这类的``QQ空间``自我封闭的网站外都需要 SEO，或者不希望泄露一些用户隐私如``Facebook``、``人人``等等。\n\n\n - 如果你和我的网站一样需要靠搜索带来流量\n - 如果你只有很少的用户访问，却有很多的内容。\n - 如果你是为一个公司、企业工作为以带来业务。\n - 。。。\n\n\n**SEO 与编程的不同之处?**\n\nSEO 与编程的最大不同之处在于: **编程的核心是技术，SEO 的核心是内容**。\n\n内容才是 SEO 最重要的组成部分，这也就是腾讯复制不了的东西。\n\n### SEO 基础知识\n\n**确保网站是可以被索引的**\n\n一些常见的页面不能被访问的原因\n\n - 隐藏在需要提交的表格中的链接\n - 不能解析的 JavaScript 脚本中的链接\n - Flash、Java 和其他插件中的链接\n - PowerPoint 和 PDF 文件中的链接\n - 指向被 meta Robtots 标签、rel=\"NoFollow\" 和 robots.txt 屏蔽的页面的链接\n - 页面上有上几百个链接\n - frame（框架结构）和 iframe 里的链接\n\n对于现在的网站来还有下面的原因，通过来说是因为内容是动态生成的，而不是静态的\n\n - 网站通过 WebSocket 的方法渲染内容\n - 使用诸如 Mustache 之类的 JS 模板引擎\n\n**什么样的网页可以被索引**\n\n - 确保页面可以在没有 JavaScript 下能被渲染。对于现在 JavaScript 语言的使用越来越多的情况下，在使用 JS 模板引擎的时候也应该注意这样的问题。\n - 在用户禁用了 JavaScript 的情况下，保证所有的链接和页面是可以访问的。\n - 确保爬虫可以看到所有的内容。那些用 JS 动态加载出来的对于爬虫来说是不友好的\n - 使用描述性的锚文本的网页\n - 限制的页面上的链接数量。除去一些分类网站、导航网站之类有固定流量，要不容易被认为垃圾网站。\n - 确保页面能被索引。有一指向它的 URL\n - URL 应该遵循最佳实践。如 blog/how-to-driver 有更好的可读性\n\n**在正确的地方使用正确的关键词**\n\n - 把关键词放 URL 中\n - 关键词应该是页面的标签\n - 带有 H1 标签\n - 图片文件名、ALT 属性带有关键词。\n - 页面文字\n - 加粗文字\n - Descripiton 标签\n\n\n### 内容\n\n对于技术博客而言，内容才是最需要考虑的因素。\n\n可以考虑一下这篇文章，虽然其主题是以 SEO 为主\n[用户体验与网站内容](http://www.phodal.com/blog/user-experience-writing-web-content/)\n\n不可忽略的一些因素是内容才是最优质的部分，没有内容一切 SEO 都是无意义的。\n\n#### 复制内容问题\n\n一个以用户角度考虑的问题: **用户需要看到多元化的搜索结果**\n\n所以对于搜索引擎来说，复制带来的结果：\n\n - 搜索引擎爬虫对每个网站都有设定的爬行预算，每一次爬行都只能爬行 trpgr 页面数\n - 连向复制内容页面的链接也浪费了它们的链接权重。\n - 没有一个搜索引擎详细解释他们的算法怎样选择显示页面的哪个版本。\n\n于是上文说到的作者给了下面的这些建议:\n\n > 避免从网上复制的内容（除非你有很多其他的内容汇总，以使它看起来不同 - 我们做头条，对我们的产品页面的新闻片段的方式） 。这当然强烈适用于在自己的网站页面以及。内容重复可以混淆搜索引擎哪些页面是权威（它也可能会导致罚款，如果你只是复制粘贴别人的内容也行） ，然后你可以有你自己的网页互相竞争排名！\n\n > 如果你必须有重复的内容，利用相对=规范，让搜索引擎知道哪个 URL 是一个他们应该被视为权威。但是，如果你的页面是另一个在网络上找到一个副本？那么开始想出一些策略来增加更多的文字和信息来区分你的网页，因为这样重复的内容是决不可能得到好的排名。\n\n——待续。\n\n#### 保持更新\n\n谷歌对于一个一直在更新的博客来说会有一个好的排名，当然只是相对的。\n\n对于一个技术博客作者来说，一直更新的好处不仅可以让我们不断地学习更多的内容。也可以保持一个良好的习惯，而对于企业来说更是如此。如果我们每天去更新我们的博客，那么搜索引擎对于我们网站的收录也会变得越来越加频繁。那么，对于我们的排名及点击量来说也算是一个好事，当我们可以获得足够的排名靠前时，我们的 PR 值也在不断地提高。\n\n更多内容可以参考:[Google Fresh Factor](http://www.seomoz.org/blog/google-fresh-factor)\n\n#### 网站速度\n\n> 谷歌曾表示在他们的算法页面加载速度问题，所以一定要确保你已经调整您的网站，都服从最佳做法，以使事情迅速\n\n过去的一个月里，我试着提高自己的网站的速度，有一个相对好的速度，但是受限于``域名解析速度``以及 ``VPS``。\n\n[网站速度分析与 traceroute\n](http://www.phodal.com/blog/use-traceroute-analyse-person-homepage-speed/)\n\n[UX 与网站速度优化——博客速度优化小记\n](http://www.phodal.com/blog/ux-and-improve-website-load-speed/)\n\n[Nginx ngx_pagespeed nginx 前端优化模块编译](http://www.phodal.com/blog/nginx-with-ngx-pagespeed-module-improve-website-cache/)\n\n#### 保持耐心\n\n> 这是有道理的，如果你在需要的谷歌机器人抓取更新的页面，然后处理每一个页面，并更新与新内容对应的索引的时间因素。\n\n> 而这可能是相当长一段时间，当你正在处理的内容 PB 级。\n\nSEO 是一个长期的过程，很少有网站可以在短期内有一个很好的位置，除非是一个热门的网站，然而在它被发现之前也会一个过程。\n\n#### 链接\n\n在某种意义上，这个是提高 PR 值，及网站流量的另外一个核心，除了内容以外的核心。\n\n - 链接建设是 SEO 的基础部分。除非你有一个异常强大的品牌，不需要干什么就能吸引到链接。\n - 链接建设永不停止。这是不间断营销网站的过程\n\n关于链接的内容有太多，而且当前没有一个好的方法获取链接虽然在我的网站已经有了\n\nLinks to Your Site\n\nTotal links\n\n``5,880``\n\n> 同时寻求更多的链接是更有利更相关的链接可以帮助一样多。如果你有你的内容的分销合作伙伴，或者你建立一个小工具，或其他任何人都会把链接回你的网站在网络上 - 你可以通过确保各个环节都有最佳的关键字锚文本大大提高链路的相关性。您还应该确保所有链接到您的网站指向你的主域（ http://www.yourdomain.com ，像 http://widget.yourdomain.com 不是一个子域） 。另外，你要尽可能多的联系，以包含适当的替代文字。你的想法。\n\n> 另外，也许不太明显的方式，建立链接（或者至少流量）是使用社交媒体 - 所以设置你的 Facebook ，Twitter 和谷歌，每当你有新的链接一定要分享。这些通道也可以作为一个有效的渠道，推动更多的流量到您的网站。\n\n由社交渠道带来的流量在现在已经越来越重要了，对于一些以内容为主导的网站，而且处于发展初期，可以迅速带来流量。一些更简单的办法就是交换链接，总之这个话题有些沉重，可能会带来一些负面的影响，如黑帽 SEO。。。。\n\n**参考来源**:\n\n《SEO 艺术》(The Art of SEO)\n","slug":"5.3.0-seo","published":1,"updated":"2016-05-08T04:34:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuf7mpqo001itsifza4mxq5b","content":"<blockquote>\n<p>这是一个老的，有些过时纸，但非常平易近人，甚至在我们中间的非白皮书的读者图标微笑什么每个程序员都应该知道的关于搜索引擎优化和他们绝对概念的解释更详细，我只提一笔带过。</p>\n</blockquote>\n<p><strong>搜索时发生什么了?</strong></p>\n<ul>\n<li>用户输入查询内容</li>\n<li>查询处理以及分词技术</li>\n<li>确定搜索意图及返回相关、新鲜的内容</li>\n</ul>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter5/search-engine-arch.jpg\" alt=\"search-engine-arch\"></p>\n<p><strong>为什么需要 SEO?</strong></p>\n<p>这是一个有趣的问题，答案总会来源于<code>为网站带来更多的流量</code>。</p>\n<a id=\"more\"></a>\n<h3 id=\"爬虫与索引\"><a href=\"#爬虫与索引\" class=\"headerlink\" title=\"爬虫与索引\"></a>爬虫与索引</h3><p>我们先看看来自谷歌的爬虫工作的一点内容</p>\n<blockquote>\n<p>抓取是 Googlebot 发现新网页并更新这些网页以将网页添加到 Google 索引中的过程。</p>\n<p>我们使用许多计算机来获取（或”抓取”）网站上的大量网页。执行获取任务的程序叫做 Googlebot（也被称为漫游器或信息采集软件）。Googlebot 使用算法来进行抓取：计算机程序会确定要抓取的网站、抓取频率以及从每个网站中获取的网页数量。</p>\n<p>Google 的抓取过程是根据网页网址的列表进行的，该列表是在之前进行的抓取过程中形成的，且随着网站管理员所提供的站点地图数据不断进行扩充。Googlebot 在访问每个网站时，会检测每个网页上的链接，并将这些链接添加到它要抓取的网页列表中。新建立的网站、对现有网站所进行的更改以及无效链接都会被记录下来，并用于更新 Google 索引。</p>\n</blockquote>\n<p>也就是如原文所说:</p>\n<blockquote>\n<p>谷歌的爬虫(又或者说蛛蛛)能够抓取你整个网站索引的所有页。</p>\n</blockquote>\n<p><strong>为什么谷歌上可以搜索整个互联网的内容</strong>？因为，他解析并存储了。而更有意思的是，他会为同样的内容建立一个索引或者说分类，按照一定的相关性，针对于某个关键词的内容。</p>\n<p>PageRank 对于一个网站来说是相当重要的，只是这个相比也比较复杂。包括其他网站链接向你的网站，以及流量，当然还有域名等等。</p>\n<h3 id=\"什么样的网站需要-SEO？\"><a href=\"#什么样的网站需要-SEO？\" class=\"headerlink\" title=\"什么样的网站需要 SEO？\"></a>什么样的网站需要 SEO？</h3><p>下图是我的博客的流量来源</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter5/my-website-seo.jpg\" alt=\"What Site Need SEO\"></p>\n<p>正常情况下除了像<code>腾讯</code>这类的<code>QQ空间</code>自我封闭的网站外都需要 SEO，或者不希望泄露一些用户隐私如<code>Facebook</code>、<code>人人</code>等等。</p>\n<ul>\n<li>如果你和我的网站一样需要靠搜索带来流量</li>\n<li>如果你只有很少的用户访问，却有很多的内容。</li>\n<li>如果你是为一个公司、企业工作为以带来业务。</li>\n<li>。。。</li>\n</ul>\n<p><strong>SEO 与编程的不同之处?</strong></p>\n<p>SEO 与编程的最大不同之处在于: <strong>编程的核心是技术，SEO 的核心是内容</strong>。</p>\n<p>内容才是 SEO 最重要的组成部分，这也就是腾讯复制不了的东西。</p>\n<h3 id=\"SEO-基础知识\"><a href=\"#SEO-基础知识\" class=\"headerlink\" title=\"SEO 基础知识\"></a>SEO 基础知识</h3><p><strong>确保网站是可以被索引的</strong></p>\n<p>一些常见的页面不能被访问的原因</p>\n<ul>\n<li>隐藏在需要提交的表格中的链接</li>\n<li>不能解析的 JavaScript 脚本中的链接</li>\n<li>Flash、Java 和其他插件中的链接</li>\n<li>PowerPoint 和 PDF 文件中的链接</li>\n<li>指向被 meta Robtots 标签、rel=”NoFollow” 和 robots.txt 屏蔽的页面的链接</li>\n<li>页面上有上几百个链接</li>\n<li>frame（框架结构）和 iframe 里的链接</li>\n</ul>\n<p>对于现在的网站来还有下面的原因，通过来说是因为内容是动态生成的，而不是静态的</p>\n<ul>\n<li>网站通过 WebSocket 的方法渲染内容</li>\n<li>使用诸如 Mustache 之类的 JS 模板引擎</li>\n</ul>\n<p><strong>什么样的网页可以被索引</strong></p>\n<ul>\n<li>确保页面可以在没有 JavaScript 下能被渲染。对于现在 JavaScript 语言的使用越来越多的情况下，在使用 JS 模板引擎的时候也应该注意这样的问题。</li>\n<li>在用户禁用了 JavaScript 的情况下，保证所有的链接和页面是可以访问的。</li>\n<li>确保爬虫可以看到所有的内容。那些用 JS 动态加载出来的对于爬虫来说是不友好的</li>\n<li>使用描述性的锚文本的网页</li>\n<li>限制的页面上的链接数量。除去一些分类网站、导航网站之类有固定流量，要不容易被认为垃圾网站。</li>\n<li>确保页面能被索引。有一指向它的 URL</li>\n<li>URL 应该遵循最佳实践。如 blog/how-to-driver 有更好的可读性</li>\n</ul>\n<p><strong>在正确的地方使用正确的关键词</strong></p>\n<ul>\n<li>把关键词放 URL 中</li>\n<li>关键词应该是页面的标签</li>\n<li>带有 H1 标签</li>\n<li>图片文件名、ALT 属性带有关键词。</li>\n<li>页面文字</li>\n<li>加粗文字</li>\n<li>Descripiton 标签</li>\n</ul>\n<h3 id=\"内容\"><a href=\"#内容\" class=\"headerlink\" title=\"内容\"></a>内容</h3><p>对于技术博客而言，内容才是最需要考虑的因素。</p>\n<p>可以考虑一下这篇文章，虽然其主题是以 SEO 为主<br><a href=\"http://www.phodal.com/blog/user-experience-writing-web-content/\" target=\"_blank\" rel=\"external\">用户体验与网站内容</a></p>\n<p>不可忽略的一些因素是内容才是最优质的部分，没有内容一切 SEO 都是无意义的。</p>\n<h4 id=\"复制内容问题\"><a href=\"#复制内容问题\" class=\"headerlink\" title=\"复制内容问题\"></a>复制内容问题</h4><p>一个以用户角度考虑的问题: <strong>用户需要看到多元化的搜索结果</strong></p>\n<p>所以对于搜索引擎来说，复制带来的结果：</p>\n<ul>\n<li>搜索引擎爬虫对每个网站都有设定的爬行预算，每一次爬行都只能爬行 trpgr 页面数</li>\n<li>连向复制内容页面的链接也浪费了它们的链接权重。</li>\n<li>没有一个搜索引擎详细解释他们的算法怎样选择显示页面的哪个版本。</li>\n</ul>\n<p>于是上文说到的作者给了下面的这些建议:</p>\n<blockquote>\n<p>避免从网上复制的内容（除非你有很多其他的内容汇总，以使它看起来不同 - 我们做头条，对我们的产品页面的新闻片段的方式） 。这当然强烈适用于在自己的网站页面以及。内容重复可以混淆搜索引擎哪些页面是权威（它也可能会导致罚款，如果你只是复制粘贴别人的内容也行） ，然后你可以有你自己的网页互相竞争排名！</p>\n<p>如果你必须有重复的内容，利用相对=规范，让搜索引擎知道哪个 URL 是一个他们应该被视为权威。但是，如果你的页面是另一个在网络上找到一个副本？那么开始想出一些策略来增加更多的文字和信息来区分你的网页，因为这样重复的内容是决不可能得到好的排名。</p>\n</blockquote>\n<p>——待续。</p>\n<h4 id=\"保持更新\"><a href=\"#保持更新\" class=\"headerlink\" title=\"保持更新\"></a>保持更新</h4><p>谷歌对于一个一直在更新的博客来说会有一个好的排名，当然只是相对的。</p>\n<p>对于一个技术博客作者来说，一直更新的好处不仅可以让我们不断地学习更多的内容。也可以保持一个良好的习惯，而对于企业来说更是如此。如果我们每天去更新我们的博客，那么搜索引擎对于我们网站的收录也会变得越来越加频繁。那么，对于我们的排名及点击量来说也算是一个好事，当我们可以获得足够的排名靠前时，我们的 PR 值也在不断地提高。</p>\n<p>更多内容可以参考:<a href=\"http://www.seomoz.org/blog/google-fresh-factor\" target=\"_blank\" rel=\"external\">Google Fresh Factor</a></p>\n<h4 id=\"网站速度\"><a href=\"#网站速度\" class=\"headerlink\" title=\"网站速度\"></a>网站速度</h4><blockquote>\n<p>谷歌曾表示在他们的算法页面加载速度问题，所以一定要确保你已经调整您的网站，都服从最佳做法，以使事情迅速</p>\n</blockquote>\n<p>过去的一个月里，我试着提高自己的网站的速度，有一个相对好的速度，但是受限于<code>域名解析速度</code>以及 <code>VPS</code>。</p>\n<p><a href=\"http://www.phodal.com/blog/use-traceroute-analyse-person-homepage-speed/\" target=\"_blank\" rel=\"external\">网站速度分析与 traceroute\n</a></p>\n<p><a href=\"http://www.phodal.com/blog/ux-and-improve-website-load-speed/\" target=\"_blank\" rel=\"external\">UX 与网站速度优化——博客速度优化小记\n</a></p>\n<p><a href=\"http://www.phodal.com/blog/nginx-with-ngx-pagespeed-module-improve-website-cache/\" target=\"_blank\" rel=\"external\">Nginx ngx_pagespeed nginx 前端优化模块编译</a></p>\n<h4 id=\"保持耐心\"><a href=\"#保持耐心\" class=\"headerlink\" title=\"保持耐心\"></a>保持耐心</h4><blockquote>\n<p>这是有道理的，如果你在需要的谷歌机器人抓取更新的页面，然后处理每一个页面，并更新与新内容对应的索引的时间因素。</p>\n<p>而这可能是相当长一段时间，当你正在处理的内容 PB 级。</p>\n</blockquote>\n<p>SEO 是一个长期的过程，很少有网站可以在短期内有一个很好的位置，除非是一个热门的网站，然而在它被发现之前也会一个过程。</p>\n<h4 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h4><p>在某种意义上，这个是提高 PR 值，及网站流量的另外一个核心，除了内容以外的核心。</p>\n<ul>\n<li>链接建设是 SEO 的基础部分。除非你有一个异常强大的品牌，不需要干什么就能吸引到链接。</li>\n<li>链接建设永不停止。这是不间断营销网站的过程</li>\n</ul>\n<p>关于链接的内容有太多，而且当前没有一个好的方法获取链接虽然在我的网站已经有了</p>\n<p>Links to Your Site</p>\n<p>Total links</p>\n<p><code>5,880</code></p>\n<blockquote>\n<p>同时寻求更多的链接是更有利更相关的链接可以帮助一样多。如果你有你的内容的分销合作伙伴，或者你建立一个小工具，或其他任何人都会把链接回你的网站在网络上 - 你可以通过确保各个环节都有最佳的关键字锚文本大大提高链路的相关性。您还应该确保所有链接到您的网站指向你的主域（ <a href=\"http://www.yourdomain.com\" target=\"_blank\" rel=\"external\">http://www.yourdomain.com</a> ，像 <a href=\"http://widget.yourdomain.com\" target=\"_blank\" rel=\"external\">http://widget.yourdomain.com</a> 不是一个子域） 。另外，你要尽可能多的联系，以包含适当的替代文字。你的想法。</p>\n<p>另外，也许不太明显的方式，建立链接（或者至少流量）是使用社交媒体 - 所以设置你的 Facebook ，Twitter 和谷歌，每当你有新的链接一定要分享。这些通道也可以作为一个有效的渠道，推动更多的流量到您的网站。</p>\n</blockquote>\n<p>由社交渠道带来的流量在现在已经越来越重要了，对于一些以内容为主导的网站，而且处于发展初期，可以迅速带来流量。一些更简单的办法就是交换链接，总之这个话题有些沉重，可能会带来一些负面的影响，如黑帽 SEO。。。。</p>\n<p><strong>参考来源</strong>:</p>\n<p>《SEO 艺术》(The Art of SEO)</p>\n","excerpt":"<blockquote>\n<p>这是一个老的，有些过时纸，但非常平易近人，甚至在我们中间的非白皮书的读者图标微笑什么每个程序员都应该知道的关于搜索引擎优化和他们绝对概念的解释更详细，我只提一笔带过。</p>\n</blockquote>\n<p><strong>搜索时发生什么了?</strong></p>\n<ul>\n<li>用户输入查询内容</li>\n<li>查询处理以及分词技术</li>\n<li>确定搜索意图及返回相关、新鲜的内容</li>\n</ul>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter5/search-engine-arch.jpg\" alt=\"search-engine-arch\"></p>\n<p><strong>为什么需要 SEO?</strong></p>\n<p>这是一个有趣的问题，答案总会来源于<code>为网站带来更多的流量</code>。</p>","more":"<h3 id=\"爬虫与索引\"><a href=\"#爬虫与索引\" class=\"headerlink\" title=\"爬虫与索引\"></a>爬虫与索引</h3><p>我们先看看来自谷歌的爬虫工作的一点内容</p>\n<blockquote>\n<p>抓取是 Googlebot 发现新网页并更新这些网页以将网页添加到 Google 索引中的过程。</p>\n<p>我们使用许多计算机来获取（或”抓取”）网站上的大量网页。执行获取任务的程序叫做 Googlebot（也被称为漫游器或信息采集软件）。Googlebot 使用算法来进行抓取：计算机程序会确定要抓取的网站、抓取频率以及从每个网站中获取的网页数量。</p>\n<p>Google 的抓取过程是根据网页网址的列表进行的，该列表是在之前进行的抓取过程中形成的，且随着网站管理员所提供的站点地图数据不断进行扩充。Googlebot 在访问每个网站时，会检测每个网页上的链接，并将这些链接添加到它要抓取的网页列表中。新建立的网站、对现有网站所进行的更改以及无效链接都会被记录下来，并用于更新 Google 索引。</p>\n</blockquote>\n<p>也就是如原文所说:</p>\n<blockquote>\n<p>谷歌的爬虫(又或者说蛛蛛)能够抓取你整个网站索引的所有页。</p>\n</blockquote>\n<p><strong>为什么谷歌上可以搜索整个互联网的内容</strong>？因为，他解析并存储了。而更有意思的是，他会为同样的内容建立一个索引或者说分类，按照一定的相关性，针对于某个关键词的内容。</p>\n<p>PageRank 对于一个网站来说是相当重要的，只是这个相比也比较复杂。包括其他网站链接向你的网站，以及流量，当然还有域名等等。</p>\n<h3 id=\"什么样的网站需要-SEO？\"><a href=\"#什么样的网站需要-SEO？\" class=\"headerlink\" title=\"什么样的网站需要 SEO？\"></a>什么样的网站需要 SEO？</h3><p>下图是我的博客的流量来源</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter5/my-website-seo.jpg\" alt=\"What Site Need SEO\"></p>\n<p>正常情况下除了像<code>腾讯</code>这类的<code>QQ空间</code>自我封闭的网站外都需要 SEO，或者不希望泄露一些用户隐私如<code>Facebook</code>、<code>人人</code>等等。</p>\n<ul>\n<li>如果你和我的网站一样需要靠搜索带来流量</li>\n<li>如果你只有很少的用户访问，却有很多的内容。</li>\n<li>如果你是为一个公司、企业工作为以带来业务。</li>\n<li>。。。</li>\n</ul>\n<p><strong>SEO 与编程的不同之处?</strong></p>\n<p>SEO 与编程的最大不同之处在于: <strong>编程的核心是技术，SEO 的核心是内容</strong>。</p>\n<p>内容才是 SEO 最重要的组成部分，这也就是腾讯复制不了的东西。</p>\n<h3 id=\"SEO-基础知识\"><a href=\"#SEO-基础知识\" class=\"headerlink\" title=\"SEO 基础知识\"></a>SEO 基础知识</h3><p><strong>确保网站是可以被索引的</strong></p>\n<p>一些常见的页面不能被访问的原因</p>\n<ul>\n<li>隐藏在需要提交的表格中的链接</li>\n<li>不能解析的 JavaScript 脚本中的链接</li>\n<li>Flash、Java 和其他插件中的链接</li>\n<li>PowerPoint 和 PDF 文件中的链接</li>\n<li>指向被 meta Robtots 标签、rel=”NoFollow” 和 robots.txt 屏蔽的页面的链接</li>\n<li>页面上有上几百个链接</li>\n<li>frame（框架结构）和 iframe 里的链接</li>\n</ul>\n<p>对于现在的网站来还有下面的原因，通过来说是因为内容是动态生成的，而不是静态的</p>\n<ul>\n<li>网站通过 WebSocket 的方法渲染内容</li>\n<li>使用诸如 Mustache 之类的 JS 模板引擎</li>\n</ul>\n<p><strong>什么样的网页可以被索引</strong></p>\n<ul>\n<li>确保页面可以在没有 JavaScript 下能被渲染。对于现在 JavaScript 语言的使用越来越多的情况下，在使用 JS 模板引擎的时候也应该注意这样的问题。</li>\n<li>在用户禁用了 JavaScript 的情况下，保证所有的链接和页面是可以访问的。</li>\n<li>确保爬虫可以看到所有的内容。那些用 JS 动态加载出来的对于爬虫来说是不友好的</li>\n<li>使用描述性的锚文本的网页</li>\n<li>限制的页面上的链接数量。除去一些分类网站、导航网站之类有固定流量，要不容易被认为垃圾网站。</li>\n<li>确保页面能被索引。有一指向它的 URL</li>\n<li>URL 应该遵循最佳实践。如 blog/how-to-driver 有更好的可读性</li>\n</ul>\n<p><strong>在正确的地方使用正确的关键词</strong></p>\n<ul>\n<li>把关键词放 URL 中</li>\n<li>关键词应该是页面的标签</li>\n<li>带有 H1 标签</li>\n<li>图片文件名、ALT 属性带有关键词。</li>\n<li>页面文字</li>\n<li>加粗文字</li>\n<li>Descripiton 标签</li>\n</ul>\n<h3 id=\"内容\"><a href=\"#内容\" class=\"headerlink\" title=\"内容\"></a>内容</h3><p>对于技术博客而言，内容才是最需要考虑的因素。</p>\n<p>可以考虑一下这篇文章，虽然其主题是以 SEO 为主<br><a href=\"http://www.phodal.com/blog/user-experience-writing-web-content/\">用户体验与网站内容</a></p>\n<p>不可忽略的一些因素是内容才是最优质的部分，没有内容一切 SEO 都是无意义的。</p>\n<h4 id=\"复制内容问题\"><a href=\"#复制内容问题\" class=\"headerlink\" title=\"复制内容问题\"></a>复制内容问题</h4><p>一个以用户角度考虑的问题: <strong>用户需要看到多元化的搜索结果</strong></p>\n<p>所以对于搜索引擎来说，复制带来的结果：</p>\n<ul>\n<li>搜索引擎爬虫对每个网站都有设定的爬行预算，每一次爬行都只能爬行 trpgr 页面数</li>\n<li>连向复制内容页面的链接也浪费了它们的链接权重。</li>\n<li>没有一个搜索引擎详细解释他们的算法怎样选择显示页面的哪个版本。</li>\n</ul>\n<p>于是上文说到的作者给了下面的这些建议:</p>\n<blockquote>\n<p>避免从网上复制的内容（除非你有很多其他的内容汇总，以使它看起来不同 - 我们做头条，对我们的产品页面的新闻片段的方式） 。这当然强烈适用于在自己的网站页面以及。内容重复可以混淆搜索引擎哪些页面是权威（它也可能会导致罚款，如果你只是复制粘贴别人的内容也行） ，然后你可以有你自己的网页互相竞争排名！</p>\n<p>如果你必须有重复的内容，利用相对=规范，让搜索引擎知道哪个 URL 是一个他们应该被视为权威。但是，如果你的页面是另一个在网络上找到一个副本？那么开始想出一些策略来增加更多的文字和信息来区分你的网页，因为这样重复的内容是决不可能得到好的排名。</p>\n</blockquote>\n<p>——待续。</p>\n<h4 id=\"保持更新\"><a href=\"#保持更新\" class=\"headerlink\" title=\"保持更新\"></a>保持更新</h4><p>谷歌对于一个一直在更新的博客来说会有一个好的排名，当然只是相对的。</p>\n<p>对于一个技术博客作者来说，一直更新的好处不仅可以让我们不断地学习更多的内容。也可以保持一个良好的习惯，而对于企业来说更是如此。如果我们每天去更新我们的博客，那么搜索引擎对于我们网站的收录也会变得越来越加频繁。那么，对于我们的排名及点击量来说也算是一个好事，当我们可以获得足够的排名靠前时，我们的 PR 值也在不断地提高。</p>\n<p>更多内容可以参考:<a href=\"http://www.seomoz.org/blog/google-fresh-factor\">Google Fresh Factor</a></p>\n<h4 id=\"网站速度\"><a href=\"#网站速度\" class=\"headerlink\" title=\"网站速度\"></a>网站速度</h4><blockquote>\n<p>谷歌曾表示在他们的算法页面加载速度问题，所以一定要确保你已经调整您的网站，都服从最佳做法，以使事情迅速</p>\n</blockquote>\n<p>过去的一个月里，我试着提高自己的网站的速度，有一个相对好的速度，但是受限于<code>域名解析速度</code>以及 <code>VPS</code>。</p>\n<p><a href=\"http://www.phodal.com/blog/use-traceroute-analyse-person-homepage-speed/\">网站速度分析与 traceroute\n</a></p>\n<p><a href=\"http://www.phodal.com/blog/ux-and-improve-website-load-speed/\">UX 与网站速度优化——博客速度优化小记\n</a></p>\n<p><a href=\"http://www.phodal.com/blog/nginx-with-ngx-pagespeed-module-improve-website-cache/\">Nginx ngx_pagespeed nginx 前端优化模块编译</a></p>\n<h4 id=\"保持耐心\"><a href=\"#保持耐心\" class=\"headerlink\" title=\"保持耐心\"></a>保持耐心</h4><blockquote>\n<p>这是有道理的，如果你在需要的谷歌机器人抓取更新的页面，然后处理每一个页面，并更新与新内容对应的索引的时间因素。</p>\n<p>而这可能是相当长一段时间，当你正在处理的内容 PB 级。</p>\n</blockquote>\n<p>SEO 是一个长期的过程，很少有网站可以在短期内有一个很好的位置，除非是一个热门的网站，然而在它被发现之前也会一个过程。</p>\n<h4 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h4><p>在某种意义上，这个是提高 PR 值，及网站流量的另外一个核心，除了内容以外的核心。</p>\n<ul>\n<li>链接建设是 SEO 的基础部分。除非你有一个异常强大的品牌，不需要干什么就能吸引到链接。</li>\n<li>链接建设永不停止。这是不间断营销网站的过程</li>\n</ul>\n<p>关于链接的内容有太多，而且当前没有一个好的方法获取链接虽然在我的网站已经有了</p>\n<p>Links to Your Site</p>\n<p>Total links</p>\n<p><code>5,880</code></p>\n<blockquote>\n<p>同时寻求更多的链接是更有利更相关的链接可以帮助一样多。如果你有你的内容的分销合作伙伴，或者你建立一个小工具，或其他任何人都会把链接回你的网站在网络上 - 你可以通过确保各个环节都有最佳的关键字锚文本大大提高链路的相关性。您还应该确保所有链接到您的网站指向你的主域（ <a href=\"http://www.yourdomain.com\">http://www.yourdomain.com</a> ，像 <a href=\"http://widget.yourdomain.com\">http://widget.yourdomain.com</a> 不是一个子域） 。另外，你要尽可能多的联系，以包含适当的替代文字。你的想法。</p>\n<p>另外，也许不太明显的方式，建立链接（或者至少流量）是使用社交媒体 - 所以设置你的 Facebook ，Twitter 和谷歌，每当你有新的链接一定要分享。这些通道也可以作为一个有效的渠道，推动更多的流量到您的网站。</p>\n</blockquote>\n<p>由社交渠道带来的流量在现在已经越来越重要了，对于一些以内容为主导的网站，而且处于发展初期，可以迅速带来流量。一些更简单的办法就是交换链接，总之这个话题有些沉重，可能会带来一些负面的影响，如黑帽 SEO。。。。</p>\n<p><strong>参考来源</strong>:</p>\n<p>《SEO 艺术》(The Art of SEO)</p>"},{"title":"用户数据分析：Google Analytics","date":"2016-05-07T14:45:08.000Z","_content":"\nGoogle Analytics 是一个非常赞的分析工具，而且它不仅仅可以用于 Web 应用，也可以用于移动应用。\n\n### 受众群体\n\n如下图是 Growth 应用最近两星期的数据：\n\n![Growth GA](http://growth.phodal.com/assets/article/chapter5/growth-ga.png)\n\n这是 Google Analytics 中的“受众群体”的概览，在这个视图中：\n\n1. 折线图就是每天的用户数。\n2. 下面会有用户数、会话、屏幕浏览量等等的一些信息。\n3. 右角的饼图则是回访问用户和新用户的对比。\n4. 最下方便是受众的信息——国家、版本等等。\n\n<!-- more -->\n\n从图中，我们可以读取一些重要的信息，如用户的停留时间、主要面向的用户等等。在浏览器版本会有：\n\n1. 浏览器与操作系统\n2. 移动设备\n\n这样的重要数据，如下表是我网站 20160104-20160120 的访问数据：\n\n浏览器|会话|新会话百分比\n-----|----|----\nChrome|5048|75.99%\nFirefox|694|78.39%\nSafari|666|78.68%\nInternet Explorer|284|87.68%\nSafari (in-app)|92|86.96%\nAndroid Browser|72|87.50%\nEdge|63|79.37%\nMaxthon|51|68.63%\nUC Browser|41|80.49%\nOpera|34|64.71%\n\n可以从上表中看到访问我网站的用户中，IE 只占很小的一部分——大概4%，而 Chrome + Safari + Firefox 加起来则近90%。这也意味着，我可以完全不考虑 IE 用户的感受。\n\n类似于这样的数据在我们决定我们对某个浏览器的支持情况时会非常有帮助的。也会加快我们的开发，我们可以工作于主要的浏览器上。\n\n### 流量获取\n\n除此，不得不说的一点就是流量获取，如下图所示是我博客的热门渠道：\n\n![Phodal.com Traffic](http://growth.phodal.com/assets/article/chapter5/phodal-traffic.png)\n\n可以直接得到一个不错的结论是我的博客的主要流量来源是搜索引擎，再细细一看数据：\n\n来源/媒介 | 会话\n----------|---------\nbaidu / organic | 2031\ngoogle / organic | 1314\n(direct) / (none) | 1311\nbing / organic | 349\ngithub.com / referral | 281\n\n主要流量来源就是 Baidu 和 Google，看来国人还是用百度比较多。那我们就可以针对 SEO 进行更多的优化：\n\n1. 加快访问速度\n2. 更表意的 URL\n3. 更好的标题\n4. 更好的内容\n\n等等等。\n\n除此，我们可以分析用户的行为，如他们访问的主要网站、URL 等等。\n\n### 移动应用\n\n除此，我们还可以使用它来分析移动应用，不过这受限于 Google 在国内的访问程度。如下图是 GA 收到的应用的使用数据：\n\n![Growth 应用数据](http://growth.phodal.com/assets/article/chapter5/ga-app.jpg)\n\n我们也可以从上面看到 APP 的安装来源等等。\n","source":"_posts/5.1.2-ga.md","raw":"title: 用户数据分析：Google Analytics\ndate: 2016-5-7 22:45:08\ntags:\n---\n\nGoogle Analytics 是一个非常赞的分析工具，而且它不仅仅可以用于 Web 应用，也可以用于移动应用。\n\n### 受众群体\n\n如下图是 Growth 应用最近两星期的数据：\n\n![Growth GA](http://growth.phodal.com/assets/article/chapter5/growth-ga.png)\n\n这是 Google Analytics 中的“受众群体”的概览，在这个视图中：\n\n1. 折线图就是每天的用户数。\n2. 下面会有用户数、会话、屏幕浏览量等等的一些信息。\n3. 右角的饼图则是回访问用户和新用户的对比。\n4. 最下方便是受众的信息——国家、版本等等。\n\n<!-- more -->\n\n从图中，我们可以读取一些重要的信息，如用户的停留时间、主要面向的用户等等。在浏览器版本会有：\n\n1. 浏览器与操作系统\n2. 移动设备\n\n这样的重要数据，如下表是我网站 20160104-20160120 的访问数据：\n\n浏览器|会话|新会话百分比\n-----|----|----\nChrome|5048|75.99%\nFirefox|694|78.39%\nSafari|666|78.68%\nInternet Explorer|284|87.68%\nSafari (in-app)|92|86.96%\nAndroid Browser|72|87.50%\nEdge|63|79.37%\nMaxthon|51|68.63%\nUC Browser|41|80.49%\nOpera|34|64.71%\n\n可以从上表中看到访问我网站的用户中，IE 只占很小的一部分——大概4%，而 Chrome + Safari + Firefox 加起来则近90%。这也意味着，我可以完全不考虑 IE 用户的感受。\n\n类似于这样的数据在我们决定我们对某个浏览器的支持情况时会非常有帮助的。也会加快我们的开发，我们可以工作于主要的浏览器上。\n\n### 流量获取\n\n除此，不得不说的一点就是流量获取，如下图所示是我博客的热门渠道：\n\n![Phodal.com Traffic](http://growth.phodal.com/assets/article/chapter5/phodal-traffic.png)\n\n可以直接得到一个不错的结论是我的博客的主要流量来源是搜索引擎，再细细一看数据：\n\n来源/媒介 | 会话\n----------|---------\nbaidu / organic | 2031\ngoogle / organic | 1314\n(direct) / (none) | 1311\nbing / organic | 349\ngithub.com / referral | 281\n\n主要流量来源就是 Baidu 和 Google，看来国人还是用百度比较多。那我们就可以针对 SEO 进行更多的优化：\n\n1. 加快访问速度\n2. 更表意的 URL\n3. 更好的标题\n4. 更好的内容\n\n等等等。\n\n除此，我们可以分析用户的行为，如他们访问的主要网站、URL 等等。\n\n### 移动应用\n\n除此，我们还可以使用它来分析移动应用，不过这受限于 Google 在国内的访问程度。如下图是 GA 收到的应用的使用数据：\n\n![Growth 应用数据](http://growth.phodal.com/assets/article/chapter5/ga-app.jpg)\n\n我们也可以从上面看到 APP 的安装来源等等。\n","slug":"5.1.2-ga","published":1,"updated":"2016-05-07T07:25:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuf7mpqq001jtsifaf7r16r5","content":"<p>Google Analytics 是一个非常赞的分析工具，而且它不仅仅可以用于 Web 应用，也可以用于移动应用。</p>\n<h3 id=\"受众群体\"><a href=\"#受众群体\" class=\"headerlink\" title=\"受众群体\"></a>受众群体</h3><p>如下图是 Growth 应用最近两星期的数据：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter5/growth-ga.png\" alt=\"Growth GA\"></p>\n<p>这是 Google Analytics 中的“受众群体”的概览，在这个视图中：</p>\n<ol>\n<li>折线图就是每天的用户数。</li>\n<li>下面会有用户数、会话、屏幕浏览量等等的一些信息。</li>\n<li>右角的饼图则是回访问用户和新用户的对比。</li>\n<li>最下方便是受众的信息——国家、版本等等。</li>\n</ol>\n<a id=\"more\"></a>\n<p>从图中，我们可以读取一些重要的信息，如用户的停留时间、主要面向的用户等等。在浏览器版本会有：</p>\n<ol>\n<li>浏览器与操作系统</li>\n<li>移动设备</li>\n</ol>\n<p>这样的重要数据，如下表是我网站 20160104-20160120 的访问数据：</p>\n<table>\n<thead>\n<tr>\n<th>浏览器</th>\n<th>会话</th>\n<th>新会话百分比</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Chrome</td>\n<td>5048</td>\n<td>75.99%</td>\n</tr>\n<tr>\n<td>Firefox</td>\n<td>694</td>\n<td>78.39%</td>\n</tr>\n<tr>\n<td>Safari</td>\n<td>666</td>\n<td>78.68%</td>\n</tr>\n<tr>\n<td>Internet Explorer</td>\n<td>284</td>\n<td>87.68%</td>\n</tr>\n<tr>\n<td>Safari (in-app)</td>\n<td>92</td>\n<td>86.96%</td>\n</tr>\n<tr>\n<td>Android Browser</td>\n<td>72</td>\n<td>87.50%</td>\n</tr>\n<tr>\n<td>Edge</td>\n<td>63</td>\n<td>79.37%</td>\n</tr>\n<tr>\n<td>Maxthon</td>\n<td>51</td>\n<td>68.63%</td>\n</tr>\n<tr>\n<td>UC Browser</td>\n<td>41</td>\n<td>80.49%</td>\n</tr>\n<tr>\n<td>Opera</td>\n<td>34</td>\n<td>64.71%</td>\n</tr>\n</tbody>\n</table>\n<p>可以从上表中看到访问我网站的用户中，IE 只占很小的一部分——大概4%，而 Chrome + Safari + Firefox 加起来则近90%。这也意味着，我可以完全不考虑 IE 用户的感受。</p>\n<p>类似于这样的数据在我们决定我们对某个浏览器的支持情况时会非常有帮助的。也会加快我们的开发，我们可以工作于主要的浏览器上。</p>\n<h3 id=\"流量获取\"><a href=\"#流量获取\" class=\"headerlink\" title=\"流量获取\"></a>流量获取</h3><p>除此，不得不说的一点就是流量获取，如下图所示是我博客的热门渠道：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter5/phodal-traffic.png\" alt=\"Phodal.com Traffic\"></p>\n<p>可以直接得到一个不错的结论是我的博客的主要流量来源是搜索引擎，再细细一看数据：</p>\n<table>\n<thead>\n<tr>\n<th>来源/媒介</th>\n<th>会话</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>baidu / organic</td>\n<td>2031</td>\n</tr>\n<tr>\n<td>google / organic</td>\n<td>1314</td>\n</tr>\n<tr>\n<td>(direct) / (none)</td>\n<td>1311</td>\n</tr>\n<tr>\n<td>bing / organic</td>\n<td>349</td>\n</tr>\n<tr>\n<td>github.com / referral</td>\n<td>281</td>\n</tr>\n</tbody>\n</table>\n<p>主要流量来源就是 Baidu 和 Google，看来国人还是用百度比较多。那我们就可以针对 SEO 进行更多的优化：</p>\n<ol>\n<li>加快访问速度</li>\n<li>更表意的 URL</li>\n<li>更好的标题</li>\n<li>更好的内容</li>\n</ol>\n<p>等等等。</p>\n<p>除此，我们可以分析用户的行为，如他们访问的主要网站、URL 等等。</p>\n<h3 id=\"移动应用\"><a href=\"#移动应用\" class=\"headerlink\" title=\"移动应用\"></a>移动应用</h3><p>除此，我们还可以使用它来分析移动应用，不过这受限于 Google 在国内的访问程度。如下图是 GA 收到的应用的使用数据：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter5/ga-app.jpg\" alt=\"Growth 应用数据\"></p>\n<p>我们也可以从上面看到 APP 的安装来源等等。</p>\n","excerpt":"<p>Google Analytics 是一个非常赞的分析工具，而且它不仅仅可以用于 Web 应用，也可以用于移动应用。</p>\n<h3 id=\"受众群体\"><a href=\"#受众群体\" class=\"headerlink\" title=\"受众群体\"></a>受众群体</h3><p>如下图是 Growth 应用最近两星期的数据：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter5/growth-ga.png\" alt=\"Growth GA\"></p>\n<p>这是 Google Analytics 中的“受众群体”的概览，在这个视图中：</p>\n<ol>\n<li>折线图就是每天的用户数。</li>\n<li>下面会有用户数、会话、屏幕浏览量等等的一些信息。</li>\n<li>右角的饼图则是回访问用户和新用户的对比。</li>\n<li>最下方便是受众的信息——国家、版本等等。</li>\n</ol>","more":"<p>从图中，我们可以读取一些重要的信息，如用户的停留时间、主要面向的用户等等。在浏览器版本会有：</p>\n<ol>\n<li>浏览器与操作系统</li>\n<li>移动设备</li>\n</ol>\n<p>这样的重要数据，如下表是我网站 20160104-20160120 的访问数据：</p>\n<table>\n<thead>\n<tr>\n<th>浏览器</th>\n<th>会话</th>\n<th>新会话百分比</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Chrome</td>\n<td>5048</td>\n<td>75.99%</td>\n</tr>\n<tr>\n<td>Firefox</td>\n<td>694</td>\n<td>78.39%</td>\n</tr>\n<tr>\n<td>Safari</td>\n<td>666</td>\n<td>78.68%</td>\n</tr>\n<tr>\n<td>Internet Explorer</td>\n<td>284</td>\n<td>87.68%</td>\n</tr>\n<tr>\n<td>Safari (in-app)</td>\n<td>92</td>\n<td>86.96%</td>\n</tr>\n<tr>\n<td>Android Browser</td>\n<td>72</td>\n<td>87.50%</td>\n</tr>\n<tr>\n<td>Edge</td>\n<td>63</td>\n<td>79.37%</td>\n</tr>\n<tr>\n<td>Maxthon</td>\n<td>51</td>\n<td>68.63%</td>\n</tr>\n<tr>\n<td>UC Browser</td>\n<td>41</td>\n<td>80.49%</td>\n</tr>\n<tr>\n<td>Opera</td>\n<td>34</td>\n<td>64.71%</td>\n</tr>\n</tbody>\n</table>\n<p>可以从上表中看到访问我网站的用户中，IE 只占很小的一部分——大概4%，而 Chrome + Safari + Firefox 加起来则近90%。这也意味着，我可以完全不考虑 IE 用户的感受。</p>\n<p>类似于这样的数据在我们决定我们对某个浏览器的支持情况时会非常有帮助的。也会加快我们的开发，我们可以工作于主要的浏览器上。</p>\n<h3 id=\"流量获取\"><a href=\"#流量获取\" class=\"headerlink\" title=\"流量获取\"></a>流量获取</h3><p>除此，不得不说的一点就是流量获取，如下图所示是我博客的热门渠道：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter5/phodal-traffic.png\" alt=\"Phodal.com Traffic\"></p>\n<p>可以直接得到一个不错的结论是我的博客的主要流量来源是搜索引擎，再细细一看数据：</p>\n<table>\n<thead>\n<tr>\n<th>来源/媒介</th>\n<th>会话</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>baidu / organic</td>\n<td>2031</td>\n</tr>\n<tr>\n<td>google / organic</td>\n<td>1314</td>\n</tr>\n<tr>\n<td>(direct) / (none)</td>\n<td>1311</td>\n</tr>\n<tr>\n<td>bing / organic</td>\n<td>349</td>\n</tr>\n<tr>\n<td>github.com / referral</td>\n<td>281</td>\n</tr>\n</tbody>\n</table>\n<p>主要流量来源就是 Baidu 和 Google，看来国人还是用百度比较多。那我们就可以针对 SEO 进行更多的优化：</p>\n<ol>\n<li>加快访问速度</li>\n<li>更表意的 URL</li>\n<li>更好的标题</li>\n<li>更好的内容</li>\n</ol>\n<p>等等等。</p>\n<p>除此，我们可以分析用户的行为，如他们访问的主要网站、URL 等等。</p>\n<h3 id=\"移动应用\"><a href=\"#移动应用\" class=\"headerlink\" title=\"移动应用\"></a>移动应用</h3><p>除此，我们还可以使用它来分析移动应用，不过这受限于 Google 在国内的访问程度。如下图是 GA 收到的应用的使用数据：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter5/ga-app.jpg\" alt=\"Growth 应用数据\"></p>\n<p>我们也可以从上面看到 APP 的安装来源等等。</p>"},{"title":"持续交付","date":"2016-05-09T14:45:08.000Z","_content":"\n持续交付依赖于一系列的工具和实践，下图是一个持续交付的工作流：\n\n![CD Workflow](http://growth.phodal.com/assets/article/chapter6/continuous-delivery.jpg)\n\n还有一系列与开发无关的技能：\n\n1. 自动化\n2. DevOps\n3. 云基础设施\n4. 以软件为中心的哲学\n\n<!-- more -->\n\n### 基础设施\n\n在我们使我们的项目可以持续交付软件包的时候，我们需要\n\n#### 本地开发环境\n\n在本地编写代码时，我们需要设置本地的开发环境。假设我们要开始一个 Java Web 项目，在我们的开发机器上，我们需要安装：\n\n - 版本管理工具，如 git，用于管理源代码。\n - IDE，如Intellij IDEA，用于搭建开发环境。\n - 构建工具，如 gradle，用于安装依赖、运行测试、构建工程等等。\n - 语法检测工具，如 checkstyle，用于检查代码语法。\n - 单元测试框架，如 JUnit，用于进行单元测试。\n - 集成测试框架，如 Cucumber、Selenium，用于做行为测试。\n\n除此，在我们的项目代码里，我们还需要：\n\n - ``CI运行脚本``，用于在 CI 上运行指定的测试。\n - ``上传包脚本``，用于上传 build 完的软件包。\n - ``部署脚本``，用于在本地部署包到测试环境。\n - ``监控代码``，用于监测网站性能和用户行为。\n\n当然我们还需要辅助一些测试工具来测试网站，如性能测试、网络测试等等。\n\n#### 持续集成环境\n\n为什么在这里会出现一个持续集成环境？我也不知道，只是想到了这里。由于我们需要持续集成，所以我们也需要一个运行持续集成服务器的机器。\n\n持续集成服务器是由两部分组成的：Master 和 Agent。即一个用于控制其他运行持续集成服务的机器，以及执行指令的机器。因此，我们需要在一台机器上安装 Master 软件，在另外一台机器上作为 Agent。在我们的 Agent上，我们需要安装相对应的运行服务的软件，如\n\n - 指定版本的语言环境 ，如Java、Python。\n - 构建工具。\n - 版本管理工具，及对应的密钥。\n - 打包工具，如 RPM。\n - 虚拟桌面，即可以模拟桌面浏览器的软件。\n\n同时，我们还需要有一个地方放置我们的RPM包。 \n\n#### 测试环境\n\n相比于上面两个环境来说，测试环境就比较简单了。我们只需要创建几个不同的环境，即开发者的测试环境、QA 环境、模拟线上环境，在这几个不同的环境上有不同的配置。\n\n### 持续部署\n\n在持续交付之外的，还有持续部署——这个就更依赖于团队的组织结构了。其与持续交付的对比如下图所示：\n\n![持续部署](http://growth.phodal.com/assets/article/chapter6/continuous-delivery-continuous-deployment.jpg)\n\n我们可以从图中看到，两者的最大不同之处在于：持续部署会直接将构建生成的部署到产品环境。这就意味着，我们不仅要有强大的技术实力，也要有足够的组织支持才能做到。而这部分已经超出了软件开发的内容了~~。\n","source":"_posts/6.2.1-cd.md","raw":"title: 持续交付\ndate: 2016-5-9 22:45:08\ntags:\n---\n\n持续交付依赖于一系列的工具和实践，下图是一个持续交付的工作流：\n\n![CD Workflow](http://growth.phodal.com/assets/article/chapter6/continuous-delivery.jpg)\n\n还有一系列与开发无关的技能：\n\n1. 自动化\n2. DevOps\n3. 云基础设施\n4. 以软件为中心的哲学\n\n<!-- more -->\n\n### 基础设施\n\n在我们使我们的项目可以持续交付软件包的时候，我们需要\n\n#### 本地开发环境\n\n在本地编写代码时，我们需要设置本地的开发环境。假设我们要开始一个 Java Web 项目，在我们的开发机器上，我们需要安装：\n\n - 版本管理工具，如 git，用于管理源代码。\n - IDE，如Intellij IDEA，用于搭建开发环境。\n - 构建工具，如 gradle，用于安装依赖、运行测试、构建工程等等。\n - 语法检测工具，如 checkstyle，用于检查代码语法。\n - 单元测试框架，如 JUnit，用于进行单元测试。\n - 集成测试框架，如 Cucumber、Selenium，用于做行为测试。\n\n除此，在我们的项目代码里，我们还需要：\n\n - ``CI运行脚本``，用于在 CI 上运行指定的测试。\n - ``上传包脚本``，用于上传 build 完的软件包。\n - ``部署脚本``，用于在本地部署包到测试环境。\n - ``监控代码``，用于监测网站性能和用户行为。\n\n当然我们还需要辅助一些测试工具来测试网站，如性能测试、网络测试等等。\n\n#### 持续集成环境\n\n为什么在这里会出现一个持续集成环境？我也不知道，只是想到了这里。由于我们需要持续集成，所以我们也需要一个运行持续集成服务器的机器。\n\n持续集成服务器是由两部分组成的：Master 和 Agent。即一个用于控制其他运行持续集成服务的机器，以及执行指令的机器。因此，我们需要在一台机器上安装 Master 软件，在另外一台机器上作为 Agent。在我们的 Agent上，我们需要安装相对应的运行服务的软件，如\n\n - 指定版本的语言环境 ，如Java、Python。\n - 构建工具。\n - 版本管理工具，及对应的密钥。\n - 打包工具，如 RPM。\n - 虚拟桌面，即可以模拟桌面浏览器的软件。\n\n同时，我们还需要有一个地方放置我们的RPM包。 \n\n#### 测试环境\n\n相比于上面两个环境来说，测试环境就比较简单了。我们只需要创建几个不同的环境，即开发者的测试环境、QA 环境、模拟线上环境，在这几个不同的环境上有不同的配置。\n\n### 持续部署\n\n在持续交付之外的，还有持续部署——这个就更依赖于团队的组织结构了。其与持续交付的对比如下图所示：\n\n![持续部署](http://growth.phodal.com/assets/article/chapter6/continuous-delivery-continuous-deployment.jpg)\n\n我们可以从图中看到，两者的最大不同之处在于：持续部署会直接将构建生成的部署到产品环境。这就意味着，我们不仅要有强大的技术实力，也要有足够的组织支持才能做到。而这部分已经超出了软件开发的内容了~~。\n","slug":"6.2.1-cd","published":1,"updated":"2016-05-09T03:43:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuf7mpqr001ktsiflsf3rboa","content":"<p>持续交付依赖于一系列的工具和实践，下图是一个持续交付的工作流：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter6/continuous-delivery.jpg\" alt=\"CD Workflow\"></p>\n<p>还有一系列与开发无关的技能：</p>\n<ol>\n<li>自动化</li>\n<li>DevOps</li>\n<li>云基础设施</li>\n<li>以软件为中心的哲学</li>\n</ol>\n<a id=\"more\"></a>\n<h3 id=\"基础设施\"><a href=\"#基础设施\" class=\"headerlink\" title=\"基础设施\"></a>基础设施</h3><p>在我们使我们的项目可以持续交付软件包的时候，我们需要</p>\n<h4 id=\"本地开发环境\"><a href=\"#本地开发环境\" class=\"headerlink\" title=\"本地开发环境\"></a>本地开发环境</h4><p>在本地编写代码时，我们需要设置本地的开发环境。假设我们要开始一个 Java Web 项目，在我们的开发机器上，我们需要安装：</p>\n<ul>\n<li>版本管理工具，如 git，用于管理源代码。</li>\n<li>IDE，如Intellij IDEA，用于搭建开发环境。</li>\n<li>构建工具，如 gradle，用于安装依赖、运行测试、构建工程等等。</li>\n<li>语法检测工具，如 checkstyle，用于检查代码语法。</li>\n<li>单元测试框架，如 JUnit，用于进行单元测试。</li>\n<li>集成测试框架，如 Cucumber、Selenium，用于做行为测试。</li>\n</ul>\n<p>除此，在我们的项目代码里，我们还需要：</p>\n<ul>\n<li><code>CI运行脚本</code>，用于在 CI 上运行指定的测试。</li>\n<li><code>上传包脚本</code>，用于上传 build 完的软件包。</li>\n<li><code>部署脚本</code>，用于在本地部署包到测试环境。</li>\n<li><code>监控代码</code>，用于监测网站性能和用户行为。</li>\n</ul>\n<p>当然我们还需要辅助一些测试工具来测试网站，如性能测试、网络测试等等。</p>\n<h4 id=\"持续集成环境\"><a href=\"#持续集成环境\" class=\"headerlink\" title=\"持续集成环境\"></a>持续集成环境</h4><p>为什么在这里会出现一个持续集成环境？我也不知道，只是想到了这里。由于我们需要持续集成，所以我们也需要一个运行持续集成服务器的机器。</p>\n<p>持续集成服务器是由两部分组成的：Master 和 Agent。即一个用于控制其他运行持续集成服务的机器，以及执行指令的机器。因此，我们需要在一台机器上安装 Master 软件，在另外一台机器上作为 Agent。在我们的 Agent上，我们需要安装相对应的运行服务的软件，如</p>\n<ul>\n<li>指定版本的语言环境 ，如Java、Python。</li>\n<li>构建工具。</li>\n<li>版本管理工具，及对应的密钥。</li>\n<li>打包工具，如 RPM。</li>\n<li>虚拟桌面，即可以模拟桌面浏览器的软件。</li>\n</ul>\n<p>同时，我们还需要有一个地方放置我们的RPM包。 </p>\n<h4 id=\"测试环境\"><a href=\"#测试环境\" class=\"headerlink\" title=\"测试环境\"></a>测试环境</h4><p>相比于上面两个环境来说，测试环境就比较简单了。我们只需要创建几个不同的环境，即开发者的测试环境、QA 环境、模拟线上环境，在这几个不同的环境上有不同的配置。</p>\n<h3 id=\"持续部署\"><a href=\"#持续部署\" class=\"headerlink\" title=\"持续部署\"></a>持续部署</h3><p>在持续交付之外的，还有持续部署——这个就更依赖于团队的组织结构了。其与持续交付的对比如下图所示：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter6/continuous-delivery-continuous-deployment.jpg\" alt=\"持续部署\"></p>\n<p>我们可以从图中看到，两者的最大不同之处在于：持续部署会直接将构建生成的部署到产品环境。这就意味着，我们不仅要有强大的技术实力，也要有足够的组织支持才能做到。而这部分已经超出了软件开发的内容了~~。</p>\n","excerpt":"<p>持续交付依赖于一系列的工具和实践，下图是一个持续交付的工作流：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter6/continuous-delivery.jpg\" alt=\"CD Workflow\"></p>\n<p>还有一系列与开发无关的技能：</p>\n<ol>\n<li>自动化</li>\n<li>DevOps</li>\n<li>云基础设施</li>\n<li>以软件为中心的哲学</li>\n</ol>","more":"<h3 id=\"基础设施\"><a href=\"#基础设施\" class=\"headerlink\" title=\"基础设施\"></a>基础设施</h3><p>在我们使我们的项目可以持续交付软件包的时候，我们需要</p>\n<h4 id=\"本地开发环境\"><a href=\"#本地开发环境\" class=\"headerlink\" title=\"本地开发环境\"></a>本地开发环境</h4><p>在本地编写代码时，我们需要设置本地的开发环境。假设我们要开始一个 Java Web 项目，在我们的开发机器上，我们需要安装：</p>\n<ul>\n<li>版本管理工具，如 git，用于管理源代码。</li>\n<li>IDE，如Intellij IDEA，用于搭建开发环境。</li>\n<li>构建工具，如 gradle，用于安装依赖、运行测试、构建工程等等。</li>\n<li>语法检测工具，如 checkstyle，用于检查代码语法。</li>\n<li>单元测试框架，如 JUnit，用于进行单元测试。</li>\n<li>集成测试框架，如 Cucumber、Selenium，用于做行为测试。</li>\n</ul>\n<p>除此，在我们的项目代码里，我们还需要：</p>\n<ul>\n<li><code>CI运行脚本</code>，用于在 CI 上运行指定的测试。</li>\n<li><code>上传包脚本</code>，用于上传 build 完的软件包。</li>\n<li><code>部署脚本</code>，用于在本地部署包到测试环境。</li>\n<li><code>监控代码</code>，用于监测网站性能和用户行为。</li>\n</ul>\n<p>当然我们还需要辅助一些测试工具来测试网站，如性能测试、网络测试等等。</p>\n<h4 id=\"持续集成环境\"><a href=\"#持续集成环境\" class=\"headerlink\" title=\"持续集成环境\"></a>持续集成环境</h4><p>为什么在这里会出现一个持续集成环境？我也不知道，只是想到了这里。由于我们需要持续集成，所以我们也需要一个运行持续集成服务器的机器。</p>\n<p>持续集成服务器是由两部分组成的：Master 和 Agent。即一个用于控制其他运行持续集成服务的机器，以及执行指令的机器。因此，我们需要在一台机器上安装 Master 软件，在另外一台机器上作为 Agent。在我们的 Agent上，我们需要安装相对应的运行服务的软件，如</p>\n<ul>\n<li>指定版本的语言环境 ，如Java、Python。</li>\n<li>构建工具。</li>\n<li>版本管理工具，及对应的密钥。</li>\n<li>打包工具，如 RPM。</li>\n<li>虚拟桌面，即可以模拟桌面浏览器的软件。</li>\n</ul>\n<p>同时，我们还需要有一个地方放置我们的RPM包。 </p>\n<h4 id=\"测试环境\"><a href=\"#测试环境\" class=\"headerlink\" title=\"测试环境\"></a>测试环境</h4><p>相比于上面两个环境来说，测试环境就比较简单了。我们只需要创建几个不同的环境，即开发者的测试环境、QA 环境、模拟线上环境，在这几个不同的环境上有不同的配置。</p>\n<h3 id=\"持续部署\"><a href=\"#持续部署\" class=\"headerlink\" title=\"持续部署\"></a>持续部署</h3><p>在持续交付之外的，还有持续部署——这个就更依赖于团队的组织结构了。其与持续交付的对比如下图所示：</p>\n<p><img src=\"http://growth.phodal.com/assets/article/chapter6/continuous-delivery-continuous-deployment.jpg\" alt=\"持续部署\"></p>\n<p>我们可以从图中看到，两者的最大不同之处在于：持续部署会直接将构建生成的部署到产品环境。这就意味着，我们不仅要有强大的技术实力，也要有足够的组织支持才能做到。而这部分已经超出了软件开发的内容了~~。</p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cijgvit69000izp8g7dl1zjr0","tag_id":"cijgvit6a000jzp8gwsq6cfuq","_id":"cijgvit6g000kzp8gsvbe38ef"}],"Tag":[{"name":"hello","_id":"cijgvit6a000jzp8gwsq6cfuq"}]}}